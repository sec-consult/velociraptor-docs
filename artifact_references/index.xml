<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Artifact Reference on Velociraptor - Digging deeper!</title><link>https://docs.velociraptor.app/artifact_references/</link><description>Recent content in Artifact Reference on Velociraptor - Digging deeper!</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.velociraptor.app/artifact_references/index.xml" rel="self" type="application/rss+xml"/><item><title>Admin.Client.Remove</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.remove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.remove/</guid><description>&lt;p>This artifact will remove clients that have not checked in for a
while. All data for these clients will be removed.&lt;/p>
&lt;p>The artifact enumerates all the files that are removed.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.Remove
description: |
 This artifact will remove clients that have not checked in for a
 while. All data for these clients will be removed.

 The artifact enumerates all the files that are removed.

type: SERVER

parameters:
 - name: Age
 description: Remove clients older than this many days
 default: "7"
 type: int

 - name: ReallyDoIt
 type: bool

sources:
 - query: |
 LET Threshold &amp;lt;= timestamp(epoch=now() - Age * 3600 * 24 )
 LET old_clients = SELECT os_info.fqdn AS Fqdn, client_id,
 timestamp(epoch=last_seen_at) AS LastSeen FROM clients()
 WHERE LastSeen &amp;lt; Threshold

 SELECT * FROM foreach(row=old_clients,
 query={
 SELECT *, Fqdn, LastSeen FROM client_delete(
 client_id=client_id, really_do_it=ReallyDoIt)
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.Client.Uninstall</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.uninstall/</guid><description>&lt;p>Uninstall Velociraptor from the endpoint.&lt;/p>
&lt;p>This artifact uninstalls a Velociraptor client (or any other MSI
package) from the endpoint.&lt;/p>
&lt;p>Typically the client will be hard terminated during the uninstall
process, so on the server it would appear that the collection is not
completed. This is normal.&lt;/p>
&lt;p>NOTE: Be careful with the DisplayNameRegex to ensure you do not
uninstall another package accidentally.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.Uninstall
description: |
 Uninstall Velociraptor from the endpoint.

 This artifact uninstalls a Velociraptor client (or any other MSI
 package) from the endpoint.

 Typically the client will be hard terminated during the uninstall
 process, so on the server it would appear that the collection is not
 completed. This is normal.

 NOTE: Be careful with the DisplayNameRegex to ensure you do not
 uninstall another package accidentally.

required_permissions:
 - EXECVE

parameters:
 - name: DisplayNameRegex
 type: regex
 default: Velociraptor
 description: A regex that will match the package to uninstall.

 - name: ReallyDoIt
 type: bool

sources:
 - name: Windows
 precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET packages = SELECT KeyName, DisplayName,UninstallString
 FROM Artifact.Windows.Sys.Programs()
 WHERE DisplayName =~ DisplayNameRegex AND
 log(message="Will uninstall " + DisplayName)

 LET uninstall(UninstallString) = SELECT * FROM execve(
 argv=commandline_split(command=UninstallString) + "/quiet")

 SELECT KeyName, DisplayName, UninstallString,
 if(condition=ReallyDoIt, then=uninstall(Name=UninstallString).Stdout) AS UninstallLog
 FROM packages

 - name: Debian
 precondition: |
 -- Only run if dpkg is installed.
 SELECT OS, {
 SELECT ReturnCode FROM execve(argv=["dpkg", "--help"])
 } AS ReturnCode
 FROM info()
 WHERE OS = 'linux' AND ReturnCode = 0

 query: |
 SELECT * FROM if(condition=ReallyDoIt,
 then={
 SELECT * FROM execve(argv=["dpkg", "--remove", "velociraptor-client"])
 })

 - name: RPMBased
 precondition: |
 -- Only run if rpm is installed.
 SELECT OS, {
 SELECT ReturnCode FROM execve(argv=["rpm", "--help"])
 } AS ReturnCode
 FROM info()
 WHERE OS = 'linux' AND ReturnCode = 0

 query: |
 SELECT * FROM if(condition=ReallyDoIt,
 then={
 SELECT * FROM execve(argv=["rpm", "--erase", "velociraptor-client"])
 })

 - name: MacOS
 precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'darwin'

 query: |
 LET me &amp;lt;= SELECT Exe FROM info()

 SELECT * FROM if(condition=ReallyDoIt,
 then={
 SELECT * FROM execve(argv=[me[0].Exe, "service", "remove"])
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.Client.UpdateClientConfig</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.updateclientconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.updateclientconfig/</guid><description>&lt;p>Sometimes we wish to move a client from one org ID to another. This
requires updating the config on the client and rekeying the client.&lt;/p>
&lt;p>This artifact will replace the client&amp;rsquo;s config file and restart
it. The config file will be verified before replacing it.&lt;/p>
&lt;p>This artifact has a notebook suggestion that allows a client to be
changed to a different org.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.UpdateClientConfig
description: |
 Sometimes we wish to move a client from one org ID to another. This
 requires updating the config on the client and rekeying the client.

 This artifact will replace the client's config file and restart
 it. The config file will be verified before replacing it.

 This artifact has a notebook suggestion that allows a client to be
 changed to a different org.

parameters:
 - name: ConfigYaml
 description: The new config to write in yaml form.
 - name: ConfigPath
 description: Path of config file to overwrite
 - name: WaitPeriod
 type: int
 default: 10

sources:
 - query: |

 LET ValidateConfig(Config) = Config.Client.server_urls
 AND Config.Client.ca_certificate =~ "(?ms)-----BEGIN CERTIFICATE-----.+-----END CERTIFICATE-----"
 AND Config.Client.nonce

 LET CheckConfigPath(ConfigPath) = SELECT * FROM stat(filename=ConfigPath)
 LET Config &amp;lt;= parse_yaml(accessor="data", filename=ConfigYaml)

 LET DoIt = if(condition=ValidateConfig(Config=Config),
 else=log(message="Config is invalid") AND FALSE,
 then=if(condition=CheckConfigPath(ConfigPath=ConfigPath).OSPath,
 else=log(message="Config Path %v is invalid", args=ConfigPath) AND FALSE,
 then=copy(accessor="data", filename=ConfigYaml, dest=ConfigPath)
 AND log(message="Rekeying in %v seconds ", args=WaitPeriod)
 AND rekey(wait=WaitPeriod)
 ))

 SELECT DoIt AS Success FROM scope()

 notebook:
 - name: Move a client to a different OrgId
 type: vql_suggestion
 template: |

 LET ClientId = "C.622d19ea21109231"
 LET RequiredOrgId = "O123"
 LET ConfigPath = "C:/Program Files/Velociraptor/client.config.yaml"

 SELECT _client_config AS Config, OrgId ,
 collect_client(artifacts="Admin.Client.UpdateClientConfig",
 client_id=ClientId,
 env=dict(ConfigYaml=_client_config,
 ConfigPath=ConfigPath))
 FROM orgs()
 WHERE OrgId = RequiredOrgId
 LIMIT 1

&lt;/code>&lt;/pre></description></item><item><title>Admin.Client.Upgrade.Debian</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.debian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.debian/</guid><description>&lt;p>Remotely push new client updates to Debian hosts.&lt;/p>
&lt;p>NOTE: This artifact requires that you supply a client Debian package using the
tools interface or using the &amp;ldquo;debian client&amp;rdquo; command. Simply click on the tool
in the GUI and upload a package.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.Upgrade.Debian
description: |
 Remotely push new client updates to Debian hosts.

 NOTE: This artifact requires that you supply a client Debian package using the
 tools interface or using the "debian client" command. Simply click on the tool
 in the GUI and upload a package.

tools:
 - name: VelociraptorDebian

parameters:
 - name: SleepDuration
 default: "600"
 type: int
 description: |
 The package is typically large and we do not want to
 overwhelm the server so we stagger the download over this many
 seconds.

 - name: ServiceName
 default: "velociraptor_client"
 type: str
 description: |
 The name of the service to restart after the upgrade.

sources:
 - precondition:
 SELECT OS From info() where OS =~ 'linux'

 query: |
 // FetchBinary downloads to /tmp on linux
 LET bin &amp;lt;= SELECT OSPath AS Dest
 FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="VelociraptorDebian", IsExecutable=FALSE,
 SleepDuration=SleepDuration)

 // Version handling for older clients.
 LET Rm(X) = if(
 condition=version(function='rm')!=NULL,
 then=rm(filename=X),
 else={ SELECT * FROM execve(argv=["rm", "-f", X]) })

 // Call the binary and return all its output in a single row.
 // If we fail to download the binary we do not run the command.
 SELECT * FROM foreach(row=bin,
 query={
 SELECT * FROM chain(
 // Remove the existing prerm - Previous versions had a bug that
 // would shutdown the service during uninstall. See #3122
 a={SELECT * FROM Rm(X="/var/lib/dpkg/info/velociraptor-client.prerm")},

 // Install the new client
 b={SELECT * FROM execve(argv=["dpkg", "-i", str(str=Dest)])},

 // Restart the client
 c={SELECT * FROM execve(argv=["systemctl", "restart", ServiceName])}
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.Client.Upgrade.RedHat</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.redhat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.redhat/</guid><description>&lt;p>Remotely push new client updates to Red Hat hosts.&lt;/p>
&lt;p>NOTE: This artifact requires that you supply a client Red Hat package using the
tools interface or using the &amp;ldquo;rpm client&amp;rdquo; command. Simply click on the tool
in the GUI and upload a package.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.Upgrade.RedHat
description: |
 Remotely push new client updates to Red Hat hosts.

 NOTE: This artifact requires that you supply a client Red Hat package using the
 tools interface or using the "rpm client" command. Simply click on the tool
 in the GUI and upload a package.

tools:
 - name: VelociraptorRedHat

parameters:
 - name: SleepDuration
 default: "600"
 type: int
 description: |
 The package is typically large and we do not want to
 overwhelm the server so we stagger the download over this many
 seconds.

 - name: ServiceName
 default: "velociraptor_client"
 type: str
 description: |
 The name of the service to restart after the upgrade.

sources:
 - precondition:
 SELECT OS From info() where OS =~ 'linux'

 query: |
 // FetchBinary downloads to /tmp on linux
 LET bin &amp;lt;= SELECT OSPath AS Dest
 FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="VelociraptorRedHat", IsExecutable=FALSE,
 SleepDuration=SleepDuration)

 // Call the binary and return all its output in a single row.
 // If we fail to download the binary we do not run the command.
 SELECT * FROM foreach(row=bin,
 query={
 SELECT * FROM chain(
 // Install the new client (Disabled preun because older versions
 // had a bug where preun would shut down the service - see #3122).

 b={SELECT * FROM execve(argv=["rpm", "--nopreun", "-U", str(str=Dest)])},
 c={SELECT * FROM execve(argv=["systemctl", "restart", ServiceName])}
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.Client.Upgrade.Windows</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.client.upgrade.windows/</guid><description>&lt;p>Remotely push new client updates.&lt;/p>
&lt;p>NOTE: This artifact requires that you supply a client MSI using the
tools interface. Simply click on the tool in the GUI and upload a
pre-packaged MSI.&lt;/p>
&lt;p>While typically the MSI will contain the Velociraptor windows
client, you can install any other MSI as well by customizing this
artifact or uploading a different msi file.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Client.Upgrade.Windows
description: |
 Remotely push new client updates.

 NOTE: This artifact requires that you supply a client MSI using the
 tools interface. Simply click on the tool in the GUI and upload a
 pre-packaged MSI.

 While typically the MSI will contain the Velociraptor windows
 client, you can install any other MSI as well by customizing this
 artifact or uploading a different msi file.

tools:
 - name: WindowsMSI

parameters:
 - name: SleepDuration
 default: "600"
 type: int
 description: |
 The MSI file is typically very large and we do not want to
 overwhelm the server so we stagger the download over this many
 seconds.

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 // Force the file to be copied to the real temp directory since
 // we are just about to remove the Tools directory.
 LET bin &amp;lt;= SELECT copy(filename=OSPath,
 dest=expand(path="%SYSTEMROOT%\\Temp\\") + basename(path=OSPath)) AS Dest
 FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="WindowsMSI", IsExecutable=FALSE,
 SleepDuration=SleepDuration)

 // Call the binary and return all its output in a single row.
 // If we fail to download the binary we do not run the command.
 SELECT * FROM foreach(row=bin,
 query={
 SELECT * FROM execve(
 argv=["msiexec.exe", "/i", Dest, "/q"],
 length=10000000)
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.Events.PostProcessUploads</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.events.postprocessuploads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.events.postprocessuploads/</guid><description>&lt;p>Sometimes we would like to post process uploads collected as part of
the hunt&amp;rsquo;s artifact collections&lt;/p>
&lt;p>Post processing means to watch the hunt for completed flows and run
a post processing command on the files obtained from each host.&lt;/p>
&lt;p>The command will receive the list of paths of the files uploaded by
the artifact. We dont actually care what the command does with those
files - we will just relay our stdout/stderr to the artifact&amp;rsquo;s
result set.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Admin.Events.PostProcessUploads
description: |
 Sometimes we would like to post process uploads collected as part of
 the hunt's artifact collections

 Post processing means to watch the hunt for completed flows and run
 a post processing command on the files obtained from each host.

 The command will receive the list of paths of the files uploaded by
 the artifact. We dont actually care what the command does with those
 files - we will just relay our stdout/stderr to the artifact's
 result set.

type: SERVER_EVENT

required_permissions:
 - EXECVE

parameters:
 - name: uploadPostProcessCommand
 type: json_array
 description: |
 The command to run - must be a json array of strings! The list
 of files will be appended to the end of the command.
 default: |
 ["/bin/ls", "-l"]

 - name: uploadPostProcessArtifact
 description: |
 The name of the artifact to watch.
 default: Windows.Registry.NTUser.Upload

sources:
 - query: |
 LET files = SELECT Flow,
 uploadPostProcessCommand + file_store(path=Flow.uploaded_files) AS Argv
 FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE uploadPostProcessArtifact in Flow.artifacts_with_results

 SELECT * from foreach(
 row=files,
 query={
 SELECT Flow.session_id as FlowId, Argv,
 Stdout, Stderr, ReturnCode
 FROM execve(argv=Argv)
 })

&lt;/code>&lt;/pre></description></item><item><title>Admin.System.CompressUploads</title><link>https://docs.velociraptor.app/artifact_references/pages/admin.system.compressuploads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/admin.system.compressuploads/</guid><description>&lt;p>Compresses all uploaded files.&lt;/p>
&lt;p>When artifacts collect files they are normally stored on the server
uncompressed. This artifact watches all completed flows and
compresses the files in the file store when the flow completes. This
is very useful for cloud based deployments with limited storage
space or when collecting large files.&lt;/p>
&lt;p>In order to run this artifact you would normally run it as part of
an artifact acquisition process:&lt;/p>
&lt;pre>&lt;code>$ velociraptor --config /etc/server.config.yaml artifacts acquire Admin.System.CompressUploads
&lt;/code>&lt;/pre>
&lt;p>Note that there is nothing special about compressed files - you can
also just run &lt;code>find&lt;/code> and &lt;code>gzip&lt;/code> in the file store. Velociraptor will
automatically decompress the file when displaying it in the GUI
text/hexdump etc.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Admin.System.CompressUploads
description: |
 Compresses all uploaded files.

 When artifacts collect files they are normally stored on the server
 uncompressed. This artifact watches all completed flows and
 compresses the files in the file store when the flow completes. This
 is very useful for cloud based deployments with limited storage
 space or when collecting large files.

 In order to run this artifact you would normally run it as part of
 an artifact acquisition process:

&lt;/code>&lt;/pre>
&lt;p>$ velociraptor &amp;ndash;config /etc/server.config.yaml artifacts acquire Admin.System.CompressUploads&lt;/p>
&lt;pre>&lt;code>
Note that there is nothing special about compressed files - you can
also just run `find` and `gzip` in the file store. Velociraptor will
automatically decompress the file when displaying it in the GUI
text/hexdump etc.

type: SERVER_EVENT

parameters:
- name: blacklistCompressionFilename
 type: regex
 description: Filenames which match this regex will be excluded from compression.
 default: 'ntuser.dat$'

sources:
- query: |
 LET files = SELECT ClientId,
 Flow.session_id as Flow,
 Flow.uploaded_files as Files
 FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE Files and not Files =~ blacklistCompressionFilename

 SELECT ClientId, Flow, Files,
 compress(path=Files) as CompressedFiles
 FROM files

&lt;/code>&lt;/pre></description></item><item><title>Custom.Linux.SudoUsers</title><link>https://docs.velociraptor.app/artifact_references/pages/custom.linux.sudousers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/custom.linux.sudousers/</guid><description>&lt;p>Detects users added in the &lt;code>sudo&lt;/code> group.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Custom.Linux.SudoUsers

description: |
 Detects users added in the `sudo` group.

author: George-Andrei Iosif (@iosifache)

type: CLIENT

sources:
 - precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'linux'

 query: |
 SELECT *
 FROM foreach(
 row={
 SELECT *
 FROM Artifact.Linux.Sys.Users()
 },
 query={
 SELECT Fqdn AS Host,
 User,
 Description,
 Uid,
 Gid,
 Homedir,
 Shell
 FROM execve(argv=[&amp;quot;id&amp;quot;, &amp;quot;-Gn&amp;quot;, User])
 WHERE ReturnCode = 0 AND Stdout =~ &amp;quot;root&amp;quot;
 }
 )

&lt;/code>&lt;/pre></description></item><item><title>Custom.Server.Enrichment.Virustotal</title><link>https://docs.velociraptor.app/artifact_references/pages/custom.server.enrichment.virustotal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/custom.server.enrichment.virustotal/</guid><description>&lt;p>Submit a file hash or IP to Virustotal for details. Default Public API restriction is 4 requests/min.&lt;/p>
&lt;p>This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.&lt;/p>
&lt;p>Ex.&lt;/p>
&lt;p>&lt;code>SELECT * from Artifact.Server.Enrichment.Virustotal(Hash=$YOURHASH)&lt;/code>
&lt;code>SELECT * from Artifact.Server.Enrichment.Virustotal(IP=$YOURIP,QueryType='ip')&lt;/code>&lt;/p>
&lt;p>&lt;code>TO-DO&lt;/code>: Implement a timer to spread out requests&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Custom.Server.Enrichment.Virustotal
author: Wes Lambert -- @therealwlambert, Whitney Champion -- @shortxstack
description: |
 Submit a file hash or IP to Virustotal for details. Default Public API restriction is 4 requests/min.

 This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.

 Ex.

 `SELECT * from Artifact.Server.Enrichment.Virustotal(Hash=$YOURHASH)`
 `SELECT * from Artifact.Server.Enrichment.Virustotal(IP=$YOURIP,QueryType='ip')`

 `TO-DO`: Implement a timer to spread out requests

type: SERVER

parameters:
 - name: QueryType
 type: choices 
 description: The type of query--hash or IP
 default: hash
 choices:
 - hash
 - ip

 - name: Hash
 type: string
 description: The file hash to submit to Hybrid Analysis (MD5, SHA1, SHA256).
 default:

 - name: IP
 type: string
 description: The IP address to submit to Hybrid Analysis.
 default:

 - name: VirustotalKey
 type: string
 description: API key for Virustotal. Leave blank here if using server metadata store.
 default:

sources:
 - query: |
 LET Creds = if(
 condition=VirustotalKey,
 then=VirustotalKey,
 else=server_metadata().VirustotalKey)

 LET URL = if(
 condition= QueryType='hash',
 then= 'https://www.virustotal.com/api/v3/files/' + Hash,
 else= 'https://www.virustotal.com/api/v3/ip_addresses/' + IP)

 LET Data = SELECT parse_json(data=Content) AS VTData
 FROM http_client(url=URL, headers=dict(`x-apikey`=Creds))

 SELECT format(format='%v/%v',
 args=[VTData.data.attributes.last_analysis_stats.malicious,
 VTData.data.attributes.last_analysis_stats.malicious +
 VTData.data.attributes.last_analysis_stats.undetected]) As VTRating,
 timestamp(epoch=VTData.data.attributes.first_seen_itw_date) AS FirstSeen,
 timestamp(epoch=VTData.data.attributes.first_submission_date) AS FirstSubmitted,
 timestamp(epoch=VTData.data.attributes.last_analysis_date) AS LastAnalysis,
 VTData.data.attributes.as_owner AS Owner, 
 VTData.data.attributes.whois AS WhoIs,
 VTData.data.attributes.crowdsourced_yara_results AS YARAResults,
 VTData AS _Data
 FROM Data

&lt;/code>&lt;/pre></description></item><item><title>Demo.Plugins.Fifo</title><link>https://docs.velociraptor.app/artifact_references/pages/demo.plugins.fifo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/demo.plugins.fifo/</guid><description>&lt;p>This is a demo of the fifo() plugin. The Fifo plugin collects and
caches rows from its inner query. Every subsequent execution of the
query then reads from the cache. The plugin will expire old rows
depending on its expiration policy - so we always see recent rows.&lt;/p>
&lt;p>You can use this to build queries which consider historical events
together with current events at the same time. In this example, we
check for a successful logon preceded by a number of failed logon
attempts.&lt;/p>
&lt;p>In this example, we use the clock() plugin to simulate events. We
simulate failed logon attempts using the clock() plugin every
second. By feeding the failed logon events to the fifo() plugin we
ensure the fifo() plugin cache contains the last 5 failed logon
events.&lt;/p>
&lt;p>We simulate a successful logon event every 3 seconds, again using
the clock plugin. Once a successful logon event is detected, we go
back over the last 5 login events, count them and collect the last
failed logon times (using the GROUP BY operator we group the
FailedTime for every unique SuccessTime).&lt;/p>
&lt;p>If we receive more than 3 events, we emit the row.&lt;/p>
&lt;p>This now represents a high value signal! It will only occur when a
successful logon event is preceded by at least 3 failed logon
events in the last hour. It is now possible to escalate this on the
server via email or other alerts.&lt;/p>
&lt;p>Here is sample output:&lt;/p>
&lt;p>.. code-block:: json&lt;/p>
&lt;pre>&lt;code>{
 &amp;quot;Count&amp;quot;: 5,
 &amp;quot;FailedTime&amp;quot;: [
 1549527272,
 1549527273,
 1549527274,
 1549527275,
 1549527276
 ],
 &amp;quot;SuccessTime&amp;quot;: 1549527277
}
&lt;/code>&lt;/pre>
&lt;p>Of course in the real artifact we would want to include more
information than just times (i.e. who logged on to where etc).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Demo.Plugins.Fifo
description: |
 This is a demo of the fifo() plugin. The Fifo plugin collects and
 caches rows from its inner query. Every subsequent execution of the
 query then reads from the cache. The plugin will expire old rows
 depending on its expiration policy - so we always see recent rows.

 You can use this to build queries which consider historical events
 together with current events at the same time. In this example, we
 check for a successful logon preceded by a number of failed logon
 attempts.

 In this example, we use the clock() plugin to simulate events. We
 simulate failed logon attempts using the clock() plugin every
 second. By feeding the failed logon events to the fifo() plugin we
 ensure the fifo() plugin cache contains the last 5 failed logon
 events.

 We simulate a successful logon event every 3 seconds, again using
 the clock plugin. Once a successful logon event is detected, we go
 back over the last 5 login events, count them and collect the last
 failed logon times (using the GROUP BY operator we group the
 FailedTime for every unique SuccessTime).

 If we receive more than 3 events, we emit the row.

 This now represents a high value signal! It will only occur when a
 successful logon event is preceded by at least 3 failed logon
 events in the last hour. It is now possible to escalate this on the
 server via email or other alerts.

 Here is sample output:

 .. code-block:: json

 {
 "Count": 5,
 "FailedTime": [
 1549527272,
 1549527273,
 1549527274,
 1549527275,
 1549527276
 ],
 "SuccessTime": 1549527277
 }

 Of course in the real artifact we would want to include more
 information than just times (i.e. who logged on to where etc).
type: CLIENT_EVENT

sources:
 - query: |
 // This query simulates failed logon attempts.
 LET failed_logon = SELECT Unix as FailedTime from clock(period=1)

 // This is the fifo which holds the last 5 failed logon attempts
 // within the last hour.
 LET last_5_events = SELECT FailedTime
 FROM fifo(query=failed_logon, max_rows=5, max_age=3600)

 // We need to get it started collecting data immediately by
 // materializing the cache contents. Otherwise the fifo wont
 // start until it is first called (i.e. the first successful
 // login and we will miss the failed events before hand).
 LET foo &amp;lt;= SELECT * FROM last_5_events

 // This simulates successful logon - we assume every 3 seonds.
 LET success_logon = SELECT Unix as SuccessTime from clock(period=3)

 // For each successful logon, query the last failed logon
 // attempts from the fifo(). We also count the total number of
 // failed logons. We only actually emit results if there are more
 // than 3 failed logon attempts before each successful one.
 SELECT * FROM foreach(
 row=success_logon,
 query={
 SELECT SuccessTime,
 enumerate(items=FailedTime) as FailedTime,
 count(items=FailedTime) as Count
 FROM last_5_events GROUP BY SuccessTime
 }) WHERE Count &amp;gt; 3

&lt;/code>&lt;/pre></description></item><item><title>Demo.Plugins.GUI</title><link>https://docs.velociraptor.app/artifact_references/pages/demo.plugins.gui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/demo.plugins.gui/</guid><description>&lt;p>A demo plugin showing some GUI features.&lt;/p>
&lt;p>This plugin is also used for tests.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Demo.Plugins.GUI
description: |
 A demo plugin showing some GUI features.

 This plugin is also used for tests.

resources:
 timeout: 20
 ops_per_second: 60
 max_rows: 213
 max_upload_bytes: 545454

parameters:
 - name: ChoiceSelector
 description: Choose one item from a selection
 type: choices
 default: First Choice
 choices:
 - First Choice
 - Second Choice
 - Third Choice

 - name: MultiChoiceSelector
 description: Choose one or more items from a selection
 type: multichoice
 default: '["Bananas"]'
 choices:
 - Apples
 - Bananas
 - Oranges
 - Grapes

 - name: Hashes
 validating_regex: '^\s*([A-F0-9]+\s*)+$'
 description: One or more hashes in hex separated by white space.

 - name: RegularExpression
 type: regex
 default: "."

 - name: MultipleRegularExpression
 type: regex_array
 default: '[".+"]'

 - name: YaraRule
 type: yara

 - name: Flag
 friendly_name: A Flag with a name
 type: bool
 default: True

 - name: Flag2
 type: bool
 default: Y

 - name: Flag3
 type: bool
 default: Y

 - name: OffFlag
 type: bool

 - name: StartDate
 type: timestamp

 - name: StartDate2
 type: timestamp

 - name: StartDate3
 type: timestamp

 - name: CSVData
 type: csv
 default: |
 Column1,Column2
 A,B
 C,D

 - name: CSVData2
 type: csv
 default: |
 Column1,Column2
 A,B
 C,D

 - name: JSONData
 type: json_array
 default: "[]"

 - name: JSONData2
 type: json_array
 default: |
 [{"foo": "bar"}]

 - name: FileUpload1
 type: upload
 description: FileUpload1 can receive a file upload. The upload content will be available in this variable when executing on the client.

 - name: ArtifactSelections
 type: artifactset
 description: A selection of artifact
 artifact_type: CLIENT_EVENT
 default: |
 Artifact
 Windows.Detection.PsexecService
 Windows.Events.ProcessCreation
 Windows.Events.ServiceCreation

column_types:
 - name: Base64Hex
 type: base64hex

sources:
 - query: |
 SELECT base64encode(string="This should popup in a hex editor") AS Base64Hex,
 ChoiceSelector, MultiChoiceSelector, Flag, Flag2, Flag3,
 OffFlag, StartDate, StartDate2, StartDate3,
 CSVData, CSVData2, JSONData, JSONData2,
 len(list=FileUpload1) AS FileUpload1Length
 FROM scope()

 notebook:
 - type: vql_suggestion
 name: Test Suggestion
 template: |
 /*
 # This is a suggestion notebook cell.

 It should be available from the suggestions list.
 */
 SELECT * FROM info()

 - type: md
 template: |
 # GUI Notebook tests

 The following cells are testing the notebook in the flow. To
 run this test simply collect the `Demo.Plugins.GUI` artifact
 and check the output is correct.

 **Each of the below cells should have a H2 heading**

 ## Check that notebook environment variables are populated
 {{ $x := Query "SELECT * FROM items(\
 item=dict(NotebookId=NotebookId, ClientId=ClientId,\
 FlowId=FlowId, ArtifactName=ArtifactName))" | Expand }}

 {{ range $x }}
 * {{ Get . "_key" }} - {{ Get . "_value" }}
 {{- end -}}

 - type: md
 template: |
 ## Code syntax highlighting for VQL

 ```vql
 SELECT * FROM info()
 ```

 - type: vql
 template: |
 /*
 ## A VQL cell with a heading.
 */
 LET ColumnTypes = dict(
 Time1="timestamp",
 Time2="timestamp",
 Time3="timestamp",
 Time4="timestamp",
 FlowId="flow",
 ClientId="client",
 Data="hex",
 URL="url",
 SafeURL="safe_url", // Present dialog before click.
 Base64Data="base64hex"
 )

 LET Base64Data = base64encode(string="\x00\x01\x20\x32\x12\x10")
 LET URL = "[Google](https://www.google.com)"

 SELECT 1628609690.1 AS Raw,

 -- float
 1628609690.1 AS Time1,

 -- ms as a string
 "1628609690100" AS Time2,

 -- ns
 1628609690100000 AS Time3,

 -- Standard string form
 "2021-08-10T15:34:50Z" AS Time4,

 FlowId, ClientId, URL, URL AS SafeURL, Base64Data,

 format(format="%02x", args="Hello") AS Data,
 TRUE, 4, NULL
 FROM scope()

 - type: Markdown
 template: |
 ## Scatter Chart with a named column

 {{ define "ScatterTest" }}
 SELECT X, Name, Y, Y3
 FROM parse_csv(accessor="data", filename='''
 X,Name,Y,Y3
 1,Bob,2,3
 2,Frank,4,6
 3,Mike,6,8
 4,Sally,3,2
 ''')
 {{ end }}
 {{ Query "ScatterTest" | ScatterChart "name_column" "Name" }}

 ## Stacked Bar Chart (Categories are first column)

 {{ define "Test" }}
 SELECT X, Y, Y3
 FROM parse_csv(accessor="data", filename='''
 X,Y,Y3
 Bob,2,3
 Bill,4,6
 Foo,6,8
 Bar,7,2
 ''')
 {{ end }}
 {{ Query "Test" | BarChart "type" "stacked" }}

 ## Time chart with timestamp in first column

 {{ define "TimeTest" }}
 SELECT Timestamp, Y, Y3
 FROM parse_csv(accessor="data", filename='''
 Timestamp,Y,Y3
 2021-10-09,2,3
 2021-10-10,4,6
 2021-10-11,6,8
 2021-10-12,7,2
 ''')
 {{ end }}
 {{ Query "TimeTest" | TimeChart }}

 ## Line chart

 {{ define "LineTest" }}
 SELECT X, Y, Y3
 FROM parse_csv(accessor="data", filename='''
 X,Y,Y3
 1,2,3
 2,4,6
 3,6,8
 4,7,2
 ''')
 {{ end }}
 {{ Query "LineTest" | LineChart }}

 - type: Markdown
 template: |
 ## A Line Chart

 The following should show a CPU load chart of the last 10 min.

 {{ define "Q" }}
 SELECT _ts, CPUPercent
 FROM monitoring(
 client_id="server",
 artifact="Server.Monitor.Health/Prometheus",
 start_time=now() - 10 * 60)
 LIMIT 100
 {{ end }}

 {{ Query "Q" | TimeChart }}

 - type: vql
 template: |
 /*
 ## Adding timelines

 Add a timeline from this time series data. (This only works
 for root org because it relies on server health events).

 */
 SELECT timestamp(epoch=_ts) AS Timestamp, CPUPercent
 FROM monitoring(
 client_id="server",
 source="Prometheus",
 artifact="Server.Monitor.Health",
 start_time=now() - 10 * 60)

 LET T1 = SELECT
 timestamp(epoch=_ts) AS Timestamp,
 dict(X=CPUPercent, Y=1) AS Dict
 FROM monitoring(
 client_id="server",
 source="Prometheus",
 artifact="Server.Monitor.Health",
 start_time=now() - 10 * 60)

 -- Add the time series into the timeline.
 SELECT timeline_add(
 key="Timestamp", name="Time 你好世界 'line' &amp;amp;\" ",
 query=T1, timeline="Test \"Timeline 你好世界\""),
 timeline_add(
 key="Timestamp", name="2",
 query=T1, timeline="Test \"Timeline 你好世界\"")
 FROM scope()

 - type: Markdown
 env:
 - key: Timeline
 value: Test "Timeline 你好世界"
 template: |
 ## This super timeline should have two timelines.

 Add a timeline manually and hit refresh on this cell to
 check it is being updated.

 {{ Scope "Timeline" | Timeline }}

 - type: VQL
 template: |
 /*
 # Test table scrolling.

 Check both expanded and contracted states of the cell
 */
 LET zalgo = "1̴̣̜̗̰͇͖͖̞̮͈͍̂͜.̸̢̧̨͙̻̜̰̼̔̿̓̄̀̅͌̈́͒͗̈́̒̕̚͜͠e̶̙̞̬̹̥͖̤̟͑͒̂̀̔͠x̵̛̱̠̳͍̦̘̤̙͚̙͈̬́̈́͂̎̽̇̀͝ę̵̯̦̫͖͖͍͈̟̠͉̥͒̑̐̏̕̚̕͜͠"
 LET Test = "Hellothereongline" + zalgo

 SELECT Test AS Test1, Test AS Test2, Test AS Test3,
 Test AS Test4, Test AS Test5,
 Test AS Test11, Test AS Test21,
 Test AS Test13, Test AS Test14, Test AS Test15,
 Test AS Test21, Test AS Test22,
 Test AS Test23, Test AS Test24, Test AS Test25
 FROM range(start=0, end=100, step=1)

 - type: VQL
 template: |
 /*
 # Column types set in the artifact's `column_types` field

 These apply to notebooks automatically without needing to
 define them again.

 * Hash column should right click to VT
 * upload preview should show the uploaded file.

 */

 LET ColumnTypes = dict(`StartDate`='timestamp', Download='download',
 Hex='hex', Upload='preview_upload')
 LET Hex = "B0 EC 48 5F 18 77"

 SELECT Hex, StartDate, hash(accessor="data", path="Hello") AS Hash,
 upload(accessor="data", file="Hello world",
 name="test.txt") AS Upload,
 upload(accessor="data", file="Hello world",
 name="test.txt") AS Download
 FROM source()

 - type: VQL
 template: |
 /* Test the JSON renderer. */
 LET Strings = SELECT "Hello World" AS A FROM range(end=100)

 LET MultiColumn = SELECT * FROM chain(a={
 SELECT 1 AS A FROM range(end=10)
 }, b={
 SELECT 1 AS B FROM range(end=10)
 })

 SELECT dict(
 MultiColumn=MultiColumn,
 Strings=Strings.A,
 `NULL`=NULL,
 Bool=TRUE,
 BoolF=FALSE,
 BinaryData=base64encode(string="hello world"),
 Rows={
 SELECT count() AS Count,
 rand() AS R
 FROM range(end=20)
 },
 Integer=1, Float=1.235,
 LongString="Hello world " * 100,
 MixedList=[1, 2, dict(A=3)],
 NestedDict=dict(
 Foo=dict(A=1,
 B=dict(z=1,
 nesting=dict(Foo="Hello world"))))) AS A
 FROM scope()

 - type: VQL
 template: |
 /*
 # Test the link_to() VQL Function
 */
 LET ColumnTypes &amp;lt;= dict(
 LinkToFlow="url_internal",
 LinkToHunt="url_internal",
 LinkToArtifact="url_internal",
 Download="url_internal",
 LinkToClient="url_internal")

 LET s = scope()
 LET Uploaded &amp;lt;= upload(accessor="data", file="Hello", name="test.txt")

 SELECT link_to(client_id=ClientId, flow_id=s.FlowId || "F.123") AS LinkToFlow,
 link_to(client_id=ClientId) AS LinkToClient,
 link_to(hunt_id=s.HuntId || "H.123") AS LinkToHunt,
 link_to(artifact=ArtifactName) AS LinkToArtifact,
 link_to(upload=Uploaded) AS Download
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Elastic.EventLogs.Sysmon</title><link>https://docs.velociraptor.app/artifact_references/pages/elastic.eventlogs.sysmon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/elastic.eventlogs.sysmon/</guid><description>&lt;p>Ship the the Sysmon event log in ECS schema.&lt;/p>
&lt;p>The Elastic Common Schema (ECS) is an open source specification,
developed with support from the Elastic user community. ECS defines
a common set of fields to be used when storing event data in
Elasticsearch, such as logs and metrics.&lt;/p>
&lt;p>NOTE: ECS is poorly documented. There is no clear documentation of
where each field in the ECS record comes from other than the actual
source code of the winlogbeats client. This artifact implements the
winlogbeat transformation as described in
&lt;a href="https://github.com/elastic/beats/blob/master/x-pack/winlogbeat/module/sysmon/ingest/sysmon.yml" target="_blank" >https://github.com/elastic/beats/blob/master/x-pack/winlogbeat/module/sysmon/ingest/sysmon.yml&lt;/a>
&lt;/p>
&lt;p>There may be slight variations between the data produced by this
artifact and the official winlogbeat client. If you find such
variation, please file an issue on Velociraptor&amp;rsquo;s GitHub issue
board.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Elastic.EventLogs.Sysmon
description: |
 Ship the the Sysmon event log in ECS schema.

 The Elastic Common Schema (ECS) is an open source specification,
 developed with support from the Elastic user community. ECS defines
 a common set of fields to be used when storing event data in
 Elasticsearch, such as logs and metrics.

 NOTE: ECS is poorly documented. There is no clear documentation of
 where each field in the ECS record comes from other than the actual
 source code of the winlogbeats client. This artifact implements the
 winlogbeat transformation as described in
 https://github.com/elastic/beats/blob/master/x-pack/winlogbeat/module/sysmon/ingest/sysmon.yml

 There may be slight variations between the data produced by this
 artifact and the official winlogbeat client. If you find such
 variation, please file an issue on Velociraptor's GitHub issue
 board.

reference:
 - https://www.elastic.co/guide/en/ecs/current/ecs-reference.html

parameters:
 - name: LogFileGlob
 default: C:/Windows/System32/WinEvt/Logs/Microsoft-Windows-Sysmon%4Operational.evtx

export: |
 -- ECS clears many fields from EventData but we preserve them all,
 -- although to ensure that Elastic does not reject the fields we
 -- convert them all to strings.
 LET NormalizeEventData(EventData) = to_dict(item={
 SELECT _key, str(str=_value) AS _value FROM items(item=EventData)
 })

 LET OpcodesLookup &amp;lt;= dict(
 `0`= "Info",
 `1`= "Start",
 `2`= "Stop",
 `3`= "DCStart",
 `4`= "DCStop",
 `5`= "Extension",
 `6`= "Reply",
 `7`= "Resume",
 `8`= "Suspend",
 `9`= "Send")

 LET LevelLookup &amp;lt;= dict(
 `0`= "Information",
 `1`= "Critical",
 `2`= "Error",
 `3`= "Warning",
 `4`= "Information",
 `5`= "Verbose")

 LET CategoryLookup &amp;lt;= dict(
 `1`=["process",],
 `2`=["file",],
 `3`=["network",],
 `4`=["process",],
 `5`=["process",],
 `6`=["driver",],
 `7`=["process",],
 `8`=["process",],
 `9`=["process",],
 `10`=["process",],
 `11`=["file",],
 `12`=["configuration","registry"],
 `13`=["configuration","registry"],
 `14`=["configuration","registry"],
 `15`=["file",],
 `16`=["configuration",],
 `17`=["file",],
 `18`=["file",],
 `19`=["process",],
 `20`=["process",],
 `21`=["network",],
 `22`=["network",],
 `23`=["file",],
 `24`=["",],
 `25`=["process",],
 `26`=["file",],
 `27`=["file",],
 `28`=["file",],
 `255`=["process",])

 LET TypeLookup &amp;lt;= dict(
 `1`=["start",],
 `2`=["change",],
 `3`=["start", "connection", "protocol"],
 `4`=["change",],
 `5`=["end",],
 `6`=["start",],
 `7`=["change",],
 `8`=["change",],
 `9`=["access",],
 `10`=["access",],
 `11`=["creation",],
 `12`=["change",],
 `13`=["change",],
 `14`=["change",],
 `15`=["access",],
 `16`=["change",],
 `17`=["creation",],
 `18`=["access",],
 `19`=["creation",],
 `20`=["creation",],
 `21`=["access",],
 `22`=["connection", "protocol", "info"],
 `23`=["deletion",],
 `24`=["change",],
 `25`=["change",],
 `26`=["deletion",],
 `27`=["creation", "denied"],
 `28`=["deletion", "denied"],
 `255`=["error",])

 LET DNSLookup &amp;lt;= dict(
 `1`= "A",
 `2`= "NS",
 `3`= "MD",
 `4`= "MF",
 `5`= "CNAME",
 `6`= "SOA",
 `7`= "MB",
 `8`= "MG",
 `9`= "MR",
 `10`= "NULL",
 `11`= "WKS",
 `12`= "PTR",
 `13`= "HINFO",
 `14`= "MINFO",
 `15`= "MX",
 `16`= "TXT",
 `17`= "RP",
 `18`= "AFSDB",
 `19`= "X25",
 `20`= "ISDN",
 `21`= "RT",
 `22`= "NSAP",
 `23`= "NSAPPTR",
 `24`= "SIG",
 `25`= "KEY",
 `26`= "PX",
 `27`= "GPOS",
 `28`= "AAAA",
 `29`= "LOC",
 `30`= "NXT",
 `31`= "EID",
 `32`= "NIMLOC",
 `33`= "SRV",
 `34`= "ATMA",
 `35`= "NAPTR",
 `36`= "KX",
 `37`= "CERT",
 `38`= "A6",
 `39`= "DNAME",
 `40`= "SINK",
 `41`= "OPT",
 `43`= "DS",
 `46`= "RRSIG",
 `47`= "NSEC",
 `48`= "DNSKEY",
 `49`= "DHCID",
 `100`= "UINFO",
 `101`= "UID",
 `102`= "GID",
 `103`= "UNSPEC",
 `248`= "ADDRS",
 `249`= "TKEY",
 `250`= "TSIG",
 `251`= "IXFR",
 `252`= "AXFR",
 `253`= "MAILB",
 `254`= "MAILA",
 `255`= "ANY",
 `65281`= "WINS",
 `65282`= "WINSR"
 )

 LET DnsStatusLookup &amp;lt;= dict(
 `5`= "ERROR_ACCESS_DENIED",
 `0`= "SUCCESS",
 `8`= "ERROR_NOT_ENOUGH_MEMORY",
 `13`= "ERROR_INVALID_DATA",
 `14`= "ERROR_OUTOFMEMORY",
 `123`= "ERROR_INVALID_NAME",
 `1214`= "ERROR_INVALID_NETNAME",
 `1223`= "ERROR_CANCELLED",
 `1460`= "ERROR_TIMEOUT",
 `4312`= "ERROR_OBJECT_NOT_FOUND",
 `9001`= "DNS_ERROR_RCODE_FORMAT_ERROR",
 `9002`= "DNS_ERROR_RCODE_SERVER_FAILURE",
 `9003`= "DNS_ERROR_RCODE_NAME_ERROR",
 `9004`= "DNS_ERROR_RCODE_NOT_IMPLEMENTED",
 `9005`= "DNS_ERROR_RCODE_REFUSED",
 `9006`= "DNS_ERROR_RCODE_YXDOMAIN",
 `9007`= "DNS_ERROR_RCODE_YXRRSET",
 `9008`= "DNS_ERROR_RCODE_NXRRSET",
 `9009`= "DNS_ERROR_RCODE_NOTAUTH",
 `9010`= "DNS_ERROR_RCODE_NOTZONE",
 `9016`= "DNS_ERROR_RCODE_BADSIG",
 `9017`= "DNS_ERROR_RCODE_BADKEY",
 `9018`= "DNS_ERROR_RCODE_BADTIME",
 `9101`= "DNS_ERROR_KEYMASTER_REQUIRED",
 `9102`= "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE",
 `9103`= "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1",
 `9104`= "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS",
 `9105`= "DNS_ERROR_UNSUPPORTED_ALGORITHM",
 `9106`= "DNS_ERROR_INVALID_KEY_SIZE",
 `9107`= "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE",
 `9108`= "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION",
 `9109`= "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR",
 `9110`= "DNS_ERROR_UNEXPECTED_CNG_ERROR",
 `9111`= "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION",
 `9112`= "DNS_ERROR_KSP_NOT_ACCESSIBLE",
 `9113`= "DNS_ERROR_TOO_MANY_SKDS",
 `9114`= "DNS_ERROR_INVALID_ROLLOVER_PERIOD",
 `9115`= "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET",
 `9116`= "DNS_ERROR_ROLLOVER_IN_PROGRESS",
 `9117`= "DNS_ERROR_STANDBY_KEY_NOT_PRESENT",
 `9118`= "DNS_ERROR_NOT_ALLOWED_ON_ZSK",
 `9119`= "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD",
 `9120`= "DNS_ERROR_ROLLOVER_ALREADY_QUEUED",
 `9121`= "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE",
 `9122`= "DNS_ERROR_BAD_KEYMASTER",
 `9123`= "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD",
 `9124`= "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT",
 `9125`= "DNS_ERROR_DNSSEC_IS_DISABLED",
 `9126`= "DNS_ERROR_INVALID_XML",
 `9127`= "DNS_ERROR_NO_VALID_TRUST_ANCHORS",
 `9128`= "DNS_ERROR_ROLLOVER_NOT_POKEABLE",
 `9129`= "DNS_ERROR_NSEC3_NAME_COLLISION",
 `9130`= "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1",
 `9501`= "DNS_INFO_NO_RECORDS",
 `9502`= "DNS_ERROR_BAD_PACKET",
 `9503`= "DNS_ERROR_NO_PACKET",
 `9504`= "DNS_ERROR_RCODE",
 `9505`= "DNS_ERROR_UNSECURE_PACKET",
 `9506`= "DNS_REQUEST_PENDING",
 `9551`= "DNS_ERROR_INVALID_TYPE",
 `9552`= "DNS_ERROR_INVALID_IP_ADDRESS",
 `9553`= "DNS_ERROR_INVALID_PROPERTY",
 `9554`= "DNS_ERROR_TRY_AGAIN_LATER",
 `9555`= "DNS_ERROR_NOT_UNIQUE",
 `9556`= "DNS_ERROR_NON_RFC_NAME",
 `9557`= "DNS_STATUS_FQDN",
 `9558`= "DNS_STATUS_DOTTED_NAME",
 `9559`= "DNS_STATUS_SINGLE_PART_NAME",
 `9560`= "DNS_ERROR_INVALID_NAME_CHAR",
 `9561`= "DNS_ERROR_NUMERIC_NAME",
 `9562`= "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER",
 `9563`= "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION",
 `9564`= "DNS_ERROR_CANNOT_FIND_ROOT_HINTS",
 `9565`= "DNS_ERROR_INCONSISTENT_ROOT_HINTS",
 `9566`= "DNS_ERROR_DWORD_VALUE_TOO_SMALL",
 `9567`= "DNS_ERROR_DWORD_VALUE_TOO_LARGE",
 `9568`= "DNS_ERROR_BACKGROUND_LOADING",
 `9569`= "DNS_ERROR_NOT_ALLOWED_ON_RODC",
 `9570`= "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME",
 `9571`= "DNS_ERROR_DELEGATION_REQUIRED",
 `9572`= "DNS_ERROR_INVALID_POLICY_TABLE",
 `9573`= "DNS_ERROR_ADDRESS_REQUIRED",
 `9601`= "DNS_ERROR_ZONE_DOES_NOT_EXIST",
 `9602`= "DNS_ERROR_NO_ZONE_INFO",
 `9603`= "DNS_ERROR_INVALID_ZONE_OPERATION",
 `9604`= "DNS_ERROR_ZONE_CONFIGURATION_ERROR",
 `9605`= "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD",
 `9606`= "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS",
 `9607`= "DNS_ERROR_ZONE_LOCKED",
 `9608`= "DNS_ERROR_ZONE_CREATION_FAILED",
 `9609`= "DNS_ERROR_ZONE_ALREADY_EXISTS",
 `9610`= "DNS_ERROR_AUTOZONE_ALREADY_EXISTS",
 `9611`= "DNS_ERROR_INVALID_ZONE_TYPE",
 `9612`= "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP",
 `9613`= "DNS_ERROR_ZONE_NOT_SECONDARY",
 `9614`= "DNS_ERROR_NEED_SECONDARY_ADDRESSES",
 `9615`= "DNS_ERROR_WINS_INIT_FAILED",
 `9616`= "DNS_ERROR_NEED_WINS_SERVERS",
 `9617`= "DNS_ERROR_NBSTAT_INIT_FAILED",
 `9618`= "DNS_ERROR_SOA_DELETE_INVALID",
 `9619`= "DNS_ERROR_FORWARDER_ALREADY_EXISTS",
 `9620`= "DNS_ERROR_ZONE_REQUIRES_MASTER_IP",
 `9621`= "DNS_ERROR_ZONE_IS_SHUTDOWN",
 `9622`= "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING",
 `9651`= "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE",
 `9652`= "DNS_ERROR_INVALID_DATAFILE_NAME",
 `9653`= "DNS_ERROR_DATAFILE_OPEN_FAILURE",
 `9654`= "DNS_ERROR_FILE_WRITEBACK_FAILED",
 `9655`= "DNS_ERROR_DATAFILE_PARSING",
 `9701`= "DNS_ERROR_RECORD_DOES_NOT_EXIST",
 `9702`= "DNS_ERROR_RECORD_FORMAT",
 `9703`= "DNS_ERROR_NODE_CREATION_FAILED",
 `9704`= "DNS_ERROR_UNKNOWN_RECORD_TYPE",
 `9705`= "DNS_ERROR_RECORD_TIMED_OUT",
 `9706`= "DNS_ERROR_NAME_NOT_IN_ZONE",
 `9707`= "DNS_ERROR_CNAME_LOOP",
 `9708`= "DNS_ERROR_NODE_IS_CNAME",
 `9709`= "DNS_ERROR_CNAME_COLLISION",
 `9710`= "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT",
 `9711`= "DNS_ERROR_RECORD_ALREADY_EXISTS",
 `9712`= "DNS_ERROR_SECONDARY_DATA",
 `9713`= "DNS_ERROR_NO_CREATE_CACHE_DATA",
 `9714`= "DNS_ERROR_NAME_DOES_NOT_EXIST",
 `9715`= "DNS_WARNING_PTR_CREATE_FAILED",
 `9716`= "DNS_WARNING_DOMAIN_UNDELETED",
 `9717`= "DNS_ERROR_DS_UNAVAILABLE",
 `9718`= "DNS_ERROR_DS_ZONE_ALREADY_EXISTS",
 `9719`= "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE",
 `9720`= "DNS_ERROR_NODE_IS_DNAME",
 `9721`= "DNS_ERROR_DNAME_COLLISION",
 `9722`= "DNS_ERROR_ALIAS_LOOP",
 `9751`= "DNS_INFO_AXFR_COMPLETE",
 `9752`= "DNS_ERROR_AXFR",
 `9753`= "DNS_INFO_ADDED_LOCAL_WINS",
 `9801`= "DNS_STATUS_CONTINUE_NEEDED",
 `9851`= "DNS_ERROR_NO_TCPIP",
 `9852`= "DNS_ERROR_NO_DNS_SERVERS",
 `9901`= "DNS_ERROR_DP_DOES_NOT_EXIST",
 `9902`= "DNS_ERROR_DP_ALREADY_EXISTS",
 `9903`= "DNS_ERROR_DP_NOT_ENLISTED",
 `9904`= "DNS_ERROR_DP_ALREADY_ENLISTED",
 `9905`= "DNS_ERROR_DP_NOT_AVAILABLE",
 `9906`= "DNS_ERROR_DP_FSMO_ERROR",
 `9911`= "DNS_ERROR_RRL_NOT_ENABLED",
 `9912`= "DNS_ERROR_RRL_INVALID_WINDOW_SIZE",
 `9913`= "DNS_ERROR_RRL_INVALID_IPV4_PREFIX",
 `9914`= "DNS_ERROR_RRL_INVALID_IPV6_PREFIX",
 `9915`= "DNS_ERROR_RRL_INVALID_TC_RATE",
 `9916`= "DNS_ERROR_RRL_INVALID_LEAK_RATE",
 `9917`= "DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE",
 `9921`= "DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS",
 `9922`= "DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST",
 `9923`= "DNS_ERROR_VIRTUALIZATION_TREE_LOCKED",
 `9924`= "DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME",
 `9925`= "DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE",
 `9951`= "DNS_ERROR_ZONESCOPE_ALREADY_EXISTS",
 `9952`= "DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST",
 `9953`= "DNS_ERROR_DEFAULT_ZONESCOPE",
 `9954`= "DNS_ERROR_INVALID_ZONESCOPE_NAME",
 `9955`= "DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES",
 `9956`= "DNS_ERROR_LOAD_ZONESCOPE_FAILED",
 `9957`= "DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED",
 `9958`= "DNS_ERROR_INVALID_SCOPE_NAME",
 `9959`= "DNS_ERROR_SCOPE_DOES_NOT_EXIST",
 `9960`= "DNS_ERROR_DEFAULT_SCOPE",
 `9961`= "DNS_ERROR_INVALID_SCOPE_OPERATION",
 `9962`= "DNS_ERROR_SCOPE_LOCKED",
 `9963`= "DNS_ERROR_SCOPE_ALREADY_EXISTS",
 `9971`= "DNS_ERROR_POLICY_ALREADY_EXISTS",
 `9972`= "DNS_ERROR_POLICY_DOES_NOT_EXIST",
 `9973`= "DNS_ERROR_POLICY_INVALID_CRITERIA",
 `9974`= "DNS_ERROR_POLICY_INVALID_SETTINGS",
 `9975`= "DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED",
 `9976`= "DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST",
 `9977`= "DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS",
 `9978`= "DNS_ERROR_SUBNET_DOES_NOT_EXIST",
 `9979`= "DNS_ERROR_SUBNET_ALREADY_EXISTS",
 `9980`= "DNS_ERROR_POLICY_LOCKED",
 `9981`= "DNS_ERROR_POLICY_INVALID_WEIGHT",
 `9982`= "DNS_ERROR_POLICY_INVALID_NAME",
 `9983`= "DNS_ERROR_POLICY_MISSING_CRITERIA",
 `9984`= "DNS_ERROR_INVALID_CLIENT_SUBNET_NAME",
 `9985`= "DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID",
 `9986`= "DNS_ERROR_POLICY_SCOPE_MISSING",
 `9987`= "DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED",
 `9988`= "DNS_ERROR_SERVERSCOPE_IS_REFERENCED",
 `9989`= "DNS_ERROR_ZONESCOPE_IS_REFERENCED",
 `9990`= "DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET",
 `9991`= "DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL",
 `9992`= "DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL",
 `9993`= "DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE",
 `9994`= "DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN",
 `9995`= "DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE",
 `9996`= "DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY",
 `10054`= "WSAECONNRESET",
 `10055`= "WSAENOBUFS",
 `10060`= "WSAETIMEDOUT"
 )

 LET ParseDNSAnswers(X) = SELECT if(condition=_value =~ "^type",
 then=dict(
 data=parse_string_with_regex(
 string=regex_replace(source=_value, replace="", re="::ffff:"),
 regex="(?P&amp;lt;Data&amp;gt;[^\\s]+)$").Data,
 type=get(item=DNSLookup,
 field=parse_string_with_regex(
 string=_value, regex="type:\\s+([0-9]+)").g1)),
 else=dict(
 data=regex_replace(source=_value, replace="", re="::ffff:"),
 type=if(condition=regex_replace(source=_value, replace="", re="::ffff:") =~ ":",
 then="AAAA", else="A")
 )) AS Field
 FROM foreach(row=split(string=X, sep=";"))
 WHERE _value

 LET ParseHashes(Hashes) = to_dict(item={
 SELECT split(string=_value, sep="=")[0] AS _key,
 split(string=_value, sep="=")[1] AS _value
 FROM foreach(row=split(string=Hashes, sep=","))
 })

 LET _EventToECSBase(System, EventData) = dict(
 ecs=dict(version="1.12.0"),
 log=dict(level=System.Level),
 event=dict(
 module="sysmon",
 kind="event",
 code=System.EventID.Value,
 category=get(item=CategoryLookup, field=str(str=System.EventID.Value)),
 type=get(item=TypeLookup, field=str(str=System.EventID.Value)),
 created=timestamp(epoch=System.TimeCreated.SystemTime)
 ),
 error=dict(
 code=if(condition=System.EventID.Value = 255, then=EventData.ID, else=0)
 ),
 rule=dict(
 name=EventData.RuleName
 ),
 message=if(condition=System.EventID.Value = 255, then=EventData.Type, else=""),
 winlog=dict(
 api="wineventlog",
 channel=System.Channel,
 computer_name=System.Computer,
 event_data=NormalizeEventData(EventData=EventData),
 event_id=System.EventID.Value ,
 opcode=get(item=OpcodesLookup, field=str(str=System.Opcode)),
 process=dict(
 pid=System.Execution.ProcessID,
 thread=dict(
 id=System.Execution.ThreadID
 )
 ),
 provider_guid=System.Provider.Guid,
 provider_name=System.Provider.Name,
 record_id=str(str=System.EventRecordID),
 user=dict(
 identifier=System.Security.UserID
 )
 )
 )

 LET _EventToECSProcess(System, EventData) = dict(
 process=dict(
 hash=ParseHashes(Hashes=EventData.Hashes),
 entity_id=EventData.ProcessGuid || EventData.SourceProcessGuid || EventData.SourceProcessGUID,
 pid=EventData.ProcessId || EventData.SourceProcessId,
 executable=EventData.Image || EventData.SourceImage || EventData.Destination,
 command_line=EventData.CommandLine,
 working_directory=EventData.CurrentDirectory,
 parent=dict(
 pid=EventData.ParentProcessId,
 entity_id= EventData.ParentProcessGuid,
 executable=EventData.ParentImage,
 command_line=EventData.ParentCommandLine,
 args=commandline_split(command=EventData.ParentCommandLine),
 args_count=len(list=commandline_split(command=EventData.ParentCommandLine)),
 name=pathspec(parse=EventData.ParentImage, path_type="windows").Basename
 ),
 thread=dict(
 id= EventData.SourceThreadId || 0
 ),
 pe=if(condition=System.EventID.Value != 7, then=dict(
 original_file_name=EventData.OriginalFileName || "",
 company=EventData.Company || "",
 description=EventData.Description || "",
 file_version=EventData.FileVersion || "",
 product= EventData.Product || ""
 )),
 args=commandline_split(command=EventData.CommandLine),
 args_count=len(list=commandline_split(command=EventData.CommandLine)),
 name=pathspec(parse=EventData.Image, path_type="windows").Basename
 )
 )

 LET _EventToECSNetwork(System, EventData) = dict(
 network=dict(
 transport=EventData.Protocol,
 protocol=if(condition=System.EventID.Value = 22, then="dns", else=EventData.DestinationPortName || EventData.SourcePortName),
 direction=if(condition= EventData.Initiated, then="egress", else="ingress"),
 type=if(condition= EventData.SourceIsIpv6, then="ipv6", else="ipv4")
 ),
 source=dict(
 ip=EventData.SourceIp,
 domain=EventData.SourceHostname,
 port=EventData.SourcePort
 ),
 destination=dict(
 ip=EventData.DestinationIp,
 domain=EventData.DestinationHostname,
 port=EventData.DestinationPort
 ),
 dns=dict(
 answers=ParseDNSAnswers(X=EventData.QueryResults).Field,
 question=dict(
 name=EventData.QueryName
 ),
 status=get(item=DnsStatusLookup, field=str(str=EventData.QueryStatus))
 )
 )

 LET _ParseRegData(X) = if(condition=X =~ "^DWORD",
 then=dict(
 strings=[str(str=int(int= parse_string_with_regex(string=X, regex="\\((.+?)\\)").g1)),],
 type="DWORD"),
 else=if(condition=X =~ "^Binary Data",
 then=dict(
 strings=["Binary Data",],
 type="REG_BINARY"),
 else=if(condition=X =~ "^QWORD",
 then=dict(
 strings=[str(str=int(int= regex_replace(re="-0x", replace="",
 source=parse_string_with_regex(string=X, regex="\\((.+?)\\)").g1))),],
 type="QWORD"),
 else=dict(strings=X, type=parse_string_with_regex(string=X, regex="(^[^\\S]+)").g1)
 )
 ))

 LET _EventToECSRegistry(System, EventData) = dict(
 process=dict(
 entity_id=EventData.ProcessGuid || EventData.SourceProcessGuid || EventData.SourceProcessGUID,
 pid=EventData.ProcessId || EventData.SourceProcessId,
 executable=EventData.Image || EventData.SourceImage || EventData.Destination,
 name=pathspec(parse=EventData.Image, path_type="windows").Basename
 ),
 registry=dict(
 hive=pathspec(parse=EventData.TargetObject, path_type="registry")[0],
 key=pathspec(parse=EventData.TargetObject, path_type="registry")[1:],
 path=EventData.TargetObject,
 value=pathspec(parse=EventData.TargetObject, path_type="registry").Basename,
 data= _ParseRegData(X=EventData.Details)
 )
 )

 LET _EventToECSFile(System, EventData) = dict(
 file=dict(
 path=EventData.TargetFilename || EventData.Device || EventData.ImageLoaded,
 directory=pathspec(parse=EventData.TargetFilename || EventData.Device || EventData.ImageLoaded, path_type="windows").Dirname,
 name=EventData.PipeName || pathspec(parse=EventData.TargetFilename || EventData.Device || EventData.ImageLoaded, path_type="windows").Basename,
 code_signature=dict(
 subject_name= EventData.Signature || "",
 status = EventData.SignatureStatus || "",
 signed=if(condition=EventData.Signed, then=TRUE, else=FALSE),
 valid=EventData.SignatureStatus = "Valid"
 ),
 process=dict(
 entity_id=EventData.ProcessGuid || EventData.SourceProcessGuid || EventData.SourceProcessGUID,
 pid=EventData.ProcessId || EventData.SourceProcessId,
 executable=EventData.Image || EventData.SourceImage || EventData.Destination,
 name=pathspec(parse=EventData.Image, path_type="windows").Basename,
 hash=ParseHashes(Hashes=EventData.Hash)
 ),
 pe=dict(
 original_file_name=EventData.OriginalFileName || "",
 company=EventData.Company || "",
 description=EventData.Description || "",
 file_version=EventData.FileVersion || "",
 product=EventData.Product || ""
 ),
 sysmon=dict(
 file=dict(
 archived=if(condition=EventData.Archived =~ "true", then=TRUE, else=FALSE),
 is_executable=if(condition=EventData.is_executable, then=TRUE, else=FALSE)
 )
 )
 )
 )

 LET SysmonEventToECS(System, EventData) = _EventToECSBase(System=System, EventData=EventData) + if(
 condition=get(item=CategoryLookup, field=str(str=System.EventID.Value)) =~ "process",
 then=_EventToECSProcess(System=System, EventData=EventData),
 else=if(
 condition=get(item=CategoryLookup, field=str(str=System.EventID.Value)) =~ "network",
 then=_EventToECSNetwork(System=System, EventData=EventData),
 else=if(
 condition=get(item=CategoryLookup, field=str(str=System.EventID.Value)) =~ "registry",
 then=_EventToECSRegistry(System=System, EventData=EventData),
 else=if(
 condition=get(item=CategoryLookup, field=str(str=System.EventID.Value)) =~ "file",
 then=_EventToECSFile(System=System, EventData=EventData),
 else=dict()))))

sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT * FROM foreach(row={
 SELECT OSPath FROM glob(globs=LogFileGlob)
 }, query={
 SELECT SysmonEventToECS(System=System, EventData=EventData) AS ECS
 FROM parse_evtx(filename=OSPath)
 })
 }, column="ECS")

 notebook:
 - type: vql_suggestion
 name: "Upload to Elastic"
 template: |
 /*
 * Modify the Elastic parameters to upload this dataset.
 * You might need to add authentication to Elastic.
 */
 LET ElasicAddress = "http://localhost:9200"

 // Uncomment this when you are ready to upload the data
 LET X = SELECT *
 FROM elastic_upload(
 addresses=ElasicAddress,
 index="winlogbeat-velo",
 action="create",
 query={
 SELECT timestamp(epoch=now()) AS `@timestamp`,
 ClientId,
 client_info(client_id=ClientId).Hostname AS Hostname,
 *
 FROM source(artifact="Elastic.EventLogs.Sysmon")
 LIMIT 10
 })

&lt;/code>&lt;/pre></description></item><item><title>Elastic.Events.Clients</title><link>https://docs.velociraptor.app/artifact_references/pages/elastic.events.clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/elastic.events.clients/</guid><description>&lt;p>This server monitoring artifact will watch a selection of client
monitoring artifacts for new events and push those to an elastic
index.&lt;/p>
&lt;p>NOTE: You must ensure you are collecting these artifacts from the
clients by adding them to the &amp;ldquo;Client Events&amp;rdquo; GUI.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Elastic.Events.Clients
description: |
 This server monitoring artifact will watch a selection of client
 monitoring artifacts for new events and push those to an elastic
 index.

 NOTE: You must ensure you are collecting these artifacts from the
 clients by adding them to the &amp;quot;Client Events&amp;quot; GUI.

type: SERVER_EVENT

parameters:
 - name: ElasticAddresses
 default: http://127.0.0.1:9200/
 - name: Username
 - name: Password
 - name: APIKey
 - name: artifactsToWatch
 type: artifactset
 artifact_type: CLIENT_EVENT
 default: |
 Artifact
 Windows.Detection.PsexecService
 Windows.Events.ProcessCreation
 Windows.Events.ServiceCreation
 - name: DisableSSLSecurity
 type: bool
 description: Disable SSL certificate verification
 - name: Threads
 type: int
 description: Number of threads to upload with
 - name: ChunkSize
 type: int
 description: Batch this many rows for each upload.
 - name: CloudID
 description: The cloud id if needed
 - name: RootCA
 description: |
 A root CA certificate in PEM for trusting TLS protected Elastic
 servers.

sources:
 - query: |
 LET artifacts_to_watch = SELECT Artifact
 FROM artifactsToWatch
 WHERE log(message=&amp;quot;Uploading artifact &amp;quot; + Artifact + &amp;quot; to Elastic&amp;quot;)

 LET events = SELECT * FROM foreach(
 row=artifacts_to_watch,
 async=TRUE, // Required for event queries in foreach()
 query={
 SELECT *, &amp;quot;Artifact_&amp;quot; + Artifact as _index,
 Artifact,
 client_info(client_id=ClientId).os_info.hostname AS Hostname,
 timestamp(epoch=now()) AS timestamp
 FROM watch_monitoring(artifact=Artifact)
 })

 SELECT * FROM elastic_upload(
 query=events,
 threads=Threads,
 chunk_size=ChunkSize,
 addresses=split(string=ElasticAddresses, sep=&amp;quot;,&amp;quot;),
 index=&amp;quot;velociraptor&amp;quot;,
 password=Password,
 username=Username,
 cloud_id=CloudID,
 api_key=APIKey,
 root_ca=RootCA,
 disable_ssl_security=DisableSSLSecurity,
 type=&amp;quot;ClientEvents&amp;quot;)

&lt;/code>&lt;/pre></description></item><item><title>Elastic.Events.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/elastic.events.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/elastic.events.upload/</guid><description>&lt;p>This server monitoring artifact will watch a selection of client or
server monitoring artifacts for new events and push those to an
elastic index.&lt;/p>
&lt;p>NOTE: You must ensure you are collecting these artifacts from the
clients by adding them to the &amp;ldquo;Client Events&amp;rdquo; GUI, or for server
artifacts, the &amp;ldquo;Server Events&amp;rdquo; GUI.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Elastic.Events.Upload
aliases:
- Elastic.Events.Clients

description: |
 This server monitoring artifact will watch a selection of client or
 server monitoring artifacts for new events and push those to an
 elastic index.

 NOTE: You must ensure you are collecting these artifacts from the
 clients by adding them to the "Client Events" GUI, or for server
 artifacts, the "Server Events" GUI.

type: SERVER_EVENT

parameters:
 - name: ElasticAddresses
 default: http://127.0.0.1:9200/
 - name: Username
 - name: Password
 - name: APIKey
 - name: ClientArtifactsToWatch
 type: artifactset
 artifact_type: CLIENT_EVENT
 default: |
 Artifact
 Windows.Detection.PsexecService
 Windows.Events.ProcessCreation
 Windows.Events.ServiceCreation
 - name: ServerArtifactsToWatch
 type: artifactset
 artifact_type: SERVER_EVENT
 default: |
 Artifact
 Server.Audit.Logs
 - name: DisableSSLSecurity
 type: bool
 description: Disable SSL certificate verification
 - name: Threads
 type: int
 description: Number of threads to upload with
 - name: ChunkSize
 type: int
 description: Batch this many rows for each upload.
 - name: CloudID
 description: The cloud id if needed
 - name: RootCA
 description: |
 A root CA certificate in PEM for trusting TLS protected Elastic
 servers.

sources:
 - query: |
 LET artifacts_to_watch = SELECT * FROM chain(
 a={SELECT Artifact FROM ClientArtifactsToWatch},
 b={SELECT Artifact FROM ServerArtifactsToWatch})
 WHERE NOT Artifact =~ "Elastic.Events.Upload"
 AND log(message="Uploading artifact " + Artifact + " to Elastic")

 LET s = scope()

 LET events = SELECT * FROM foreach(
 row=artifacts_to_watch,
 async=TRUE, // Required for event queries in foreach()
 query={
 SELECT *, "Artifact_" + Artifact as _index,
 Artifact,
 client_info(client_id=s.ClientId || "server").os_info.hostname AS Hostname,
 timestamp(epoch=now()) AS timestamp
 FROM watch_monitoring(artifact=Artifact)
 })

 SELECT * FROM elastic_upload(
 query=events,
 threads=Threads,
 chunk_size=ChunkSize,
 addresses=split(string=ElasticAddresses, sep=","),
 index="velociraptor",
 password=Password,
 username=Username,
 cloud_id=CloudID,
 api_key=APIKey,
 root_ca=RootCA,
 disable_ssl_security=DisableSSLSecurity,
 type="ClientEvents")

&lt;/code>&lt;/pre></description></item><item><title>Elastic.Flows.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/elastic.flows.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/elastic.flows.upload/</guid><description>&lt;p>This server side event monitoring artifact waits for new artifacts
to be collected from endpoints and automatically uploads those to an
elastic server.&lt;/p>
&lt;p>We use the artifact name as the name of the index. This allows users
to adjust the index size/lifetime according to the artifact it is
holding.&lt;/p>
&lt;p>NOTE: Elastic is a database and still must have a stable
schema. This means that artifacts that produce inconsistant columns
and types will &lt;strong>NOT&lt;/strong> work as expected. What will happen is that
the first row that is inserted will create the Elastic database
schema (In Elastic terminology &amp;ldquo;mapping&amp;rdquo;) and then any subsequent
row with a different type for these fields will be rejected by
Elastic.&lt;/p>
&lt;p>In particular this does not work with event logs because event logs
have a varied schema (The EventData field is a free form field
depending on the event log itself). Therefore forwarding event log
data to Elastic with this artifact will cause Elastic to drop many
events!! This artifact is not suitable for forwarding Windows Event
Logs!&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Elastic.Flows.Upload
description: |
 This server side event monitoring artifact waits for new artifacts
 to be collected from endpoints and automatically uploads those to an
 elastic server.

 We use the artifact name as the name of the index. This allows users
 to adjust the index size/lifetime according to the artifact it is
 holding.

 NOTE: Elastic is a database and still must have a stable
 schema. This means that artifacts that produce inconsistant columns
 and types will **NOT** work as expected. What will happen is that
 the first row that is inserted will create the Elastic database
 schema (In Elastic terminology "mapping") and then any subsequent
 row with a different type for these fields will be rejected by
 Elastic.

 In particular this does not work with event logs because event logs
 have a varied schema (The EventData field is a free form field
 depending on the event log itself). Therefore forwarding event log
 data to Elastic with this artifact will cause Elastic to drop many
 events!! This artifact is not suitable for forwarding Windows Event
 Logs!

type: SERVER_EVENT

parameters:
 - name: ArtifactNameRegex
 default: .
 type: regex
 description: Only upload these artifacts to elastic
 - name: elasticAddresses
 default: http://127.0.0.1:9200/
 - name: Username
 - name: Password
 - name: APIKey
 - name: DisableSSLSecurity
 type: bool
 description: Disable SSL certificate verification
 - name: Threads
 type: int
 description: Number of threads to upload with
 - name: ChunkSize
 type: int
 description: Batch this many rows for each upload.
 - name: CloudID
 description: The cloud id if needed
 - name: RootCA
 description: |
 A root CA certificate in PEM for trusting TLS protected Elastic
 servers.

sources:
 - query: |
 LET completions = SELECT * FROM watch_monitoring(
 artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex
 LET organization &amp;lt;= org().name

 LET documents = SELECT * FROM foreach(row=completions,
 query={
 SELECT * FROM foreach(
 row=Flow.artifacts_with_results,
 query={
 SELECT *, _value AS Artifact,
 client_info(client_id=ClientId).os_info.hostname AS Hostname,
 timestamp(epoch=now()) AS timestamp,
 ClientId, Flow.session_id AS FlowId,
 "artifact_" + regex_replace(source=_value,
 re='[/.]', replace='_') as _index,
 organization as Organization
 FROM source(
 client_id=ClientId,
 flow_id=Flow.session_id,
 artifact=_value)
 })
 })

 SELECT * FROM elastic_upload(
 query=documents,
 threads=Threads,
 chunk_size=ChunkSize,
 addresses=split(string=elasticAddresses, sep=","),
 index="velociraptor",
 password=Password,
 username=Username,
 cloud_id=CloudID,
 api_key=APIKey,
 root_ca=RootCA,
 disable_ssl_security=DisableSSLSecurity,
 type="artifact")

&lt;/code>&lt;/pre></description></item><item><title>Generic.Applications.Chrome.SessionStorage</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.applications.chrome.sessionstorage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.applications.chrome.sessionstorage/</guid><description>&lt;p>Session storage allows a web site to store permanent data in the
user&amp;rsquo;s browser.&lt;/p>
&lt;p>This artifact parses this data from the browser cache. Each website
has maintains a mapping between keys and values. The data is stored
per website and can vary.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Applications.Chrome.SessionStorage
description: |
 Session storage allows a web site to store permanent data in the
 user's browser.

 This artifact parses this data from the browser cache. Each website
 has maintains a mapping between keys and values. The data is stored
 per website and can vary.

parameters:
- name: SessionGlobs
 type: csv
 default: |
 Glob
 C:/Users/*/AppData/Local/Google/Chrome/User Data/*/Session Storage
 C:/Users/*/AppData/Local/BraveSoftware/Brave*/User Data/*/Session Storage
 C:/Users/*/AppData/Local/Microsoft/Edge/User Data/*/Session Storage
 /home/*/.config/google-chrome/*/Session Storage
 /home/*/.config/chrome-remote-desktop/chrome-profile/*/Session Storage
 /Users/*/Library/Application Support/BraveSoftware/Brave*/*/Session Storage
 /Users/*/Library/Application Support/Google/Chrome/*/Session Storage
 /Users/*/Library/Application Support/Microsoft Edge/*/Session Storage

- name: Accessor
- name: AlsoUpload
 type: bool
 description: If selected we also upload the Session Storage directory.

sources:
- query: |
 LET _ &amp;lt;= log(message="Glob %v", args= [SessionGlobs.Glob, ])
 LET _GetMapping(Data, ID) = to_dict(item={
 SELECT _key AS RawKey,
 parse_string_with_regex(string=_key,
 regex='map-([^-]+)-(?P&amp;lt;Key&amp;gt;.+)').Key AS _key,
 utf16(string=_value) AS _value
 FROM items(item=Data)
 WHERE RawKey =~ format(format="map-%v", args=ID)
 })

 LET DumpSessionStorate(Data) =
 SELECT parse_string_with_regex(string=_key,
 regex='''namespace-(?P&amp;lt;GUID&amp;gt;[^-]+)-(?P&amp;lt;URL&amp;gt;.+)''') AS Parsed,
 _value, _GetMapping(Data=Data, ID=_value) AS Mapping
 FROM items(item=Data)
 WHERE Parsed.URL

 LET hits = SELECT OSPath, to_dict(item={

 -- Load the whole thing into memory since we need to make
 -- several passes on it.
 SELECT Key AS _key, Value AS _value FROM leveldb(file=OSPath, accessor= Accessor)
 }) AS Data
 FROM glob(globs= SessionGlobs.Glob, accessor= Accessor)

 SELECT * FROM foreach(row={
 SELECT OSPath, Data, if(condition=AlsoUpload, then={
 SELECT upload(file=OSPath) AS Upload
 FROM glob(globs="*", root=OSPath, accessor= Accessor)
 }) AS Upload
 FROM hits
 WHERE log(message="Processing %v", args=OSPath)

 }, query={
 SELECT OSPath,
 Parsed.GUID AS GUID,
 Parsed.URL AS URL,
 Mapping
 FROM DumpSessionStorate(Data=Data)
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Applications.Office.Keywords</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.applications.office.keywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.applications.office.keywords/</guid><description>&lt;p>Microsoft Office documents among other document format (such as
LibraOffice) are actually stored in zip files. The zip file contain
the document encoded as XML in a number of zip members.&lt;/p>
&lt;p>This makes it difficult to search for keywords within office
documents because the ZIP files are typically compressed.&lt;/p>
&lt;p>This artifact searches for office documents by file extension and
glob then uses the zip filesystem accessor to launch a yara scan
again the uncompressed data of the document. Keywords are more
likely to match when scanning the decompressed XML data.&lt;/p>
&lt;p>The artifact returns a context around the keyword hit.&lt;/p>
&lt;p>NOTE: The InternalMtime column shows the creation time of the zip
member within the document which may represent when the document was
initially created.&lt;/p>
&lt;p>See
&lt;a href="https://en.wikipedia.org/wiki/List_of_Microsoft_Office_filename_extensions" target="_blank" >https://en.wikipedia.org/wiki/List_of_Microsoft_Office_filename_extensions&lt;/a>

&lt;a href="https://wiki.openoffice.org/wiki/Documentation/OOo3_User_Guides/Getting_Started/File_formats" target="_blank" >https://wiki.openoffice.org/wiki/Documentation/OOo3_User_Guides/Getting_Started/File_formats&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Applications.Office.Keywords
description: |
 Microsoft Office documents among other document format (such as
 LibraOffice) are actually stored in zip files. The zip file contain
 the document encoded as XML in a number of zip members.

 This makes it difficult to search for keywords within office
 documents because the ZIP files are typically compressed.

 This artifact searches for office documents by file extension and
 glob then uses the zip filesystem accessor to launch a yara scan
 again the uncompressed data of the document. Keywords are more
 likely to match when scanning the decompressed XML data.

 The artifact returns a context around the keyword hit.

 NOTE: The InternalMtime column shows the creation time of the zip
 member within the document which may represent when the document was
 initially created.

 See
 https://en.wikipedia.org/wiki/List_of_Microsoft_Office_filename_extensions
 https://wiki.openoffice.org/wiki/Documentation/OOo3_User_Guides/Getting_Started/File_formats

parameters:
 - name: documentGlobs
 default: /*.{docx,docm,dotx,dotm,docb,xlsx,xlsm,xltx,xltm,pptx,pptm,potx,potm,ppam,ppsx,ppsm,sldx,sldm,odt,ott,oth,odm}
 - name: searchGlob
 default: C:\Users\**
 - name: yaraRule
 type: yara
 default: |
 rule Hit {
 strings:
 $a = "secret" wide nocase
 $b = "secret" nocase

 condition:
 any of them
 }

sources:
 - query: |
 LET office_docs = SELECT OSPath AS OfficePath,
 Mtime as OfficeMtime,
 Size as OfficeSize
 FROM glob(globs=searchGlob + documentGlobs)

 // A list of zip members inside the doc that have some content.
 LET document_parts = SELECT OfficePath,
 OSPath AS ZipMemberPath
 FROM glob(
 globs="/**",
 root=pathspec(DelegatePath=OfficePath),
 accessor='zip')
 WHERE not IsDir and Size &amp;gt; 0

 // For each document, scan all its parts for the keyword.
 SELECT OfficePath,
 OfficeMtime,
 OfficeSize,
 File.ModTime as InternalMtime,
 String.HexData as HexContext,
 File.OSPath AS OSPath
 FROM foreach(
 row=office_docs,
 query={
 SELECT File, String, OfficePath,
 OfficeMtime, OfficeSize
 FROM yara(
 rules=yaraRule,
 files=document_parts.ZipMemberPath,
 context=200,
 accessor='zip')
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.CleanupTemp</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.cleanuptemp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.cleanuptemp/</guid><description>&lt;p>This artifact cleans up the temp folder in the Velociraptor client.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.CleanupTemp
description: |
 This artifact cleans up the temp folder in the Velociraptor client.

parameters:
 - name: TempGlob
 default: "%TEMP%/**"
 description: Glob to find all the files in the temp folder.
 - name: AgeSeconds
 default: 600
 type: int
 description: Any files older than this many seconds will be removed.
 - name: ReadllyDoIt
 type: bool


sources:
 - query: |
 LET Threshold &amp;lt;= timestamp(epoch=now() - AgeSeconds )
 SELECT OSPath, Size, Mtime,
 if(condition=ReadllyDoIt, then=rm(filename=OSPath)) AS Removed
 FROM glob(globs=expand(path=TempGlob))
 WHERE NOT IsDir AND Mtime &amp;lt; Threshold

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.DiskSpace</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.diskspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.diskspace/</guid><description>&lt;p>This artifact reports the amount of free disk space. It is designed
to work equally on all architectures:&lt;/p>
&lt;ol>
&lt;li>On Linux and MacOS we call &lt;code>df -h&lt;/code>.&lt;/li>
&lt;li>On Windows we use WMI&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.DiskSpace
description: |
 This artifact reports the amount of free disk space. It is designed
 to work equally on all architectures:

 1. On Linux and MacOS we call `df -h`.
 2. On Windows we use WMI

sources:
- query: |
 LET NonWindows = SELECT * FROM foreach(row={
 SELECT regex_replace(source=Stdout, re="( on| +)", replace=" ") AS Stdout
 FROM execve(argv=["df", "-h"], length=10000)
 }, query={
 SELECT * FROM parse_csv(accessor="data", filename=Stdout, separator=" ")
 })

 -- WMI returns these as strings, we need to convert to ints
 LET wmi_query = SELECT *,
 int(int=FreeSpace) AS FreeSpace,
 int(int=Size) AS Size
 FROM wmi(query="SELECT * FROM Win32_LogicalDisk")

 LET Windows = SELECT DeviceID, Description,
 VolumeName, VolumeSerialNumber,
 humanize(bytes=Size) AS Size,
 humanize(bytes=FreeSpace) AS FreeSpace,
 int(int=FreeSpace / Size * 100) AS `Free%`
 FROM wmi_query

 SELECT * FROM if(condition={
 SELECT OS FROM info() WHERE OS =~ "windows"
 },
 then={ SELECT * FROM Windows},
 else={ SELECT * FROM NonWindows})

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.DiskUsage</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.diskusage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.diskusage/</guid><description>&lt;p>This artifact reports the amount of space used by each directory
recursively (Similar to the &lt;code>du&lt;/code> command).&lt;/p>
&lt;p>Unlike the &lt;code>du&lt;/code> command, this artifact can filter only certain file
name patterns.&lt;/p>
&lt;p>If you change the &lt;code>TopLevelDirectory&lt;/code> to the drive letter
(e.g. &lt;code>C:\\&lt;/code>) it may take a while to complete as it will need to
examine every file on the drive.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.DiskUsage
description: |
 This artifact reports the amount of space used by each directory
 recursively (Similar to the `du` command).

 Unlike the `du` command, this artifact can filter only certain file
 name patterns.

 If you change the `TopLevelDirectory` to the drive letter
 (e.g. `C:\\`) it may take a while to complete as it will need to
 examine every file on the drive.

parameters:
 - name: TopLevelDirectory
 default: C:/Program Files
 description: The top level directory to start calculating disk usage.

 - name: FilenameGlob
 default: '*'
 description: A Glob expression for considering files

 - name: DirectoryGlob
 default: '*'
 description: A Glob expression for considering directories to recurse into.

sources:
 - query: |
 LET Res &amp;lt;= dict()

 LET _DirInfo(DirPath) = SELECT DirPath, Size, sum(item=Size) AS TotalSize
 FROM chain(a={
 SELECT Size FROM glob(globs=FilenameGlob, root=DirPath)
 WHERE NOT IsDir
 }, b={
 SELECT * FROM foreach(row={
 SELECT OSPath FROM glob(globs=DirectoryGlob, root=DirPath)
 WHERE IsDir
 },
 query={
 SELECT TotalSize AS Size FROM DirInfo(DirPath=OSPath)
 })
 })
 GROUP BY 1 -- Needed for sum()

 LET DirInfo(DirPath) = SELECT * FROM _DirInfo(DirPath=DirPath)
 WHERE set(item=Res, field=DirPath,
 value=dict(DirPath=DirPath, TotalSize=TotalSize))

 -- Recurse into the TopLevelDirectory and rely on the set()
 -- above to store the results.
 LET _ &amp;lt;= SELECT * FROM DirInfo(DirPath=TopLevelDirectory)

 SELECT *, humanize(bytes=TotalSize) AS TotalSizeHuman
 FROM foreach(row={
 SELECT * FROM items(item=Res)
 }, column="_value")
 ORDER BY TotalSize DESC

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.Info</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.info/</guid><description>&lt;p>Collect basic information about the client.&lt;/p>
&lt;p>This artifact is collected when any new client is enrolled into the
system. Velociraptor will watch for this artifact and populate its
internal indexes from this artifact as well.&lt;/p>
&lt;p>You can edit this artifact to enhance the client&amp;rsquo;s interrogation
information as required, by adding new sources.&lt;/p>
&lt;p>NOTE: Do not modify the BasicInformation source since it is used to
interrogate the clients.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.Info
description: |
 Collect basic information about the client.

 This artifact is collected when any new client is enrolled into the
 system. Velociraptor will watch for this artifact and populate its
 internal indexes from this artifact as well.

 You can edit this artifact to enhance the client's interrogation
 information as required, by adding new sources.

 NOTE: Do not modify the BasicInformation source since it is used to
 interrogate the clients.

sources:
 - name: BasicInformation
 description: |
 This source is used internally to populate agent info. Do not
 modify or remove this query.
 query: |
 LET Interfaces = SELECT HardwareAddrString AS MAC
 FROM interfaces()
 WHERE HardwareAddr

 SELECT config.Version.Name AS Name,
 config.Version.BuildTime as BuildTime,
 config.Version.Version as Version,
 config.Version.ci_build_url AS build_url,
 config.Version.install_time as install_time,
 config.Labels AS Labels,
 Hostname, OS, Architecture,
 Platform, PlatformVersion, KernelVersion, Fqdn,
 Interfaces.MAC AS MACAddresses
 FROM info()

 - name: DetailedInfo
 query: |
 LET Info = SELECT * FROM info()
 SELECT _key AS Param, _value AS Value FROM items(item=Info[0])

 - name: LinuxInfo
 description: Linux specific information about the host
 precondition: SELECT OS From info() where OS = 'linux'
 query: |
 SELECT if(condition=version(function='sysinfo') != NULL, then=sysinfo()) AS `Computer Info`,
 { SELECT Name, HardwareAddrString AS MACAddress,
 Up, PointToPoint,
 AddrsString AS IPAddresses
 FROM interfaces() WHERE HardwareAddr} AS `Network Info`
 FROM scope()

 - name: WindowsInfo
 description: Windows specific information about the host
 precondition: SELECT OS From info() where OS = 'windows'
 query: |
 LET DomainLookup &amp;lt;= dict(
 `0`='Standalone Workstation',
 `1`='Member Workstation',
 `2`='Standalone Server',
 `3`='Member Server',
 `4`='Backup Domain Controller',
 `5`='Primary Domain Controller')

 SELECT
 {
 SELECT DNSHostName, Name, Domain, TotalPhysicalMemory,
 get(item=DomainLookup,
 field=str(str=DomainRole), default="Unknown") AS DomainRole
 FROM wmi(
 query='SELECT * FROM win32_computersystem')
 } AS `Computer Info`,
 {
 SELECT Caption,
 join(array=IPAddress, sep=", ") AS IPAddresses,
 join(array=IPSubnet, sep=", ") AS IPSubnet,
 MACAddress,
 join(array=DefaultIPGateway, sep=", ") AS DefaultIPGateway,
 DNSHostName,
 join(array=DNSServerSearchOrder, sep=", ") AS DNSServerSearchOrder
 FROM wmi(
 query="SELECT * from Win32_NetworkAdapterConfiguration" )
 WHERE IPAddress
 } AS `Network Info`
 FROM scope()

 notebook:
 - type: vql_suggestion
 name: "Enumerate Domain Roles"
 template: |
 /*
 # Enumerate Domain Roles

 Search all clients' enrollment information for their domain roles.
 */
 --
 -- Remove the below comments to label Domain Controllers
 SELECT *--, label(client_id=client_id, labels="DomainController", op="set") AS Label
 FROM foreach(row={
 SELECT * FROM clients()
 }, query={
 SELECT
 `Computer Info`.Name AS Name, client_id,
 `Computer Info`.DomainRole AS DomainRole
 FROM source(client_id=client_id,
 flow_id=last_interrogate_flow_id,
 artifact="Generic.Client.Info/WindowsInfo")
 })
 -- WHERE DomainRole =~ "Controller"

 - name: Users
 precondition: SELECT OS From info() where OS = 'windows'
 query: |
 SELECT Name, Description, Mtime AS LastLogin
 FROM Artifact.Windows.Sys.Users()

reports:
 - type: CLIENT
 template: |
 {{ $client_info := Query "SELECT * FROM clients(client_id=ClientId) LIMIT 1" | Expand }}

 {{ $flow_id := Query "SELECT timestamp(epoch=active_time / 1000000) AS Timestamp FROM flows(client_id=ClientId, flow_id=FlowId)" | Expand }}

 # {{ Get $client_info "0.os_info.fqdn" }} ( {{ Get $client_info "0.client_id" }} ) @ {{ Get $flow_id "0.Timestamp" }}

 {{ Query "SELECT * FROM source(source='BasicInformation')" | Table }}

 # Memory and CPU footprint over the past 24 hours

 {{ define "resources" }}
 SELECT * FROM sample(
 n=4,
 query={
 SELECT Timestamp, rate(x=CPU, y=Timestamp) * 100 As CPUPercent,
 RSS / 1000000 AS MemoryUse
 FROM source(artifact="Generic.Client.Stats",
 client_id=ClientId,
 start_time=now() - 86400)
 WHERE CPUPercent &amp;gt;= 0
 })
 {{ end }}

 {{ define "computerinfo" }}
 LET X &amp;lt;= SELECT *
 FROM source(artifact='Generic.Client.Info/LinuxInfo')
 LIMIT 1

 SELECT humanize(bytes=TotalPhysicalMemory) AS TotalPhysicalMemory,
 humanize(bytes=TotalFreeMemory) AS TotalFreeMemory,
 humanize(bytes=TotalSharedMemory) AS TotalSharedMemory,
 humanize(bytes=TotalSwap) AS TotalSwap,
 humanize(bytes=FreeSwap) AS FreeSwap
 FROM foreach(row=X[0].`Computer Info`)
 {{ end }}

 &amp;lt;div&amp;gt;
 {{ Query "resources" | LineChart "xaxis_mode" "time" "RSS.yaxis" 2 }}
 &amp;lt;/div&amp;gt;

 {{ $windows_info := Query "SELECT * FROM source(source='WindowsInfo')" }}
 {{ if $windows_info | Expand }}
 # Windows agent information
 {{ $windows_info | Table }}
 {{ end }}

 {{ $linux_info := Query "LET X &amp;lt;= SELECT * FROM source(artifact='Generic.Client.Info/LinuxInfo') LIMIT 1 SELECT * FROM X" }}
 {{ if Query "SELECT * FROM source(artifact='Generic.Client.Info/LinuxInfo')" | Expand }}
 # Linux agent information

 ### Network Info
 {{ Query "SELECT * FROM foreach(row=X[0].`Network Info`)" | Table }}

 ### Computer Info
 {{ Query "computerinfo" | Table }}

 {{ end }}

 # Active Users
 {{ Query "SELECT * FROM source(source='Users')" | Table }}


column_types:
 - name: BuildTime
 type: timestamp
 - name: LastLogin
 type: timestamp

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.LocalLogs</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.locallogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.locallogs/</guid><description>&lt;p>Write client logs locally in an encrypted container. This helps when
we need to access what the client was doing in the past.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.LocalLogs
description: |
 Write client logs locally in an encrypted container. This helps when
 we need to access what the client was doing in the past.

type: CLIENT_EVENT

parameters:
- name: LocalFilename
 default: "%TEMP%/locallogs.log"
 description: The local filename that will be written (Env variables will be expanded).
- name: MaxRows
 type: int
 default: "100"
 description: Flush the file when we cache this many rows.
- name: MaxWait
 default: "60"
 type: int
 description: Flush the file at least every this many seconds.
- name: MaxSize
 default: "100000000"
 type: int
 description: Truncate the file once it reaches this length.
- name: AlsoForward
 type: bool
 description: |
 By default we do not forward any of the logs to the server but
 this allows logs to be forwarded as well as written locally.
- name: Component
 default: generic
 description: The log component to forward (default "generic")
 type: choices
 choices:
 - generic
 - client
 - frontend
 - gui
 - api

sources:
- query: |
 LET _ &amp;lt;= log(message="Writing local log to " + expand(path=LocalFilename))

 SELECT * FROM write_crypto_file(
 max_rows=MaxRows, max_wait=MaxWait, max_size=MaxSize,
 filename=expand(path=LocalFilename),
 query={
 SELECT timestamp(epoch=now()) AS Timestamp, *
 FROM logging(component=Component)
 })
 WHERE AlsoForward

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.LocalLogsRetrieve</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.locallogsretrieve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.locallogsretrieve/</guid><description>&lt;p>Retrives the locally written logs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.LocalLogsRetrieve
description: |
 Retrives the locally written logs.

type: CLIENT

parameters:
- name: LocalFilename
 default: "%TEMP%/locallogs.log"
 description: The local filename that will be retrieved (Env variables will be expanded).

sources:
- query: |
 SELECT upload(file=expand(path=LocalFilename)) AS Upload
 FROM scope()
 notebook:
 - type: vql
 name: Decrypt logs
 template: |
 /*
 # Retrieved local logs from endpoint
 */

 SELECT * FROM foreach(row={
 SELECT * FROM uploads(client_id=ClientId, flow_id=FlowId)
 }, query={
 SELECT * FROM read_crypto_file(filename=vfs_path, accessor="fs")
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.Profile</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.profile/</guid><description>&lt;p>This artifact collects profiling information about the running
client. This is useful when you notice a high CPU load in the client
and want to know why.&lt;/p>
&lt;p>The following options are most useful:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Goroutines: This shows the backtraces of all currently running
goroutines. It will generally show most of the code working in the
current running set of queries.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Heap: This shows all allocations currently in use and where they
are allocated from. This is useful if the client is taking too
much memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Profile: This takes a CPU profile of the running process for the
number of seconds specified in the Duration parameter. You can
read profiles using:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>go tool pprof -callgrind -output=profile.grind profile.bin
kcachegrind profile.grind
&lt;/code>&lt;/pre>
&lt;p>Note that this really only makes sense when another query is running
at the same time since this artifacts itself will not be doing very
much other than just measuring the state of the process.&lt;/p>
&lt;p>NOTE: As of 0.7.0 release, this artifact will also collect
goroutines and heap profiles as distinct sources in a more readable
way.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.Profile
description: |
 This artifact collects profiling information about the running
 client. This is useful when you notice a high CPU load in the client
 and want to know why.

 The following options are most useful:

 1. Goroutines: This shows the backtraces of all currently running
 goroutines. It will generally show most of the code working in the
 current running set of queries.

 2. Heap: This shows all allocations currently in use and where they
 are allocated from. This is useful if the client is taking too
 much memory.

 3. Profile: This takes a CPU profile of the running process for the
 number of seconds specified in the Duration parameter. You can
 read profiles using:

 ```
 go tool pprof -callgrind -output=profile.grind profile.bin
 kcachegrind profile.grind
 ```

 Note that this really only makes sense when another query is running
 at the same time since this artifacts itself will not be doing very
 much other than just measuring the state of the process.

 NOTE: As of 0.7.0 release, this artifact will also collect
 goroutines and heap profiles as distinct sources in a more readable
 way.

parameters:
 - name: Allocs
 description: A sampling of all past memory allocations
 type: bool
 default: Y
 - name: Block
 description: Stack traces that led to blocking on synchronization primitives
 type: bool
 - name: Goroutine
 description: Stack traces of all current goroutines
 type: bool
 default: Y
 - name: Heap
 description: A sampling of memory allocations of live objects
 type: bool
 - name: Mutex
 description: Stack traces of holders of contended mutexes
 type: bool
 - name: Profile
 description: CPU profile
 type: bool
 - name: Trace
 description: CPU trace
 type: bool
 - name: Logs
 description: Get logs
 type: bool
 - name: QueryLogs
 description: Get recent queries logs
 type: bool
 - name: Metrics
 description: Get client metrics
 type: bool
 - name: Verbose
 description: Print more detail
 type: bool
 - name: Duration
 description: Duration of sampling for Profile and Trace.
 default: "30"

export: |
 LET CleanUp(Name) = regex_replace(
 re="www.velocidex.com/golang/velociraptor/",
 replace="", source=Name)

sources:
 - query: |
 SELECT Type,
 if(condition=get(field="OSPath"),
 then=upload(name=Type + ".bin", file=OSPath)) AS File,
 get(member="Line") AS Line
 FROM profile(allocs=Allocs, block=Block, goroutine=Goroutine,
 heap=Heap, mutex=Mutex, profile=Profile, trace=Trace,
 logs=Logs, queries=QueryLogs, metrics=Metrics,
 debug=if(condition=Verbose, then=2, else=1),
 duration=atoi(string=Duration))

 - name: Goroutines
 query: |
 -- Only show our own code. This removed unnecessary library
 -- calls and cleans up the output.
 SELECT *, {
 SELECT format(format="%v (%v:%v)",
 args=[CleanUp(Name=Name), basename(path=File), Line])
 FROM CallStack
 WHERE File =~ 'velociraptor|vfilter|go-ntfs'
 LIMIT 10
 } AS CallStack
 FROM profile_goroutines()
 WHERE CallStack

 - name: Memory
 query: |
 SELECT InUseBytes, InUseObjects, {
 SELECT format(format="%v (%v:%v)",
 args=[CleanUp(Name=Name), basename(path=File), Line])
 FROM CallStack
 WHERE File =~ 'velociraptor|vfilter|go-ntfs'
 LIMIT 10
 } AS CallStack
 FROM profile_memory()
 ORDER BY InUseBytes DESC

 - name: Logs
 query: |
 SELECT * FROM profile(logs=TRUE)

 - name: RunningQueries
 query: |
 SELECT Line.Start AS Timestamp, Line.Query AS Query
 FROM profile(queries=TRUE)
 WHERE NOT Line.Duration

 - name: AllQueries
 query: |
 SELECT Line.Start AS Timestamp, int(int = Line.Duration / 1000000) AS DurationSec, Line.Query AS Query
 FROM profile(queries=TRUE)

 - name: Metrics
 query: |
 SELECT Line.name AS Name, Line.value as value
 FROM profile(metrics=TRUE)

column_types:
 - name: InUseBytes
 type: mb

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.Rekey</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.rekey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.rekey/</guid><description>&lt;p>This artifact forces the client to reinitialize it&amp;rsquo;s client id.&lt;/p>
&lt;p>It is normally not needed! You will want to use this artifact in
very specific situation, such as the Velociraptor service was
accidentally incorporated into a VM image with an existing write
back file. This will cause multiple systems to connect with the same
client id, and the server will reject clients with a HTTP 409
Rejected message.&lt;/p>
&lt;p>If this happens, you can use the Server.Monitor.ClientConflict
artifact to schedule this artifact automatically.&lt;/p>
&lt;p>The Wait parameter controls how long we wait before restarting the
client. Reduce this number if you need to rekey a lot of clients
quickly.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.Rekey
description: |
 This artifact forces the client to reinitialize it's client id.

 It is normally not needed! You will want to use this artifact in
 very specific situation, such as the Velociraptor service was
 accidentally incorporated into a VM image with an existing write
 back file. This will cause multiple systems to connect with the same
 client id, and the server will reject clients with a HTTP 409
 Rejected message.

 If this happens, you can use the Server.Monitor.ClientConflict
 artifact to schedule this artifact automatically.

 The Wait parameter controls how long we wait before restarting the
 client. Reduce this number if you need to rekey a lot of clients
 quickly.

required_permissions:
 - EXECVE

parameters:
 - name: Wait
 description: Wait this long before restarting the client.
 type: int
 default: '10'

sources:
 - query:
 SELECT rekey(wait=Wait) FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.Stats</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.stats/</guid><description>&lt;p>An Event artifact which generates client&amp;rsquo;s CPU and memory statistics.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.Stats
description: An Event artifact which generates client's CPU and memory statistics.
parameters:
 - name: Frequency
 description: Return stats every this many seconds.
 type: int
 default: "10"
type: CLIENT_EVENT

sources:
 - precondition: SELECT OS From info() where OS = 'windows'
 query: |
 SELECT *, rate(x=CPU, y=Timestamp) AS CPUPercent
 FROM foreach(
 row={
 SELECT UnixNano
 FROM clock(period=Frequency)
 },
 query={
 SELECT UnixNano / 1000000000 as Timestamp,
 User + System as CPU,
 Memory.WorkingSetSize as RSS
 FROM pslist(pid=getpid())
 })

 notebook:
 - type: vql_suggestion
 name: Graph CPU usage
 template: |
 /*
 # Events from Generic.Client.Stats
 */
 LET resources = SELECT Timestamp, rate(x=CPU, y=Timestamp) * 100 As CPUPercent,
 RSS / 1000000 AS MemoryUse
 FROM source(start_time=StartTime, end_time=EndTime)
 WHERE CPUPercent &amp;gt;= 0
 /*
 {{ Query "SELECT * FROM resources" | LineChart "xaxis_mode" "time" "RSS.yaxis" 2 }}
 */
 SELECT * FROM resources
 LIMIT 50

 - precondition: SELECT OS From info() where OS != 'windows'
 query: |
 SELECT *, rate(x=CPU, y=Timestamp) AS CPUPercent
 FROM foreach(
 row={
 SELECT UnixNano
 FROM clock(period=Frequency)
 },
 query={
 SELECT UnixNano / 1000000000 as Timestamp,
 Times.system + Times.user as CPU,
 MemoryInfo.RSS as RSS
 FROM pslist(pid=getpid())
 })


reports:
 - type: SERVER_EVENT
 template: |
 {{ define "resources" }}
 SELECT Timestamp, rate(x=CPU, y=Timestamp) * 100 As CPUPercent,
 RSS / 1000000 AS MemoryUse
 FROM source()
 WHERE CPUPercent &amp;gt;= 0
 {{ end }}

 {{ Query "resources" | LineChart "xaxis_mode" "time" "RSS.yaxis" 2 }}

 - type: MONITORING_DAILY
 template: |
 {{ define "resources" }}
 SELECT Timestamp, rate(x=CPU, y=Timestamp) * 100 As CPUPercent,
 RSS / 1000000 AS MemoryUse
 FROM source()
 WHERE CPUPercent &amp;gt;= 0
 {{ end }}

 {{ $client_info := Query "SELECT * FROM clients(client_id=ClientId) LIMIT 1" }}

 # Client Footprint for {{ Get $client_info "0.os_info.fqdn" }}

 The client has a client ID of {{ Get $client_info "0.client_id" }}.
 Clients report the Velociraptor process footprint to the
 server every 10 seconds. The data includes the total CPU
 utilization, and the resident memory size used by the client.

 The following graph shows the total utilization. Memory
 utilization is meausred in `Mb` while CPU Utilization is
 measured by `Percent of one core`.

 We would expect the client to use around 1-5% of one core when
 idle, but if a heavy hunt is running this might climb
 substantially.

 &amp;lt;div&amp;gt;
 {{ Query "resources" | LineChart "xaxis_mode" "time" "RSS.yaxis" 2 }}
 &amp;lt;/div&amp;gt;

 ## VQL Query

 The following VQL query was used to plot the graph above.

 ```sql
 {{ template "resources" }}
 ```

 &amp;gt; To learn about managing end point performance with Velociraptor see
 the [blog post](https://docs.velociraptor.velocidex.com/blog/html/2019/02/10/velociraptor_performance.html).

column_types:
 - name: Timestamp
 type: timestamp

 - name: ClientId
 type: client_id

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.Trace</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.trace/</guid><description>&lt;p>This artifact collects profiling information about the running
client. The artifact is automatically added when the GUI selects a
non zero Trace frequency.&lt;/p>
&lt;p>NOTE: You can also add the artifact directly, but then you will need
to cancel the collection manually since it will continue to run
until the timeout is reached.&lt;/p>
&lt;p>Minimum Version: 0.6.8&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.Trace
description: |
 This artifact collects profiling information about the running
 client. The artifact is automatically added when the GUI selects a
 non zero Trace frequency.

 NOTE: You can also add the artifact directly, but then you will need
 to cancel the collection manually since it will continue to run
 until the timeout is reached.

 Minimum Version: 0.6.8

parameters:
- name: FrequencySec
 type: int
 default: 10

sources:
- query: |
 SELECT * FROM if(condition=version(function="trace"),
 then={
 SELECT trace() AS TraceFile
 FROM clock(start=0, period=FrequencySec)
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Client.VQL</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.client.vql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.client.vql/</guid><description>&lt;p>Run arbitrary VQL on the endpoint.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Client.VQL
description: |
 Run arbitrary VQL on the endpoint.

required_permissions:
 - EXECVE

parameters:
 - name: Command
 default: SELECT * FROM info()

sources:
 - query: |
 SELECT * FROM query(query=Command, env=dict(config=config))

&lt;/code>&lt;/pre></description></item><item><title>Generic.Collectors.File</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.collectors.file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.collectors.file/</guid><description>&lt;p>Collects files using a set of globs. All globs must be on the same
device. The globs will be searched in one pass - so you can provide
many globs at the same time.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Collectors.File
description: |
 Collects files using a set of globs. All globs must be on the same
 device. The globs will be searched in one pass - so you can provide
 many globs at the same time.

aliases:
 - Windows.Collectors.File

parameters:
 - name: collectionSpec
 description: |
 A CSV file with a Glob column with all the globs to collect.
 NOTE: Globs must not have a leading device.
 type: csv
 default: |
 Glob
 Users\*\NTUser.dat

 - name: Root
 description: |
 On Windows, this is the device to apply all the glob on
 (e.g. `C:`). On *NIX, this should be a path to a subdirectory or
 /.
 default: "C:"

 - name: Accessor
 default: auto
 description: |
 On Windows, this can be changed to `ntfs`.

 - name: NTFS_CACHE_TIME
 type: int
 description: How often to flush the NTFS cache. (Default is never).
 default: "1000000"


sources:
 - name: All Matches Metadata
 query: |
 LET RootPath &amp;lt;= pathspec(Path=Root, accessor=Accessor)

 -- Generate the collection globs for each device
 LET specs = SELECT RootPath + Glob AS Glob
 FROM collectionSpec
 WHERE log(message=format(
 format="Processing Device %v with %v: glob is %v",
 args=[Root, Accessor, Glob]))

 -- Join all the collection rules into a single Glob plugin. This ensure we
 -- only make one pass over the filesystem. We only want LFNs.
 LET hits = SELECT OSPath AS SourceFile, Size,
 Btime AS Created,
 Ctime AS Changed,
 Mtime AS Modified,
 Atime AS LastAccessed
 FROM glob(globs=specs.Glob, accessor=Accessor)
 WHERE NOT IsDir AND log(message="Found " + SourceFile)

 -- Pass all the results to the next query. This will serialize
 -- to disk if there are too many results.
 LET all_results &amp;lt;=
 SELECT Created, Changed, LastAccessed, Modified, Size, SourceFile
 FROM hits

 SELECT * FROM all_results

 - name: Uploads
 query: |
 -- Upload the files
 LET uploaded_files = SELECT * FROM foreach(row={
 SELECT * FROM all_results
 },
 workers=30,
 query={
 SELECT Created, Changed, LastAccessed, Modified, SourceFile, Size,
 upload(file=SourceFile,
 accessor=Accessor,
 mtime=Modified) AS Upload
 FROM scope()
 })

 -- Separate the hashes into their own column.
 SELECT now() AS CopiedOnTimestamp, SourceFile,
 Upload.Path AS DestinationFile,
 Size AS FileSize, Upload.sha256 AS SourceFileSha256,
 Created, Changed, Modified, LastAccessed
 FROM uploaded_files

&lt;/code>&lt;/pre></description></item><item><title>Generic.Collectors.SQLECmd</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.collectors.sqlecmd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.collectors.sqlecmd/</guid><description>&lt;p>Many applications maintain internal state using SQLite
databases. The SQLECmd project is an open source resource for known
applications and the type of forensic information we can recover.&lt;/p>
&lt;h2 id="notes">NOTES&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>This artifact is automatically generated from the SQLECmd project&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This artifact uses the SQLite library, since the library does not
support accurate CPU limits, this artifact can use a lot of CPU
despite a CPU limit specified.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Locked or in use SQLite files will be copied to a tempfile and
then queried.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If UseFilenames is enabled we only look at known
filenames. Disabling it will try to identify all sqlite files
within the search glob. This is slower but may find more
potential files (e.g. renamed).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Collectors.SQLECmd
description: |
 Many applications maintain internal state using SQLite
 databases. The SQLECmd project is an open source resource for known
 applications and the type of forensic information we can recover.

 ## NOTES

 1. This artifact is automatically generated from the SQLECmd project
 2. This artifact uses the SQLite library, since the library does not
 support accurate CPU limits, this artifact can use a lot of CPU
 despite a CPU limit specified.
 3. Locked or in use SQLite files will be copied to a tempfile and
 then queried.

 4. If UseFilenames is enabled we only look at known
 filenames. Disabling it will try to identify all sqlite files
 within the search glob. This is slower but may find more
 potential files (e.g. renamed).

reference:
 - https://github.com/EricZimmerman/SQLECmd

export: |
 LET Identify(Query, FileType, OSPath, IdentifyValue) = SELECT {
 SELECT *
 FROM sqlite(file=OSPath, query=Query)
 } AS Hits
 FROM scope()
 WHERE Hits = IdentifyValue
 AND log(message="%v was identified as %v", args=[OSPath, FileType])

 LET ApplyFile(IdentifyQuery, FileType, SQLQuery, IdentifyValue) = SELECT *
 FROM foreach(row=SQLiteFiles,
 query={
 SELECT * FROM if(
 condition=Identify(Query=IdentifyQuery, FileType=FileType,
 OSPath=OSPath, IdentifyValue=IdentifyValue),
 then={
 SELECT *, OSPath FROM sqlite(file=OSPath, query=SQLQuery)
 })
 })

parameters:
- name: GlobExpr
 description: A glob to search for SQLite files.
 type: csv
 default: |
 Name,Glob
 "Bitdefender:Bitdefender Endpoint Security Logs","C:\ProgramData\Bitdefender\Endpoint Security\Logs/**10"
 "Bitdefender:Bitdefender Internet Security Logs","C:\ProgramData\Bitdefender\Desktop\Profiles\Logs/**10"
 "Chrome:Chrome bookmarks","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Bookmarks*"
 "Chrome:Chrome Cookies","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Cookies*"
 "Chrome:Chrome Current Session","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Current Session"
 "Chrome:Chrome Current Tabs","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Current Tabs"
 "Chrome:Chrome Download Metadata","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/DownloadMetadata"
 "Chrome:Chrome Extension Cookies","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Extension Cookies"
 "Chrome:Chrome Favicons","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Favicons*"
 "Chrome:Chrome History","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/History*"
 "Chrome:Chrome Last Session","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Last Session"
 "Chrome:Chrome Last Tabs","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Last Tabs"
 "Chrome:Chrome Sessions Folder","C:\Users\*\AppData\Local\Google\Chrome\User Data\*\Sessions/**10"
 "Chrome:Chrome Login Data","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Login Data"
 "Chrome:Chrome Media History","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Media History*"
 "Chrome:Chrome Network Action Predictor","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Network Action Predictor"
 "Chrome:Chrome Network Persistent State","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Network Persistent State"
 "Chrome:Chrome Preferences","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Preferences"
 "Chrome:Chrome Quota Manager","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/QuotaManager"
 "Chrome:Chrome Reporting and NEL","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Reporting and NEL"
 "Chrome:Chrome Shortcuts","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Shortcuts*"
 "Chrome:Chrome Top Sites","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Top Sites*"
 "Chrome:Chrome Trust Tokens","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Trust Tokens*"
 "Chrome:Chrome SyncData Database","C:\Users\*\AppData\Local\Google\Chrome\User Data\*\Sync Data/**10/SyncData.sqlite3"
 "Chrome:Chrome Visited Links","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Visited Links"
 "Chrome:Chrome Web Data","C:\Users\*\AppData\Local\Google\Chrome\User Data\*/**10/Web Data*"
 "Chrome:Windows Protect Folder","C:\Users\*\AppData\Roaming\Microsoft\Protect\*/**10"
 "Cylance:Cylance ProgramData Logs","C:\ProgramData\Cylance\Desktop/**10"
 "Cylance:Cylance Optics Logs","C:\ProgramData\Cylance\Optics\Log/**10"
 "Cylance:Cylance Program Files Logs","C:\Program Files\Cylance\Desktop\log/**10"
 "Firefox:Addons","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/addons.sqlite*"
 "Firefox:Bookmarks","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\weave/**10/bookmarks.sqlite*"
 "Firefox:Cookies","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/cookies.sqlite*"
 "Firefox:Downloads","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/downloads.sqlite*"
 "Firefox:Extensions","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/extensions.json"
 "Firefox:Favicons","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/favicons.sqlite*"
 "Firefox:Form history","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/formhistory.sqlite*"
 "Firefox:Permissions","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/permissions.sqlite*"
 "Firefox:Places","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/places.sqlite*"
 "Firefox:Protections","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/protections.sqlite*"
 "Firefox:Search","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/search.sqlite*"
 "Firefox:Signons","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/signons.sqlite*"
 "Firefox:Storage Sync","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/storage-sync.sqlite*"
 "Firefox:Webappstore","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/webappstore.sqlite*"
 "Firefox:Password","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/key*.db"
 "Firefox:Preferences","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/prefs.js"
 "Firefox:Sessionstore","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*/**10/sessionstore*"
 "Firefox:Sessionstore Folder","C:\Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\sessionstore-backups/**10"
 "MicrosoftStickyNotes:Microsoft Sticky Notes - Windows 7, 8, and 10 version 1511 and earlier","C:\Users\*\AppData\Roaming\Microsoft\StickyNotes/**10/StickyNotes.snt"
 "MicrosoftStickyNotes:Microsoft Sticky Notes - 1607 and later","C:\Users\*\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes*\LocalState/**10/plum.sqlite*"
 "TeraCopy:TeraCopy","C:\Users\*\AppData\Roaming\TeraCopy/**10"
 "WindowsNotificationsDB:Windows 10 Notification DB","C:\Users\*\AppData\Local\Microsoft\Windows\Notifications/**10/wpndatabase.db"
 "WindowsOSUpgradeArtifacts:Update Store.db","C:\ProgramData\USOPrivate\UpdateStore/**10/store.db"
 "WindowsYourPhone:Windows Your Phone - All Databases","C:\Users\*\AppData\Local\Packages\Microsoft.YourPhone_8wekyb3d8bbwe\LocalCache\Indexed/**10"
 "pCloudDatabase:pCloud Database","C:\Users\*\AppData\Local\pCloud/**10/*.db"
 "pCloudDatabase:pCloud Database WAL File","C:\Users\*\AppData\Local\pCloud/**10/*.db-wal"
 "pCloudDatabase:pCloud Database Shared Memory File","C:\Users\*\AppData\Local\pCloud/**10/*.db-shm"
 "Chrome:Chrome bookmarks","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Bookmarks*"
 "Chrome:Chrome Cookies","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Cookies*"
 "Chrome:Chrome Current Session","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Current Session"
 "Chrome:Chrome Current Tabs","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Current Tabs"
 "Chrome:Chrome Download Metadata","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/DownloadMetadata"
 "Chrome:Chrome Extension Cookies","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Extension Cookies"
 "Chrome:Chrome Favicons","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Favicons*"
 "Chrome:Chrome History","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/History*"
 "Chrome:Chrome Last Session","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Last Session"
 "Chrome:Chrome Last Tabs","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Last Tabs"
 "Chrome:Chrome Sessions Folder","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/Sessions/**10"
 "Chrome:Chrome Login Data","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Login Data"
 "Chrome:Chrome Media History","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Media History*"
 "Chrome:Chrome Network Action Predictor","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Network Action Predictor"
 "Chrome:Chrome Network Persistent State","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Network Persistent State"
 "Chrome:Chrome Preferences","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Preferences"
 "Chrome:Chrome Quota Manager","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/QuotaManager"
 "Chrome:Chrome Reporting and NEL","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Reporting and NEL"
 "Chrome:Chrome Shortcuts","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Shortcuts*"
 "Chrome:Chrome Top Sites","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Top Sites*"
 "Chrome:Chrome Trust Tokens","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Trust Tokens*"
 "Chrome:Chrome SyncData Database","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/SyncData.sqlite3"
 "Chrome:Chrome Visited Links","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Visited Links"
 "Chrome:Chrome Web Data","/Users/*/Library/Application Support/{BraveSoftware/Brave,Google/Chrome,Microsoft Edge}/**10/Web Data*"
 "Firefox:Addons","/Users/*/Library/Application Support/Firefox/Profiles/**10/addons.sqlite*"
 "Firefox:Bookmarks","/Users/*/Library/Application Support/Firefox/Profiles/**10/bookmarks.sqlite*"
 "Firefox:Cookies","/Users/*/Library/Application Support/Firefox/Profiles/**10/cookies.sqlite*"
 "Firefox:Downloads","/Users/*/Library/Application Support/Firefox/Profiles/**10/downloads.sqlite*"
 "Firefox:Extensions","/Users/*/Library/Application Support/Firefox/Profiles/**10/extensions.json"
 "Firefox:Favicons","/Users/*/Library/Application Support/Firefox/Profiles/**10/favicons.sqlite*"
 "Firefox:Form history","/Users/*/Library/Application Support/Firefox/Profiles/**10/formhistory.sqlite*"
 "Firefox:Permissions","/Users/*/Library/Application Support/Firefox/Profiles/**10/permissions.sqlite*"
 "Firefox:Places","/Users/*/Library/Application Support/Firefox/Profiles/**10/places.sqlite*"
 "Firefox:Protections","/Users/*/Library/Application Support/Firefox/Profiles/**10/protections.sqlite*"
 "Firefox:Search","/Users/*/Library/Application Support/Firefox/Profiles/**10/search.sqlite*"
 "Firefox:Signons","/Users/*/Library/Application Support/Firefox/Profiles/**10/signons.sqlite*"
 "Firefox:Storage Sync","/Users/*/Library/Application Support/Firefox/Profiles/**10/storage-sync.sqlite*"
 "Firefox:Webappstore","/Users/*/Library/Application Support/Firefox/Profiles/**10/webappstore.sqlite*"
 "Firefox:Password","/Users/*/Library/Application Support/Firefox/Profiles/**10/key*.db"
 "Firefox:Preferences","/Users/*/Library/Application Support/Firefox/Profiles/**10/prefs.js"
 "Firefox:Sessionstore","/Users/*/Library/Application Support/Firefox/Profiles/**10/sessionstore*"
 "Firefox:Sessionstore Folder","/Users/*/Library/Application Support/Firefox/Profiles/sessionstore-backups/**10"
 "Chrome:Chrome Current Session","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Current Session"
 "Chrome:Chrome Current Tabs","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Current Tabs"
 "Chrome:Chrome Download Metadata","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/DownloadMetadata"
 "Chrome:Chrome Extension Cookies","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Extension Cookies"
 "Chrome:Chrome Favicons","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Favicons*"
 "Chrome:Chrome History","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/History*"
 "Chrome:Chrome Last Session","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Last Session"
 "Chrome:Chrome Last Tabs","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Last Tabs"
 "Chrome:Chrome Sessions Folder","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/Sessions/**10"
 "Chrome:Chrome Login Data","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Login Data"
 "Chrome:Chrome Media History","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Media History*"
 "Chrome:Chrome Network Action Predictor","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Network Action Predictor"
 "Chrome:Chrome Network Persistent State","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Network Persistent State"
 "Chrome:Chrome Preferences","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Preferences"
 "Chrome:Chrome Quota Manager","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/QuotaManager"
 "Chrome:Chrome Reporting and NEL","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Reporting and NEL"
 "Chrome:Chrome Shortcuts","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Shortcuts*"
 "Chrome:Chrome Top Sites","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Top Sites*"
 "Chrome:Chrome Trust Tokens","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Trust Tokens*"
 "Chrome:Chrome SyncData Database","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/SyncData.sqlite3"
 "Chrome:Chrome Visited Links","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Visited Links"
 "Chrome:Chrome Web Data","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/Web Data*"
 "Firefox:Addons","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/addons.sqlite*"
 "Firefox:Bookmarks","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/bookmarks.sqlite*"
 "Firefox:Cookies","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/cookies.sqlite*"
 "Firefox:Downloads","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/downloads.sqlite*"
 "Firefox:Extensions","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/extensions.json"
 "Firefox:Favicons","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/favicons.sqlite*"
 "Firefox:Form history","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/formhistory.sqlite*"
 "Firefox:Permissions","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/permissions.sqlite*"
 "Firefox:Places","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/places.sqlite*"
 "Firefox:Protections","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/protections.sqlite*"
 "Firefox:Search","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/search.sqlite*"
 "Firefox:Signons","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/signons.sqlite*"
 "Firefox:Storage Sync","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/storage-sync.sqlite*"
 "Firefox:Webappstore","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/webappstore.sqlite*"
 "Firefox:Password","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/key*.db"
 "Firefox:Preferences","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/prefs.js"
 "Firefox:Sessionstore","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/**10/sessionstore*"
 "Firefox:Sessionstore Folder","/home/*/.config/{google-chrome,chrome-remote-desktop/chrome-profile,chromium}/sessionstore-backups/**10"
- name: Accessor
 default: auto
- name: UseFilenames
 default: Y
 type: bool
 description: When set use filenames to optimize identification of files.
- name: AlsoUpload
 description: Also upload the raw sqlite files
 type: bool

sources:
- query: |
 LET AllFilenamesRegex &amp;lt;= '''^(CarsDB.db|Contacts.db|random.sqlite|ActivitiesCache.db|Antiphishing.db|RansomwareRecover.db|cache.db|es.db|Web Data|Web Data|Cookies|History|Favicons|History|History|Web Data|Media History|Media History|Network Action Predictor|Shortcuts|Top Sites|chp.db|aggregation.dbx|config.db|filecache.db|icon.db|instance.dbx|home.db|home.db|home.db|home.db|sync_history.db|tray-thumbnails.db|WebAssistDatabase|EventTranscript.db|EventTranscript.db|queue.sqlite3|places.sqlite|cookies.sqlite|downloads.sqlite|places.sqlite|favicons.sqlite|formhistory.sqlite|places.sqlite|random.db|cloud_graph.db|snapshot.db|sync_config.db|metadata_sqlite_db|plum.sqlite|nessusd.db|MediaDb.v1.sqlite|Windows.db|Windows-gather.db|random.db|main.db|wpndatabase.db|wpndatabase.db|Store.db|contacts.db|Notifications.db|Phone.db|photos.db|settings.db|accounts4.db|callhistory.storedata)$'''
 LET SQLiteFiles &amp;lt;=
 SELECT OSPath,
 read_file(filename=OSPath, length=15, accessor=Accessor) AS Magic,
 if(condition=AlsoUpload,
 then=upload(file=OSPath,
 mtime=Mtime,
 atime=Atime,
 ctime=Ctime,
 btime=Btime)) AS Upload
 FROM glob(globs=GlobExpr.Glob, accessor=Accessor)
 WHERE NOT IsDir
 AND if(condition=UseFilenames, then=Name =~ AllFilenamesRegex, else=TRUE)
 AND Magic =~ "SQLite format 3"

 SELECT * FROM SQLiteFiles

- name: 4K Video Downloader
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='media_item_description' OR name='url_description' OR name='media_info' OR name='audio_info' OR name='video_info' OR name='url_description');'''
 LET IdentifyValue = 6
 LET SQLQuery = '''SELECT
 audio_info.id AS ID,
 url_description.service_name AS ServiceName,
 media_item_description.title AS Title,
 url_description.url AS URL,
 download_item.filename AS Filename,
 media_item_description.duration / 1000 / 60 AS 'Duration (Minutes)',
 audio_info.bitrate / 1000 AS 'Bitrate (kbps)',
 CASE
 
 WHEN video_info.video_360 = 0 THEN
 'No'
 WHEN video_info.video_360 = 1 THEN
 'Yes'
 END AS Video360,
 CASE
 
 WHEN video_info.hdr = 0 THEN
 'No'
 WHEN video_info.hdr = 1 THEN
 'Yes'
 END AS VideoHDR
 FROM
 download_item
 LEFT JOIN media_item_description ON download_item.id = media_item_description.id
 LEFT JOIN url_description ON media_item_description.id = url_description.id
 NATURAL LEFT JOIN media_info
 LEFT JOIN audio_info ON download_item.id = audio_info.id
 LEFT JOIN video_info ON media_info.id = video_info.id
 AND url_description.id = video_info.id
 ORDER BY
 ID ASC'''
 LET FileType = '''4K Video Downloader'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Activity Package Id
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Activity' OR name='Activity_PackageId' OR name='ActivityOperation');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''Select substr(hex(ActivityId), 1, 8)
 || '-' || substr(hex(ActivityId), 9, 4)
 || '-' || substr(hex(ActivityId), 13, 4)
 || '-' || substr(hex(ActivityId), 17, 4)
 || '-' || substr(hex(ActivityId), 21, 12) as ActivityId,Platform,PackageName,
 datetime(ExpirationTime,'unixepoch','localtime') as ExpirationTime from Activity_PackageId'''
 LET FileType = '''Activity Package Id'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Activity Operation
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Activity' OR name='Activity_PackageId' OR name='ActivityOperation');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''Select OperationOrder,AppId,ActivityType,
 datetime(LastModifiedTime,'unixepoch','localtime') as LastModifiedTime,
 datetime(ExpirationTime,'unixepoch','localtime') as ExpirationTime,
 datetime(CreatedTime,'unixepoch','localtime') as CreatedTime,
 datetime(EndTime,'unixepoch','localtime') as EndTime,
 datetime(LastModifiedOnClient,'unixepoch','localtime') as LastModifiedOnClient,PlatformDeviceId from ActivityOperation;'''
 LET FileType = '''Activity Operation'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Activity
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Activity' OR name='Activity_PackageId' OR name='ActivityOperation');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''Select substr(hex(Id), 1, 8)
 || '-' || substr(hex(Id), 9, 4)
 || '-' || substr(hex(Id), 13, 4)
 || '-' || substr(hex(Id), 17, 4)
 || '-' || substr(hex(Id), 21, 12) as Id,payload,
 datetime(LastModifiedTime,'unixepoch','localtime') as LastModifiedTime,
 datetime(ExpirationTime,'unixepoch','localtime') as ExpirationTime,
 datetime(CreatedInCloud,'unixepoch','localtime') as CreatedInCloud,
 datetime(StartTime,'unixepoch','localtime') as StartTime,datetime(EndTime,'unixepoch','localtime') as EndTime,
 datetime(LastModifiedOnClient,'unixepoch','localtime') as LastModifiedOnClient,
 datetime(OriginalLastModifiedOnClient,'unixepoch','localtime') as OriginalLastModifiedOnClient,
 ActivityType,IsLocalOnly,ETag,PackageIdHash,PlatformDeviceId from Activity'''
 LET FileType = '''Activity'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Bitdefender Antiphishing DB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='aph_cache');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 url AS URL,
 result AS Result,
 datetime( expire / 1000, 'unixepoch', 'localtime' ) AS ExpireTime
 FROM
 aph_cache
 ORDER BY
 ExpireTime ASC;'''
 LET FileType = '''Bitdefender Antiphishing DB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Bitdefender es DB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='es_cache');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 url AS URL,
 md5 AS MD5,
 content_size AS ContentSizeBytes,
 datetime( expire / 1000, 'unixepoch', 'localtime' ) AS ExpireTime
 FROM
 es_cache
 ORDER BY
 ExpireTime ASC;'''
 LET FileType = '''Bitdefender es DB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Bitdefender cache DB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='entries');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 quarId AS QuarantineID,
 path AS FilePath,
 threat AS Threat,
 size AS Size,
 datetime( quartime, 'unixepoch', 'localtime' ) AS QuarantineTime,
 datetime( acctime, 'unixepoch', 'localtime' ) AS LastAccessedTime,
 datetime( modtime, 'unixepoch', 'localtime' ) AS LastModifiedTime,
 usersid AS UserSID
 FROM
 entries
 ORDER BY
 QuarantineTime ASC;'''
 LET FileType = '''Bitdefender cache DB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Bitdefender RansomwareRecover DB Files
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='files' OR name='packs');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 files.packid AS PackID,
 files.path AS Path,
 files.restored AS Restored,
 files.restored_path AS RestoredPath,
 files.extern_itemid AS ExternItemID,
 files.extern_groupid AS ExternGroupID,
 packs.process AS Process,
 packs.restore_attempt_count AS RestoreAttemptCount,
 datetime( files.insert_time / 1000, 'unixepoch', 'localtime' ) AS InsertTime,
 datetime( files.last_operation_time / 1000, 'unixepoch', 'localtime' ) AS LastOperationTime
 FROM
 files INNER JOIN packs ON files.packid = packs.uuid
 ORDER BY
 LastOperationTime ASC;'''
 LET FileType = '''Bitdefender RansomwareRecover DB Files'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Autofill Entries
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='autofill' OR name='credit_cards' OR name='offer_data' OR name='server_addresses' OR name='keywords');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 autofill.name AS Name,
 autofill.value AS Value,
 autofill.value_lower AS ValueLowercase,
 datetime( "date_created", 'unixepoch' ) AS DateCreated,
 datetime( "date_last_used", 'unixepoch' ) AS LastUsed,
 autofill.count AS Count
 FROM
 autofill
 ORDER BY
 autofill.name ASC'''
 LET FileType = '''Chromium Browser Autofill Entries'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Autofill Profiles
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='autofill' OR name='credit_cards' OR name='offer_data' OR name='server_addresses' OR name='keywords');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 autofill_profiles.guid AS GUID,
 datetime( "date_modified", 'unixepoch' ) AS DateModified,
 datetime( "use_date", 'unixepoch' ) AS UseDate,
 autofill_profile_names.first_name AS FirstName,
 autofill_profile_names.middle_name AS MiddleName,
 autofill_profile_names.last_name AS LastName,
 autofill_profile_emails.email as EmailAddress,
 autofill_profile_phones.number AS PhoneNumber,
 autofill_profiles.company_name AS CompanyName,
 autofill_profiles.street_address AS StreetAddress,
 autofill_profiles.city AS City,
 autofill_profiles.state AS State,
 autofill_profiles.zipcode AS ZipCode,
 autofill_profiles.use_count AS UseCount
 FROM
 autofill_profiles
 INNER JOIN autofill_profile_emails ON autofill_profile_emails.guid = autofill_profiles.guid
 INNER JOIN autofill_profile_phones ON autofill_profiles.guid = autofill_profile_phones.guid
 INNER JOIN autofill_profile_names ON autofill_profile_phones.guid = autofill_profile_names.guid
 ORDER BY
 autofill_profiles.guid ASC'''
 LET FileType = '''Chromium Browser Autofill Profiles'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Cookies
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cookies' OR name='meta');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 datetime ( cookies.creation_utc / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS CreationUTC,
 datetime ( cookies.expires_utc / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS ExpiresUTC,
 datetime ( cookies.last_access_utc / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastAccessUTC,
 cookies.host_key AS HostKey,
 cookies.name AS Name,
 cookies.path AS Path,
 CASE
 
 WHEN cookies.is_secure = 1 THEN
 'Yes'
 WHEN cookies.is_secure = 0 THEN
 'No'
 END AS IsSecure,
 CASE
 
 WHEN cookies.is_httponly = 1 THEN
 'Yes'
 WHEN cookies.is_httponly = 0 THEN
 'No'
 END AS IsHttpOnly,
 CASE
 
 WHEN cookies.has_expires = 1 THEN
 'Yes'
 WHEN cookies.has_expires = 0 THEN
 'No'
 END AS HasExpiration,
 CASE
 
 WHEN cookies.is_persistent = 1 THEN
 'Yes'
 WHEN cookies.is_persistent = 0 THEN
 'No'
 END AS IsPersistent,
 cookies.priority AS Priority,
 cookies.source_port AS SourcePort
 FROM
 cookies
 ORDER BY
 cookies.creation_utc ASC'''
 LET FileType = '''Chromium Browser Cookies'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Downloads
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='urls' OR name='visits' OR name='downloads' OR name='segments' OR name='keyword_search_terms');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 downloads.id AS ID,
 downloads.guid AS GUID,
 downloads.current_path AS CurrentPath,
 downloads.target_path AS TargetPath,
 downloads.original_mime_type AS OriginalMIMEType,
 downloads.received_bytes AS ReceivedBytes,
 downloads.total_bytes AS TotalBytes,
 datetime( downloads.start_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS StartTime,
 datetime( downloads.end_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS EndTime,
 datetime( downloads.opened / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS Opened,
 datetime( downloads.last_access_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastAccessTime,
 downloads.last_modified AS LastModified,
 CASE
 
 WHEN downloads.state = 0 THEN
 'In Progress'
 WHEN downloads.state = 1 THEN
 'Complete'
 WHEN downloads.state = 2 THEN
 'Cancelled'
 WHEN downloads.state = 3 THEN
 'Interrupted'
 WHEN downloads.state = 4 THEN
 'Interrupted'
 END AS State,
 CASE
 
 WHEN downloads.danger_type = 0 THEN
 'Not Dangerous'
 WHEN downloads.danger_type = 1 THEN
 'Dangerous'
 WHEN downloads.danger_type = 2 THEN
 'Dangerous URL'
 WHEN downloads.danger_type = 3 THEN
 'Dangerous Content'
 WHEN downloads.danger_type = 4 THEN
 'Content May Be Malicious'
 WHEN downloads.danger_type = 5 THEN
 'Uncommon Content'
 WHEN downloads.danger_type = 6 THEN
 'Dangerous But User Validated'
 WHEN downloads.danger_type = 7 THEN
 'Dangerous Host'
 WHEN downloads.danger_type = 8 THEN
 'Potentially Unwanted'
 WHEN downloads.danger_type = 9 THEN
 'Whitelisted by Policy'
 END AS DangerType,
 CASE
 
 WHEN downloads.interrupt_reason = 0 THEN
 'No Interrupt'
 WHEN downloads.interrupt_reason = 1 THEN
 'File Error'
 WHEN downloads.interrupt_reason = 2 THEN
 'Access Denied'
 WHEN downloads.interrupt_reason = 3 THEN
 'Disk Full'
 WHEN downloads.interrupt_reason = 5 THEN
 'Path Too Long'
 WHEN downloads.interrupt_reason = 6 THEN
 'File Too Large'
 WHEN downloads.interrupt_reason = 7 THEN
 'Virus'
 WHEN downloads.interrupt_reason = 10 THEN
 'Temporary Problem'
 WHEN downloads.interrupt_reason = 11 THEN
 'Blocked'
 WHEN downloads.interrupt_reason = 12 THEN
 'Security Check Failed'
 WHEN downloads.interrupt_reason = 13 THEN
 'Resume Error'
 WHEN downloads.interrupt_reason = 20 THEN
 'Network Error'
 WHEN downloads.interrupt_reason = 21 THEN
 'Operation Timed Out'
 WHEN downloads.interrupt_reason = 22 THEN
 'Connection Lost'
 WHEN downloads.interrupt_reason = 23 THEN
 'Server Down'
 WHEN downloads.interrupt_reason = 30 THEN
 'Server Error'
 WHEN downloads.interrupt_reason = 31 THEN
 'Range Request Error'
 WHEN downloads.interrupt_reason = 32 THEN
 'Server Precondition Error'
 WHEN downloads.interrupt_reason = 33 THEN
 'Unable to get file'
 WHEN downloads.interrupt_reason = 34 THEN
 'Server Unauthorized'
 WHEN downloads.interrupt_reason = 35 THEN
 'Server Certificate Problem'
 WHEN downloads.interrupt_reason = 36 THEN
 'Server Access Forbidden'
 WHEN downloads.interrupt_reason = 37 THEN
 'Server Unreachable'
 WHEN downloads.interrupt_reason = 38 THEN
 'Content Length Mismatch'
 WHEN downloads.interrupt_reason = 39 THEN
 'Cross Origin Redirect'
 WHEN downloads.interrupt_reason = 40 THEN
 'Cancelled'
 WHEN downloads.interrupt_reason = 41 THEN
 'Browser Shutdown'
 WHEN downloads.interrupt_reason = 50 THEN
 'Browser Crashed'
 END AS InterruptReason,
 downloads.referrer AS ReferrerURL,
 downloads.site_url AS SiteURL,
 downloads.tab_url AS TabURL,
 downloads.tab_referrer_url AS TabReferrerURL,
 DownloadURL.url AS DownloadURL
 FROM
 downloads
 INNER JOIN downloads_url_chains AS DownloadURL ON downloads.id = DownloadURL.id
 ORDER BY
 downloads.id ASC'''
 LET FileType = '''Chromium Browser Downloads'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Favicons
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='icon_mapping' OR name='favicons' OR name='favicon_bitmaps');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 favicons.id AS ID,
 favicon_bitmaps.icon_id AS IconID,
 datetime( favicon_bitmaps.last_updated / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastUpdated,
 icon_mapping.page_url AS PageURL,
 favicons.url AS FaviconURL
 FROM
 favicons
 INNER JOIN
 icon_mapping
 INNER JOIN
 favicon_bitmaps
 ON icon_mapping.icon_id = favicon_bitmaps.icon_id
 AND favicons.id = favicon_bitmaps.icon_id
 ORDER BY
 favicons.id ASC'''
 LET FileType = '''Chromium Browser Favicons'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='urls' OR name='visits' OR name='downloads' OR name='segments' OR name='keyword_search_terms');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 urls.id AS ID,
 datetime( visits.visit_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS 'VisitTime (Local)',
 datetime( urls.last_visit_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS 'LastVisitedTime (Local)',
 urls.title AS URLTitle,
 urls.url AS URL,
 urls.visit_count AS VisitCount,
 urls.typed_count AS TypedCount,
 CASE
 
 WHEN urls.hidden = 1 THEN
 'Yes'
 WHEN urls.hidden = 0 THEN
 'No'
 END AS Hidden,
 visits.id AS VisitID,
 visits.from_visit AS FromVisitID,
 CAST ( visits.visit_duration AS FLOAT ) / 1000000 AS VisitDurationInSeconds
 FROM
 urls
 LEFT JOIN visits ON urls.id = visits.url
 ORDER BY
 visits.visit_time ASC;'''
 LET FileType = '''Chromium Browser History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Keyword Searches
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='urls' OR name='visits' OR name='downloads' OR name='segments' OR name='keyword_search_terms');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 keyword_search_terms.keyword_id AS KeywordID,
 keyword_search_terms.url_id AS URLID,
 datetime( urls.last_visit_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastVisitTime,
 keyword_search_terms.term AS KeywordSearchTerm,
 urls.title AS Title,
 urls.url AS URL
 FROM
 keyword_search_terms
 INNER JOIN urls ON keyword_search_terms.url_id = urls.id
 ORDER BY
 keyword_search_terms.keyword_id ASC'''
 LET FileType = '''Chromium Browser Keyword Searches'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Masked Credit Cards
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='autofill' OR name='credit_cards' OR name='offer_data' OR name='server_addresses' OR name='keywords');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 masked_credit_cards.id AS ID,
 masked_credit_cards.status AS Status,
 masked_credit_cards.name_on_card AS NameOnCard,
 masked_credit_cards.network AS CardNetwork,
 masked_credit_cards.last_four AS LastFour,
 masked_credit_cards.exp_month AS ExpMonth,
 masked_credit_cards.exp_year AS ExpYear,
 masked_credit_cards.bank_name AS BankName,
 masked_credit_cards.nickname AS CardNickname,
 masked_credit_cards.card_issuer AS CardIssuer,
 masked_credit_cards.instrument_id AS InstrumentID
 FROM
 masked_credit_cards
 ORDER BY
 masked_credit_cards.id ASC'''
 LET FileType = '''Chromium Browser Masked Credit Cards'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Media History Playback
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='origin' OR name='playback' OR name='playbackSession');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 playback.id AS ID,
 playback.url AS URL,
 playback.watch_time_s AS WatchTimeSeconds,
 CASE
 
 WHEN playback.has_video = 1 THEN
 'Yes'
 WHEN playback.has_video = 0 THEN
 'No'
 END AS HasVideo,
 CASE
 
 WHEN playback.has_audio = 1 THEN
 'Yes'
 WHEN playback.has_audio = 0 THEN
 'No'
 END AS HasAudio,
 datetime( playback.last_updated_time_s + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastUpdated,
 playback.origin_id AS OriginID
 FROM
 playback
 ORDER BY
 playback.id ASC'''
 LET FileType = '''Chromium Browser Media History Playback'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Media History Playback Session
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='origin' OR name='playback' OR name='playbackSession');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 	playbackSession.id AS ID,
 	datetime( playbackSession.last_updated_time_s + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastUpdated,
 	playbackSession.url AS URL,
 	CAST ( playbackSession.duration_ms AS FLOAT ) / 1000 AS DurationInSeconds,
 	CAST ( playbackSession.position_ms AS FLOAT ) / 1000 AS PositionInSeconds,
 	playbackSession.title AS Title,
 	playbackSession.artist AS Artist,
 	playbackSession.album AS Album,
 	playbackSession.source_title AS SourceTitle,
 	playbackSession.origin_id AS OriginID
 FROM
 	playbackSession
 ORDER BY
 	playbackSession.id'''
 LET FileType = '''Chromium Browser Media History Playback Session'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Network Action Predictor
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='resource_prefetch_predictor_host_redirect' OR name='network_action_predictor' OR name='resource_prefetch_predictor_metadata');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 network_action_predictor.id AS ID,
 network_action_predictor.user_text AS UserText,
 network_action_predictor.url AS URL,
 network_action_predictor.number_of_hits AS NumberOfHits,
 network_action_predictor.number_of_misses AS NumberOfMisses
 FROM
 network_action_predictor,
 resource_prefetch_predictor_host_redirect
 ORDER BY
 network_action_predictor.id ASC'''
 LET FileType = '''Chromium Browser Network Action Predictor'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Shortcuts
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='meta' OR name='omni_box_shortcuts');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 datetime( omni_box_shortcuts.last_access_time / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastAccessTime,
 omni_box_shortcuts.text AS TextTyped,
 omni_box_shortcuts.fill_into_edit AS FillIntoEdit,
 omni_box_shortcuts.url AS URL,
 omni_box_shortcuts.contents AS Contents,
 omni_box_shortcuts.description AS Description,
 omni_box_shortcuts.type AS Type,
 omni_box_shortcuts.keyword AS Keyword,
 omni_box_shortcuts.number_of_hits AS TimesSelectedByUser,
 omni_box_shortcuts.id AS ID
 FROM
 omni_box_shortcuts
 ORDER BY
 omni_box_shortcuts.last_access_time ASC'''
 LET FileType = '''Chromium Browser Shortcuts'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Chromium Browser Top Sites
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='meta' OR name='top_sites');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 top_sites.url_rank AS URLRank,
 top_sites.url AS URL,
 top_sites.title AS Title,
 top_sites.redirects AS Redirects
 FROM
 top_sites
 ORDER BY
 top_sites.url_rank ASC'''
 LET FileType = '''Chromium Browser Top Sites'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Cylance Analyzed Cache
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='AnalyzedCache' OR name='Quarantine' OR name='AddFileInfo');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM AnalyzedCache'''
 LET FileType = '''Cylance Analyzed Cache'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Cylance Quarantine
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='AnalyzedCache' OR name='Quarantine' OR name='AddFileInfo');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM Quarantine'''
 LET FileType = '''Cylance Quarantine'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Cylance AddFileInfo
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='AnalyzedCache' OR name='Quarantine' OR name='AddFileInfo');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM AddFileInfo'''
 LET FileType = '''Cylance AddFileInfo'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Aggregation database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='snapshot');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 snapshot."key" AS "Key",
 snapshot.value AS "Value(ConvertToJSON)"
 FROM
 snapshot
 ORDER BY
 snapshot."key" ASC'''
 LET FileType = '''Dropbox Aggregation database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Drobpox
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='file_journal');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 id,
 server_path,
 parent_path,
 local_host_id,
 local_filename,
 local_infinite_details,
 local_size,
 datetime(local_mtime,'unixepoch') AS "Local Modified Time",
 datetime(local_ctime,'unixepoch') AS "Local Created Time",
 local_attrs,
 datetime(local_timestamp,'unixepoch') AS "Local Timestamp",
 local_user_id,
 Local_sync_type,
 updated_filename,
 updated_host_id,
 updated_size,
 datetime(updated_mtime) AS "Updated Modified Time",
 datetime(updated_timestamp) AS "Updated Timestamp",
 updated_dir,
 updated_user_id,
 updated_sync_type
 from file_journal
 order by "local created time" desc'''
 LET FileType = '''Drobpox'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Icon DB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='ext_icon_table' OR name='folder_icon_table' OR name='path_icon_table');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 datetime( "created_time", 'unixepoch' ) AS CreatedTime,
 datetime( "file_mtime", 'unixepoch' ) AS ModifiedTime,
 path_icon_table.file_path AS FilePath
 FROM
 path_icon_table
 ORDER BY
 path_icon_table.created_time ASC'''
 LET FileType = '''Dropbox Icon DB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='instance');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 id,
 active,
 appdata_path,
 default_dropbox_path,
 default_dropbox_folder_name,
 business_name,
 uid,
 host_id
 from instance'''
 LET FileType = '''Dropbox'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Non-Local Resources
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='activity_feed' OR name='recents' OR name='starred_items' OR name='calendar_items' OR name='sfj_resources');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 datetime( nonlocal_resources.server_fetch_timestamp / 1000 + ( strftime( '%ms', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS timestamp,
 nonlocal_resources.account_id AS AccountID,
 nonlocal_resources.name AS Name,
 nonlocal_resources.url AS URL,
 nonlocal_resources.server_path AS ServerPath,
 CASE
 
 WHEN nonlocal_resources.is_dir = 0 THEN
 'No'
 WHEN nonlocal_resources.is_dir = 1 THEN
 'Yes'
 END AS IsDirectory,
 CASE
 
 WHEN nonlocal_resources.is_share = 0 THEN
 'No'
 WHEN nonlocal_resources.is_share = 1 THEN
 'Yes'
 END AS IsShare,
 nonlocal_resources.resource_type AS ResourceType,
 nonlocal_resources.resource_id AS ResourceID
 FROM
 nonlocal_resources'''
 LET FileType = '''Dropbox Non-Local Resources'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Recent Items
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='activity_feed' OR name='recents' OR name='starred_items' OR name='calendar_items' OR name='sfj_resources');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 datetime( timestamp / 1000 + ( strftime( '%ms', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS Timestamp,
 recents.account_id AS AccountID,
 recents.server_path AS ServerPath,
 datetime( server_fetch_timestamp / 1000 + ( strftime( '%ms', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS ServerFetchTimestamp,
 recents.batch_key AS BatchKey,
 recents.event_type AS EventType,
 CASE
 
 WHEN recents.is_local = 0 THEN
 'No'
 WHEN recents.is_local = 1 THEN
 'Yes'
 END AS IsLocal,
 recents.keywords AS Keywords,
 recents.resource_id AS ResourceID,
 recents.resource_type AS ResourceType
 FROM
 recents
 ORDER BY
 recents.timestamp ASC'''
 LET FileType = '''Dropbox Recent Items'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox SFJ Resources
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='activity_feed' OR name='recents' OR name='starred_items' OR name='calendar_items' OR name='sfj_resources');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 datetime( server_fetch_timestamp / 1000 + ( strftime( '%ms', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS ServerFetchTimestamp,
 sfj_resources.name AS Name,
 sfj_resources.cased_server_path AS ServerPath,
 sfj_resources.resource_type AS ResourceType,
 sfj_resources.resource_id AS ResourceID,
 sfj_resources.account_id AS AccountID,
 sfj_resources.icon_override AS IconOverride
 FROM
 sfj_resources
 ORDER BY
 sfj_resources.server_fetch_timestamp ASC'''
 LET FileType = '''Dropbox SFJ Resources'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Starred Items
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='activity_feed' OR name='recents' OR name='starred_items' OR name='calendar_items' OR name='sfj_resources');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 datetime( timestamp / 1000 + ( strftime( '%ms', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS timestamp,
 starred_items.account_id AS AccountID,
 starred_items.server_path AS ServerPath,
 CASE
 
 WHEN starred_items.is_starred = 0 THEN
 'No'
 WHEN starred_items.is_starred = 1 THEN
 'Yes'
 END AS IsStarred,
 starred_items.keywords AS Keywords,
 starred_items.paper_path AS PaperPath,
 starred_items.persist_state AS PersistState,
 starred_items.resource_type AS ResourceType,
 starred_items.resource_id AS ResourceID
 FROM
 starred_items
 ORDER BY
 starred_items.timestamp ASC'''
 LET FileType = '''Dropbox Starred Items'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Sync History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='sync_history');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 datetime( "timestamp", 'unixepoch' ) AS Timestamp,
 sync_history.event_type AS EventType,
 sync_history.file_event_type AS FileEventType,
 sync_history.direction AS Direction,
 sync_history.local_path AS LocalPath,
 sync_history.file_id AS FileID
 FROM
 sync_history
 ORDER BY
 sync_history.timestamp ASC'''
 LET FileType = '''Dropbox Sync History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Dropbox Tray Thumbnails
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cached_thumbnail_table');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 datetime( "timestamp", 'unixepoch' ) AS Timestamp,
 cached_thumbnail_table.file_name AS FileName,
 cached_thumbnail_table.blocklist AS BlockList
 FROM
 cached_thumbnail_table
 ORDER BY
 cached_thumbnail_table.timestamp ASC'''
 LET FileType = '''Dropbox Tray Thumbnails'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Drobpox
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='config');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 key,
 VALUE
 from config'''
 LET FileType = '''Drobpox'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: WebAssistdatabase Navigation History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND name='navigation_history';'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 navigation_history.id AS ID,
 datetime(navigation_history.last_visited_time, 'unixepoch') AS 'Last Visited Time',
 navigation_history.title AS Title,
 navigation_history.url AS URL,
 navigation_history.num_visits AS VisitCount
 FROM
 navigation_history
 ORDER BY
 navigation_history.last_visited_time ASC;'''
 LET FileType = '''WebAssistdatabase Navigation History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db BrowsingHistory
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Browsing History'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db BrowsingHistory'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Device Connectivity and Configuration
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Device Connectivity and Configuration'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Device Connectivity and Configuration'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Inking Typing and Speech Utterance
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Inking Typing and Speech Utterance'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Inking Typing and Speech Utterance'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db_ProductandServicePerformance
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Product and Service Performance'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db_ProductandServicePerformance'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Product and Service Usage
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Product and Service Usage'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Product and Service Usage'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Software Setup and Inventory
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 7
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 producers.producer_id_text AS ProducerIDText,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN producers ON events_persisted.producer_id = producers.producer_id
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Software Setup and Inventory'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Software Setup and Inventory'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db BrowsingHistory
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Browsing History'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db BrowsingHistory'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Device Connectivity and Configuration
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Device Connectivity and Configuration'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Device Connectivity and Configuration'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Inking Typing and Speech Utterance
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Inking Typing and Speech Utterance'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Inking Typing and Speech Utterance'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db_ProductandServicePerformance
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Product and Service Performance'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db_ProductandServicePerformance'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Product and Service Usage
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Product and Service Usage'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Product and Service Usage'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows EventTranscript.db Software Setup and Inventory
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='categories' OR name='event_categories' OR name='event_tags' OR name='events_persisted' OR name='producers' OR name='provider_groups' OR name='tag_descriptions');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 CASE
 
 WHEN
 events_persisted.sid = 'S-1-0' THEN
 'S-1-0 (Null Authority)'
 WHEN events_persisted.sid = 'S-1-0-0' THEN
 'S-1-0-0 (Nobody)'
 WHEN events_persisted.sid = 'S-1-1' THEN
 'S-1-1 (World Authority)'
 WHEN events_persisted.sid = 'S-1-1-0' THEN
 'S-1-1-0 (Everyone)'
 WHEN events_persisted.sid = 'S-1-16-0' THEN
 'S-1-16-0 (Untrusted Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-12288' THEN
 'S-1-16-12288 (High Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-16384' THEN
 'S-1-16-16384 (System Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-20480' THEN
 'S-1-16-20480 (Protected Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-28672' THEN
 'S-1-16-28672 (Secure Process Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-4096' THEN
 'S-1-16-4096 (Low Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8192' THEN
 'S-1-16-8192 (Medium Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-16-8448' THEN
 'S-1-16-8448 (Medium Plus Mandatory Level)'
 WHEN events_persisted.sid = 'S-1-2' THEN
 'S-1-2 (Local Authority)'
 WHEN events_persisted.sid = 'S-1-2-0' THEN
 'S-1-2-0 (Local)'
 WHEN events_persisted.sid = 'S-1-2-1' THEN
 'S-1-2-1 (Console Logon)'
 WHEN events_persisted.sid = 'S-1-3' THEN
 'S-1-3 (Creator Authority)'
 WHEN events_persisted.sid = 'S-1-3-0' THEN
 'S-1-3-0 (Creator Owner)'
 WHEN events_persisted.sid = 'S-1-3-1' THEN
 'S-1-3-1 (Creator Group)'
 WHEN events_persisted.sid = 'S-1-3-2' THEN
 'S-1-3-2 (Creator Owner Server)'
 WHEN events_persisted.sid = 'S-1-3-3' THEN
 'S-1-3-3 (Creator Group Server)'
 WHEN events_persisted.sid = 'S-1-3-4' THEN
 'S-1-3-4 (Owner Rights)'
 WHEN events_persisted.sid = 'S-1-4' THEN
 'S-1-4 (Non-unique Authority)'
 WHEN events_persisted.sid = 'S-1-5' THEN
 'S-1-5 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-1' THEN
 'S-1-5-1 (Dialup)'
 WHEN events_persisted.sid = 'S-1-5-10' THEN
 'S-1-5-10 (Principal Self)'
 WHEN events_persisted.sid = 'S-1-5-11' THEN
 'S-1-5-11 (Authenticated Users)'
 WHEN events_persisted.sid = 'S-1-5-12' THEN
 'S-1-5-12 (Restricted Code)'
 WHEN events_persisted.sid = 'S-1-5-13' THEN
 'S-1-5-13 (Terminal Server Users)'
 WHEN events_persisted.sid = 'S-1-5-14' THEN
 'S-1-5-14 (Remote Interactive Logon)'
 WHEN events_persisted.sid = 'S-1-5-15' THEN
 'S-1-5-15 (This Organization)'
 WHEN events_persisted.sid = 'S-1-5-17' THEN
 'S-1-5-17 (IUSR)'
 WHEN events_persisted.sid = 'S-1-5-18' THEN
 'S-1-5-18 (Local System)'
 WHEN events_persisted.sid = 'S-1-5-19' THEN
 'S-1-5-19 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-2' THEN
 'S-1-5-2 (Network)'
 WHEN events_persisted.sid = 'S-1-5-20' THEN
 'S-1-5-20 (NT Authority)'
 WHEN events_persisted.sid = 'S-1-5-21domain-498' THEN
 'S-1-5-21domain-498 (Enterprise Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-521' THEN
 'S-1-5-21domain-521 (Read-only Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-571' THEN
 'S-1-5-21domain-571 (Allowed RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-572' THEN
 'S-1-5-21domain-572 (Denied RODC Password Replication Group)'
 WHEN events_persisted.sid = 'S-1-5-21domain-500' THEN
 'S-1-5-21domain-500 (Administrator)'
 WHEN events_persisted.sid = 'S-1-5-21domain-501' THEN
 'S-1-5-21domain-501 (Guest)'
 WHEN events_persisted.sid = 'S-1-5-21domain-502' THEN
 'S-1-5-21domain-502 (KRBTGT)'
 WHEN events_persisted.sid = 'S-1-5-21domain-512' THEN
 'S-1-5-21domain-512 (Domain Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-513' THEN
 'S-1-5-21domain-513 (Domain Users)'
 WHEN events_persisted.sid = 'S-1-5-21domain-514' THEN
 'S-1-5-21domain-514 (Domain Guests)'
 WHEN events_persisted.sid = 'S-1-5-21domain-515' THEN
 'S-1-5-21domain-515 (Domain Computers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-516' THEN
 'S-1-5-21domain-516 (Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-517' THEN
 'S-1-5-21domain-517 (Cert Publishers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-520' THEN
 'S-1-5-21domain-520 (Group Policy Creator Owners)'
 WHEN events_persisted.sid = 'S-1-5-21-domain-522' THEN
 'S-1-5-21-domain-522 (Cloneable Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-21domain-526' THEN
 'S-1-5-21domain-526 (Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-527' THEN
 'S-1-5-21domain-527 (Enterprise Key Admins)'
 WHEN events_persisted.sid = 'S-1-5-21domain-553' THEN
 'S-1-5-21domain-553 (RAS and IAS Servers)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-518' THEN
 'S-1-5-21root domain-518 (Schema Admins)'
 WHEN events_persisted.sid = 'S-1-5-21root domain-519' THEN
 'S-1-5-21root domain-519 (Enterprise Admins)'
 WHEN events_persisted.sid = 'S-1-5-3' THEN
 'S-1-5-3 (Batch)'
 WHEN events_persisted.sid = 'S-1-5-32-544' THEN
 'S-1-5-32-544 (Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-545' THEN
 'S-1-5-32-545 (Users)'
 WHEN events_persisted.sid = 'S-1-5-32-546' THEN
 'S-1-5-32-546 (Guests)'
 WHEN events_persisted.sid = 'S-1-5-32-547' THEN
 'S-1-5-32-547 (Power Users)'
 WHEN events_persisted.sid = 'S-1-5-32-548' THEN
 'S-1-5-32-548 (Account Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-549' THEN
 'S-1-5-32-549 (Server Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-550' THEN
 'S-1-5-32-550 (Print Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-551' THEN
 'S-1-5-32-551 (Backup Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-552' THEN
 'S-1-5-32-552 (Replicators)'
 WHEN events_persisted.sid = 'S-1-5-32-554' THEN
 'S-1-5-32-554 (Builtin\Pre-Windows 2000 Compatible Access)'
 WHEN events_persisted.sid = 'S-1-5-32-555' THEN
 'S-1-5-32-555 (Builtin\Remote Desktop Users)'
 WHEN events_persisted.sid = 'S-1-5-32-556' THEN
 'S-1-5-32-556 (Builtin\Network Configuration Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-557' THEN
 'S-1-5-32-557 (Builtin\Incoming Forest Trust Builders)'
 WHEN events_persisted.sid = 'S-1-5-32-558' THEN
 'S-1-5-32-558 (Builtin\Performance Monitor Users)'
 WHEN events_persisted.sid = 'S-1-5-32-559' THEN
 'S-1-5-32-559 (Builtin\Performance Log Users)'
 WHEN events_persisted.sid = 'S-1-5-32-560' THEN
 'S-1-5-32-560 (Builtin\Windows Authorization Access Group)'
 WHEN events_persisted.sid = 'S-1-5-32-561' THEN
 'S-1-5-32-561 (Builtin\Terminal Server License Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-562' THEN
 'S-1-5-32-562 (Builtin\Distributed COM Users)'
 WHEN events_persisted.sid = 'S-1-5-32-569' THEN
 'S-1-5-32-569 (Builtin\Cryptographic Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-573' THEN
 'S-1-5-32-573 (Builtin\Event Log Readers)'
 WHEN events_persisted.sid = 'S-1-5-32-574' THEN
 'S-1-5-32-574 (Builtin\Certificate Service DCOM Access)'
 WHEN events_persisted.sid = 'S-1-5-32-575' THEN
 'S-1-5-32-575 (Builtin\RDS Remote Access Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-576' THEN
 'S-1-5-32-576 (Builtin\RDS Endpoint Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-577' THEN
 'S-1-5-32-577 (Builtin\RDS Management Servers)'
 WHEN events_persisted.sid = 'S-1-5-32-578' THEN
 'S-1-5-32-578 (Builtin\Hyper-V Administrators)'
 WHEN events_persisted.sid = 'S-1-5-32-579' THEN
 'S-1-5-32-579 (Builtin\Access Control Assistance Operators)'
 WHEN events_persisted.sid = 'S-1-5-32-580' THEN
 'S-1-5-32-580 (Builtin\Remote Management Users)'
 WHEN events_persisted.sid = 'S-1-5-32-582' THEN
 'S-1-5-32-582 (Storage Replica Administrators)'
 WHEN events_persisted.sid = 'S-1-5-4' THEN
 'S-1-5-4 (Interactive)'
 WHEN events_persisted.sid = 'S-1-5-5-X-Y' THEN
 'S-1-5-5-X-Y (Logon Session)'
 WHEN events_persisted.sid = 'S-1-5-6' THEN
 'S-1-5-6 (Service)'
 WHEN events_persisted.sid = 'S-1-5-64-10' THEN
 'S-1-5-64-10 (NTLM Authentication)'
 WHEN events_persisted.sid = 'S-1-5-64-14' THEN
 'S-1-5-64-14 (SChannelAuthentication)'
 WHEN events_persisted.sid = 'S-1-5-64-21' THEN
 'S-1-5-64-21 (Digest Authentication)'
 WHEN events_persisted.sid = 'S-1-5-7' THEN
 'S-1-5-7 (Anonymous)'
 WHEN events_persisted.sid = 'S-1-5-8' THEN
 'S-1-5-8 (Proxy)'
 WHEN events_persisted.sid = 'S-1-5-80' THEN
 'S-1-5-80 (NT Service)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (NT Services\All Services)'
 WHEN events_persisted.sid = 'S-1-5-80-0' THEN
 'S-1-5-80-0 (All Services)'
 WHEN events_persisted.sid = 'S-1-5-83-0' THEN
 'S-1-5-83-0 (NT Virtual Machine\Virtual Machines)'
 WHEN events_persisted.sid = 'S-1-5-9' THEN
 'S-1-5-9 (Enterprise Domain Controllers)'
 WHEN events_persisted.sid = 'S-1-5-90-0' THEN
 'S-1-5-90-0 (Windows Manager\Windows Manager Group)' ELSE events_persisted.sid
 END AS UserSID,
 datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 tag_descriptions.locale_name AS LocaleName,
 tag_descriptions.tag_name AS TagName,
 events_persisted.full_event_name AS FullEventName,
 events_persisted.logging_binary_name AS LoggingBinaryName,
 events_persisted.friendly_logging_binary_name AS FriendlyLoggingBinaryName,
 events_persisted.full_event_name_hash AS FullEventNameHash,
 events_persisted.event_keywords AS Keywords,
 provider_groups.group_guid AS GroupGUID,
 CASE
 
 WHEN events_persisted.is_core = 0 THEN
 'No'
 WHEN events_persisted.is_core = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsCore,
 events_persisted.compressed_payload_size AS CompressedPayloadSize,
 events_persisted.payload AS JSONPayload
 FROM
 events_persisted
 LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash
 LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id
 LEFT JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id
 WHERE
 TagName = 'Software Setup and Inventory'
 ORDER BY
 events_persisted.timestamp ASC'''
 LET FileType = '''Windows EventTranscript.db Software Setup and Inventory'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: FileZilla Client Queue
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='files');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 source_file,
 download,
 size,
 error_count,
 priority,
 l.path AS Local_Path,
 r.path AS Remote_Path,
 s.host as Remote_Server_IP,
 s.port as Remote_Server_Port,
 s.user as Remote_Server_User,
 s.password as Remote_Server_Password,
 s.account as Remote_Server_Account,
 s.name as Remote_Server_Name,
 s.parameters as Remote_Server_Parameters,
 s.site_path as Remote_Server_Site_Path
 FROM files f
 INNER JOIN servers s ON f.server = s.id
 INNER JOIN remote_paths r ON f.local_path = r.id
 INNER JOIN local_paths l ON f.remote_path = l.id'''
 LET FileType = '''FileZilla Client Queue'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Bookmarks
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_historyvisits' OR name='moz_bookmarks' OR name='moz_places' OR name='moz_inputhistory');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 Bookmarks.id AS ID,
 Bookmarks.parent AS ParentID,
 CASE
 
 WHEN Bookmarks.type = 1 THEN
 'URL'
 WHEN Bookmarks.type = 2 THEN
 'Folder'
 WHEN Bookmarks.type = 3 THEN
 'Separator'
 END AS Type,
 datetime( Bookmarks.dateAdded / 1000000, 'unixepoch', 'localtime' ) AS DateAdded,
 datetime( Bookmarks.lastModified / 1000000, 'unixepoch', 'localtime' ) AS LastModified,
 Bookmarks.position AS Position,
 Bookmarks.title AS Title,
 moz_places.url AS URL,
 Bookmarks.fk AS ForeignKey
 FROM
 moz_bookmarks AS Bookmarks
 LEFT JOIN moz_places ON Bookmarks.fk = moz_places.id
 ORDER BY
 Bookmarks.id ASC'''
 LET FileType = '''Bookmarks'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Firefox Cookies
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_cookies');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 moz_cookies.id AS ID,
 moz_cookies.host AS Host,
 moz_cookies.name AS Name,
 moz_cookies.value AS Value,
 datetime( moz_cookies.creationTime / 1000000, 'UNIXEPOCH', 'localtime' ) AS "Creation Time",
 datetime( moz_cookies.lastAccessed / 1000000, 'UNIXEPOCH', 'localtime' ) AS "Last Accessed Time",
 datetime( moz_cookies.expiry, 'UNIXEPOCH', 'localtime' ) AS Expiration,
 CASE
 
 WHEN moz_cookies.isSecure = 0 THEN
 'No'
 WHEN moz_cookies.isSecure = 1 THEN
 'Yes'
 END AS IsSecure,
 CASE
 
 WHEN moz_cookies.isHttpOnly = 0 THEN
 'No'
 WHEN moz_cookies.isHttpOnly = 1 THEN
 'Yes'
 END AS IsHTTPOnly
 FROM
 moz_cookies
 ORDER BY
 moz_cookies.id ASC'''
 LET FileType = '''Firefox Cookies'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Firefox Downloads
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_historyvisits' OR name='moz_bookmarks' OR name='moz_places' OR name='moz_inputhistory');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 	moz_annos.place_id AS PlaceID,
 	moz_annos.content AS Content,
 	datetime( dateAdded / 1000000, 'unixepoch', 'localtime' ) AS DateAdded,
 	datetime( lastModified / 1000000, 'unixepoch', 'localtime' ) AS LastModified
 FROM
 	moz_annos
 WHERE
 	anno_attribute_id IN (1,2)
 ORDER BY
 	moz_annos.dateAdded ASC'''
 LET FileType = '''Firefox Downloads'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Firefox Downloads
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_downloads');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 moz_downloads.id AS ID,
 moz_downloads.name AS Name,
 moz_downloads.mimeType AS MIMEType,
 moz_downloads.source AS Source,
 moz_downloads.target AS Target,
 datetime( startTime / 1000000, 'unixepoch', 'localtime' ) AS StartTime,
 datetime( endTime / 1000000, 'unixepoch', 'localtime' ) AS EndTime,
 moz_downloads.currBytes AS CurrentBytes,
 moz_downloads.maxBytes AS MaxBytes
 FROM
 moz_downloads
 ORDER BY
 moz_downloads.id ASC'''
 LET FileType = '''Firefox Downloads'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Firefox Favicons
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_icons' OR name='moz_icons_to_pages' OR name='moz_pages_w_icons');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT
 moz_icons.id AS ID,
 moz_pages_w_icons.page_url AS PageURL,
 moz_icons.icon_url AS FaviconURL,
 datetime( moz_icons.expire_ms / 1000, 'unixepoch', 'localtime' ) AS Expiration
 FROM
 moz_icons
 INNER JOIN moz_icons_to_pages ON moz_icons.id = moz_icons_to_pages.icon_id
 INNER JOIN moz_pages_w_icons ON moz_icons_to_pages.page_id = moz_pages_w_icons.id
 ORDER BY
 moz_icons.expire_ms ASC'''
 LET FileType = '''Firefox Favicons'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Firefox Form History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_formhistory');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 id AS ID,
 fieldname AS FieldName,
 value AS Value,
 timesUsed AS TimesUsed,
 datetime( firstUsed / 1000000, 'unixepoch', 'localtime' ) AS "First Used",
 datetime( lastUsed / 1000000, 'unixepoch', 'localtime' ) AS "Last Used",
 guid AS GUID
 FROM
 moz_formhistory
 ORDER BY
 id ASC'''
 LET FileType = '''Firefox Form History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='moz_historyvisits' OR name='moz_bookmarks' OR name='moz_places' OR name='moz_inputhistory');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 moz_historyvisits.id AS VisitID,
 moz_historyvisits.from_visit AS FromVisitID,
 datetime( moz_places.last_visit_date / 1000000, 'unixepoch', 'localtime' ) AS LastVisitDate,
 moz_places.visit_count AS VisitCount,
 moz_places.url AS URL,
 moz_places.title AS Title,
 moz_places.description AS Description,
 CASE
 
 WHEN moz_historyvisits.visit_type = 1 THEN
 'TRANSITION_LINK'
 WHEN moz_historyvisits.visit_type = 2 THEN
 'TRANSITION_TYPED'
 WHEN moz_historyvisits.visit_type = 3 THEN
 'TRANSITION_BOOKMARK'
 WHEN moz_historyvisits.visit_type = 4 THEN
 'TRANSITION_EMBED'
 WHEN moz_historyvisits.visit_type = 5 THEN
 'TRANSITION_REDIRECT_PERMANENT'
 WHEN moz_historyvisits.visit_type = 6 THEN
 'TRANSITION_REDIRECT_TEMPORARY'
 WHEN moz_historyvisits.visit_type = 7 THEN
 'TRANSITION_DOWNLOAD'
 WHEN moz_historyvisits.visit_type = 8 THEN
 'TRANSITION_FRAMED_LINK'
 WHEN moz_historyvisits.visit_type = 9 THEN
 'TRANSITION_RELOAD'
 END AS VisitType,
 CASE
 
 WHEN moz_places.hidden = 0 THEN
 'No'
 WHEN moz_places.hidden = 1 THEN
 'Yes'
 END AS Hidden,
 CASE
 
 WHEN moz_places.typed = 0 THEN
 'No'
 WHEN moz_places.typed = 1 THEN
 'Yes'
 END AS Typed,
 moz_places.frecency AS Frecency,
 moz_places.preview_image_url AS PreviewImageURL
 FROM
 moz_places
 INNER JOIN moz_historyvisits ON moz_places.origin_id = moz_historyvisits.id
 ORDER BY
 moz_places.last_visit_date ASC'''
 LET FileType = '''History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive FS Changes
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='change_buffer_entries' OR name='fschanges');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 sqlite_sequence.seq AS Sequence,
 fschanges.identifier AS Identifier,
 fschanges.direction AS Direction,
 fschanges."action" AS "Action",
 fschanges.inode AS Inode,
 fschanges.parent_inode AS ParentInode,
 fschanges.volume AS Volume,
 fschanges.parent_volume AS ParentVolume,
 fschanges.path AS Path,
 fschanges.name AS Name,
 CASE
 
 WHEN fschanges.is_folder = 0 THEN
 'No'
 WHEN fschanges.is_folder = 1 THEN
 'Yes'
 END AS IsFolder,
 CASE
 
 WHEN fschanges.affects_gdoc = 0 THEN
 'No'
 WHEN fschanges.affects_gdoc = 1 THEN
 'Yes'
 END AS AffectsGDocs,
 datetime( modified, 'unixepoch' ) AS ModifiedTime,
 fschanges.size AS SizeInBytes,
 CASE
 
 WHEN fschanges.shared = 0 THEN
 'No'
 WHEN fschanges.shared = 1 THEN
 'Yes'
 END AS Shared,
 CASE
 
 WHEN doc_type = 0 THEN
 'Folder'
 WHEN doc_type = 1 THEN
 'Regular File'
 WHEN doc_type = 2 THEN
 'Google Slides'
 WHEN doc_type = 3 THEN
 'Google Forms'
 WHEN doc_type = 4 THEN
 'Google Sheets'
 WHEN doc_type = 5 THEN
 'Google Draw'
 WHEN doc_type = 6 THEN
 'Google Docs'
 WHEN doc_type = 12 THEN
 'Google Maps' ELSE 'Google File/Object'
 END AS DocType,
 fschanges.full_path AS FullPath,
 fschanges.hash AS Hash,
 change_buffer_entries.failure_count AS FailureCount,
 change_buffer_entries.time AS Time,
 change_buffer_entries.state AS State
 FROM
 fschanges
 LEFT JOIN change_buffer_entries ON fschanges.identifier = change_buffer_entries.identifier,
 sqlite_sequence
 ORDER BY
 fschanges.identifier ASC'''
 LET FileType = '''Google Drive FS Changes'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive CloudGraphDB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cloud_graph_entry');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 filename AS 'Filename',
 datetime( modified, 'unixepoch' ) AS 'ModifiedTime',
 CASE
 
 WHEN acl_role = 0 THEN
 'Private/Google Drive Owner'
 WHEN acl_role = 1 THEN
 'Can Contribute'
 WHEN acl_role = 2 THEN
 'Can View' ELSE 'From Elsewhere'
 END AS 'ACL Role',
 CASE
 
 WHEN doc_type = 0 THEN
 'Folder'
 WHEN doc_type = 1 THEN
 'Regular File'
 WHEN doc_type = 2 THEN
 'Google Slides'
 WHEN doc_type = 3 THEN
 'Google Forms'
 WHEN doc_type = 4 THEN
 'Google Sheets'
 WHEN doc_type = 5 THEN
 'Google Draw'
 WHEN doc_type = 6 THEN
 'Google Docs'
 WHEN doc_type = 12 THEN
 'Google Maps' ELSE 'Google File/Object'
 END AS Type,
 size AS 'Size in bytes',
 checksum AS 'MD5 Hash',
 CASE
 
 WHEN shared = 1 THEN
 'Shared'
 WHEN shared = 0 THEN
 'Not Shared'
 END AS 'Shared Status',
 CASE
 
 WHEN removed = 0 THEN
 'Not Removed'
 WHEN removed = 1 THEN
 'Removed'
 END AS 'Cloud Status'
 FROM
 cloud_graph_entry'''
 LET FileType = '''Google Drive CloudGraphDB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive SnapshotDB - Cloud Files
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cloud_entry' OR name='volume_info' OR name='cloud_relations' OR name='local_entry' OR name='local_relations');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 cloud_entry.doc_id AS ID,
 ( SELECT cloud_entry.filename FROM cloud_entry WHERE cloud_relations.parent_doc_id = cloud_entry.doc_id ) AS ParentFolder,
 filename AS Filename,
 datetime( modified, 'unixepoch' ) AS ModifiedTime,
 CASE
 
 WHEN acl_role = 0 THEN
 'Google Drive Owner' ELSE 'From Elsewhere'
 END AS ACLRole,
 CASE
 
 WHEN doc_type = 0 THEN
 'Folder'
 WHEN doc_type = 1 THEN
 'Regular File'
 WHEN doc_type = 2 THEN
 'Google Slides'
 WHEN doc_type = 3 THEN
 'Google Forms'
 WHEN doc_type = 4 THEN
 'Google Sheets'
 WHEN doc_type = 5 THEN
 'Google Draw'
 WHEN doc_type = 6 THEN
 'Google Docs'
 WHEN doc_type = 12 THEN
 'Google Maps' ELSE 'Google File/Object'
 END AS Type,
 size AS 'SizeInBytes',
 checksum AS Checksum,
 CASE
 
 WHEN shared = 1 THEN
 'Shared'
 WHEN shared = 0 THEN
 'Not Shared'
 END AS SharedStatus,
 CASE
 
 WHEN removed = 1 THEN
 'Yes'
 WHEN removed = 0 THEN
 'No'
 END AS RemovedStatus
 FROM
 cloud_entry
 LEFT JOIN cloud_relations ON cloud_relations.child_doc_id = cloud_entry.doc_id
 ORDER BY
 cloud_entry.modified ASC'''
 LET FileType = '''Google Drive SnapshotDB - Cloud Files'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive SnapshotDB - Local Files
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cloud_entry' OR name='volume_info' OR name='cloud_relations' OR name='local_entry' OR name='local_relations');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 local_entry.inode AS FileID,
 local_entry.volume AS Volume,
 ( SELECT local_entry.filename FROM local_entry WHERE local_relations.parent_inode = local_entry.inode ) AS ParentFolder,
 local_entry.filename AS Filename,
 datetime( modified, 'unixepoch' ) AS "ModifiedTime",
 local_entry.checksum AS Checksum,
 local_entry.size AS SizeInBytes,
 CASE
 
 WHEN is_folder = 0 THEN
 'No'
 WHEN is_folder = 1 THEN
 'Yes'
 END AS IsFolder
 FROM
 local_entry AS local_entry
 LEFT JOIN local_relations ON local_relations.child_inode = local_entry.inode
 ORDER BY
 local_entry.inode ASC'''
 LET FileType = '''Google Drive SnapshotDB - Local Files'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive SnapshotDB - Volume Info
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='cloud_entry' OR name='volume_info' OR name='cloud_relations' OR name='local_entry' OR name='local_relations');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 main.volume_info.volume AS Volume,
 main.volume_info.full_path AS FullPath,
 main.volume_info.uuid AS UUID,
 main.volume_info.label AS DriveLabel,
 main.volume_info.size AS SizeInBytes,
 main.volume_info.filesystem AS DriveFormat,
 main.volume_info.model AS DriveModel,
 main.volume_info.device_type AS DeviceType,
 main.volume_info.device_file AS DeviceFile,
 main.volume_info.device_number AS DeviceSerialNumber
 FROM
 main.volume_info
 ORDER BY
 main.volume_info.full_path ASC'''
 LET FileType = '''Google Drive SnapshotDB - Volume Info'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive Sync Config Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='data');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 data.entry_key AS EntryKey,
 data.data_key AS DataKey,
 data.data_value AS DataValue
 FROM
 data'''
 LET FileType = '''Google Drive Sync Config Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Google Drive for Desktop Metadata
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='items');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 items.stable_id,
 items.local_title as "Name",
 items.file_size as "SizeInBytes",
 items.mime_type,
 datetime(items.modified_date / 1000, 'unixepoch') as "ModifiedTime",
 datetime(items.viewed_by_me_date / 1000, 'unixepoch') as "LastInteractionTime",
 CASE
 when items.is_folder = 1 then "Folder"
 when items.is_folder = 0 then "File"
 end as "IsFolder",
 CASE
 when items.trashed = 1 then "Deleted"
 when items.trashed = 0 then "Not Deleted"
 end as "DeletionStatus",
 CASE
 when items.is_owner = 1 then "Owner"
 when items.is_owner = 0 then "Not Owner"
 end as "Ownership",
 CASE
 when items.shared_with_me_date = 1 then "Shared"
 when items.shared_with_me_date = 0 then "Not Shared"
 end as "SharedWithUser",
 items.id AS "CloudIdentifier"
 FROM
 items'''
 LET FileType = '''Google Drive for Desktop Metadata'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Microsoft Sticky Notes
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Note' OR name='Media' OR name='Insight' OR name='User' OR name='Stroke');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 datetime( ( "CreatedAt" / 10000000 ) - 62135596800, 'unixepoch' ) AS CreatedAt,
 datetime( ( "UpdatedAt" / 10000000 ) - 62135596800, 'unixepoch' ) AS UpdatedAt,
 datetime( ( "DeletedAt" / 10000000 ) - 62135596800, 'unixepoch' ) AS DeletedAt,
 Note.WindowPosition AS WindowPosition,
 CASE
 WHEN Note.IsOpen = 0 THEN 'No'
 WHEN Note.IsOpen = 1 THEN 'Yes'
 ELSE 'Unknown'
 END AS IsOpen,
 CASE
 WHEN Note.IsAlwaysOnTop = 0 THEN 'No'
 WHEN Note.IsAlwaysOnTop = 1 THEN 'Yes'
 ELSE 'Unknown'
 END AS IsAlwaysOnTop,
 Note.Theme AS Theme,
 Note.Id AS NoteID,
 Note.ParentId AS ParentID,
 Note.Text AS Text,
 Note.LastServerVersion AS LastServerVersion
 FROM
 Note
 ORDER BY
 Note.CreatedAt ASC'''
 LET FileType = '''Microsoft Sticky Notes'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Nessus Preferences Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='PREFERENCES');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 PREFERENCES.name AS Name,
 PREFERENCES.value AS Value
 FROM
 PREFERENCES'''
 LET FileType = '''Nessus Preferences Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Company names
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Cars' OR name='CarScheduling' OR name='Customers');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''select Company from Customers;'''
 LET FileType = '''Company names'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Order payment type and amount, ordered
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Cars' OR name='CarScheduling' OR name='Customers');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''select CustomerID,PaymentType,PaymentAmount from Orders ORDER BY PaymentAmount,PaymentType;'''
 LET FileType = '''Order payment type and amount, ordered'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Distinct descriptions
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Cars' OR name='CarScheduling' OR name='Customers');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''select distinct Description from CarScheduling'''
 LET FileType = '''Distinct descriptions'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Make and model
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Cars' OR name='CarScheduling' OR name='Customers');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''select Trademark,Model from cars ORDER BY Trademark'''
 LET FileType = '''Make and model'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Customers table users
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Customers' OR name='Total');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT FirstName,LastName from Customers'''
 LET FileType = '''Customers table users'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Another Customers table query
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Customers' OR name='Total');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT Id,State as Wizzo from Customers'''
 LET FileType = '''Another Customers table query'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: JoinExample
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Customers' OR name='Total');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT Total.ID, Customers.FirstName || ' ' || Customers.LastName AS CustomerName, Total.Year, Total.January, Total.February, Total.March, Total.April, Total.May, Total.June, Total.July, Total.August, Total.September, Total.October, Total.November, Total.December FROM Customers INNER JOIN Total ON Customers.ID = Total.CustomerID'''
 LET FileType = '''JoinExample'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SomeThingElse
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Customers' OR name='Total');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT Id,State as Wizzo froM Customers'''
 LET FileType = '''SomeThingElse'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: TeraCopy MainDB
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='list');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''select
 Name AS "Name of SQLite DB",
 datetime(julianday(Started)) as "Transfer Started",
 datetime(julianday(Finished)) as "Transfer Finished",
 source AS "Source",
 target AS "Target",
 Files AS "Number of Files",
 size AS "Size (Bytes)"
 from list'''
 LET FileType = '''TeraCopy MainDB'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: TeraCopy History
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Files');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 	Source,
 	size AS "Size (Bytes)",
 CASE
 
 		WHEN IsFolder = 0 THEN
 		'No'
 		WHEN IsFolder = 1 THEN
 		'Yes'
 	END AS IsFolder,
 CASE
 
 		WHEN Marked = 0 THEN
 		'No'
 		WHEN Marked = 1 THEN
 		'Yes'
 	END AS Marked,
 CASE
 
 		WHEN Hidden = 0 THEN
 		'No'
 		WHEN Hidden = 1 THEN
 		'Yes'
 	END AS Hidden,
 	datetime( julianday( Creation ) ) AS Creation,
 	datetime( julianday( Access ) ) AS Access,
 	datetime( julianday( Write ) ) AS Write
 FROM
 	Files'''
 LET FileType = '''TeraCopy History'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: TeraCopy History Log
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Files');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 	Log.Timestamp AS Timestamp,
 	Log.Message AS Message
 FROM
 	Log
 ORDER BY
 	Timestamp'''
 LET FileType = '''TeraCopy History Log'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Photos Items
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Item' OR name='Folder');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''select item.Item_FileName AS Item_FileName,
 item.Item_FileSize AS Item_FileSize,
 item.Item_Width AS Item_Width,
 item.Item_Height AS Item_Height,
 item.Item_Latitude AS Item_Latitude,
 item.Item_Longitude AS Item_Longitude,
 ApplicationName.ApplicationName_Text,
 CameraManufacturer.CameraManufacturer_Text,
 CameraModel.CameraModel_Text,
 datetime((item.Item_DateTaken - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Item_DateTaken,
 datetime((item.Item_DateCreated - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Item_DateCreated,
 datetime((item.Item_DateModified - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Item_DateModified,
 datetime((item.Item_DateIngested - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Item_DateIngested
 FROM item
 LEFT JOIN ApplicationName ON item.Item_ApplicationNameId = ApplicationName.ApplicationName_Id
 LEFT JOIN CameraManufacturer ON item.Item_CameraManufacturerId = CameraManufacturer.CameraManufacturer_Id
 LEFT JOIN CameraModel ON item.Item_CameraModelId = CameraModel.CameraModel_Id
 ORDER BY Item_DateCreated DESC'''
 LET FileType = '''Windows Photos Items'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Photos Folders
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Item' OR name='Folder');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''select Folder.Folder_Path AS Folder_Path,
 Folder.Folder_DisplayName AS Folder_DisplayName,
 Folder.Folder_ItemCount AS Folder_ItemCount,
 datetime((Folder.Folder_DateCreated - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Folder_DateCreated,
 datetime((Folder.Folder_DateModified - 116444736000000000) / 10000000, 'unixepoch', 'localtime') AS Folder_DateModified
 FROM Folder ORDER BY Folder_DateCreated DESC'''
 LET FileType = '''Windows Photos Folders'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex Properties
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_1_Properties' OR name='SystemIndex_1_PropertyStore' OR name='SystemIndex_1_PropertyStore_Metadata');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_1_Properties;'''
 LET FileType = '''SystemIndex Properties'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex PropertyStore
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_1_Properties' OR name='SystemIndex_1_PropertyStore' OR name='SystemIndex_1_PropertyStore_Metadata');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_1_PropertyStore;'''
 LET FileType = '''SystemIndex PropertyStore'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex PropertyStore Metadata
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_1_Properties' OR name='SystemIndex_1_PropertyStore' OR name='SystemIndex_1_PropertyStore_Metadata');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_1_PropertyStore_Metadata;'''
 LET FileType = '''SystemIndex PropertyStore Metadata'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Joined PropertyStore Metadata
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_1_Properties' OR name='SystemIndex_1_PropertyStore' OR name='SystemIndex_1_PropertyStore_Metadata');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_1_PropertyStore AS PS JOIN SystemIndex_1_PropertyStore_Metadata AS PS_META WHERE PS_META.Id = PS.ColumnId;'''
 LET FileType = '''Joined PropertyStore Metadata'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex Gthr
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_Gthr' OR name='SystemIndex_GthrPth' OR name='SystemIndex_GthrAppOwner');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_Gthr;'''
 LET FileType = '''SystemIndex Gthr'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex GthrPth
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_Gthr' OR name='SystemIndex_GthrPth' OR name='SystemIndex_GthrAppOwner');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_GthrPth;'''
 LET FileType = '''SystemIndex GthrPth'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: SystemIndex GthrAppOwner
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='SystemIndex_Gthr' OR name='SystemIndex_GthrPth' OR name='SystemIndex_GthrAppOwner');'''
 LET IdentifyValue = 3
 LET SQLQuery = '''SELECT * FROM SystemIndex_GthrAppOwner;'''
 LET FileType = '''SystemIndex GthrAppOwner'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Update Store.db
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='ACTIONRECORDS' OR name='COMPLETEDUPDATES' OR name='UPDATES' OR name='VARIABLES');'''
 LET IdentifyValue = 4
 LET SQLQuery = '''SELECT
 datetime( Time / 1000, 'unixepoch', 'localtime' ) AS Time,
 COMPLETEDUPDATES.PROVIDERID AS ProviderID,
 COMPLETEDUPDATES.UPDATEID AS UpdateID,
 COMPLETEDUPDATES.TITLE AS Title,
 COMPLETEDUPDATES.DESCRIPTION AS Description,
 COMPLETEDUPDATES.MOREINFOURL AS MoreInfoURL,
 COMPLETEDUPDATES.HISTORYCATEGORY AS HistoryCategory,
 COMPLETEDUPDATES.UNINSTALL AS Uninstall
 FROM
 COMPLETEDUPDATES
 ORDER BY
 COMPLETEDUPDATES.TIME ASC'''
 LET FileType = '''Windows Update Store.db'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Notifications
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Notification' OR name='HandlerAssets' OR name='WNSPushChannel' OR name='TransientTable' OR name='NotificationData');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 Notification.Id AS ID,
 Notification.'Order' AS 'Order',
 Notification.HandlerId AS HandlerId,
 NotificationHandler.PrimaryId AS Application,
 CASE
 
 WHEN NotificationHandler.ParentId THEN
 NotificationHandler.ParentId ELSE ''
 END AS Parent,
 NotificationHandler.HandlerType AS HandlerType,
 Notification.Type AS Type,
 Notification.Payload AS Payload,
 Notification.PayloadType AS PayloadType,
 Notification.Tag AS Tag,
 Notification."Group" AS "Group",
 datetime( ( Notification.ArrivalTime - 116444736000000000 ) / 10000000, 'unixepoch' ) AS ArrivalTime,
 CASE
 
 WHEN Notification.ExpiryTime = 0 THEN
 'Expired' ELSE datetime( ( Notification.ExpiryTime - 116444736000000000 ) / 10000000, 'unixepoch' )
 END AS ExpirationTime,
 NotificationHandler.CreatedTime AS HandlerCreated,
 NotificationHandler.ModifiedTime AS HandlerModified,
 CASE
 
 WHEN NotificationHandler.WNSId NOTNULL THEN
 NotificationHandler.WNSId ELSE ''
 END AS WNSId,
 CASE
 
 WHEN NotificationHandler.WNFEventName NOTNULL THEN
 NotificationHandler.WNFEventName ELSE ''
 END AS WNFEventName,
 CASE
 
 WHEN WNSPushChannel.ChannelId NOTNULL THEN
 WNSPushChannel.ChannelId ELSE ''
 END AS ChannelID,
 CASE
 
 WHEN WNSPushChannel.Uri NOTNULL THEN
 WNSPushChannel.Uri ELSE ''
 END AS URI,
 CASE
 
 WHEN WNSPushChannel.CreatedTime NOTNULL THEN
 datetime( ( WNSPushChannel.CreatedTime - 116444736000000000 ) / 10000000, 'unixepoch' ) ELSE ''
 END AS WNSCreatedTime,
 CASE
 
 WHEN WNSPushChannel.ExpiryTime NOTNULL THEN
 datetime( ( WNSPushChannel.ExpiryTime - 116444736000000000 ) / 10000000, 'unixepoch' ) ELSE ''
 END AS WNSExpirationTime,
 CASE
 
 WHEN hex( Notification.ActivityId ) = '00000000000000000000000000000000' THEN
 '' ELSE hex( Notification.ActivityId )
 END AS ActivityId
 FROM
 Notification
 JOIN NotificationHandler ON NotificationHandler.RecordId = Notification.HandlerId
 LEFT JOIN WNSPushChannel ON WNSPushChannel.HandlerId = NotificationHandler.RecordId
 ORDER BY
 Id DESC'''
 LET FileType = '''Windows Notifications'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Notifications
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='Notification' OR name='HandlerAssets' OR name='WNSPushChannel' OR name='TransientTable' OR name='NotificationData');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 NotificationHandler.PrimaryId AS PrimaryID,
 WNSPushChannel.ChannelId AS ChannelID,
 WNSPushChannel.HandlerId AS HandlerID,
 WNSPushChannel.Uri AS URI,
 datetime( ( WNSPushChannel.CreatedTime - 116444736000000000 ) / 10000000, 'unixepoch' ) AS CreatedTime,
 datetime( ( WNSPushChannel.ExpiryTime - 116444736000000000 ) / 10000000, 'unixepoch' ) AS ExpirationTime
 FROM
 WNSPushChannel
 JOIN NotificationHandler ON NotificationHandler.RecordId = WNSPushChannel.HandlerId
 ORDER BY
 CreatedTime ASC'''
 LET FileType = '''Windows Notifications'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Contacts Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='contact' OR name='contactdate' OR name='contacturl' OR name='emailaddress' OR name='phonenumber' OR name='postaladdress');'''
 LET IdentifyValue = 6
 LET SQLQuery = '''SELECT DISTINCT
 contact.display_name AS DisplayName,
 contact.nickname AS Nickname,
 datetime( ( last_updated_time / 10000000 ) - 11644473600, 'unixepoch' ) AS LastUpdatedTimeUTC,
 contact.company AS Company,
 contact.job_title AS Title,
 contact.notes AS Notes,
 contact.name_prefix AS Prefix,
 contact.given_name AS GivenName,
 contact.middle_name AS MiddleName,
 contact.family_name AS FamilyName,
 contact.name_suffix AS Suffix,
 CASE
 
 WHEN contactdate.date_type = 1 THEN
 'Birthday'
 WHEN contactdate.date_type = 2 THEN
 'Anniversary'
 WHEN contactdate.date_type = 3 THEN
 'UserDefined' ELSE contactdate.date_type
 END AS DateType,
 contactdate.label AS DateLabel,
 contactdate.display_date AS DisplayDate,
 CASE
 
 WHEN contacturl.type = 1 THEN
 'HomePage'
 WHEN contacturl.type = 3 THEN
 'Work'
 WHEN contacturl.type = 5 THEN
 'Other'
 WHEN contacturl.type = 6 THEN
 'Blog/Profile/UserDefined' ELSE contacturl.type
 END AS URLType,
 contacturl.label AS URLLabel,
 contacturl.url_address AS URLAddress,
 CASE
 
 WHEN emailaddress.type = 1 THEN
 'Home'
 WHEN emailaddress.type = 2 THEN
 'Work'
 WHEN emailaddress.type = 4 THEN
 'Other'
 WHEN emailaddress.type = 5 THEN
 'UserDefined' ELSE emailaddress.type
 END AS EmailType,
 emailaddress.label AS EmailLabel,
 emailaddress.address AS EmailAddress,
 phonenumber.phone_number AS PhoneNumber,
 phonenumber.display_phone_number AS DisplayPhoneNumber,
 CASE
 
 WHEN phonenumber.phone_number_type = 1 THEN
 'Home'
 WHEN phonenumber.phone_number_type = 2 THEN
 'Mobile'
 WHEN phonenumber.phone_number_type = 3 THEN
 'Work'
 WHEN phonenumber.phone_number_type = 4 THEN
 'WorkMobile'
 WHEN phonenumber.phone_number_type = 5 THEN
 'Main'
 WHEN phonenumber.phone_number_type = 6 THEN
 'Other/HomeFax/WorkFax/Pager'
 WHEN phonenumber.phone_number_type = 8 THEN
 'UserDefined' ELSE phonenumber.phone_number_type
 END AS PhoneNumberType,
 phonenumber.label AS PhoneNumberLabel,
 CASE
 
 WHEN postaladdress.type = 1 THEN
 'Home'
 WHEN postaladdress.type = 2 THEN
 'Work'
 WHEN postaladdress.type = 4 THEN
 'Other'
 WHEN postaladdress.type = 5 THEN
 'UserDefined' ELSE postaladdress.type
 END AS PostalAddressType,
 postaladdress.label AS PostalAddressLabel,
 postaladdress.street AS PostalAddressStreet,
 postaladdress.city AS PostalAddressCity,
 postaladdress.region AS PostalAddressRegion,
 postaladdress.postal_code AS PostalAddressPostalCode,
 postaladdress.country_code AS PostalAddressCountryCode,
 postaladdress.display_address AS PostalAddressDisplayAddress
 FROM
 contact
 LEFT JOIN contactdate ON contact.contact_id = contactdate.contact_id
 LEFT JOIN contacturl ON contact.contact_id = contacturl.contact_id
 LEFT JOIN emailaddress ON contact.contact_id = emailaddress.contact_id
 LEFT JOIN phonenumber ON contact.contact_id = phonenumber.contact_id
 LEFT JOIN postaladdress ON contact.contact_id = postaladdress.contact_id
 ORDER BY
 contact.display_name ASC'''
 LET FileType = '''Windows Your Phone Contacts Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Notifications Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='notifications');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 notifications.id AS 'ID',
 json_extract ( json, '$.appName' ) AS 'Application',
 datetime( json_extract ( json, '$.postTime' ) / 1000, 'unixepoch', 'localtime' ) AS 'PostTime',
 datetime( json_extract ( json, '$.timestamp' ) / 1000, 'unixepoch', 'localtime' ) AS 'Timestamp',
 json_extract ( json, '$.tickerText' ) AS 'TickerText',
 json_extract ( json, '$.title' ) AS 'Title',
 json_extract ( json, '$.bigText' ) AS 'BigText',
 json_extract ( json, '$.text' ) AS 'Text',
 json_extract ( json, '$.subText' ) AS 'SubText',
 CASE
 
 WHEN json_extract ( json, '$.isClearable' ) = 0 THEN
 'No'
 WHEN json_extract ( json, '$.isClearable' ) = 1 THEN
 'Yes'
 END AS 'IsClearable',
 CASE
 
 WHEN json_extract ( json, '$.isGroup' ) = 0 THEN
 'No'
 WHEN json_extract ( json, '$.isGroup' ) = 1 THEN
 'Yes'
 END AS 'IsGroup',
 CASE
 
 WHEN json_extract ( json, '$.isOngoing' ) = 0 THEN
 'No'
 WHEN json_extract ( json, '$.isOngoing' ) = 1 THEN
 'Yes'
 END AS 'IsOngoing',
 json_extract ( json, '$.category' ) AS 'Category',
 notifications.package_name AS 'Package Name',
 notifications.json AS 'Payload'
 FROM
 notifications
 ORDER BY
 notifications.id ASC'''
 LET FileType = '''Windows Your Phone Notifications Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Photos Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='media' OR name='photo');'''
 LET IdentifyValue = 2
 LET SQLQuery = '''SELECT
 media.id AS 'Media ID',
 media.mime_type AS 'MIME Type',
 media.name AS Name,
 datetime( ( last_updated_time / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Last Updated Time',
 datetime( ( taken_time / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Taken Time',
 datetime( ( last_seen_time / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Last Seen Time',
 media.height AS Height,
 media.width AS Width,
 media.orientation AS Orientation,
 ( media.size / 1000.00 ) AS 'Size (kb)',
 media.uri AS URI
 FROM
 media
 ORDER BY
 media.id ASC'''
 LET FileType = '''Windows Your Phone Photos Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Phone Database SMS Messages
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='message' OR name='mms' OR name='rcs_chat' OR name='sync' OR name='subscription');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 	message.message_id AS MessageID,
 	message.thread_id AS ThreadID,
 	datetime( ( "timestamp" / 10000000 ) - 11644473600, 'unixepoch' ) AS Timestamp,
 	message.from_address AS "From",
 CASE
 
 		WHEN message.type = 1 THEN
 		'Received'
 		WHEN message.type = 2 THEN
 		'Sent' ELSE 'Unknown'
 	END AS Type,
 	message.body AS Body
 FROM
 	message
 ORDER BY
 	message.thread_id ASC,
 	message.timestamp ASC'''
 LET FileType = '''Windows Your Phone Phone Database SMS Messages'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Subscription Info
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='message' OR name='mms' OR name='rcs_chat' OR name='sync' OR name='subscription');'''
 LET IdentifyValue = 5
 LET SQLQuery = '''SELECT
 subscription.subscription_id AS SubscriptionID,
 subscription.sim_slot_index AS SimSlotIndex,
 subscription.country_iso AS CountryISO,
 subscription.name AS WirelessProviderName,
 CASE
 
 WHEN subscription.is_roaming = 0 THEN
 'No'
 WHEN subscription.is_roaming = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsRoaming,
 subscription.number AS PhoneNumber,
 CASE
 
 WHEN subscription.is_mms_enabled = 0 THEN
 'No'
 WHEN subscription.is_mms_enabled = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsMMSEnabled,
 CASE
 
 WHEN subscription.is_audio_attachment_allowed = 0 THEN
 'No'
 WHEN subscription.is_audio_attachment_allowed = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsAudioAttachmentAllowed,
 CASE
 
 WHEN subscription.is_multipart_sms_enabled = 0 THEN
 'No'
 WHEN subscription.is_multipart_sms_enabled = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsMultiPartSMSEnabled,
 CASE
 
 WHEN subscription.is_group_mms_enabled = 0 THEN
 'No'
 WHEN subscription.is_group_mms_enabled = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsGroupMMSEnabled,
 CASE
 
 WHEN subscription.should_send_multipart_sms_as_separate_messages = 0 THEN
 'No'
 WHEN subscription.should_send_multipart_sms_as_separate_messages = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS ShouldSendMultiPartSMSAsSeparateMessages,
 subscription.max_message_size AS "MaxMessageSize (Bytes)",
 subscription.recipient_limit AS RecipientLimit,
 subscription.max_image_height AS MaxImageHeight,
 subscription.max_image_width AS MaxImageWidth,
 subscription.sms_multipart_to_mms_text_threshold AS SMSMultiParttoMMSTextThreshold,
 subscription.sms_to_mms_text_length_threshold AS SMStoMMSTextLengthThreshold,
 subscription.max_message_text_length AS MaxMessageTextLength,
 subscription.max_subject_length AS MaxSubjectLength,
 CASE
 
 WHEN subscription.is_default_data_subscription = 0 THEN
 'No'
 WHEN subscription.is_default_data_subscription = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsDefaultDataSubscription,
 CASE
 
 WHEN subscription.is_default_sms_subscription = 0 THEN
 'No'
 WHEN subscription.is_default_sms_subscription = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsDefaultSMSSubscription,
 CASE
 
 WHEN subscription.is_default_subscription = 0 THEN
 'No'
 WHEN subscription.is_default_subscription = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsDefaultSubscription,
 CASE
 
 WHEN subscription.is_default_voice_subscription = 0 THEN
 'No'
 WHEN subscription.is_default_voice_subscription = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsDefaultVoiceSubscription,
 CASE
 
 WHEN subscription.is_rcs_supported = 0 THEN
 'No'
 WHEN subscription.is_rcs_supported = 1 THEN
 'Yes' ELSE 'Unknown'
 END AS IsRCSSupported,
 subscription.max_rcs_message_size AS "MaxRCSMessageSize (Bytes)",
 subscription.max_rcs_file_size AS "MaxRCSFileSize (Bytes)"
 FROM
 subscription'''
 LET FileType = '''Windows Your Phone Subscription Info'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Windows Your Phone Settings Database
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='settings');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 phone_apps.app_name AS 'Application Name',
 phone_apps.package_name AS 'Package Name',
 phone_apps.version AS 'Version',
 settings.setting_group_id AS 'GroupID',
 CASE
 
 WHEN settings.setting_value = 1 THEN
 'On' ELSE 'Off'
 END AS 'Settings Value',
 settings.setting_type AS 'Settings Type',
 settings.setting_key AS 'Settings Key',
 settings.setting_group_id AS 'Group ID'
 FROM
 phone_apps
 LEFT JOIN settings ON settings.setting_key = phone_apps.package_name
 ORDER BY
 phone_apps.app_name ASC'''
 LET FileType = '''Windows Your Phone Settings Database'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Calls
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='ZCALLRECORD');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''select
 z_pk AS "Call Sequence #",
 zaddress AS "Phone Number",
 zduration AS "Call in Seconds",
 case
 when zoriginated = 0 then "Incoming"
 when zoriginated = 1 then "Outgoing"
 end AS "Call Direction",
 case
 when zanswered = 0 then "Call Missed"
 when zanswered = 1 then "Call Answered"
 end as "Call Status",
 datetime(zdate+978307200,'unixepoch','localtime') AS "Timestamp"
 from zcallrecord'''
 LET FileType = '''Calls'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

- name: Accounts
 query: |
 LET IdentifyQuery = '''SELECT count(*) FROM sqlite_master WHERE type='table' AND (name='ZACCOUNT');'''
 LET IdentifyValue = 1
 LET SQLQuery = '''SELECT
 Z_PK,
 ZACCOUNTTYPE AS "Account Type",
 ZPARENTACCOUNT AS "Parent Account",
 ZUSERNAME AS "Username",
 DATETIME(ZDATE+978307200,'UNIXEPOCH') AS "TIMESTAMP",
 ZACCOUNTDESCRIPTION AS "Account Description",
 ZIDENTIFIER AS "Identifier",
 ZOWNINGBUNDLEID AS "Bundle ID"
 FROM ZACCOUNT'''
 LET FileType = '''Accounts'''

 SELECT * FROM ApplyFile(
 SQLQuery=SQLQuery, FileType=FileType,
 IdentifyQuery=IdentifyQuery, IdentifyValue=IdentifyValue)

&lt;/code>&lt;/pre></description></item><item><title>Generic.Detection.HashHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.detection.hashhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.detection.hashhunter/</guid><description>&lt;p>This artifact enables searching for hashes.&lt;/p>
&lt;p>The artifact takes a glob targetting input, then generates a hash for each
file in scope to compare to several types of hash lists provided by the user.&lt;/p>
&lt;p>Note: this artifacts filters are cumulative so a hash based hit will return
no results if the file is filtered out by other filters.&lt;br>
For most performant searches leverage path, size and and date filters. By default
the artifact leverages the &amp;lsquo;auto&amp;rsquo; data accessor but can also be changed as desired.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Detection.HashHunter
author: "Matt Green - @mgreen27"
description: |
 This artifact enables searching for hashes.
 
 The artifact takes a glob targetting input, then generates a hash for each 
 file in scope to compare to several types of hash lists provided by the user.
 
 Note: this artifacts filters are cumulative so a hash based hit will return 
 no results if the file is filtered out by other filters. 
 For most performant searches leverage path, size and and date filters. By default 
 the artifact leverages the 'auto' data accessor but can also be changed as desired. 

parameters:
 - name: TargetGlob
 description: Glob to target.
 default: "C:/Users/**/*"
 - name: Accessor
 description: Velociraptor accessor to use. Changing to ntfs will increase scan time.
 default: auto
 - name: DateAfter
 description: Search for binaries with timestamps after this date. YYYY-MM-DDTmm:hh:ssZ
 type: timestamp
 - name: DateBefore
 description: Search for binaries with timestamps before this date. YYYY-MM-DDTmm:hh:ssZ
 type: timestamp
 - name: SizeMax
 description: Return binaries only under this size in bytes.
 type: int64
 default: 4294967296
 - name: SizeMin
 description: Return binaries only over this size in bytes.
 type: int64
 default: 0
 - name: MD5List
 description: MD5 hash list to hunt for. New MD5 hash on each line
 default:
 - name: SHA1List
 description: SHA1 hash list to hunt for. New SHA1 hash on each line
 default:
 - name: SHA256List
 description: SHA256 hash list to hunt for. New SHA256 hash on each line
 default:

sources:
 - query: |
 -- setup hash lists
 LET MD5List &amp;lt;= if(condition= MD5List,
 then= split(sep='\\s+',string=MD5List), else=Null)
 LET SHA1List &amp;lt;= if(condition= SHA1List,
 then= split(sep='\\s+',string=SHA1List), else=Null)
 LET SHA256List &amp;lt;= if(condition= SHA256List,
 then= split(sep='\\s+',string=SHA256List), else=Null)
 
 -- set hash selector for optimised hash calculation
 LET HashSelector &amp;lt;= SELECT * FROM chain(
 a={ SELECT "MD5" AS Hash FROM scope() WHERE MD5List },
 b={ SELECT "SHA1" AS Hash FROM scope() WHERE SHA1List },
 c={ SELECT "SHA256" AS Hash FROM scope() WHERE SHA256List })
 
 -- firstly find files in scope with performance
 LET find_files = SELECT * FROM if(condition=DateBefore AND DateAfter,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor,nosymlink='True')
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;lt; DateBefore OR Ctime &amp;lt; DateBefore OR Btime &amp;lt; DateBefore )
 AND ( Mtime &amp;gt; DateAfter OR Ctime &amp;gt; DateAfter OR Btime &amp;gt; DateAfter )
 }, 
 else={ SELECT * FROM if(condition=DateBefore,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=OSPath,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;lt; DateBefore OR Ctime &amp;lt; DateBefore OR Btime &amp;lt; DateBefore )
 },
 else={ SELECT * FROM if(condition=DateAfter,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;gt; DateAfter OR Ctime &amp;gt; DateAfter OR Btime &amp;gt; DateAfter )
 },
 else={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 })})})
 
 
 -- lookup hash and run finl filters
 SELECT OSPath,Name,Size,
 dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as Timestamps,
 hash(path=OSPath,hashselect=HashSelector.Hash) as Hash
 FROM if(condition= HashSelector.Hash, then= find_files)
 WHERE 
 ( Hash.MD5 in MD5List OR Hash.SHA1 in SHA1List OR Hash.SHA256 in SHA256List )
&lt;/code>&lt;/pre></description></item><item><title>Generic.Detection.Yara.Glob</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.detection.yara.glob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.detection.yara.glob/</guid><description>&lt;p>This artifact returns a list of target files then runs Yara over the target
list.&lt;/p>
&lt;p>There are 2 kinds of Yara rules that can be deployed:&lt;/p>
&lt;ol>
&lt;li>Url link to a yara rule.&lt;/li>
&lt;li>or a Standard Yara rule attached as a parameter.&lt;/li>
&lt;/ol>
&lt;p>Only one method of Yara will be applied and search order is as above.&lt;/p>
&lt;p>The artifact leverages Glob for search so relevant filters can be applied
including Glob, Size and date. Date filters will target files with a timestamp
before LatestTime and after EarliestTime. The artifact also has an option to
upload any files with Yara hits.&lt;/p>
&lt;p>Some examples of path glob may include:&lt;/p>
&lt;ul>
&lt;li>Specific binary: &lt;code>/usr/bin/ls&lt;/code>&lt;/li>
&lt;li>Wildcards: &lt;code>/var/www/*.js&lt;/code>&lt;/li>
&lt;li>More wildcards: &lt;code>/var/www/**/*.js&lt;/code>&lt;/li>
&lt;li>Multiple extentions: &lt;code>/var/www/*\.{php,aspx,js,html}&lt;/code>&lt;/li>
&lt;li>Windows: &lt;code>C:/Users/**/*.{exe,dll,ps1,bat}&lt;/code>&lt;/li>
&lt;li>Windows: &lt;code>C:\Users\**\*.{exe,dll,ps1,bat}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>NOTE: this artifact runs the glob plugin with the nosymlink switch turned on.
This will NOT follow any symlinks and may cause unexpected results if
unknowingly targeting a folder with symlinks.
If upload is selected NumberOfHits is redundant and not advised as hits are
grouped by path to ensure files only downloaded once.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Detection.Yara.Glob
author: Matt Green - @mgreen27
description: |
 This artifact returns a list of target files then runs Yara over the target
 list.

 There are 2 kinds of Yara rules that can be deployed:

 1. Url link to a yara rule.
 2. or a Standard Yara rule attached as a parameter.

 Only one method of Yara will be applied and search order is as above.

 The artifact leverages Glob for search so relevant filters can be applied
 including Glob, Size and date. Date filters will target files with a timestamp
 before LatestTime and after EarliestTime. The artifact also has an option to
 upload any files with Yara hits.

 Some examples of path glob may include:

 * Specific binary: `/usr/bin/ls`
 * Wildcards: `/var/www/*.js`
 * More wildcards: `/var/www/**/*.js`
 * Multiple extentions: `/var/www/*\.{php,aspx,js,html}`
 * Windows: `C:/Users/**/*.{exe,dll,ps1,bat}`
 * Windows: `C:\Users\**\*.{exe,dll,ps1,bat}`

 NOTE: this artifact runs the glob plugin with the nosymlink switch turned on.
 This will NOT follow any symlinks and may cause unexpected results if
 unknowingly targeting a folder with symlinks.
 If upload is selected NumberOfHits is redundant and not advised as hits are
 grouped by path to ensure files only downloaded once.

aliases:
 - Windows.Detection.Yara.Glob
 - Linux.Detection.Yara.Glob
 - MacOS.Detection.Yara.Glob

type: CLIENT
parameters:
 - name: PathGlob
 description: Only file names that match this glob will be scanned.
 default: /usr/bin/ls
 - name: SizeMax
 description: maximum size of target file.
 type: int64
 - name: SizeMin
 description: minimum size of target file.
 type: int64
 - name: UploadHits
 type: bool
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: YaraUrl
 description: If configured will attempt to download Yara rules form Url
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule IsELF:TestRule {
 meta:
 author = "the internet"
 date = "2021-05-03"
 description = "A simple ELF rule to test yara features"
 condition:
 uint32(0) == 0x464c457f
 }
 - name: NumberOfHits
 description: This artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int

sources:
 - query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule

 -- time testing
 LET time_test(stamp) =
 if(condition= DateBefore AND DateAfter,
 then= stamp &amp;lt; DateBefore AND stamp &amp;gt; DateAfter,
 else=
 if(condition=DateBefore,
 then= stamp &amp;lt; DateBefore,
 else=
 if(condition= DateAfter,
 then= stamp &amp;gt; DateAfter,
 else= True
 )))

 -- first find all matching glob
 LET files = SELECT OSPath, Name, Size, Mtime, Atime, Ctime, Btime
 FROM glob(globs=PathGlob,nosymlink='True')
 WHERE
 NOT IsDir AND NOT IsLink
 AND if(condition=SizeMin,
 then= SizeMin &amp;lt; Size,
 else= True)
 AND if(condition=SizeMax,
 then=SizeMax &amp;gt; Size,
 else= True)
 AND
 ( time_test(stamp=Mtime)
 OR time_test(stamp=Atime)
 OR time_test(stamp=Ctime)
 OR time_test(stamp=Btime))

 -- scan files and prepare hit metadata
 LET hits = SELECT * FROM foreach(row=files,
 query={
 SELECT
 OSPath,
 File.Size as Size,
 Mtime, Atime, Ctime, Btime,
 Rule, Tags, Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 upload( accessor='scope',
 file='String.Data',
 name=format(format="%v-%v-%v",
 args=[
 OSPath,
 if(condition= String.Offset - ContextBytes &amp;lt; 0,
 then= 0,
 else= String.Offset - ContextBytes),
 if(condition= String.Offset + ContextBytes &amp;gt; Size,
 then= Size,
 else= String.Offset + ContextBytes) ]
 )) as HitContext
 FROM yara(rules=yara_rules,files=OSPath,
 context=ContextBytes,number=NumberOfHits)
 })

 -- upload files if selected
 LET upload_hits = SELECT *, upload(file=OSPath,name=OSPath) as Upload FROM hits

 -- return rows
 SELECT * FROM if(condition= UploadHits,
 then= upload_hits,
 else= hits )

column_types:
 - name: HitContext
 type: preview_upload
&lt;/code>&lt;/pre></description></item><item><title>Generic.Detection.Yara.Zip</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.detection.yara.zip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.detection.yara.zip/</guid><description>&lt;p>This artifact enables running Yara on embeded compressed files.&lt;/p>
&lt;p>The artifact:&lt;/p>
&lt;ul>
&lt;li>firstly searches for compressed zip files (PK header)&lt;/li>
&lt;li>then applies yara on files inside.&lt;/li>
&lt;li>files matching ZipFilenameRegex are recursively searched as above.&lt;/li>
&lt;/ul>
&lt;p>The artifact is optimised to recursively search through embedded zip,
jar,war and ear files by extracting any discovered containers.
Select UploadHits to upload Discovered file for further analysis. It is
recommended to increase default artifact timeout for large servers or target
glob.&lt;/p>
&lt;p>Some examples of path glob may include:&lt;/p>
&lt;ul>
&lt;li>Specific container: &lt;code>/path/here/file.zip&lt;/code>&lt;/li>
&lt;li>Wildcards: &lt;code>/var/www/*.{jar,war,ear}&lt;/code>&lt;/li>
&lt;li>More wildcards: &lt;code>/var/www/**/*.jar&lt;/code>&lt;/li>
&lt;li>Windows: &lt;code>C:/**/*.zip&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>NOTE: this artifact runs the glob plugin with the nosymlink switch
turned on. This will NOT follow any symlinks and may cause
unexpected results if unknowingly targeting a folder with
symlinks. Yara is not applied to the containers, only contained contents
that are not containers.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Detection.Yara.Zip
author: "Matt Green - @mgreen27"
description: |
 This artifact enables running Yara on embeded compressed files.

 The artifact:

 * firstly searches for compressed zip files (PK header)
 * then applies yara on files inside.
 * files matching ZipFilenameRegex are recursively searched as above.

 The artifact is optimised to recursively search through embedded zip,
 jar,war and ear files by extracting any discovered containers.
 Select UploadHits to upload Discovered file for further analysis. It is
 recommended to increase default artifact timeout for large servers or target
 glob.

 Some examples of path glob may include:

 * Specific container: `/path/here/file.zip`
 * Wildcards: `/var/www/*.{jar,war,ear}`
 * More wildcards: `/var/www/**/*.jar`
 * Windows: `C:/**/*.zip`

 NOTE: this artifact runs the glob plugin with the nosymlink switch
 turned on. This will NOT follow any symlinks and may cause
 unexpected results if unknowingly targeting a folder with
 symlinks. Yara is not applied to the containers, only contained contents
 that are not containers.

parameters:
 - name: TargetGlob
 default: "**/*.{zip,jar,war,ear}"
 - name: ZipFilenameRegex
 default: ".(zip|jar|war|ear)$"
 description: Regex of FileName inside container files we would like to recursively scan.
 - name: MaxRecursions
 description: Number of recursions to allow checking inside archives. Default is 10 layers.
 default: 10
 type: int
 - name: UploadHits
 description: Select to upload hits to server.
 type: bool
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule IsPE:TestRule {
 meta:
 author = "the internet"
 date = "2021-03-04"
 description = "A simple PE rule to test yara features"
 condition:
 uint16(0) == 0x5A4D and
 uint32(uint32(0x3C)) == 0x00004550
 }
 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int

sources:
 - query: |
 -- this section glob searches and confirms we are looking at zip container
 LET target_files = SELECT *,
 read_file(filename=OSPath,offset=0,length=2) as _Header
 FROM glob(globs=TargetGlob,nosymlink=True)
 WHERE _Header = 'PK'

 -- recursive search function
 LET Recurse(Container, File, Accessor, RecursionRounds) = SELECT * FROM if(
 condition=RecursionRounds &amp;lt; MaxRecursions,
 then={
 SELECT * FROM foreach(
 row={
 SELECT *
 FROM glob(accessor='zip',
 root=pathspec(DelegatePath=File, DelegateAccessor=Accessor),
 globs='**')
 WHERE NOT IsDir AND Size &amp;gt; 0
 },
 query={
 SELECT *
 FROM if(condition=Name =~ ZipFilenameRegex,
 then={
 SELECT *
 FROM Recurse(
 Container = Container,
 File=OSPath,
 Accessor="zip",
 RecursionRounds = RecursionRounds + 1)
 },
 else={
 SELECT
 Container,
 OSPath.HumanString as ExtractedPath,
 OSPath.Path as FilePath,
 hash(accessor='zip',path=OSPath) as Hash,
 File.Size AS Size,
 Mtime, Atime, Ctime, Btime,
 Rule, Tags, Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 if(condition=String.Data,
 then=upload(
 accessor='scope',
 file='String.Data',
 name=format(format="%v_%v",
 args=[ OSPath.HumanString, String.Offset ]
 ))) as HitContext
 FROM yara(accessor='zip',files=OSPath,rules=YaraRule,
 context=ContextBytes, number=NumberOfHits)
 })
 })
 })

 LET hits = SELECT * FROM foreach(row=target_files,
 query={
 SELECT *
 FROM Recurse(Container=OSPath,File=OSPath, Accessor="auto", RecursionRounds=0)
 })

 -- upload files that have hit
 LET upload_hits = SELECT *, upload(file=Container) as ContainerUpload FROM hits

 -- display rows
 SELECT * FROM if(condition=UploadHits,
 then= upload_hits,
 else= hits)

column_types:
 - name: HitContext
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.Carving.URLs</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.carving.urls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.carving.urls/</guid><description>&lt;p>Carve URLs from files located in a glob. Note that we do not parse
any files - we simply carve anything that looks like a URL.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.Carving.URLs
description: |
 Carve URLs from files located in a glob. Note that we do not parse
 any files - we simply carve anything that looks like a URL.


parameters:
 - name: UrlGlob
 default: |
 ["C:/Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/**",
 "C:/Users/*/AppData/Local/Google/Chrome/User Data/**",
 "C:/Documents and Settings/*/Local Settings/History/**",
 "C:/Documents and Settings/*/Local Settings/Temporary Internet Files/**",
 "C:/Users/*/AppData/Local/Microsoft/Windows/WebCache/**",
 "C:/Users/*/AppData/Local/Microsoft/Windows/INetCache/**",
 "C:/Users/*/AppData/Local/Microsoft/Windows/INetCookies/**",
 "C:/Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/**",
 "C:/Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/**"
 ]

sources:
 - query: |
 LET matching = SELECT OSPath FROM glob(
 globs=parse_json_array(data=UrlGlob))

 SELECT OSPath, URL FROM foreach(
 row=matching,
 query={
 SELECT OSPath,
 URL FROM parse_records_with_regex(file=OSPath,
 regex="(?P&amp;lt;URL&amp;gt;https?:\\/\\/[\\w\\.-]+[\\/\\w \\.-]*)")
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.HashLookup</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.hashlookup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.hashlookup/</guid><description>&lt;p>This artifact is a server event artifact that collects hashes from
various sources into a central location. It is possible to follow
this artifact (e.g. with an external program using the API) to
lookup the hashes with an external service.&lt;/p>
&lt;p>You can also send hashes to this artifact yourself using the
&lt;code>send_event()&lt;/code> vql Function. For example, the following will add
hashes from the results of another artifact.&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT *, send_event(
 artifact=&amp;quot;Generic.Forensic.HashLookup&amp;quot;,
 row=dict(SHA256=Sha256, ClientId=ClientId))
FROM source()
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.HashLookup
description: |
 This artifact is a server event artifact that collects hashes from
 various sources into a central location. It is possible to follow
 this artifact (e.g. with an external program using the API) to
 lookup the hashes with an external service.

 You can also send hashes to this artifact yourself using the
 `send_event()` vql Function. For example, the following will add
 hashes from the results of another artifact.

 ```vql
 SELECT *, send_event(
 artifact="Generic.Forensic.HashLookup",
 row=dict(SHA256=Sha256, ClientId=ClientId))
 FROM source()
 ```

type: SERVER_EVENT

sources:
 - query: |
 // You can add more queries to this chain to automatically
 // collect more hashes.
 SELECT ClientId, SHA256 FROM chain(
 a={
 SELECT * FROM foreach(
 row={
 SELECT ClientId, FlowId
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ "System.VFS.DownloadFile"
 }, query={
 SELECT ClientId, Sha256 AS SHA256
 FROM source(
 artifact="System.VFS.DownloadFile",
 client_id=ClientId, flow_id=FlowId)
 })
 }, async=TRUE)

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.LocalHashes.Glob</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.glob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.glob/</guid><description>&lt;p>This artifact maintains a local (client side) database of file
hashes. It is then possible to query this database using the
Generic.Forensic.LocalHashes.Query artifact&lt;/p>
&lt;p>Maintaining hashes client side allows Velociraptor to answer the
query - which machine has this hash on our network extremely
quickly. Velociraptor only needs to lookup the each client&amp;rsquo;s local
database of file hashes.&lt;/p>
&lt;p>Maintaining this database case be done using this artifact or using
the Windows.Forensics.LocalHashes.Usn artifact.&lt;/p>
&lt;p>This artifact simply crawls the filesystem hashing files as
specified by the glob expression, and adds them to the local hash
database. You can rate limit this artifact using the ops/sec setting
to perform a slow update of the local file hash database.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.LocalHashes.Glob
description: |
 This artifact maintains a local (client side) database of file
 hashes. It is then possible to query this database using the
 Generic.Forensic.LocalHashes.Query artifact

 Maintaining hashes client side allows Velociraptor to answer the
 query - which machine has this hash on our network extremely
 quickly. Velociraptor only needs to lookup the each client's local
 database of file hashes.

 Maintaining this database case be done using this artifact or using
 the Windows.Forensics.LocalHashes.Usn artifact.

 This artifact simply crawls the filesystem hashing files as
 specified by the glob expression, and adds them to the local hash
 database. You can rate limit this artifact using the ops/sec setting
 to perform a slow update of the local file hash database.

parameters:
 - name: HashGlob
 description: Search for files according to this glob and hash them.
 default: C:/Users/**/*.exe

 - name: HashDb
 description: Name of the local hash database
 default: hashdb.sqlite

 - name: SuppressOutput
 description: If this is set, the artifact does not return any rows to the server but will still update the local database.
 type: bool

sources:
 - query: |
 LET hash_db &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Forensic.LocalHashes.Init(HashDb=HashDb)

 LET path &amp;lt;= hash_db[0].OSPath

 LET _ &amp;lt;= log(message="Will use local hash database " + path)

 // Crawl the files and calculate their hashes
 LET files = SELECT OSPath, Size, hash(path=OSPath).MD5 AS Hash
 FROM glob(globs=HashGlob)
 WHERE Mode.IsRegular

 LET insertion = SELECT OSPath, Hash, Size, {
 SELECT * FROM sqlite(file=path,
 query="INSERT into hashes (path, md5, timestamp, size) values (?,?,?,?)",
 args=[OSPath.String, Hash, now(), Size])
 } AS Insert
 FROM files
 WHERE Insert OR TRUE

 SELECT OSPath, Hash, Size
 FROM insertion
 WHERE NOT SuppressOutput

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.LocalHashes.Init</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.init/</guid><description>&lt;p>This artifact creates an SQLite database on the endpoint to hold
local file hashes. These hashes can then be queried quickly.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.LocalHashes.Init
description: |
 This artifact creates an SQLite database on the endpoint to hold
 local file hashes. These hashes can then be queried quickly.

parameters:
 - name: HashDb
 description: Name of the local hash database
 default: hashdb.sqlite

sources:
 - query: |
 LET SQL = "
 CREATE table if not exists hashes(path text, md5 varchar(16), size bigint, timestamp bigint)
 create index if not exists hashidx on hashes(md5)
 create index if not exists pathidx on hashes(path)
 create unique index if not exists uniqueidx on hashes(path, md5)
 "

 LET hash_db &amp;lt;= path_join(components=[dirname(path=tempfile()), HashDb])

 LET _ &amp;lt;= log(message="Will use local hash database " + hash_db)

 // SQL to create the initial database.
 LET _ &amp;lt;= SELECT * FROM foreach(
 row={
 SELECT Line FROM parse_lines(filename=SQL, accessor="data")
 WHERE Line
 }, query={
 SELECT * FROM sqlite(file=hash_db, query=Line)
 })

 SELECT hash_db AS OSPath FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.LocalHashes.Query</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.localhashes.query/</guid><description>&lt;p>This artifact maintains a local (client side) database of file
hashes. It is then possible to query this database using the
Generic.Forensic.LocalHashes.Query artifact.&lt;/p>
&lt;p>NOTE: This artifact expects a CSV file with one hash per line. On
the command line you can encode carriage return using powershell
like this:&lt;/p>
&lt;pre>&lt;code>.\velociraptor.exe -v artifacts collect Generic.Forensic.LocalHashes.Query --args &amp;quot;Hashes=Hash`ne6c1ce56e6729a0b077c0f2384726b30&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.LocalHashes.Query
description: |
 This artifact maintains a local (client side) database of file
 hashes. It is then possible to query this database using the
 Generic.Forensic.LocalHashes.Query artifact.

 NOTE: This artifact expects a CSV file with one hash per line. On
 the command line you can encode carriage return using powershell
 like this:

 ```
 .\velociraptor.exe -v artifacts collect Generic.Forensic.LocalHashes.Query --args "Hashes=Hash`ne6c1ce56e6729a0b077c0f2384726b30"
 ```

parameters:
 - name: Hashes
 description: The hash to query for.
 type: csv
 default: |
 Hash
 XXX

 - name: CommaDelimitedHashes
 description: A set of comma delimited hashes
 default:

 - name: HashDb
 description: Name of the local hash database
 default: hashdb.sqlite

sources:
 - query: |
 LET hash_db &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Forensic.LocalHashes.Init(HashDb=HashDb)

 -- Check hashes from the CSV or comma delimited input
 LET hashes = SELECT Hash FROM chain(
 a={
 SELECT lowcase(string=strip(string=Hash)) AS Hash
 FROM Hashes
 }, b={
 SELECT * FROM foreach(row=split(string=CommaDelimitedHashes, sep=","),
 query={
 SELECT lowcase(string=strip(string=_value)) AS Hash FROM scope()
 })
 })

 SELECT * FROM foreach(row=hashes,
 query={
 SELECT path AS Path, md5 AS MD5, size AS Size,
 timestamp(epoch=time) AS Timestamp
 FROM sqlite(file=hash_db[0].OSPath,
 query="SELECT path, md5, size, timestamp AS time FROM hashes WHERE md5 = ?",
 args=Hash)
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.SQLiteHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.sqlitehunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.sqlitehunter/</guid><description>&lt;p>Hunt for SQLite files.&lt;/p>
&lt;p>SQLite has become the de-facto standard for storing application data,
in many types of applications:&lt;/p>
&lt;ul>
&lt;li>Web Browsers&lt;/li>
&lt;li>Operating Systems&lt;/li>
&lt;li>Various applications, such as iMessage, TCC etc&lt;/li>
&lt;/ul>
&lt;p>This artifact can hunt for these artifacts in a mostly automated way.
More info at &lt;a href="https://github.com/Velocidex/SQLiteHunter" target="_blank" >https://github.com/Velocidex/SQLiteHunter&lt;/a>
&lt;/p>
&lt;p>NOTE: If you want to use this artifact on just a bunch of files already
collected (for example the files collected using the
Windows.KapeFiles.Targets artifact) you can use the CustomGlob parameter
(for example set it to &amp;ldquo;/tmp/unpacked/**&amp;rdquo; to consider all files in the
unpacked directory).&lt;/p>
&lt;pre>&lt;code class="language-yaml">

name: Generic.Forensic.SQLiteHunter
description: |
 Hunt for SQLite files.
 
 SQLite has become the de-facto standard for storing application data,
 in many types of applications:
 
 - Web Browsers
 - Operating Systems
 - Various applications, such as iMessage, TCC etc
 
 This artifact can hunt for these artifacts in a mostly automated way.
 More info at https://github.com/Velocidex/SQLiteHunter
 
 NOTE: If you want to use this artifact on just a bunch of files already
 collected (for example the files collected using the
 Windows.KapeFiles.Targets artifact) you can use the CustomGlob parameter
 (for example set it to "/tmp/unpacked/**" to consider all files in the
 unpacked directory).
 
 

column_types:
- name: Image
 type: preview_upload

export: |
 LET SPEC &amp;lt;= ""
 LET Specs &amp;lt;= parse_json(data=gunzip(string=base64decode(string=SPEC)))
 LET CheckHeader(OSPath) = read_file(filename=OSPath, length=12) = "SQLite forma"
 LET Bool(Value) = if(condition=Value, then="Yes", else="No")

 -- In fast mode we check the filename, then the header then run the sqlite precondition
 LET matchFilename(SourceName, OSPath) = OSPath =~ get(item=Specs.sources, field=SourceName).filename
 AND CheckHeader(OSPath=OSPath)
 AND Identify(SourceName= SourceName, OSPath= OSPath)
 AND log(message=format(format="%v matched by filename %v",
 args=[OSPath, get(item=Specs.sources, field=SourceName).filename]))

 -- If the user wanted to also upload the file, do so now
 LET MaybeUpload(OSPath) = if(condition=AlsoUpload, then=upload(file=OSPath)) OR TRUE

 LET Identify(SourceName, OSPath) = SELECT if(
 condition=CheckHeader(OSPath=OSPath),
 then={
 SELECT *
 FROM sqlite(file=OSPath, query=get(item=Specs.sources, field=SourceName).id_query)
 }) AS Hits
 FROM scope()
 WHERE if(condition=Hits[0].Check = get(item=Specs.sources, field=SourceName).id_value,
 then= log(message="%v was identified as %v",
 args=[OSPath, get(item=Specs.sources, field=SourceName).Name]),
 else=log(message="%v was not identified as %v (got %v, wanted %v)",
 args=[OSPath, get(item=Specs.sources, field=SourceName).Name, str(str=Hits),
 get(item=Specs.sources, field=SourceName).id_value]) AND FALSE)

 LET ApplyFile(SourceName) = SELECT * FROM foreach(row={
 SELECT OSPath FROM AllFiles
 WHERE if(condition=MatchFilename, then=matchFilename(SourceName=SourceName, OSPath=OSPath),
 else=Identify(SourceName= SourceName, OSPath= OSPath))

 }, query={
 SELECT *, OSPath FROM sqlite(
 file=OSPath, query=get(item=Specs.sources, field=SourceName).SQL)
 })

 -- Filter for matching files without sqlite checks.
 LET FilterFile(SourceName) =
 SELECT OSPath FROM AllFiles
 WHERE if(condition=MatchFilename,
 then=OSPath =~ get(item=Specs.sources, field=SourceName).filename)

 -- Build a regex for all enabled categories.
 LET all_categories = SELECT _value FROM foreach(row=["All","MacOS","Chrome","Browser","Edge","Firefox","InternetExplorer","Windows"]) WHERE get(field=_value)
 LET category_regex &amp;lt;= join(sep="|", array=all_categories._value)
 LET AllGlobs &amp;lt;= filter(list=Specs.globs, condition="x=&amp;gt; x.tags =~ category_regex")
 LET _ &amp;lt;= log(message="Globs for category %v is %v", args=[category_regex, CustomGlob || AllGlobs.glob])
 LET AllFiles &amp;lt;= SELECT OSPath FROM glob(globs=CustomGlob || AllGlobs.glob)
 WHERE NOT IsDir AND MaybeUpload(OSPath=OSPath)

parameters:
- name: MatchFilename
 description: |
 If set we use the filename to detect the type of sqlite file.
 When unset we use heristics (slower)
 type: bool
 default: Y

- name: CustomGlob
 description: Specify this glob to select other files

- name: DateAfter
 description: Timebox output to rows after this time.
 type: timestamp
 default: "1970-01-01T00:00:00Z"

- name: DateBefore
 description: Timebox output to rows after this time.
 type: timestamp
 default: "2100-01-01T00:00:00Z"

- name: FilterRegex
 description: Filter critical rows by this regex
 type: regex
 default: .


- name: All
 description: Select targets with category All
 type: bool
 default: Y


- name: MacOS
 description: Select targets with category MacOS
 type: bool
 default: N


- name: Chrome
 description: Select targets with category Chrome
 type: bool
 default: N


- name: Browser
 description: Select targets with category Browser
 type: bool
 default: N


- name: Edge
 description: Select targets with category Edge
 type: bool
 default: N


- name: Firefox
 description: Select targets with category Firefox
 type: bool
 default: N


- name: InternetExplorer
 description: Select targets with category InternetExplorer
 type: bool
 default: N


- name: Windows
 description: Select targets with category Windows
 type: bool
 default: N


- name: SQLITE_ALWAYS_MAKE_TEMPFILE
 type: bool
 default: Y

- name: AlsoUpload
 description: If specified we also upload the identified file.
 type: bool

sources:
- name: AllFiles
 query: |
 SELECT * FROM AllFiles


- name: iMessage_Profiles
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="iMessage_Profiles")
 SELECT timestamp(epoch=date / 1000000000 + 978307200) AS Timestamp, *
 FROM Rows
 WHERE Timestamp &amp;gt; DateAfter AND Timestamp &amp;lt; DateBefore
 AND (MessageText, RoomName) =~ FilterRegex
 


- name: Chromium Browser Autofill_Profiles
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Autofill_Profiles")
 SELECT GUID,
 timestamp(epoch= date_modified) AS DateModified,
 timestamp(epoch= use_date) AS UseDate,
 FirstName, MiddleName, LastName, EmailAddress,
 PhoneNumber, CompanyName, StreetAddress,
 City, State, ZipCode, UseCount, OSPath
 FROM Rows
 WHERE UseDate &amp;gt; DateAfter AND UseDate &amp;lt; DateBefore
 AND (FirstName, MiddleName, LastName, EmailAddress, CompanyName, StreetAddress) =~ FilterRegex
 


- name: Chromium Browser Autofill_Masked Credit Cards
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Autofill_Masked Credit Cards")
 SELECT * FROM Rows


- name: Chromium Browser Bookmarks
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Bookmarks")
 -- Recursive function to report the details of a folder
 LET ReportFolder(Data, BaseName) = SELECT * FROM chain(a={
 -- First row emit the data about the actual folder
 SELECT BaseName + " | " + Data.name AS Name,
 timestamp(winfiletime=int(int=Data.date_added) * 10) AS DateAdded,
 timestamp(winfiletime=int(int=Data.date_last_used) * 10) AS DateLastUsed,
 Data.type AS Type,
 Data.url || "" AS URL
 FROM scope()
 },
 b={
 -- If this folder has children recurse into it
 SELECT * FROM foreach(row={
 SELECT _value FROM items(item=Data.children)
 }, query={
 SELECT * FROM ReportFolder(Data=_value, BaseName=BaseName + " | " + Data.name)
 })
 })
 
 LET MatchingFiles = SELECT OSPath, parse_json(data=read_file(filename=OSPath)) AS Data
 FROM Rows
 
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT * FROM chain(
 a={
 SELECT OSPath, *, "bookmark_bar" AS Type
 FROM ReportFolder(Data=Data.roots.bookmark_bar, BaseName="")
 },
 b={
 SELECT OSPath, *, "other" AS Type
 FROM ReportFolder(Data=Data.roots.other, BaseName="")
 },
 c={
 SELECT OSPath, *, "synced" AS Type
 FROM ReportFolder(Data=Data.roots.synced, BaseName="")
 })
 })
 


- name: Chromium Browser_Cookies
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser_Cookies")
 SELECT timestamp(winfiletime=(creation_utc * 10) || 0) AS CreationUTC,
 timestamp(winfiletime=(expires_utc * 10) || 0) AS ExpiresUTC,
 timestamp(winfiletime=(last_access_utc * 10) || 0) AS LastAccessUTC,
 HostKey, Name, Path,
 Bool(Value=is_secure) AS IsSecure,
 Bool(Value=is_httponly) AS IsHttpOnly,
 Bool(Value=has_expires) AS HasExpiration,
 Bool(Value=is_persistent) AS IsPersistent,
 Priority, SourcePort, OSPath
 FROM Rows
 WHERE LastAccessUTC &amp;gt; DateAfter AND LastAccessUTC &amp;lt; DateBefore
 AND (Name, Path) =~ FilterRegex
 


- name: Chromium Browser Extensions
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Extensions")
 -- Resolve the message string against the Locale dict
 LET ResolveName(Message, Locale) = get(item=Locale,
 field=lowcase(string=parse_string_with_regex(regex="^__MSG_(.+)__$", string=Message).g1),
 default=Message).message || Message
 
 -- Read the manifest files
 LET ManifestData = SELECT OSPath, parse_json(data=read_file(filename=OSPath)) AS Manifest
 FROM Rows
 
 -- Find the Locale file to help with.
 LET LocaleData = SELECT *, if(condition=Manifest.default_locale, else=dict(),
 then=parse_json(data=read_file(
 filename=OSPath.Dirname + "_locales" + Manifest.default_locale + "messages.json"))) AS Locale
 FROM ManifestData
 
 LET GetIcon(Manifest) = Manifest.icons.`128` || Manifest.icons.`64` || Manifest.icons.`32` || Manifest.icons.`16`
 
 SELECT OSPath, Manifest.author.email AS Email,
 ResolveName(Message = Manifest.name, Locale=Locale) AS name,
 ResolveName(Message = Manifest.description, Locale=Locale) AS description,
 Manifest.oauth2.scopes as Scopes,
 Manifest.permissions as Permissions,
 Manifest.key as Key, if(condition=GetIcon(Manifest=Manifest),
 then=upload(file=OSPath.Dirname + GetIcon(Manifest=Manifest))) AS Image,
 Manifest AS _Manifest
 FROM LocaleData
 WHERE (name, description) =~ FilterRegex
 


- name: Chromium Browser Favicons
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Favicons")
 SELECT ID, IconID,
 timestamp(winfiletime= (LastUpdated * 10) || 0) AS LastUpdated,
 PageURL, FaviconURL,
 upload(accessor="data",
 file=_image,
 name=format(format="Image%v.png", args=ID)) AS Image,
 OSPath as _OSPath
 FROM Rows
 WHERE LastUpdated &amp;gt; DateAfter AND LastUpdated &amp;lt; DateBefore
 


- name: Chromium Browser History_Visits
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser History_Visits")
 SELECT ID,
 timestamp(winfiletime=(visit_time * 10) || 0) AS VisitTime,
 timestamp(winfiletime=(last_visit_time * 10) || 0) AS LastVisitedTime,
 URLTitle, URL, VisitCount, TypedCount,
 if(condition=hidden =~ '1', then="Yes", else="No") AS Hidden,
 VisitID, FromVisitID,
 visit_duration / 1000000 AS VisitDurationInSeconds,
 OSPath
 FROM Rows
 WHERE VisitTime &amp;gt; DateAfter
 AND VisitTime &amp;lt; DateBefore
 AND (URLTitle, URL) =~ FilterRegex
 


- name: Chromium Browser History_Downloads
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser History_Downloads")
 LET StateLookup &amp;lt;= dict(`0`='In Progress', `1`='Complete', `2`="Cancelled", `3`="Interrupted", `4`="Interrupted")
 LET DangerType &amp;lt;= dict(`0`='Not Dangerous', `1`="Dangerous", `2`='Dangerous URL', `3`='Dangerous Content',
 `4`='Content May Be Malicious', `5`='Uncommon Content', `6`='Dangerous But User Validated',
 `7`='Dangerous Host', `8`='Potentially Unwanted', `9`='Whitelisted by Policy')
 LET InterruptReason &amp;lt;= dict(`0`= 'No Interrupt', `1`= 'File Error', `2`='Access Denied', `3`='Disk Full',
 `5`='Path Too Long',`6`='File Too Large', `7`='Virus', `10`='Temporary Problem', `11`='Blocked',
 `12`='Security Check Failed', `13`='Resume Error', `20`='Network Error', `21`='Operation Timed Out',
 `22`='Connection Lost', `23`='Server Down', `30`='Server Error', `31`='Range Request Error',
 `32`='Server Precondition Error', `33`='Unable to get file', `34`='Server Unauthorized',
 `35`='Server Certificate Problem', `36`='Server Access Forbidden', `37`='Server Unreachable',
 `38`='Content Length Mismatch', `39`='Cross Origin Redirect', `40`='Cancelled', `41`='Browser Shutdown',
 `50`='Browser Crashed')
 
 SELECT ID, GUID, CurrentPath, TargetPath, OriginalMIMEType, ReceivedBytes, TotalBytes,
 timestamp(winfiletime=(start_time * 10) || 0) AS StartTime,
 timestamp(winfiletime=(end_time * 10) || 0) AS EndTime,
 timestamp(winfiletime=(opened * 10) || 0) AS Opened,
 timestamp(winfiletime=(last_access_time * 10) || 0) AS LastAccessTime,
 timestamp(epoch=last_modified) AS LastModified,
 get(item=StateLookup, field=str(str=state), default="Unknown") AS State,
 get(item=DangerType, field=str(str=danger_type), default="Unknown") AS DangerType,
 get(item=InterruptReason, field=str(str=interrupt_reason), default="Unknown") AS InterruptReason,
 ReferrerURL, SiteURL, TabURL, TabReferrerURL, DownloadURL, OSPath
 FROM Rows
 WHERE LastAccessTime &amp;gt; DateAfter AND LastAccessTime &amp;lt; DateBefore
 AND (SiteURL, DownloadURL, TabURL, TabReferrerURL, ReferrerURL, DownloadURL) =~ FilterRegex
 


- name: Chromium Browser History_Keywords
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser History_Keywords")
 SELECT KeywordID, URLID,
 timestamp(winfiletime=(last_visit_time * 10) || 0) AS LastVisitedTime,
 KeywordSearchTerm, Title, URL, OSPath
 FROM Rows
 WHERE LastVisitedTime &amp;gt; DateAfter AND LastVisitedTime &amp;lt; DateBefore
 AND (Title, KeywordSearchTerm, URL) =~ FilterRegex
 


- name: Chromium Browser Media_History
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Media_History")
 SELECT ID, URL, WatchTimeSeconds,
 Bool(Value=has_video) AS HasVideo,
 Bool(Value=has_audio) AS HasAudio,
 timestamp(winfiletime=last_updated_time_s || 0) AS LastUpdated,
 OriginID, OSPath
 FROM Rows
 WHERE LastUpdated &amp;gt; DateAfter AND LastUpdated &amp;lt; DateBefore
 AND URL =~ FilterRegex
 


- name: Chromium Browser Media_Playback Session
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Media_Playback Session")
 SELECT ID,
 timestamp(winfiletime=last_updated_time_s || 0) AS LastUpdated, URL,
 duration_ms / 1000 AS DurationInSeconds,
 position_ms / 1000 AS PositionInSeconds,
 Title, Artist, Album, SourceTitle, OriginID, OSPath
 FROM Rows
 WHERE LastUpdated &amp;gt; DateAfter AND LastUpdated &amp;lt; DateBefore
 AND URL =~ FilterRegex
 


- name: Chromium Browser Network_Predictor
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Network_Predictor")
 SELECT * FROM Rows
 WHERE UserText =~ FilterRegex
 


- name: Chromium Browser Notifications_Site Engagements
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Notifications_Site Engagements")
 LET JSON = SELECT parse_json(data=read_file(filename=OSPath)) AS Data, OSPath FROM Rows
 
 SELECT * FROM foreach(row={
 SELECT OSPath, Data.profile.content_settings.exceptions AS exceptions FROM JSON
 }, query={
 SELECT _key AS Site,
 timestamp(winfiletime=int(int=_value.last_modified) * 10 || 0) AS LastModified,
 timestamp(winfiletime=int(int=_value.setting.lastEngagementTime) * 10 || 0) AS LastEngagementTime,
 OSPath
 FROM items(item=exceptions.site_engagement)
 })
 


- name: Chromium Browser Notifications_App Banners
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Notifications_App Banners")
 LET JSON = SELECT parse_json(data=read_file(filename=OSPath)) AS Data, OSPath FROM Rows
 
 SELECT * FROM foreach(row={
 SELECT OSPath, Data.profile.content_settings.exceptions AS exceptions FROM JSON
 }, query={
 SELECT _key AS Site,
 timestamp(winfiletime=int(int=_value.last_modified) * 10 || 0) AS LastModified,
 {
 SELECT _key AS Site,
 timestamp(winfiletime=int(int=_value.couldShowBannerEvents) * 10 || 0) AS CouldShowBannerEvents,
 timestamp(winfiletime=int(int=_value.next_install_text_animation.last_shown) * 10 || 0) AS LastShown
 FROM items(item=_value.setting)
 } AS Setting,
 OSPath
 FROM items(item=exceptions.app_banner)
 })
 


- name: Chromium Browser Notifications_Notification Preferences
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Notifications_Notification Preferences")
 LET ContentSettings &amp;lt;= array(`0`="Default",`1`="Allow",`2`="Block",`3`="Ask",`4`="Session Only",`5`="Detect Important Content")
 
 LET JSON = SELECT parse_json(data=read_file(filename=OSPath)) AS Data, OSPath FROM Rows
 
 SELECT * FROM foreach(row={
 SELECT OSPath, Data.profile.content_settings.exceptions AS exceptions FROM JSON
 }, query={
 SELECT _key AS Site,
 timestamp(winfiletime=int(int=_value.last_modified) * 10 || 0) AS LastModified,
 ContentSettings[_value.setting] AS Setting,
 OSPath
 FROM items(item=exceptions.notifications)
 })
 


- name: Chromium Browser Notifications_Notification Interactions
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Chromium Browser Notifications_Notification Interactions")
 LET JSON = SELECT parse_json(data=read_file(filename=OSPath)) AS Data, OSPath FROM Rows
 LET S = scope()
 
 SELECT * FROM foreach(row={
 SELECT OSPath, Data.profile.content_settings.exceptions AS exceptions FROM JSON
 }, query={
 SELECT _key AS URL,
 timestamp(winfiletime=int(int=_value.last_modified) * 10 || 0) AS LastModified,
 _value.display_count as DisplayCount,
 _value.click_count as ClickCount,
 OSPath
 FROM items(item=S.notification_interactions || dict())
 })
 


- name: Chromium Browser Shortcuts
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Shortcuts")
 SELECT ID,
 timestamp(winfiletime= (last_access_time * 10) || 0) AS LastAccessTime,
 TextTyped, FillIntoEdit, URL, Contents,
 Description, Type, Keyword, TimesSelectedByUser, OSPath
 FROM Rows
 WHERE LastAccessTime &amp;gt; DateAfter AND LastAccessTime &amp;lt; DateBefore
 AND (Contents, Description) =~ FilterRegex
 


- name: Chromium Sessions_Sessions
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Sessions_Sessions")
 SELECT timestamp(winfiletime=(creation_utc * 10) || 0) AS CreationUTC,
 timestamp(winfiletime=(expires_utc * 10) || 0) AS ExpiresUTC,
 timestamp(winfiletime=(last_access_utc * 10) || 0) AS LastAccessUTC,
 HostKey, Name, Path,
 Bool(Value=is_secure) AS IsSecure,
 Bool(Value=is_httponly) AS IsHttpOnly,
 Bool(Value=has_expires) AS HasExpiration,
 Bool(Value=is_persistent) AS IsPersistent,
 Priority, SourcePort, OSPath
 FROM Rows
 WHERE LastAccessUTC &amp;gt; DateAfter AND LastAccessUTC &amp;lt; DateBefore
 AND (Name, Path) =~ FilterRegex
 


- name: Chromium Browser Top Sites
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Chromium Browser Top Sites")
 SELECT * FROM Rows
 WHERE ( URL =~ FilterRegex OR Title =~ FilterRegex )
 


- name: Edge Browser Navigation History_Navigation History
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Edge Browser Navigation History_Navigation History")
 SELECT ID,
 timestamp(epoch=`Last Visited Time`) AS `Last Visited Time`,
 Title, URL, VisitCount, OSPath
 FROM Rows
 WHERE `Last Visited Time` &amp;gt; DateAfter
 AND `Last Visited Time` &amp;lt; DateBefore
 AND (Title, URL) =~ FilterRegex
 


- name: Firefox Places
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Places")
 LET BookmarkTypes &amp;lt;= dict(`1`="URL", `2`="Folder", `3`="Separator")
 SELECT ID, ParentID,
 get(item= BookmarkTypes, field=str(str=type), default="Unknown") AS Type,
 timestamp(epoch=dateAdded) AS DateAdded,
 timestamp(epoch=lastModified) AS LastModified,
 Position, Title, URL, ForeignKey, OSPath
 FROM Rows
 WHERE LastModified &amp;gt; DateAfter AND LastModified &amp;lt; DateBefore
 AND (Title, URL) =~ FilterRegex
 


- name: Firefox Places_Downloads
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Places_Downloads")
 SELECT PlaceID, Content,
 timestamp(epoch=dateAdded) AS DateAdded,
 timestamp(epoch=lastModified) AS LastModified,
 OSPath
 FROM Rows
 WHERE LastModified &amp;gt; DateAfter AND LastModified &amp;lt; DateBefore
 AND Content =~ FilterRegex
 


- name: Firefox Places_History
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Places_History")
 LET VisitType &amp;lt;= dict(`1`='TRANSITION_LINK', `2`='TRANSITION_TYPED', `3`='TRANSITION_BOOKMARK',
 `4`='TRANSITION_EMBED', `5`= 'TRANSITION_REDIRECT_PERMANENT', `6`='TRANSITION_REDIRECT_TEMPORARY',
 `7`='TRANSITION_DOWNLOAD', `8`='TRANSITION_FRAMED_LINK', `9`='TRANSITION_RELOAD')
 
 SELECT VisitID, FromVisitID,
 timestamp(epoch= last_visit_date) AS LastVisitDate,
 VisitCount, URL, Title, Description,
 get(item= VisitType, field=str(str=visit_type), default="Unknown") AS VisitType,
 Bool(Value=hidden) AS Hidden,
 Bool(Value=typed) AS Typed,
 Frecency, PreviewImageURL, OSPath
 FROM Rows
 WHERE LastVisitDate &amp;gt; DateAfter AND LastVisitDate &amp;lt; DateBefore
 AND (Title, URL, Description) =~ FilterRegex
 


- name: Firefox Cookies
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Cookies")
 SELECT ID, Host, Name, Value,
 timestamp(epoch= creationTime) AS CreationTime,
 timestamp(epoch= lastAccessed) AS LastAccessedTime,
 timestamp(epoch= expiry) AS Expiration,
 Bool(Value= isSecure) AS IsSecure,
 Bool(Value= isHttpOnly) AS IsHTTPOnly, OSPath
 FROM Rows
 WHERE LastAccessedTime &amp;gt; DateAfter
 AND LastAccessedTime &amp;lt; DateBefore
 AND ( Name =~ FilterRegex OR Value =~ FilterRegex )
 


- name: Firefox Downloads
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Downloads")
 SELECT ID, Name, MIMEType, Source, Target,
 timestamp(epoch= startTime) AS StartTime,
 timestamp(epoch= endTime) AS EndTime,
 timestamp(epoch= expiry) AS Expiration,
 CurrentBytes, MaxBytes, OSPath
 FROM Rows
 WHERE StartTime &amp;gt; DateAfter
 AND StartTime &amp;lt; DateBefore
 AND Name =~ FilterRegex
 


- name: Firefox Favicons
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Favicons")
 SELECT ID, PageURL, FaviconURL,
 timestamp(epoch= expire_ms) AS Expiration,
 OSPath
 FROM Rows
 


- name: Firefox Form History
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Firefox Form History")
 SELECT ID, FieldName, Value, TimesUsed,
 timestamp(epoch= firstUsed) AS FirstUsed,
 timestamp(epoch= lastUsed) AS LastUsed,
 GUID, OSPath
 FROM Rows
 WHERE LastUsed &amp;gt; DateAfter AND LastUsed &amp;lt; DateBefore
 AND ( FieldName =~ FilterRegex OR Value =~ FilterRegex )
 


- name: IE or Edge WebCacheV01_All Data
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="IE or Edge WebCacheV01_All Data")
 LET MatchingFiles = SELECT OSPath FROM Rows
 
 LET Containers(OSPath) = SELECT Table
 FROM parse_ese_catalog(file=OSPath)
 WHERE Table =~ "Container_"
 GROUP BY Table
 
 LET AllHits(OSPath) = SELECT * FROM foreach(row={
 SELECT * FROM Containers(OSPath=OSPath)
 }, query={
 SELECT timestamp(winfiletime=ExpiryTime) AS ExpiryTime,
 timestamp(winfiletime=ModifiedTime) AS ModifiedTime,
 timestamp(winfiletime=AccessedTime) AS AccessedTime, Url, *
 FROM parse_ese(file=OSPath, table=Table)
 })
 
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT * FROM AllHits(OSPath=OSPath)
 })
 WHERE AccessedTime &amp;gt; DateAfter AND AccessedTime &amp;lt; DateBefore
 AND Url =~ FilterRegex
 


- name: IE or Edge WebCacheV01_Highlights
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="IE or Edge WebCacheV01_Highlights")
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT AccessedTime, ModifiedTime, ExpiryTime, Url
 FROM AllHits(OSPath=OSPath)
 })
 WHERE AccessedTime &amp;gt; DateAfter AND AccessedTime &amp;lt; DateBefore
 AND Url =~ FilterRegex
 


- name: MacOS Applications Cache
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="MacOS Applications Cache")
 SELECT
 time_stamp AS Timestamp,
 OSPath.Base AS Application,
 entry_ID AS EntryID,
 version AS Version,
 hash_value AS Hash,
 storage_policy AS StoragePolicy,
 request_key AS URL,
 plist(file=request_object, accessor="data") AS Request,
 plist(file=response_object, accessor="data") AS Response,
 partition AS Partition,
 OSPath
 FROM Rows
 WHERE Timestamp &amp;gt; DateAfter AND Timestamp &amp;lt; DateBefore
 AND Application =~ FilterRegex
 


- name: MacOS NetworkUsage
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="MacOS NetworkUsage")
 SELECT timestamp(epoch= ZTIMESTAMP + 978307200) AS Timestamp,
 timestamp(epoch= ZFIRSTTIMESTAMP + 978307200) AS FirstTimestamp,
 timestamp(epoch= LIVE_USAGE_TIMESTAMP + 978307200) AS LiveUsageTimestamp,
 ZBUNDLENAME AS BundleID,
 ZPROCNAME AS ProcessName,
 ZWIFIIN AS WifiIn,
 ZWIFIOUT AS WifiOut,
 ZWWANIN AS WanIn,
 ZWWANOUT AS WandOut,
 ZWIREDIN AS WiredIn,
 ZWIREDOUT AS WiredOut,
 ZXIN AS _XIn,
 ZXOUT AS _XOut,
 Z_PK AS LiveUsageTableID
 FROM Rows
 


- name: MacOS Notes
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="MacOS Notes")
 SELECT Key AS _Key,
 OSPath[1] AS User,
 Note,
 Title,
 Snippet,
 NoteID AS _NoteID,
 timestamp(cocoatime=CreatedTS) AS CreatedTime,
 timestamp(cocoatime=LastOpenedDate) AS LastOpenedTime,
 timestamp(cocoatime=DirModificationDate) AS LastDirModifcation,
 Account AS _Account,
 Directory,
 DirectoryID,
 AttachmentName,
 AttachmentSize,
 AttachmentUUID,
 if(condition=AttachmentUUID,
 then=OSPath[:2] + '/Library/Group Containers/group.com.apple.notes/Accounts/LocalAccount/Media/' + AttachmentUUID + '/' + AttachmentName) AS AttachmentLocation,
 AccountName AS _AccountName,
 AccountID AS _AccountID,
 AccountType AS _AccountType,
 gunzip(string=Data) AS Data,
 OSPath
 FROM Rows
 WHERE LastOpenedTime &amp;gt; DateAfter AND LastOpenedTime &amp;lt; DateBefore
 AND ( Title =~ FilterRegex OR Data =~ FilterRegex )
 


- name: MacOS XProtect Detections
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="MacOS XProtect Detections")
 SELECT *
 FROM Rows
 WHERE dt &amp;gt; DateAfter
 AND dt &amp;lt; DateBefore
 AND (violated_rule, exec_path, responsible_path, responsible_signing_id,
 exec_cdhash, exec_sha256, responsible_cdhash, responsible_sha256 ) =~ FilterRegex
 


- name: Windows Activities Cache_ActivityPackageId
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Windows Activities Cache_ActivityPackageId")
 SELECT format(format="%0X-%0X-%0X-%0X-%0X", args=[
 ActivityId[0:4], ActivityId[4:6], ActivityId[6:8],
 ActivityId[8:10], ActivityId[10:] ]) AS ActivityId,
 Platform, PackageName, ExpirationTime, OSPath
 FROM Rows
 


- name: Windows Activities Cache_Clipboard
 query: |
 LET Rows = SELECT * FROM ApplyFile(SourceName="Windows Activities Cache_Clipboard")
 SELECT
 CreatedTime,
 timestamp(epoch=LastModifiedTime) AS LastModifiedTime,
 timestamp(epoch=LastModifiedOnClient) AS LastModifiedOnClient,
 StartTime,
 EndTime,
 Payload,
 OSPath[1] AS User,
 base64decode(string=parse_json_array(data=ClipboardPayload)[0].content) AS ClipboardPayload,
 OSPath AS Path,
 Mtime
 FROM Rows
 WHERE StartTime &amp;gt; DateAfter
 AND StartTime &amp;lt; DateBefore
 AND ClipboardPayload =~ FilterRegex
 


- name: Windows Search Service_SystemIndex_Gthr
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_SystemIndex_Gthr")
 LET MatchingFiles = SELECT OSPath FROM Rows
 
 LET FormatTimeB(T) = timestamp(winfiletime=parse_binary(
 filename=T, accessor="data", struct="uint64b"))
 
 LET FormatTime(T) = timestamp(winfiletime=parse_binary(
 filename=T, accessor="data", struct="uint64"))
 
 LET FormatSize(T) = parse_binary(
 filename=T, accessor="data", struct="uint64")
 
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT ScopeID, DocumentID, SDID,
 FormatTimeB(T=LastModified) AS LastModified,
 FileName
 FROM parse_ese(file=OSPath, table= "SystemIndex_Gthr")
 })
 WHERE LastModified &amp;gt; DateAfter AND LastModified &amp;lt; DateBefore
 AND FileName =~ FilterRegex
 


- name: Windows Search Service_SystemIndex_GthrPth
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_SystemIndex_GthrPth")
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT Scope, Parent, Name
 FROM parse_ese(file=OSPath, table= "SystemIndex_GthrPth")
 })
 WHERE Name =~ FilterRegex
 


- name: Windows Search Service_SystemIndex_PropertyStore
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_SystemIndex_PropertyStore")
 LET X = scope()
 
 -- The PropertyStore columns look like
 -- &amp;lt;random&amp;gt;-ProperName so we strip the
 -- random part off to display it properly.
 LET FilterDict(Dict) = to_dict(item={
 SELECT split(sep_string="-", string=_key)[1] || _key AS _key, _value
 FROM items(item=Dict)
 })
 
 LET PropStore(OSPath) = SELECT *,
 FormatTime(T=X.System_Search_GatherTime) AS System_Search_GatherTime,
 FormatSize(T=X.System_Size) AS System_Size,
 FormatTime(T=X.System_DateModified) AS System_DateModified,
 FormatTime(T=X.System_DateAccessed) AS System_DateAccessed,
 FormatTime(T=X.System_DateCreated) AS System_DateCreated
 FROM foreach(row={
 SELECT *, FilterDict(Dict=_value) AS _value
 FROM items(item={
 SELECT * FROM parse_ese(file=OSPath, table="SystemIndex_PropertyStore")
 })
 }, column="_value")
 
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT *
 FROM PropStore(OSPath=OSPath)
 })
 WHERE System_DateAccessed &amp;gt; DateAfter AND System_DateAccessed &amp;lt; DateBefore
 


- name: Windows Search Service_SystemIndex_PropertyStore_Highlights
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_SystemIndex_PropertyStore_Highlights")
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT WorkID,
 System_Search_GatherTime,
 System_Size,
 System_DateModified,
 System_DateCreated,
 X.System_FileOwner AS System_FileOwner,
 X.System_ItemPathDisplay AS System_ItemPathDisplay,
 X.System_ItemType AS System_ItemType,
 X.System_FileAttributes AS System_FileAttributes,
 X.System_Search_AutoSummary AS System_Search_AutoSummary
 FROM PropStore(OSPath=OSPath)
 })
 WHERE System_DateAccessed &amp;gt; DateAfter AND System_DateAccessed &amp;lt; DateBefore
 


- name: Windows Search Service_BrowsingActivity
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_BrowsingActivity")
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT X.ItemPathDisplay AS ItemPathDisplay,
 X.Activity_ContentUri AS Activity_ContentUri,
 X.Activity_Description AS Activity_Description
 FROM PropStore(OSPath=OSPath)
 WHERE Activity_ContentUri
 })
 


- name: Windows Search Service_UserActivityLogging
 query: |
 LET Rows = SELECT * FROM FilterFile(SourceName="Windows Search Service_UserActivityLogging")
 SELECT * FROM foreach(row=MatchingFiles, query={
 SELECT X.System_ItemPathDisplay AS System_ItemPathDisplay,
 FormatTime(T=X.ActivityHistory_StartTime) AS ActivityHistory_StartTime,
 FormatTime(T=X.ActivityHistory_EndTime) AS ActivityHistory_EndTime,
 X.ActivityHistory_AppId AS ActivityHistory_AppId
 FROM PropStore(OSPath=OSPath)
 WHERE ActivityHistory_AppId
 })
 WHERE ActivityHistory_StartTime &amp;gt; DateAfter
 AND ActivityHistory_StartTime &amp;lt; DateBefore
 




&lt;/code>&lt;/pre></description></item><item><title>Generic.Forensic.Timeline</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.forensic.timeline/</guid><description>&lt;p>This artifact generates a timeline of a file glob in bodyfile
format. We currently do not calculate the md5 because it is quite
expensive.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Forensic.Timeline
description: |
 This artifact generates a timeline of a file glob in bodyfile
 format. We currently do not calculate the md5 because it is quite
 expensive.

parameters:
 - name: timelineGlob
 default: C:\Users\**
 - name: timelineAccessor
 default: file

sources:
 # For NTFS accessors we write the MFT id as the inode. On windows
 # the file accessor does not give the inode at all.
 - precondition:
 SELECT OS From info() where OS = 'windows' AND timelineAccessor = 'ntfs'
 query: |
 SELECT 0 AS Md5, OSPath,
 Sys.mft as Inode,
 Mode.String AS Mode, 0 as Uid, 0 as Gid, Size,
 Atime, Mtime, Ctime
 FROM glob(globs=timelineGlob, accessor=timelineAccessor)

 # For linux we can get the Inode from Sys.Ino
 - precondition:
 SELECT * From scope() where timelineAccessor = 'file'
 query: |
 SELECT 0 AS Md5, OSPath,
 Sys.Ino as Inode,
 Mode.String AS Mode, Sys.Uid AS Uid, Sys.Gid AS Gid, Size,
 Atime, Mtime, Ctime
 FROM glob(globs=timelineGlob, accessor=timelineAccessor)

&lt;/code>&lt;/pre></description></item><item><title>Generic.Network.InterfaceAddresses</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.network.interfaceaddresses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.network.interfaceaddresses/</guid><description>&lt;p>Network interfaces and relevant metadata. This artifact works on all
supported OSs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Network.InterfaceAddresses
description: |
 Network interfaces and relevant metadata. This artifact works on all
 supported OSs.

aliases:
 - Windows.Network.InterfaceAddresses

sources:
 - query: |
 LET interface_address =
 SELECT Index, MTU, Name,
 HardwareAddr.String AS HardwareAddr,
 Flags, Addrs
 from interfaces()

 SELECT Index, MTU, Name, HardwareAddr,
 Flags, Addrs.IP as IP, Addrs.Mask.String as Mask
 FROM flatten(query=interface_address)

&lt;/code>&lt;/pre></description></item><item><title>Generic.System.EfiSignatures</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.system.efisignatures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.system.efisignatures/</guid><description>&lt;p>Collect Efi Signature information from the client.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.System.EfiSignatures
description: |
 Collect Efi Signature information from the client.

type: CLIENT
export: |
 -- GUIDs are taken from
 -- https://github.com/chipsec/chipsec/blob/main/chipsec/hal/uefi_common.py
 LET PROFILE = '''[
 ["EfiSignatures", 0, [
 ["__tmp", 0, "uint32"],
 ["__Signatures", 0, "Union", {
 "selector": "x=&amp;gt;x.__tmp &amp;lt; 257",
 "choices": {
 "true": "EfiSignaturesListAttrib",
 "false": "EfiSignaturesList"
 }
 }],
 ["Signatures", 0, "Value", {"value": "x=&amp;gt;x.__Signatures.Signatures"}]
 ]],
 ["EfiSignaturesListAttrib", 0, [
 ["__Attributes", 0, "uint32"],
 ["Signatures", 4, "Array", {"type": "Signature", "count": 1000}]
 ]],
 ["EfiSignaturesList", 0, [
 ["Signatures", 0, "Array", {"type": "Signature", "count": 1000}]
 ]],
 ["Signature", "x=&amp;gt;x.__ListSize", [
 ["__Type", 0, "GUID"],
 ["Type", 0, "Value", {"value": "x=&amp;gt;x.__Type.Value"}],
 ["__ListSize", 16, "uint32"],
 ["__HeaderSize", 20, "uint32"],
 ["Payload", 24, "Union", {
 "selector": "x=&amp;gt;x.Type",
 "choices": {
 "{a5c059a1-94e4-4aa7-87b5-ab155c2bf072}": "Cert",
 "{c1c41626-504c-4092-aca9-41f936934328}": "HashList"
 }
 }]
 ]],
 ["Cert", "x=&amp;gt;x.__SignatureSize + 4", [
 ["__SignatureSize", 0, "uint32"],
 ["__Owner", 4, "GUID"],
 ["Owner", 0, "Value", {"value": "x=&amp;gt;x.__Owner.Value"}],
 ["__Data", 20, "String", {"length": "x=&amp;gt;x.__SignatureSize - 16", "term": "", "max_length": 10000}],
 ["Cert", 0, "Value", {"value": "x=&amp;gt;parse_x509(data=x.__Data)[0]"}]
 ]],
 ["HashList", 0, [
 ["__SignatureSize", 0, "uint32"],
 ["Hashes", 4, "Array", {"type": "Hash", "count": 1000, "sentinel": "x=&amp;gt;x.Owner = '{00000000-0000-0000-0000-000000000000}'"}]
 ]],
 ["Hash", 48, [
 ["__Owner", 0, "GUID"],
 ["Owner", 0, "Value", {"value": "x=&amp;gt;x.__Owner.Value"}],
 ["__Data", 16, "String", {"length": 32, "term": ""}],
 ["Hash", 0, "Value", {"value": "x=&amp;gt;format(format='%048x', args=[x.__Data])"}]
 ]],
 ["GUID", 16, [
 ["__D1", 0, "uint32"],
 ["__D2", 4, "uint16"],
 ["__D3", 6, "uint16"],
 ["__D4", 8, "String", {"term": "", "length": 2}],
 ["__D5", 10, "String", {"term": "", "length": 6}],
 ["Value", 0, "Value", {
 "value": "x=&amp;gt;format(format='{%08x-%04x-%04x-%02x-%02x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])"
 }]
 ]]
 ]'''

 LET GetSignatures(Namespace, Name) = Select Name as Name,
 parse_binary(accessor="data", filename=Value,
 profile=PROFILE, struct="EfiSignatures").Signatures as Signatures
 FROM efivariables(namespace=Namespace, name=Name, value=True)

sources:
 - name: Certificates
 query: |
 LET PK = Select * FROM foreach(
 row=GetSignatures(Namespace="{8be4df61-93ca-11d2-aa0d-00e098032b8c}", Name="PK"),
 query={
 Select * From foreach(
 row=Signatures,
 query={
 Select Name, Owner, Cert as Certificate From Payload
 })
 })
 LET DB = Select * FROM foreach(
 row=GetSignatures(Namespace="{d719b2cb-3d3a-4596-a3bc-dad00e67656f}", Name="db"),
 query={
 Select * From foreach(
 row=Signatures,
 query={
 Select Name, Owner, Cert as Certificate From Payload
 })
 })

 Select * from chain(
 a={ Select * From PK },
 b={ Select * From DB })

 - name: Hashes
 query: |
 Select * FROM foreach(
 row=GetSignatures(Namespace="{d719b2cb-3d3a-4596-a3bc-dad00e67656f}", Name="dbx"),
 query={
 Select * From foreach(
 row=Signatures,
 query={
 Select * FROM foreach(
 row=Payload.Hashes,
 query={
 Select Name, Owner, Hash From scope()
 })
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Generic.System.HostsFile</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.system.hostsfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.system.hostsfile/</guid><description>&lt;p>The system hosts file maps hostnames to IP addresses. In some cases,
entries in this file take precedence and overrides the results from
the system DNS service.&lt;/p>
&lt;p>The file is a simple text file, with one line per IP address. Each
whitespace-separated word following the IP address is a hostname.
The Linux man page refers to the the first hostname as &lt;em>canonical_hostname&lt;/em>,
and any following words as &lt;em>aliases&lt;/em>. They are treated the same by this
artifact.&lt;/p>
&lt;p>The hosts file is typically present on all Linux-based systems (including macOS),
with entries for localhost. The same file format is also supported on Windows.&lt;/p>
&lt;p>The source &lt;em>Hosts&lt;/em> returns each line in each hosts file that matches
the glob parameters for address and hostname. The hostname and aliases
are combined in a single column &lt;em>Hostnames&lt;/em>. Columns returned:&lt;/p>
&lt;ul>
&lt;li>OSPath&lt;/li>
&lt;li>Hostnames&lt;/li>
&lt;li>Comment&lt;/li>
&lt;/ul>
&lt;p>Only comments that follows the hostname on the same line are captured in Comment.
Comments on their own lines are ignored.&lt;/p>
&lt;p>A second source &lt;em>HostsFlattened&lt;/em> provides a flattened result, with each row
containing an IP address and a single hostname.&lt;/p>
&lt;p>This artifact also exports a function &lt;code>parse_hostsfile()&lt;/code> that returns Hostname
and Aliases individually.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.System.HostsFile
description: |
 The system hosts file maps hostnames to IP addresses. In some cases,
 entries in this file take precedence and overrides the results from
 the system DNS service.

 The file is a simple text file, with one line per IP address. Each
 whitespace-separated word following the IP address is a hostname.
 The Linux man page refers to the the first hostname as *canonical_hostname*,
 and any following words as *aliases*. They are treated the same by this
 artifact.

 The hosts file is typically present on all Linux-based systems (including macOS),
 with entries for localhost. The same file format is also supported on Windows.

 The source *Hosts* returns each line in each hosts file that matches
 the glob parameters for address and hostname. The hostname and aliases
 are combined in a single column *Hostnames*. Columns returned:

 - OSPath
 - Hostnames
 - Comment

 Only comments that follows the hostname on the same line are captured in Comment.
 Comments on their own lines are ignored.

 A second source *HostsFlattened* provides a flattened result, with each row
 containing an IP address and a single hostname.

 This artifact also exports a function `parse_hostsfile()` that returns Hostname
 and Aliases individually.

reference:
 - https://manpages.debian.org/bookworm/manpages/hosts.5.en.html

export: |
 LET _parse_hostsfile(OSPath) = SELECT parse_string_with_regex(
 string=Line,
 regex='''^[\t ]*(?P&amp;lt;Address&amp;gt;[^\s#]+)[\t ]+(?P&amp;lt;Hostname&amp;gt;[^\s#]+)(?P&amp;lt;Aliases&amp;gt;[^#\n\r]+)?(?:[\t ]*#(?P&amp;lt;Comment&amp;gt;.+))?''') AS Parsed
 FROM parse_lines(filename=OSPath)
 WHERE Parsed.Address

 LET parse_hostsfile(OSPath) = SELECT Parsed.Address AS Address,
 Parsed.Hostname AS Hostname,
 filter(list=split(sep='''\s+''', string=Parsed.Aliases), regex='.+') AS Aliases,

 /* Remove any whitespace between comment character and comment: */
 regex_replace(re='''^\s+''', source=Parsed.Comment, replace='$1') AS Comment
 FROM _parse_hostsfile(OSPath=OSPath)

 LET Files = SELECT OSPath FROM glob(globs=hostsFileGlobs.HostsFileGlobs)

 LET HostsFiles = SELECT * FROM foreach(row=Files, query={
 SELECT OSPath, Address, Hostname, Aliases, Comment
 FROM parse_hostsfile(OSPath=OSPath)
 })

parameters:
 - name: hostsFileGlobs
 description: Globs to find hosts files
 type: csv
 default: |
 HostsFileGlobs
 C:\Windows\System32\drivers\etc\hosts
 /etc/hosts
 - name: HostnameRegex
 description: Hostname or aliases to match
 default: .
 type: regex
 - name: AddressRegex
 description: IP addresses to match
 default: .
 type: regex

sources:
 - name: Hosts
 query: |
 SELECT OSPath, Address,
 (Hostname, ) + Aliases AS Hostname,
 Comment
 FROM HostsFiles
 WHERE Hostname =~ HostnameRegex
 AND Address =~ AddressRegex

 - name: HostsFlattened
 query: |
 SELECT OSPath, Address, Hostname, Comment
 FROM flatten(query={
 SELECT OSPath, Address, (Hostname, ) + Aliases AS Hostname, Comment
 FROM HostsFiles
 })
 WHERE Address =~ AddressRegex
 AND Hostname =~ HostnameRegex

&lt;/code>&lt;/pre></description></item><item><title>Generic.System.ProcessSiblings</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.system.processsiblings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.system.processsiblings/</guid><description>&lt;p>This artifact queries the process tracker to display all known
sibling processes of the target process (i.e. all other processes
from the same parent).&lt;/p>
&lt;p>This is useful to reveal the complete interaction that included
the process in question (e.g. previous shell commands etc).&lt;/p>
&lt;p>Minimum Version: 0.6.6&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.System.ProcessSiblings
description: |
 This artifact queries the process tracker to display all known
 sibling processes of the target process (i.e. all other processes
 from the same parent).

 This is useful to reveal the complete interaction that included
 the process in question (e.g. previous shell commands etc).

 Minimum Version: 0.6.6

parameters:
 - name: CommandlineRegex
 default: .
 description: Target process by this command line
 type: regex

 - name: PidFilter
 description: Filter pids by this regex
 default: .
 type: regex

 - name: IncludePstree
 type: bool

sources:
 - query: |
 LET GetDetails(Records) = SELECT
 Id AS ChildPid,
 Data.CommandLine AS CommandLine,
 Data.Username AS Username,
 StartTime, EndTime
 FROM Records
 ORDER BY StartTime

 SELECT * FROM foreach(row={
 SELECT Pid, Ppid, Name
 FROM process_tracker_pslist()
 WHERE CommandLine =~ CommandlineRegex
 AND Pid =~ PidFilter
 }, query={
 SELECT Pid,Ppid, Name, ChildPid,
 CommandLine, Username, StartTime, EndTime,
 if(condition=IncludePstree, then=process_tracker_tree(id=Ppid)) AS ParentTree
 FROM foreach(row=GetDetails(
 Records=process_tracker_children(id=Ppid)))
 })

column_types:
 - name: ParentTree
 type: tree

&lt;/code>&lt;/pre></description></item><item><title>Generic.System.Pstree</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.system.pstree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.system.pstree/</guid><description>&lt;p>This artifact displays the call chain for every process on the
system by traversing the process&amp;rsquo;s parent ID.&lt;/p>
&lt;p>It is useful for establishing where a process came from - for
example, if a powershell process is spawned from Winword (event via
a number of intemediary processes) it could mean word was
compromised.&lt;/p>
&lt;p>This artifact uses the process tracker which was introduced in
release 0.6.5. (Import an older version of this artifact using the
Server.Import.PreviousReleases if your client is older than this).&lt;/p>
&lt;p>A more accurate call chain will be available when the
Windows.Events.TrackProcesses artifact is collected (required
Sysmon) or Windows.Events.TrackProcessesBasic (does not require
Sysmon)&lt;/p>
&lt;p>Minimum Version: 0.6.6&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.System.Pstree
description: |
 This artifact displays the call chain for every process on the
 system by traversing the process's parent ID.

 It is useful for establishing where a process came from - for
 example, if a powershell process is spawned from Winword (event via
 a number of intemediary processes) it could mean word was
 compromised.

 This artifact uses the process tracker which was introduced in
 release 0.6.5. (Import an older version of this artifact using the
 Server.Import.PreviousReleases if your client is older than this).

 A more accurate call chain will be available when the
 Windows.Events.TrackProcesses artifact is collected (required
 Sysmon) or Windows.Events.TrackProcessesBasic (does not require
 Sysmon)

 Minimum Version: 0.6.6

parameters:
 - name: CommandlineRegex
 default: .
 type: regex

 - name: PidFilter
 description: Filter pids by this regex
 default: .
 type: regex

 - name: CallChainFilter
 default: .
 type: regex

 - name: CallChainSep
 default: " -&amp;gt; "

 - name: IncludePstree
 type: bool

sources:
 - query: |
 SELECT Pid, Ppid, Name, Username, Exe, CommandLine, StartTime, EndTime,
 join(array=process_tracker_callchain(id=Pid).Data.Name, sep=CallChainSep) AS CallChain,
 if(condition=IncludePstree, then=process_tracker_tree(id=Pid)) AS PSTree
 FROM process_tracker_pslist()
 WHERE CommandLine =~ CommandlineRegex
 AND CallChain =~ CallChainFilter
 AND Pid =~ PidFilter

column_types:
 - name: PSTree
 type: tree

&lt;/code>&lt;/pre></description></item><item><title>Generic.Utils.FetchBinary</title><link>https://docs.velociraptor.app/artifact_references/pages/generic.utils.fetchbinary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/generic.utils.fetchbinary/</guid><description>&lt;p>A utility artifact which fetches a binary from a URL and caches it on disk.
We verify the hash of the binary on disk and if it does not match we fetch it again
from the source URL.&lt;/p>
&lt;p>This artifact is designed to be called from other artifacts. The
binary path will be emitted in the OSPath column.&lt;/p>
&lt;p>As a result of launching an artifact with declared &amp;ldquo;tools&amp;rdquo;
field, the server will populate the following environment
variables.&lt;/p>
&lt;p>Tool_&lt;ToolName>&lt;em>HASH - The hash of the binary
Tool&lt;/em>&lt;ToolName>&lt;em>FILENAME - The filename to store it.
Tool&lt;/em>&lt;ToolName>_URL - The URL.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Generic.Utils.FetchBinary
description: |
 A utility artifact which fetches a binary from a URL and caches it on disk.
 We verify the hash of the binary on disk and if it does not match we fetch it again
 from the source URL.

 This artifact is designed to be called from other artifacts. The
 binary path will be emitted in the OSPath column.

 As a result of launching an artifact with declared "tools"
 field, the server will populate the following environment
 variables.

 Tool_&amp;lt;ToolName&amp;gt;_HASH - The hash of the binary
 Tool_&amp;lt;ToolName&amp;gt;_FILENAME - The filename to store it.
 Tool_&amp;lt;ToolName&amp;gt;_URL - The URL.

parameters:
 - name: ToolName
 default: Autorun_amd64

 - name: IsExecutable
 type: bool
 default: Y
 description: Set to Y if the file needs to be executable (on windows it will have .exe extension)

 - name: SleepDuration
 default: "20"
 type: int
 description: A time to sleep before fetching the binary.

 - name: ToolInfo
 type: hidden
 description: A dict containing the tool information.

 - name: TemporaryOnly
 type: bool
 description: |
 If true we use a temporary directory to hold the binary and
 remove it afterwards

 - name: Version
 description: The version of the tool to fetch

sources:
 - query: |
 -- The following VQL is particularly ancient because it is
 -- running on the client and it needs to be compatibile with
 -- clients at least back to 0.3.9

 LET info_cache &amp;lt;= SELECT * FROM info()
 LET inventory_item = SELECT inventory_get(
 tool=ToolName, version=Version) AS Item FROM scope()

 LET args &amp;lt;= SELECT * FROM switch(
 // Try to get info from the ToolInfo parameter.
 a={SELECT get(field="Tool_" + ToolName + "_HASH", item=ToolInfo) AS ToolHash,
 get(field="Tool_" + ToolName + "_FILENAME", item=ToolInfo) AS ToolFilename,
 get(field="Tool_" + ToolName + "_URL", item=ToolInfo) AS ToolURL,
 get(field="Tool_" + ToolName + "_PATH", item=ToolInfo) AS ToolPath
 FROM scope() WHERE ToolFilename},

 // Failing this - get it from the scope()
 b={SELECT get(field="Tool_" + ToolName + "_HASH", item=scope()) AS ToolHash,
 get(field="Tool_" + ToolName + "_FILENAME", item=scope()) AS ToolFilename,
 get(field="Tool_" + ToolName + "_URL", item=scope()) AS ToolURL,
 get(field="Tool_" + ToolName + "_PATH", item=ToolInfo) AS ToolPath
 FROM scope() WHERE ToolFilename},

 // Failing this - try to get it from the inventory service directly.
 c={SELECT get(field="Tool_" + ToolName + "_HASH", item=(inventory_item[0]).Item) AS ToolHash,
 get(field="Tool_" + ToolName + "_FILENAME", item=(inventory_item[0]).Item) AS ToolFilename,
 get(field="Tool_" + ToolName + "_URL", item=(inventory_item[0]).Item) AS ToolURL
 FROM scope() WHERE ToolFilename}
 )

 // Keep the binaries cached in the temp directory. We verify the
 // hashes all the time so this should be safe.
 LET binpath &amp;lt;= SELECT Path FROM switch(

 -- Allow user to specify a temporary directory which
 -- will be cleaned up.
 a={SELECT tempdir(remove_last=TRUE) AS Path
 FROM scope() WHERE TemporaryOnly },

 -- Otherwise use the temp directory (The official MSI
 -- sets this to a known location)
 b={SELECT dirname(path=tempfile()) AS Path
 FROM scope() WHERE Path },

 c={SELECT "/tmp" AS Path FROM info_cache WHERE OS = "linux" }
 )

 // Where we should save the file.
 LET ToolPath &amp;lt;= SELECT path_join(components=[
 (binpath[0]).Path, (args[0]).ToolFilename]) AS Path FROM scope()

 // Support tools locally served from disk
 LET local_file =
 SELECT hash(path=(args[0]).ToolPath) as Hash,
 (args[0]).ToolFilename AS Name,
 "Downloaded" AS DownloadStatus,
 (args[0]).ToolPath AS OSPath
 FROM scope()
 WHERE (args[0]).ToolPath AND
 log(message="File served from " + (args[0]).ToolPath)

 // Download the file from the binary URL and store in the local
 // binary cache.
 LET download = SELECT * FROM if(condition=log(
 message="URL for " + (args[0]).ToolFilename +
 " is at " + (args[0]).ToolURL + " and has hash of " + (args[0]).ToolHash)
 AND binpath AND (args[0]).ToolHash AND (args[0]).ToolURL,
 then={
 SELECT hash(path=Content) as Hash,
 (args[0]).ToolFilename AS Name,
 "Downloaded" AS DownloadStatus,
 copy(filename=Content, dest=(ToolPath[0]).Path,
 permissions=if(condition=IsExecutable, then="x")) AS OSPath
 FROM http_client(url=(args[0]).ToolURL, tempfile_extension=".tmp")
 WHERE log(message=format(format="downloaded hash of %v: %v, expected %v", args=[
 Content, Hash.SHA256, (args[0]).ToolHash]))
 AND Hash.SHA256 = (args[0]).ToolHash
 }, else={
 SELECT * FROM scope()
 WHERE NOT log(message="No valid setup - is tool " + ToolName +
 " configured in the server inventory?")
 })

 // Check if the existing file in the binary file cache matches
 // the hash.
 LET existing = SELECT OSPath, hash(path=OSPath) AS Hash, Name,
 "Cached" AS DownloadStatus
 FROM stat(filename=(ToolPath[0]).Path)
 WHERE log(message=format(format="Local hash of %v: %v, expected %v", args=[
 OSPath, Hash.SHA256, (args[0]).ToolHash]))
 AND Hash.SHA256 = (args[0]).ToolHash

 // Find the required_tool either in the local cache or
 // download it (and put it in the cache for next time). If we
 // have to download the file we sleep for a random time to
 // stagger server bandwidth load.
 SELECT *, OSPath AS FullPath
 FROM switch(
 a=local_file,
 b=existing,
 c={
 SELECT rand(range=SleepDuration) AS timeout
 FROM scope()
 WHERE args AND (args[0]).ToolURL AND
 log(message=format(format='Sleeping %v Seconds',
 args=[timeout])) AND sleep(time=timeout) AND FALSE
 },
 d=download)

&lt;/code>&lt;/pre></description></item><item><title>Linux.Applications.Chrome.Extensions</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.applications.chrome.extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.applications.chrome.extensions/</guid><description>&lt;p>Fetch Chrome extensions.&lt;/p>
&lt;p>Chrome extensions are installed into the user&amp;rsquo;s home directory. We
search for manifest.json files in a known path within each system
user&amp;rsquo;s home directory. We then parse the manifest file as JSON.&lt;/p>
&lt;p>Many extensions use locale packs to resolve strings like name and
description. In this case we detect the default locale and load
those locale files. We then resolve the extension&amp;rsquo;s name and
description from there.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Applications.Chrome.Extensions
description: |
 Fetch Chrome extensions.

 Chrome extensions are installed into the user's home directory. We
 search for manifest.json files in a known path within each system
 user's home directory. We then parse the manifest file as JSON.

 Many extensions use locale packs to resolve strings like name and
 description. In this case we detect the default locale and load
 those locale files. We then resolve the extension's name and
 description from there.

parameters:
 - name: extensionGlobs
 default: /.config/google-chrome/*/Extensions/*/*/manifest.json
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 /* For each user on the system, search for extension manifests
 in their home directory. */
 LET extension_manifests = SELECT * from foreach(
 row={
 SELECT Uid, User, Homedir from Artifact.Linux.Sys.Users()
 },
 query={
 SELECT OSPath, Mtime, Ctime, User, Uid
 FROM glob(
 globs=extensionGlobs,
 root=Homedir)
 })

 /* If the Manifest declares a default_locale then we
 load and parse the messages file. In this case the
 messages are actually stored in the locale file
 instead of the main manifest.json file.
 */
 LET maybe_read_locale_file =
 SELECT * from if(
 condition={
 select * from scope() where Manifest.default_locale
 },
 then={
 SELECT Manifest,
 Uid, User,
 Filename as LocaleFilename,
 ManifestFilename,
 parse_json(data=Data) AS LocaleManifest
 FROM read_file(
 -- Munge the filename to get the messages.json path.
 filenames=regex_replace(
 source=ManifestFilename,
 replace="/_locales/" + Manifest.default_locale +
 "/messages.json",
 re="/manifest.json$"))
 },
 else={
 -- Just fill in empty Locale results.
 SELECT Manifest,
 Uid, User,
 "" AS LocaleFilename,
 "" AS ManifestFilename,
 "" AS LocaleManifest
 FROM scope()
 })

 LET parse_json_files = SELECT * from foreach(
 row={
 SELECT Filename as ManifestFilename,
 Uid, User,
 parse_json(data=Data) as Manifest
 FROM read_file(filenames=OSPath)
 },
 query=maybe_read_locale_file)

 LET parsed_manifest_files = SELECT * from foreach(
 row=extension_manifests,
 query=parse_json_files)

 SELECT Uid, User,

 /* If the manifest name contains __MSG_ then the real
 name is stored in the locale manifest. This condition
 resolves the Name column either to the main manifest or
 the locale manifest.
 */
 if(condition="__MSG_" in Manifest.name,
 then=get(item=LocaleManifest,
 member=regex_replace(
 source=Manifest.name,
 replace="$1",
 re="(?:__MSG_(.+)__)")).message,
 else=Manifest.name) as Name,

 if(condition="__MSG_" in Manifest.description,
 then=get(item=LocaleManifest,
 member=regex_replace(
 source=Manifest.description,
 replace="$1",
 re="(?:__MSG_(.+)__)")).message,
 else=Manifest.description) as Description,

 /* Get the Identifier and Version from the manifest filename */
 regex_replace(
 source=ManifestFilename,
 replace="$1",
 re="(?:.+Extensions/([^/]+)/([^/]+)/manifest.json)$") AS Identifier,
 regex_replace(
 source=ManifestFilename,
 replace="$2",
 re="(?:.+Extensions/([^/]+)/([^/]+)/manifest.json)$") AS Version,

 Manifest.author as Author,
 Manifest.background.persistent AS Persistent,
 regex_replace(
 source=ManifestFilename,
 replace="$1",
 re="(.+Extensions/.+/)manifest.json$") AS Path,

 Manifest.oauth2.scopes as Scopes,
 Manifest.permissions as Permissions,
 Manifest.key as Key

 FROM parsed_manifest_files

&lt;/code>&lt;/pre></description></item><item><title>Linux.Applications.Chrome.Extensions.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.applications.chrome.extensions.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.applications.chrome.extensions.upload/</guid><description>&lt;p>Upload all users chrome extension.&lt;/p>
&lt;p>We dont bother actually parsing anything here, we just grab all the
extension files in user&amp;rsquo;s home directory.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Applications.Chrome.Extensions.Upload
description: |
 Upload all users chrome extension.

 We dont bother actually parsing anything here, we just grab all the
 extension files in user's home directory.

parameters:
 - name: extensionGlobs
 default: /.config/google-chrome/*/Extensions/**
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 -- For each user on the system, search for extension files
 -- in their home directory and upload them.
 SELECT * from foreach(
 row={
 SELECT Uid, User, Homedir from Artifact.Linux.Sys.Users()
 },
 query={
 SELECT OSPath, Mtime, Ctime, User, Uid,
 upload(file=OSPath) as Upload
 FROM glob(globs=extensionGlobs, root=Homedir)
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Applications.Docker.Info</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.applications.docker.info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.applications.docker.info/</guid><description>&lt;p>Get Dockers info by connecting to its socket.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Applications.Docker.Info
description: Get Dockers info by connecting to its socket.
parameters:
 - name: dockerSocket
 description: |
 Docker server socket. You will normally need to be root to connect.
 default: /var/run/docker.sock
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 LET data = SELECT parse_json(data=Content) as JSON
 FROM http_client(url=dockerSocket + ":unix/info")

 SELECT JSON.ID as ID,
 JSON.Containers as Containers,
 JSON.ContainersRunning as ContainersRunning,
 JSON.ContainersPaused as ContainersPaused,
 JSON.ContainersStopped as ContainersStopped,
 JSON.Images as Images,
 JSON.Driver as Driver,
 JSON.MemoryLimit as MemoryLimit,
 JSON.SwapLimit as SwapLimit,
 JSON.KernelMemory as KernelMemory,
 JSON.CpuCfsPeriod as CpuCfsPeriod,
 JSON.CpuCfsQuota as CpuCfsQuota,
 JSON.CPUShares as CPUShares,
 JSON.CPUSet as CPUSet,
 JSON.IPv4Forwarding as IPv4Forwarding,
 JSON.BridgeNfIptables as BridgeNfIptables,
 JSON.BridgeNfIp6tables as BridgeNfIp6tables,
 JSON.OomKillDisable as OomKillDisable,
 JSON.LoggingDriver as LoggingDriver,
 JSON.CgroupDriver as CgroupDriver,
 JSON.KernelVersion as KernelVersion,
 JSON.OperatingSystem as OperatingSystem,
 JSON.OSType as OSType,
 JSON.Architecture as Architecture,
 JSON.NCPU as NCPU,
 JSON.MemTotal as MemTotal,
 JSON.HttpProxy as HttpProxy,
 JSON.HttpsProxy as HttpsProxy,
 JSON.NoProxy as NoProxy,
 JSON.Name as Name,
 JSON.ServerVersion as ServerVersion,
 JSON.DockerRootDir as DockerRootDir
 FROM data

&lt;/code>&lt;/pre></description></item><item><title>Linux.Applications.Docker.Version</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.applications.docker.version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.applications.docker.version/</guid><description>&lt;p>Get Dockers version by connecting to its socket.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Applications.Docker.Version
description: Get Dockers version by connecting to its socket.
parameters:
 - name: dockerSocket
 description: |
 Docker server socket. You will normally need to be root to connect.
 default: /var/run/docker.sock
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 LET data = SELECT parse_json(data=Content) as JSON
 FROM http_client(url=dockerSocket + ":unix/version")

 SELECT JSON.Version as Version,
 JSON.ApiVersion as ApiVersion,
 JSON.MinAPIVersion as MinAPIVersion,
 JSON.GitCommit as GitCommit,
 JSON.GoVersion as GoVersion,
 JSON.Os as Os,
 JSON.Arch as Arch,
 JSON.KernelVersion as KernelVersion,
 JSON.BuildTime as BuildTime
 FROM data

&lt;/code>&lt;/pre></description></item><item><title>Linux.Debian.AptSources</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.debian.aptsources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.debian.aptsources/</guid><description>&lt;p>Parse Debian apt sources.&lt;/p>
&lt;p>This Artifact searches for all apt sources files and parses all
fields in both one–line &lt;code>*.list&lt;/code> files and &lt;code>*.sources&lt;/code> files
(deb822-style format). The results are presented both in a readable
table and a flattened version for parsing.&lt;/p>
&lt;p>&lt;code>*.list&lt;/code> files contains lines of the form&lt;/p>
&lt;pre>&lt;code>deb http://us.archive.ubuntu.com/ubuntu/ bionic main restricted
deb-src [arch=amd64,i386 signed-by=/usr/share/keyrings/foo.gpg] https://foo.bar.baz/ubuntu/main jammy main restricted universe multiverse # Comment
&lt;/code>&lt;/pre>
&lt;p>deb indicates a source for binary packages, and deb-src instructs APT where
to find source code for packages.&lt;/p>
&lt;p>&lt;code>*.sources&lt;/code> files (deb822-style format) are in the form of key–value
lines, and as opposed to the one–line format, they may contain
multiple URIs, components and types (deb/deb-src), along with
embedded GPG keys. Example:&lt;/p>
&lt;pre>&lt;code>Types: deb deb-src
URIs: file:/home/apt/debian http://foo.bar.baz/main
Suites: unstable
Components: main contrib non-free
&lt;/code>&lt;/pre>
&lt;p>The exported function &lt;code>parse_aptsources(OSPath, flatten)&lt;/code> parses
both formats and returns an (optionally flattened) table with&lt;/p>
&lt;ul>
&lt;li>OSPath&lt;/li>
&lt;li>Types (deb/deb-src)&lt;/li>
&lt;li>Components (e.g. main/contrib/non-free/restricted,universe)&lt;/li>
&lt;li>Suites (e.g. unstable/bookworm/jammy)&lt;/li>
&lt;li>_URIBase (.e.g us.archive.ubuntu.com/ubuntu/)&lt;/li>
&lt;li>_Transport (e.g. http/https/file/cdrom/ftp)&lt;/li>
&lt;li>URIs (e.g. &lt;a href="http://us.archive.ubuntu.com/ubuntu/" target="_blank" >http://us.archive.ubuntu.com/ubuntu/&lt;/a>
)&lt;/li>
&lt;/ul>
&lt;p>Any option is added to an individual column. The most common options
are&lt;/p>
&lt;ul>
&lt;li>Architectures (e.g. amd64/i386/armel)&lt;/li>
&lt;li>Signed-By (e.g. /usr/share/keyrings/osquery.gpg)&lt;/li>
&lt;/ul>
&lt;p>All known option names are transformed to the plural PascalCase
variants as listed in the sources.list man page. Any undocumented
options will still be included in the results, with names unchanged.
Options in the one-line format of the form &amp;ldquo;lang+=de&amp;rdquo;/&amp;ldquo;arch-=i386&amp;rdquo;
will be put in columns like &amp;ldquo;Languages-Add&amp;rdquo;/&amp;ldquo;Architectures-Remove&amp;rdquo;,
matching the option names having the same effect in deb822.&lt;/p>
&lt;p>Entries in deb822 sources files may be disabled by including
&amp;ldquo;Enabled: no&amp;rdquo; instead of commenting out all lines. If this field
is not present with a falsly value, the entry is enabled. Use the
exported functions DebTrue()/DebFalse() to correctly parse all
accepted true/false strings, or use the VQL suggestion &amp;ldquo;Only enabled
sources&amp;rdquo; to filter on this column (true), if present.&lt;/p>
&lt;p>If the GPG key is embedded in a .sources file, the whole GPG key
will be included in the cell. Otherwise the value will be a file
path. Use the VQL suggestion &amp;ldquo;Hide embedded GPG keys&amp;rdquo; to replace
embedded GPG keys with &amp;ldquo;(embedded)&amp;rdquo; in the results. In order to
inspect the keys themselves (files or embedded data), use the
exchange artifact Linux.Debian.GPGKeys.&lt;/p>
&lt;p>If the function parameter &amp;ldquo;flatten&amp;rdquo; is False, multi–value fields
(like Components) will be combined in a single space-separated
string in each row.&lt;/p>
&lt;p>In addition to the two apt sources tables, a third table correlates
information from InRelease and Release files to provide additional
metadata. The modification timestamps may tell when the package
lists where last updated.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Debian.AptSources
description: |
 Parse Debian apt sources.

 This Artifact searches for all apt sources files and parses all
 fields in both one–line `*.list` files and `*.sources` files
 (deb822-style format). The results are presented both in a readable
 table and a flattened version for parsing.

 `*.list` files contains lines of the form

 ```
 deb http://us.archive.ubuntu.com/ubuntu/ bionic main restricted
 deb-src [arch=amd64,i386 signed-by=/usr/share/keyrings/foo.gpg] https://foo.bar.baz/ubuntu/main jammy main restricted universe multiverse # Comment
 ```

 deb indicates a source for binary packages, and deb-src instructs APT where
 to find source code for packages.

 `*.sources` files (deb822-style format) are in the form of key–value
 lines, and as opposed to the one–line format, they may contain
 multiple URIs, components and types (deb/deb-src), along with
 embedded GPG keys. Example:

 ```
 Types: deb deb-src
 URIs: file:/home/apt/debian http://foo.bar.baz/main
 Suites: unstable
 Components: main contrib non-free
 ```

 The exported function `parse_aptsources(OSPath, flatten)` parses
 both formats and returns an (optionally flattened) table with

 - OSPath
 - Types (deb/deb-src)
 - Components (e.g. main/contrib/non-free/restricted,universe)
 - Suites (e.g. unstable/bookworm/jammy)
 - _URIBase (.e.g us.archive.ubuntu.com/ubuntu/)
 - _Transport (e.g. http/https/file/cdrom/ftp)
 - URIs (e.g. http://us.archive.ubuntu.com/ubuntu/)

 Any option is added to an individual column. The most common options
 are

 - Architectures (e.g. amd64/i386/armel)
 - Signed-By (e.g. /usr/share/keyrings/osquery.gpg)

 All known option names are transformed to the plural PascalCase
 variants as listed in the sources.list man page. Any undocumented
 options will still be included in the results, with names unchanged.
 Options in the one-line format of the form "lang+=de"/"arch-=i386"
 will be put in columns like "Languages-Add"/"Architectures-Remove",
 matching the option names having the same effect in deb822.

 Entries in deb822 sources files may be disabled by including
 "Enabled: no" instead of commenting out all lines. If this field
 is not present with a falsly value, the entry is enabled. Use the
 exported functions DebTrue()/DebFalse() to correctly parse all
 accepted true/false strings, or use the VQL suggestion "Only enabled
 sources" to filter on this column (true), if present.

 If the GPG key is embedded in a .sources file, the whole GPG key
 will be included in the cell. Otherwise the value will be a file
 path. Use the VQL suggestion "Hide embedded GPG keys" to replace
 embedded GPG keys with "(embedded)" in the results. In order to
 inspect the keys themselves (files or embedded data), use the
 exchange artifact Linux.Debian.GPGKeys.

 If the function parameter "flatten" is False, multi–value fields
 (like Components) will be combined in a single space-separated
 string in each row.

 In addition to the two apt sources tables, a third table correlates
 information from InRelease and Release files to provide additional
 metadata. The modification timestamps may tell when the package
 lists where last updated.

reference:
 - https://manpages.debian.org/bookworm/apt/sources.list.5.en.html
 - https://manpages.debian.org/bookworm/dpkg-dev/deb822.5.en.html
 - https://salsa.debian.org/apt-team/apt/-/blob/main/apt-pkg/sourcelist.cc
 - https://wiki.debian.org/DebianRepository/Format#A.22Release.22_files

export: |
 /* Remove whitespace from the beginning and end of a string: */
 LET Trim(string) = regex_transform(source=string, map=dict(
 `(?m)^\\s+`='',
 `(?m)\\s+$`=''
 ))

 /* Replace any repeating whitespace with a single space: */
 LET Simplify(string) = regex_replace(source=string, re='''\s+''', replace=' ')

 /* The syntax in lists (deb822) and sources (one-line) files varies a bit,
 and deb822 is case-insensitive. Normalise all known fields (as per
 the man page): */
 LET NormaliseOpts(string) = regex_transform(source=string, map=dict(
 `(?i)types|type`='Types',
 `(?i)uris|uri`='URIs',
 `(?i)suites|suite`='Suites',
 `(?i)components|component`='Components',
 `(?i)architectures$|arch$`='Architectures',
 `(?i)architectures-add`='Architectures-Add',
 `(?i)architectures-remove`='Architectures-Remove',
 `(?i)languages$|lang$`='Languages',
 `(?i)languages-add`='Languages-Add',
 `(?i)languages-remove`='Languages-Remove',
 `(?i)targets$|target$`='Targets',
 `(?i)targets-add`='Targets-Add',
 `(?i)targets-remove`='Targets-Remove',
 `(?i)pdiffs`='PDiffs',
 `(?i)by-hash`='By-Hash',
 `(?i)allow-insecure`='Allow-Insecure',
 `(?i)allow-weak`='Allow-Weak',
 `(?i)allow-downgrade-to-insecure`='Allow-Downgrade-To-Insecure',
 `(?i)trusted`='Trusted',
 `(?i)signed-by`='Signed-By',
 `(?i)check-valid-until`='Check-Valid-Until',
 `(?i)valid-until-min`='Valid-Until-Min',
 `(?i)valid-until-max`='Valid-Until-Max',
 `(?i)check-date`='Check-Date',
 `(?i)date-max-future`='Date-Max-Future',
 `(?i)inrelease-path`='InRelease-Path',
 `(?i)enabled`='Enabled'
 ))

 LET DebTrue(string) = if(
 condition=string=~'(?i)^(?:yes|true|with|on|enable)$',
 then=true, else=false)
 LET DebFalse(string) = if(
 condition=string=~'(?i)^(?:no|false|without|off|disable)$',
 then=true, else=false)

 /* Extract Key–Value pairs from option string. If assignment is -=/+=,
 the -/+ operator is captured in Op: */
 LET OptStringToKeyValues__(string) = SELECT *
 FROM parse_records_with_regex(
 regex='''(?P&amp;lt;Key&amp;gt;[^ ]+?)(?P&amp;lt;Op&amp;gt;-|\+)?=(?P&amp;lt;Value&amp;gt;[^ ]+)''',
 accessor='data', file=string
 )

 /* Since option values may have multiple words, split them and flatten
 the results for further processing: */
 LET OptStringToKeyValues_(string) = SELECT *
 FROM flatten(query={
 SELECT Key,
 Op,
 split(sep_string=',', string=Value) AS Value
 FROM OptStringToKeyValues__(string=string)
 })

 /* Since options may be repeated, enumerate and group all values
 per key and operation: */
 LET OptStringToKeyValues(string) = SELECT Key,
 Op,
 enumerate(items=Value) AS Value
 FROM OptStringToKeyValues_(string=string)
 GROUP BY Key, Op

 /* When an option is specified with +/-, represent this by appending
 -Add/-Remove to the option name. These names match the syntax in
 the deb822 format (i.e. "arch-=i386" == "Arhitectures-Remove: i386").
 The purpose of these assignments is to keep the default values
 (rather than overriding them), but add or remove one or several
 values: */
 LET OpName(op) = if(condition=op='+',then='-Add',else=
 if(condition=op='-',then='-Remove',else=''))

 /* Convert a string of key–value pairs to a dict, and use consistent
 option names: */
 LET OptStringToDict(string, flatten) = to_dict(item={
 SELECT NormaliseOpts(string=Key)+OpName(op=Op) AS _key,
 if(condition=flatten, then=Value,
 else=join(array=Value, sep=' ')) AS _value
 FROM OptStringToKeyValues(string=string)
 })

 /* Parse a one-line deb sources.list file with options as a single string: */
 LET DebOneLine_Opts(OSPath) = SELECT OSPath, Type AS Types,
 Simplify(string=Options) AS Options, URI AS URIs,
 Transport AS _Transport, URIBase AS _URIBase, Suite AS Suites,
 Simplify(string=Trim(string=Components)) AS Components
 FROM parse_records_with_regex(
 file=OSPath,
 /* This regex attemps to cover most of the ways a sources
 line can be written without being overly complex. Quotes
 ("" and []) are actually allowed to certain degree by the
 apt source code, but this is considered obscure syntax and
 is not expected to be found in the wild. The exception is
 "cdrom:[word word…]", which is capture correctly in order
 to not end up with incorrectly captured words: */
 regex='''(?m)^\s*(?P&amp;lt;Type&amp;gt;deb(-src)?)(?:\s+\[(?P&amp;lt;Options&amp;gt;[^\]#]+)(?:#[^\]]+)?\])?\s+"?(?P&amp;lt;URI&amp;gt;(?P&amp;lt;Transport&amp;gt;[^:]+):(?://)?(?P&amp;lt;URIBase&amp;gt;\[.+?\]|\S+?))"?\s+(?P&amp;lt;Suite&amp;gt;\S+)\s+(?P&amp;lt;Components&amp;gt;[^\n#]+)'''
 )

 /* Parse a one-line deb sources.list file and output a dict: */
 LET DebOneLine_Dict(OSPath, flatten) = SELECT OSPath, *
 FROM foreach(row=DebOneLine_Opts(OSPath=OSPath),
 query={SELECT _value +
 OptStringToDict(string=Options, flatten=flatten) AS Contents
 FROM items(item={SELECT Types, URIs, _Transport, _URIBase, Suites,
 if(condition=flatten, then=split(sep_string=' ',
 string=Components), else=Components) AS Components
 FROM scope()
 })
 })

 /* Parse a one-line deb sources.list file with options in individual columns: */
 LET DebOneLine(OSPath) = SELECT OSPath, * FROM foreach(
 row=DebOneLine_Dict(OSPath=OSPath, flatten=false),
 column='Contents'
 )

 /* Parse a one-line deb sources.list file with options in individual
 columns and flatten: */
 LET DebOneLine_Flattened(OSPath) = SELECT OSPath, * FROM flatten(
 query={SELECT * FROM foreach(
 row=DebOneLine_Dict(OSPath=OSPath, flatten=true),
 column='Contents'
 )
 })

 /* Extract the transport/protocol and base from a URI: */
 LET URIComponents(URI) = parse_string_with_regex(
 regex='''(?P&amp;lt;Transport&amp;gt;[^:]+):(?://)?(?P&amp;lt;URIBase&amp;gt;[^\s]+)''',
 string=URI
 )

 /* Although the documentation says to use whitespace and not comma
 for multi-values in deb822, comma still appears to be supported,
 and this use is seen in the wild. Treat these values correctly.
 Note that this does not affect all keys, like suites and
 components:
 */
 LET MaybeReplaceComma(key, value) = if(
 condition=key=~'(?i)^(?:arch|lang|targets)',
 then=regex_replace(re='\s*,\s*', source=value, replace=' '),
 else=value)

 /* Parse a deb822 sources file section into a series of key–value pairs.
 Notes about the format:
 - Keys must be at the beginning of the line (no whitespace allowed)
 - Keys are case-insensitive
 - Keys may be repeated. Values are not overridden, but combined
 - Special keys that end in -Add/-Remove uses the default values,
 but add or remove individual values. These keys are treated as
 individual option names.
 - Comments may only appear at the beginning of the line
 - Multiple values are separated by whitespace, not comma. However,
 some multi-value fields separated by comma are still split, even
 if this is not mentioned in the documentation.
 - Values may be multi-line (like when containing an embedded GPG key),
 but following lines must be prefixed by whitespace. Multilines
 may contain comments (prefixed by whitespace or not). Empty lines
 part of a multi-line value must be prefixed by whitespace and "."
 - A file may contain multiple entries, separated by empty lines.
 A file must be split into sections, fed individually to this function
 */
 LET Deb822_KeyValues___(section) = SELECT Key,
 /* Signed-By is special (it could be an embedded GPG key),and
 shouldn't be split: */
 if(condition=NormaliseOpts(string=Key)!='Signed-By',
 then=split(sep_string=' ',
 string=MaybeReplaceComma(key=Key,
 value=Simplify(string=Trim(string=Value)))),
 else=Value) AS Value
 FROM parse_records_with_regex(
 accessor='data',
 /* A key is anything but whitespace up to a colon
 Values can continue on several lines, but only if the following
 lines are indented with whitespace
 */
 regex='''(?m)^(?P&amp;lt;Key&amp;gt;[^#:\s]+)\s*:[^\S\n]*(?P&amp;lt;Value&amp;gt;[^\n]*(?:\n[^\S\n]+[^\n]+)*)''',
 /* Before parsing the key–values, remove all comments from the file
 (otherwise forming a regex without lookarounds would be very
 difficult, if not impossible), Luckily, comments follow strict
 rules and must start with ^#.
 */
 file=regex_replace(
 re='''(?m)^#.+\n''',
 source=section
 )
 )

 LET Deb822_KeyValues__(section) = SELECT * FROM flatten(query={
 SELECT * FROM Deb822_KeyValues___(section=section)
 })

 LET Deb822_KeyValues_(section) = SELECT Key,
 enumerate(items=Value) AS Value
 FROM Deb822_KeyValues__(section=section)
 GROUP BY Key

 /* Parse a deb822 sources file section into a dict with consistent option
 names: */
 LET Deb822_KeyValues(section, flatten) = SELECT to_dict(
 item={
 SELECT NormaliseOpts(string=Key) as _key,
 if(condition=flatten, then=Value,
 else=join(array=Value, sep=' ')) AS _value
 FROM Deb822_KeyValues_(section=section)
 }) AS Contents
 FROM scope()

 /* Split paragraphs in a file (separated by one or several empty
 lines) into rows. ('regex' is just anything that is illegal in Deb822Sections
 to prevent splitting data into records.): */
 LET Deb822Sections(OSPath) = SELECT OSPath,* FROM split_records(
 filenames=OSPath,
 columns='Section',
 regex='^ #', record_regex='''\n{2,}'''
 )

 LET Deb822_Flattened_(OSPath) = SELECT * FROM foreach(
 row=Deb822Sections(OSPath=OSPath),
 query={SELECT OSPath, * FROM flatten(query={
 SELECT * FROM foreach(
 row=Deb822_KeyValues(section=Section, flatten=true),
 column='Contents'
 )
 })}
 )
 /* DEB822_Sections() may produce empty rows. Exclude these by filtering
 for a required column, like URIs: */
 WHERE URIs

 /* Parse a deb822 sources file with options in individual columns.
 Note that, as opposed to DebOneLine and Deb822_Flattened, this
 function does not return the columns _URIBase and _Transport, since
 this format supports mulitple URIs to be specified: */
 LET Deb822(OSPath) = SELECT * FROM foreach(
 row=Deb822Sections(OSPath=OSPath),
 query={SELECT OSPath, * FROM foreach(
 row=Deb822_KeyValues(section=Section, flatten=false),
 column='Contents'
 )}
 )
 WHERE URIs

 /* Parse a deb822 sources file with options in individual columns, flattened: */
 LET Deb822_Flattened(OSPath) = SELECT * FROM flatten(query={
 SELECT OSPath, *, URIComponents(URI=URIs).URIBase AS _URIBase,
 URIComponents(URI=URIs).Transport AS _Transport
 FROM Deb822_Flattened_(OSPath=OSPath)
 })

 /* Parse an apt sources/list file */
 LET parse_aptsources(OSPath, flatten) = if(
 condition=OSPath=~'.list$',
 then=if(condition=flatten,
 then=DebOneLine_Flattened(OSPath=OSPath),
 else=DebOneLine(OSPath=OSPath)
 ),
 else=if(condition=flatten,
 then=Deb822_Flattened(OSPath=OSPath),
 else=Deb822(OSPath=OSPath)
 )
 )

 LET files = SELECT OSPath FROM glob(
 globs=linuxAptSourcesGlobs.ListGlobs)

 LET deb_sources = SELECT * FROM foreach(row=files,
 query={SELECT * FROM parse_aptsources(OSPath=OSPath, flatten=true)}
 )

parameters:
 - name: linuxAptSourcesGlobs
 description: Globs to find apt source *.list and .sources files.
 type: csv
 default: |
 ListGlobs
 /etc/apt/sources.list
 /etc/apt/sources.list.d/*.list
 /etc/apt/sources.list.d/*.sources
 - name: aptCacheDirectory
 description: Location of the apt cache directory.
 default: /var/lib/apt/lists/

precondition:
 SELECT OS From info() where OS = 'linux'

sources:
 - name: Sources
 query: |
 /* Output sources in a readable format: */
 SELECT * FROM foreach(row=files,
 query={SELECT * FROM parse_aptsources(OSPath=OSPath, flatten=false)}
 )
 notebook:
 - type: vql_suggestion
 name: Only enabled sources
 template: |
 /*
 # Sources (enabled only)
 */
 SELECT * FROM source()
 WHERE Enabled =~ '(?i)^(?:yes|true|with|on|enable)$' || true

 - type: vql_suggestion
 name: Trusted sources (apt-secure bypassed)
 template: |
 /*
 # "Trusted" sources (apt-secure bypassed)

 When the Trusted option is true, apt does not verify the GPG
 signature of the Release files of the repository, and it also
 doe not warn about this.
 */
 SELECT * FROM source()
 WHERE Trusted =~ '(?i)^(?:yes|true|with|on|enable)$' || false

 - type: vql_suggestion
 name: Hide embedded GPG keys
 template: |
 /*
 # Sources (embedded GPG keys hidden)
 */
 SELECT *, if(condition=get(field='Signed-By')=~'BEGIN PGP PUBLIC KEY',
 then='(embedded)', else=get(field='Signed-By')) AS `Signed-By`
 FROM source()

 - name: SourcesFlattened
 query: |
 /* Output sources flattened for ease of analysis: */
 SELECT * FROM deb_sources

 - name: SourcesCacheFiles
 query: |
 /* We try to get at the Release file in /var/lib/apt/ by munging
 the components and URL.
 Strip the last component off, convert / and space to _ and
 add _Release/_InRelease to get the filename.
 */
 LET parsed_apt_lines = SELECT get(field='Architectures', default='') AS Architectures, URIs,
 _URIBase + " " + Suites + " " + Components as Name, Types,
 OSPath as Source, aptCacheDirectory + regex_replace(
 replace="_",
 re="_+",
 source=regex_replace(
 replace="_", re="[ /]",
 source=_URIBase + "_dists_" + Suites
 )) as cache_file
 FROM deb_sources
 GROUP BY URIs, Suites

 /* This runs if the file was found. Read the entire file into
 memory and parse the same record using multiple RegExps.
 */
 LET parsed_cache_files(file) = SELECT Name, Architectures, URIs, Types,
 Source, parse_string_with_regex(
 string=regex_replace(source=Record,
 re='(?m)^Version: GnuPG v.+$', replace=''
 ),
 regex=["Codename: (?P&amp;lt;Release&amp;gt;[^\\n]+)",
 "Version: (?P&amp;lt;Version&amp;gt;[^\\n]+)",
 "Origin: (?P&amp;lt;Origin&amp;gt;[^\\n]+)",
 "Architectures: (?P&amp;lt;Architectures&amp;gt;[^\\n]+)",
 "Components: (?P&amp;lt;Components&amp;gt;[^\\n]+)"]) as Record
 FROM parse_records_with_regex(file=file, regex="(?sm)(?P&amp;lt;Record&amp;gt;.+)")

 // Foreach row in the parsed cache file, collect the FileInfo too.
 LET add_stat_to_parsed_cache_file(file) = SELECT * from foreach(
 query={
 SELECT OSPath, Mtime, Ctime, Atime, Record, Types,
 Name, Architectures, URIs, Source from stat(filename=file)
 }, row=parsed_cache_files(file=file))
 WHERE Record
 GROUP BY OSPath

 /* For each row in the parsed file, run the appropriate query
 depending on if the cache file exists.
 If the cache file is not found, we just copy the lines we
 parsed from the source file and fill in empty values for
 stat.
 */
 LET parse_cache_or_pass = SELECT * from if(
 condition={
 SELECT * from stat(filename=cache_file + '_InRelease')
 },
 then=add_stat_to_parsed_cache_file(file=cache_file + '_InRelease'),
 else={SELECT * FROM if(
 condition={
 SELECT * from stat(filename=cache_file + '_Release')
 },
 then=add_stat_to_parsed_cache_file(file=cache_file + '_Release'),
 else={
 SELECT Source, NULL AS OSPath, Null as Mtime, Null as Ctime,
 Null as Atime, Types,
 Null as Record, Architectures, URIs, Name from scope()
 })
 })

 -- For each parsed apt .list file line produce some output.
 SELECT * from foreach(
 row={
 SELECT * FROM parsed_apt_lines
 },
 query={
 SELECT * FROM parse_cache_or_pass
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Debian.Packages</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.debian.packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.debian.packages/</guid><description>&lt;p>List all packages installed on the system, both deb packages and &amp;ldquo;snaps&amp;rdquo;.
The installed deb package information is fetched from the DPKG status file,
while the snap package list is fetched from the snap daemon through a UNIX
socket HTTP call (since detailed snap package information is not easily
in files).&lt;/p>
&lt;p>The following columns are parsed from the DPKG status file:&lt;/p>
&lt;ul>
&lt;li>Package&lt;/li>
&lt;li>InstalledSize&lt;/li>
&lt;li>Version&lt;/li>
&lt;li>Source&lt;/li>
&lt;li>_Description&lt;/li>
&lt;li>Architecture&lt;/li>
&lt;/ul>
&lt;p>The following columns are parsed from the snap package response (/v2/snaps):&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>_Summary&lt;/li>
&lt;li>_Description&lt;/li>
&lt;li>InstalledSize&lt;/li>
&lt;li>Publisher&lt;/li>
&lt;li>InstalledAt&lt;/li>
&lt;li>Version&lt;/li>
&lt;li>Channel&lt;/li>
&lt;/ul>
&lt;p>Both package sources provide more information than this and, and the artifact
can easily be modified to include more details.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Debian.Packages
description: |
 List all packages installed on the system, both deb packages and "snaps".
 The installed deb package information is fetched from the DPKG status file,
 while the snap package list is fetched from the snap daemon through a UNIX
 socket HTTP call (since detailed snap package information is not easily
 in files).

 The following columns are parsed from the DPKG status file:

 - Package
 - InstalledSize
 - Version
 - Source
 - _Description
 - Architecture

 The following columns are parsed from the snap package response (/v2/snaps):

 - Name
 - _Summary
 - _Description
 - InstalledSize
 - Publisher
 - InstalledAt
 - Version
 - Channel

 Both package sources provide more information than this and, and the artifact
 can easily be modified to include more details.

parameters:
 - name: linuxDpkgStatus
 description: The DPKG status file to read deb package information from
 default: /var/lib/dpkg/status
 - name: snapdSocket
 description: |
 The location of the snap deamon UNIX socket, used for fetching the snap
 list through a HTTP API call. If snap is not used, the failed query
 response will simply be ignored.
 default: /run/snapd.socket

precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'linux'

sources:
 - name: DebPackages
 notebook:
 - type: none

 query: |
 LET ColumnTypes &amp;lt;= dict(`_Description`='nobreak')

 /* First pass - split file into records start with
 Package and end with \n\n.
 Then parse each record using multiple RegExs.
 */
 LET packages = SELECT parse_string_with_regex(
 string=Record,
 regex=['Package:\\s(?P&amp;lt;Package&amp;gt;.+)',
 'Installed-Size:\\s(?P&amp;lt;InstalledSize&amp;gt;.+)',
 'Version:\\s(?P&amp;lt;Version&amp;gt;.+)',
 'Source:\\s(?P&amp;lt;Source&amp;gt;.+)',
 '''Description:\s+(?P&amp;lt;Description&amp;gt;.+(\n\s+.+)*)''',
 'Architecture:\\s(?P&amp;lt;Architecture&amp;gt;.+)']) AS Record
 FROM parse_records_with_regex(file=linuxDpkgStatus,
 regex='(?sm)^(?P&amp;lt;Record&amp;gt;Package:.+?)\\n\\n')

 SELECT Record.Package AS Package,
 humanize(bytes=atoi(string=Record.InstalledSize)) AS InstalledSize,
 Record.Version AS Version,
 Record.Source AS Source,
 regex_replace(source=Record.Description,
 re='''^\s+\.$''') AS _Description,
 Record.Architecture AS Architecture
 FROM packages

 - name: Snaps
 query: |
 LET ColumnTypes &amp;lt;= dict(`_Summary`='nobreak', `_Description`='nobreak')

 LET SnapSocketCheck = SELECT
 parse_json(data=Content).result AS Result
 FROM http_client(url=snapdSocket + ':unix/v2/snaps')
 WHERE Response = 200
 OR NOT log(message="Error fetching snap: %v", args=Content)

 SELECT * FROM foreach(
 row=SnapSocketCheck,
 query={
 SELECT name AS Name,
 summary AS _Summary,
 description AS _Description,
 humanize(bytes=`installed-size`) AS InstalledSize,
 publisher.`display-name` AS Publisher,
 timestamp(string=`install-date`) AS InstalledAt,
 version AS Version,
 channel AS Channel,
 id AS PackageId
 FROM foreach(row=Result)
 })

 notebook:
 - type: vql
 template: |
 /*
 ## Combined results
 */
 LET ColumnTypes &amp;lt;= dict(`_Description`='nobreak')

 SELECT *
 FROM chain(
 debs={
 SELECT Package AS Name,
 'deb' AS Type,
 InstalledSize,
 Version,
 _Description,
 Architecture
 FROM source(artifact="Linux.Debian.Packages/DebPackages")
 },
 snaps={
 SELECT Name,
 'snap' AS Type,
 InstalledSize,
 Version,
 _Description,
 NULL AS Architecture
 FROM source(artifact="Linux.Debian.Packages/Snaps")
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Detection.AnomalousFiles</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.detection.anomalousfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.detection.anomalousfiles/</guid><description>&lt;p>Detects anomalous files in a Linux filesystem.&lt;/p>
&lt;p>An anomalous file is considered one that matches at least one criteria:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Hidden (prefixed with a dot);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Large, with a size over a specified limit; or&lt;/p>
&lt;/li>
&lt;li>
&lt;p>With SUID bit set.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Detection.AnomalousFiles

description: |
 Detects anomalous files in a Linux filesystem.

 An anomalous file is considered one that matches at least one criteria:

 - Hidden (prefixed with a dot);

 - Large, with a size over a specified limit; or

 - With SUID bit set.

author: George-Andrei Iosif (@iosifache)

type: CLIENT

parameters:
 - name: MaxNormalSize
 description: Size (in bytes) above which a file is considered large
 type: int
 default: 10485760
 - name: PathsToSearch
 description: Paths to search, separated by comma
 type: str
 default: "/home/**,tmp/**"

sources:
 - precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'linux'

 query: |
 SELECT Fqdn AS Host,
 OSPath,
 substr(str=Name, start=0, end=1) = "." AS IsHidden,
 Size,
 Size &amp;gt; MaxNormalSize AS IsLarge,
 Mode.String AS Mode,
 Mode =~ "^u" as HasSUID
 FROM glob(globs=split(string=PathsToSearch, sep_string=","))
 WHERE IsHidden OR IsLarge OR HasSUID

&lt;/code>&lt;/pre></description></item><item><title>Linux.Detection.Yara.Process</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.detection.yara.process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.detection.yara.process/</guid><description>&lt;p>This artifact enables running Yara over processes in memory.&lt;/p>
&lt;p>There are 2 kinds of Yara rules that can be deployed:&lt;/p>
&lt;ol>
&lt;li>Url link to a yara rule.&lt;/li>
&lt;li>A Standard Yara rule attached as a parameter.&lt;/li>
&lt;/ol>
&lt;p>Only one method of Yara will be applied and search order is as above. The
default is Cobalt Strike opcodes.&lt;/p>
&lt;p>Regex parameters can be applied for process name and pid for targeting. The
artifact also has an option to upload any process with Yara hits.&lt;/p>
&lt;p>Note: the Yara scan will stop after one hit. Multi-string rules will also only
show one string in returned rows.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Detection.Yara.Process
author: Matt Green - @mgreen27
description: |
 This artifact enables running Yara over processes in memory.

 There are 2 kinds of Yara rules that can be deployed:

 1. Url link to a yara rule.
 2. A Standard Yara rule attached as a parameter.

 Only one method of Yara will be applied and search order is as above. The
 default is Cobalt Strike opcodes.

 Regex parameters can be applied for process name and pid for targeting. The
 artifact also has an option to upload any process with Yara hits.

 Note: the Yara scan will stop after one hit. Multi-string rules will also only
 show one string in returned rows.

aliases:
- MacOS.Detection.Yara.Process

type: CLIENT
parameters:
 - name: ProcessRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: UploadHits
 type: bool
 - name: YaraUrl
 description: If configured will attempt to download Yara rules from Url
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule keyword_search {
 strings:
 $a = "velociraptor" ascii

 condition:
 any of them
 }
 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int
 - name: ExePathWhitelist
 description: Regex of ProcessPaths to exclude
 type: regex


sources:
 - precondition:
 SELECT OS From info() where OS = 'linux' OR OS = 'darwin'

 query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule

 -- find velociraptor process
 LET me = SELECT Pid FROM pslist(pid=getpid())

 -- find all processes and add filters
 LET processes = SELECT
 Name as ProcessName,
 CommandLine, Pid
 FROM pslist()
 WHERE
 Name =~ ProcessRegex
 AND format(format="%d", args=Pid) =~ PidRegex
 AND NOT Pid in me.Pid
 AND NOT if(condition=ExePathWhitelist,
 then= Exe=~ExePathWhitelist)
 AND log(message=format(format="Scanning pid %v: %v", args=[
 Pid, CommandLine]))

 -- scan processes in scope with our rule, limit 1 hit
 LET hits = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT
 ProcessName,
 CommandLine,
 Pid,
 Rule,
 Tag,
 Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 if(condition=String.Data,
 then=upload(
 accessor='scope',
 file='String.Data',
 name=format(format="%v-%v_%v_%v",
 args=[ ProcessName, Pid, String.Offset, ContextBytes ]
 ))) as HitContext
 FROM proc_yara(
 pid=Pid,
 rules=yara_rules,
 context=ContextBytes,
 number=NumberOfHits
 )
 })

 -- upload hits using the process accessor
 LET upload_hits = SELECT *,
 upload(
 accessor="process",
 file=format(format="/%v", args=Pid),
 name=pathspec(Path=format(format='%v-%v.dmp',
 args= [ ProcessName, Pid ]))) as ProcessDump
 FROM hits
 WHERE log(message=format(format='Will upload %v: %v', args=[Pid, ProcessName]))

 -- return rows
 SELECT * FROM if(condition=UploadHits,
 then=upload_hits,
 else=hits)

column_types:
 - name: HitContext
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Linux.Events.Journal</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.events.journal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.events.journal/</guid><description>&lt;p>Watches the binary journal logs. Systemd uses a binary log format to
store logs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Events.Journal
description: |
 Watches the binary journal logs. Systemd uses a binary log format to
 store logs.

type: CLIENT_EVENT

parameters:
- name: JournalGlob
 type: glob
 description: A Glob expression for finding journal files.
 default: /{run,var}/log/journal/*/*.journal

sources:
- query: |
 SELECT * FROM foreach(row={
 SELECT OSPath FROM glob(globs=JournalGlob)
 }, query={
 SELECT *
 FROM watch_journald(filename=OSPath)
 }, workers=100)

&lt;/code>&lt;/pre></description></item><item><title>Linux.Events.ProcessExecutions</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.events.processexecutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.events.processexecutions/</guid><description>&lt;p>This artifact collects process execution logs from the Linux kernel.&lt;/p>
&lt;p>This artifact relies on the presence of &lt;code>auditctl&lt;/code> usually included
in the auditd package. On Ubuntu you can install it using:&lt;/p>
&lt;pre>&lt;code>apt-get install auditd
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Events.ProcessExecutions
description: |
 This artifact collects process execution logs from the Linux kernel.

 This artifact relies on the presence of `auditctl` usually included
 in the auditd package. On Ubuntu you can install it using:

 ```
 apt-get install auditd
 ```

precondition: SELECT OS From info() where OS = 'linux'

type: CLIENT_EVENT

required_permissions:
 - EXECVE

parameters:
 - name: pathToAuditctl
 default: /sbin/auditctl
 description: We depend on auditctl to install the correct process execution rules.

sources:
 - query: |
 // Install the auditd rule if possible.
 LET _ &amp;lt;= SELECT * FROM execve(argv=[pathToAuditctl, "-a",
 "exit,always", "-F", "arch=b64", "-S", "execve", "-k", "procmon"])

 LET exec_log = SELECT timestamp(string=Timestamp) AS Time, Sequence,
 atoi(string=Process.PID) AS Pid,
 atoi(string=Process.PPID) AS Ppid,
 Process.PPID AS PPID,
 atoi(string=Summary.Actor.Primary) AS UserId,
 Process.Title AS CmdLine,
 Process.Exe AS Exe,
 Process.CWD AS CWD
 FROM audit()
 WHERE "procmon" in Tags AND Result = 'success'

 // Cache Uid -&amp;gt; Username mapping.
 LET users &amp;lt;= SELECT User, atoi(string=Uid) AS Uid
 FROM Artifact.Linux.Sys.Users()

 // Enrich the original artifact with more data.
 SELECT Time, Pid, Ppid, UserId,
 { SELECT User from users WHERE Uid = UserId} AS User,
 regex_replace(source=read_file(filename= "/proc/" + PPID + "/cmdline"),
 replace=" ", re="[\\0]") AS Parent,
 CmdLine,
 Exe, CWD
 FROM exec_log

&lt;/code>&lt;/pre></description></item><item><title>Linux.Events.SSHBruteforce</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.events.sshbruteforce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.events.sshbruteforce/</guid><description>&lt;p>This is a monitoring artifact which detects a successful SSH login
preceded by some failed attempts within the last hour.&lt;/p>
&lt;p>This is particularly important in the case of ssh brute forcers. If
one of the brute force password attempts succeeded the password
guessing program will likely report the success and move on. This
alert might provide sufficient time for admins to lock down the
account before attackers can exploit the weak password.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Events.SSHBruteforce
description: |
 This is a monitoring artifact which detects a successful SSH login
 preceded by some failed attempts within the last hour.

 This is particularly important in the case of ssh brute forcers. If
 one of the brute force password attempts succeeded the password
 guessing program will likely report the success and move on. This
 alert might provide sufficient time for admins to lock down the
 account before attackers can exploit the weak password.

reference:
 - https://www.elastic.co/blog/grokking-the-linux-authorization-logs

type: CLIENT_EVENT

parameters:
 - name: syslogAuthLogPath
 default: /var/log/auth.log

 - name: SSHGrok
 description: A Grok expression for parsing SSH auth lines.
 default: &amp;gt;-
 %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{DATA:event} %{DATA:method} for (invalid user )?%{DATA:user} from %{IPORHOST:ip} port %{NUMBER:port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?

 - name: MinimumFailedLogins
 description: Minimum number of failed logins before a successful login.
 default: 2

sources:
 - query: |
 -- Basic syslog parsing via GROK expressions.
 LET failed_login = SELECT grok(grok=SSHGrok, data=Line) AS FailedEvent,
 Line as FailedLine
 FROM watch_syslog(filename=syslogAuthLogPath)
 WHERE FailedEvent.program = "sshd" AND FailedEvent.event = "Failed"
 AND FailedEvent.method = "password"

 LET last_failed_events = SELECT * FROM fifo(
 query=failed_login, max_rows=50, max_age=3600)

 LET _ &amp;lt;= SELECT * FROM last_failed_events

 LET success_login = SELECT grok(grok=SSHGrok, data=Line) AS Event, Line
 FROM watch_syslog(filename=syslogAuthLogPath)
 WHERE Event.program = "sshd" AND Event.event = "Accepted"
 AND Event.method = "password"

 SELECT Event, Line, {
 SELECT FailedLine FROM last_failed_events
 WHERE Event.user = FailedEvent.user
 } AS Failures
 FROM success_login
 WHERE len(list=Failures) &amp;gt; int(int=MinimumFailedLogins)

&lt;/code>&lt;/pre></description></item><item><title>Linux.Events.SSHLogin</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.events.sshlogin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.events.sshlogin/</guid><description>&lt;p>This monitoring artifact watches the auth.log file for new
successful SSH login events and relays them back to the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Events.SSHLogin
description: |
 This monitoring artifact watches the auth.log file for new
 successful SSH login events and relays them back to the server.

reference:
 - https://www.elastic.co/blog/grokking-the-linux-authorization-logs

type: CLIENT_EVENT

parameters:
 - name: syslogAuthLogPath
 default: /var/log/auth.log

 - name: SSHGrok
 description: A Grok expression for parsing SSH auth lines.
 default: &amp;gt;-
 %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{DATA:event} %{DATA:method} for (invalid user )?%{DATA:user} from %{IPORHOST:ip} port %{NUMBER:port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?

sources:
 - query: |
 -- Basic syslog parsing via GROK expressions.
 LET success_login = SELECT grok(grok=SSHGrok, data=Line) AS Event, Line
 FROM watch_syslog(filename=syslogAuthLogPath)
 WHERE Event.program = "sshd" AND Event.event = "Accepted"

 SELECT timestamp(string=Event.timestamp) AS Time,
 Event.user AS User,
 Event.method AS Method,
 Event.IP AS SourceIP,
 Event.pid AS Pid
 FROM success_login

&lt;/code>&lt;/pre></description></item><item><title>Linux.Events.TrackProcesses</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.events.trackprocesses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.events.trackprocesses/</guid><description>&lt;p>This artifact uses auditd and pslist to keep track of running
processes using the Velociraptor process tracker.&lt;/p>
&lt;p>The process tracker keeps track of exited processes, and resolves
process call chains from it in memory cache.&lt;/p>
&lt;p>This event artifact enables the global process tracker and makes it
possible to run many other artifacts that depend on the process
tracker.&lt;/p>
&lt;p>auditd is used to track processes, and it must be installed on the
system. If InstallAudit is enabled, the artifact will install it
using apt-get (which only works on Debian-like operating systems,
like Debian and Ubuntu).&lt;/p>
&lt;p>When the artifact starts, it will insert audit rules that track
the syscalls &lt;em>execve&lt;/em>, &lt;em>exit&lt;/em> and &lt;em>exit_group&lt;/em>. These rules are removed
when the event artifact is disabled. However, in case they are not
removed automatically, for instance if velociraptor were to crash,
the following commands (which must be run as root) will remove then:&lt;/p>
&lt;pre>&lt;code>auditctl -d exit,always -F arch=b64 -S execve -k procmon
auditctl -d exit,always -F arch=b32 -S execve -k procmon
auditctl -d exit,always -F arch=b64 -S exit,exit_group -k procmon_exit
auditctl -d exit,always -F arch=b32 -S exit,exit_group -k procmon_exit
&lt;/code>&lt;/pre>
&lt;p>Remember to replace the keys if you used keys other than the defaults.&lt;/p>
&lt;p>Note that processes that are killed or do not shut down properly will
note get their exit timestamps registered.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Events.TrackProcesses
author: Andreas Misje – @misje
description: |
 This artifact uses auditd and pslist to keep track of running
 processes using the Velociraptor process tracker.

 The process tracker keeps track of exited processes, and resolves
 process call chains from it in memory cache.

 This event artifact enables the global process tracker and makes it
 possible to run many other artifacts that depend on the process
 tracker.

 auditd is used to track processes, and it must be installed on the
 system. If InstallAudit is enabled, the artifact will install it
 using apt-get (which only works on Debian-like operating systems,
 like Debian and Ubuntu).

 When the artifact starts, it will insert audit rules that track
 the syscalls *execve*, *exit* and *exit_group*. These rules are removed
 when the event artifact is disabled. However, in case they are not
 removed automatically, for instance if velociraptor were to crash,
 the following commands (which must be run as root) will remove then:

 ```
 auditctl -d exit,always -F arch=b64 -S execve -k procmon
 auditctl -d exit,always -F arch=b32 -S execve -k procmon
 auditctl -d exit,always -F arch=b64 -S exit,exit_group -k procmon_exit
 auditctl -d exit,always -F arch=b32 -S exit,exit_group -k procmon_exit
 ```

 Remember to replace the keys if you used keys other than the defaults.

 Note that processes that are killed or do not shut down properly will
 note get their exit timestamps registered.

precondition: SELECT OS From info() where OS = 'linux'

type: CLIENT_EVENT

required_permissions:
 - EXECVE

parameters:
 - name: InstallAudit
 type: bool
 default: False
 description: Run apt-get update and apt-get install to ensure that auditd is installed
 - name: AuditKeyExecve
 default: procmon
 description: Key to use for execve syscalls. Change to match an existing key if you are already using audit to track processes.
 - name: AuditKeyExit
 default: procmon_exit
 description: Key to use for exit syscalls. Change to match an existing key if you are already using audit to track processes.
 - name: RemoveRules
 type: bool
 default: True
 description: Remove rules when removing the event artifact
 - name: AlsoForwardUpdates
 type: bool
 description: Upload all tracker state updates to the server
 - name: MaxSize
 type: int64
 description: Maximum size of the in-memory process cache (default 10k)
 - name: AddEnrichments
 type: bool
 description: Calculate hashes on process binaries
 - name: AuditCtlExe
 description: Path to the auditctl binary
 default: /sbin/auditctl

sources:
 - query: |
 /* Test whether the auditctl binary exists at the expected path: */
 LET AuditInstalled = SELECT *
 FROM stat(filename=AuditCtlExe)

 LET _ &amp;lt;= SELECT *
 FROM if(
 condition=NOT AuditInstalled
 AND InstallAudit,
 then={
 SELECT *
 FROM chain(
 a_update={
 SELECT 
 log(
 message='Updating package index before installing auditd',
 level='INFO')
 FROM execve(argv=['apt-get', '-y', 'update'])
 },
 b_install={
 SELECT log(message='Installing auditd using apt-get', level='INFO')
 FROM execve(
 argv=['apt-get', '-y', '-o', 'Debug::pkgProblemResolver=yes', '--no-install-recommends', 'install', 'auditd'])
 })
 })

 LET AuditCtl(action, syscalls, key) = SELECT *
 FROM if(
 condition=AuditInstalled,
 then={
 SELECT *
 FROM foreach(
 row=('b64', 'b32', ),
 query={
 SELECT *
 FROM execve(
 argv=['auditctl', action, 'exit,always', '-F', 'arch=' + _value, '-S', syscalls, '-k', key])
 WHERE AuditInstalled
 })
 })

 LET _ &amp;lt;= SELECT *
 FROM AuditCtl(action='-a',
 syscalls='execve',
 key=AuditKeyExecve)
 LET _ &amp;lt;= SELECT *
 FROM AuditCtl(action='-a',
 syscalls='exit,exit_group',
 key=AuditKeyExit)

 LET _ &amp;lt;= atexit(
 query={
 SELECT *
 FROM if(
 condition=RemoveRules,
 then={
 SELECT 
 log(
 message='Removing audit rules',
 level='INFO')
 FROM chain(
 r1={
 SELECT *
 FROM AuditCtl(action='-d',
 syscalls='execve',
 key=AuditKeyExecve)
 },
 r2={
 SELECT *
 FROM AuditCtl(action='-d',
 syscalls='exit,exit_group',
 key=AuditKeyExit)
 })
 })
 })

 LET Users &amp;lt;= memoize(
 query={
 SELECT 
 Uid AS UID,
 User
 FROM Artifact.Linux.Sys.Users()
 },
 key='UID')

 LET UpdateQuery = SELECT *
 FROM foreach(
 row={
 SELECT *
 FROM audit()
 WHERE AuditKeyExecve IN Tags OR AuditKeyExit IN Tags
 },
 query={
 SELECT *
 FROM switch(
 start={
 SELECT 
 Process.pid AS id,
 Process.ppid AS parent_id,
 'start' AS update_type,
 dict(
 Pid=Process.pid,
 Ppid=Process.ppid,
 Name=Process.name,
 StartTime=timestamp(
 string=Timestamp),
 EndTime=NULL,
 Username=get(
 item=Users,
 field=User.ids.uid).User,
 Exe=Process.exe,
 CommandLine=join(
 sep=' ',
 array=Process.args),
 CurrentDirectory=get(
 item=Process,
 member='CWD'),
 TerminalSessionId=Session,
 User=User,
 Process=Process) AS data,
 timestamp(
 string=Timestamp) AS start_time,
 NULL AS end_time
 FROM scope()
 WHERE AuditKeyExecve IN Tags
 },
 end={
 SELECT 
 Process.pid AS id,
 NULL AS parent_id,
 'exit' AS update_type,
 dict() AS data,
 NULL AS start_time,
 timestamp(
 string=Timestamp) AS end_time
 FROM scope()
 WHERE AuditKeyExit IN Tags
 })
 })

 LET SyncQuery = SELECT 
 Pid AS id,
 Ppid AS parent_id,
 CreateTime AS start_time,
 dict(
 Name=Name,
 Username=Username,
 Exe=Exe,
 CommandLine=CommandLine) AS data
 FROM pslist()

 LET Tracker &amp;lt;= process_tracker(
 max_size=MaxSize,
 sync_query=SyncQuery,
 update_query=UpdateQuery,
 sync_period=60000,
 enrichments=if(
 condition=AddEnrichments,
 then=['''x =&amp;gt; dict(Hashes=hash(
 path=x.Data.Exe))'''],
 else=[]))

 SELECT *
 FROM if(
 condition=AuditInstalled,
 then={
 SELECT *
 FROM process_tracker_updates()
 WHERE update_type = 'stats' OR AlsoForwardUpdates
 },
 else={
 SELECT 
 log(
 message='auditd is not installed, and it is either set not to be installed or failed to install, aborting',
 level='INFO')
 FROM scope()
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Forensics.Journal</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.forensics.journal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.forensics.journal/</guid><description>&lt;p>Parses the binary journal logs. Systemd uses a binary log format to
store logs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Forensics.Journal
description: |
 Parses the binary journal logs. Systemd uses a binary log format to
 store logs.

parameters:
- name: JournalGlob
 type: glob
 description: A Glob expression for finding journal files.
 default: /{run,var}/log/journal/*/*.journal

- name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"

- name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

- name: AlsoUpload
 type: bool
 description: If set we also upload the raw files.

sources:
- name: Uploads
 query: |
 SELECT * FROM if(condition=AlsoUpload,
 then={
 SELECT OSPath, upload(file=OSPath) AS Upload
 FROM glob(globs=JournalGlob)
 })

- query: |
 SELECT * FROM foreach(row={
 SELECT OSPath FROM glob(globs=JournalGlob)
 }, query={
 SELECT *
 FROM parse_journald(filename=OSPath,
 start_time=DateAfter, end_time=DateBefore)
 })

 notebook:
 - type: vql_suggestion
 name: Simplified syslog-like view
 template: |
 /*
 # Simplified log view
 */
 LET ColumnTypes&amp;lt;=dict(`_ClientId`='client')

 SELECT System.Timestamp AS Timestamp,
 ClientId AS _ClientId,
 client_info(client_id=ClientId).os_info.hostname AS Hostname,
 EventData.SYSLOG_IDENTIFIER AS Unit,
 EventData.MESSAGE AS Message
 FROM source()

&lt;/code>&lt;/pre></description></item><item><title>Linux.KapeFiles.CollectFromDirectory</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.kapefiles.collectfromdirectory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.kapefiles.collectfromdirectory/</guid><description>&lt;p>Kape is a popular bulk collector tool for triaging a system
quickly. While KAPE itself is not an opensource tool, the logic it
uses to decide which files to collect is encoded in YAML files
hosted on the KapeFiles project
(&lt;a href="https://github.com/EricZimmerman/KapeFiles" target="_blank" >https://github.com/EricZimmerman/KapeFiles&lt;/a>
) and released under an
MIT license.&lt;/p>
&lt;p>This artifact is automatically generated from these YAML files,
contributed and maintained by the community. This artifact only
encapsulates the KAPE &amp;ldquo;Targets&amp;rdquo; - basically a bunch of glob
expressions used for collecting files on the endpoint. We do not
do any post processing these files - we just collect them.&lt;/p>
&lt;p>We recommend that timeouts and upload limits be used
conservatively with this artifact because we can upload really
vast quantities of data very quickly.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.KapeFiles.CollectFromDirectory
description: |

 Kape is a popular bulk collector tool for triaging a system
 quickly. While KAPE itself is not an opensource tool, the logic it
 uses to decide which files to collect is encoded in YAML files
 hosted on the KapeFiles project
 (https://github.com/EricZimmerman/KapeFiles) and released under an
 MIT license.

 This artifact is automatically generated from these YAML files,
 contributed and maintained by the community. This artifact only
 encapsulates the KAPE "Targets" - basically a bunch of glob
 expressions used for collecting files on the endpoint. We do not
 do any post processing these files - we just collect them.

 We recommend that timeouts and upload limits be used
 conservatively with this artifact because we can upload really
 vast quantities of data very quickly.

reference:
 - https://www.kroll.com/en/insights/publications/cyber/kroll-artifact-parser-extractor-kape
 - https://github.com/EricZimmerman/KapeFiles

type: client

parameters:
 - name: Device
 description: Path from where to start the search.
 default: "/mnt/windows_mount"

 - name: _BasicCollection
 description: "Basic Collection (by Phill Moore): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Desktop LNK Files, Desktop LNK Files XP, Event logs Win7+, Event logs Win7+, Event logs XP, GatherLogs, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, PowerShell Console Log, Prefetch, Prefetch, RECYCLER - WinXP, RecentFileCache, RecentFileCache, Recycle Bin - Windows Vista+, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, Restore point LNK Files XP, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SRUM, SRUM, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, Setupapi.log Win7+, Setupapi.log Win7+, Setupapi.log XP, Start Menu LNK Files, Syscache, Syscache transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), Thumbcache DB, User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files, WindowsIndexSearch, XML, XML, XML, at .job, at .job, at SchedLgU.txt, at SchedLgU.txt"
 type: bool
 - name: _KapeTriage
 description: "Calls Kape Triage (by Phill Moore): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, AVG AV Logs, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG FileInfo DB, AVG Persistent Logs, AVG Report Logs, AVG lsdbj2 JSON, Action1 Client Application logs, ActivitiesCache.db, Addons, Addons XP, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Chat Logs - User Profile, AnyDesk Logs - ProgramData - *.conf, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Videos, AppCompat PCA Folder, Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Avast AV Index, Avast AV Logs, Avast AV Logs (XP), Avast AV User Logs, Avast Icarus Logs, Avast Persistent Data Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Bookmarks, Bookmarks, Bookmarks, Box Drive Application Metadata, Box Sync Application Metadata, Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts XP, Chrome Snapshots Folder, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, ComboFix, Cookies, Cookies, Cookies, Cookies XP, Crash Dumps, Crash Dumps, Crash Dumps, Current Session, Current Tabs, Cybereason Anti-Ransomware Logs, Cybereason Application Control and NGAV Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cylance Optics Logs, Cylance Program Files Logs, Cylance ProgramData Logs, DWAgent Log Files, Desktop LNK Files, Desktop LNK Files XP, DetectionHistory, Download Metadata, Downloads, Downloads XP, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET NOD32 AV Logs (XP), ESET Remote Administrator Logs, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Sessions Folder, Edge Shortcuts, Edge Snapshots Folder, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Edge bookmarks, Edge folder, Emsisoft Scan Logs, Event logs Win7+, Event logs Win7+, Event logs XP, Extensions, F-Secure Logs, F-Secure Scheduled Scan Reports, F-Secure User Logs, Favicons, Favicons, Favicons XP, Form history, Form history XP, Google Drive Backup and Sync Metadata, Google Drive for Desktop Metadata, History, HitmanPro Alert Logs, HitmanPro Database, HitmanPro Logs, IE 11 Cookies, IE 11 Metadata, IE 9/10 Cookies, IE 9/10 Download History, IE 9/10 History, ISL AlwaysOn - App Logs, ISL AlwaysOn - Configuration, ISL AlwaysOn - Email Configuration, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn Logs - Sessions List, ISL Light Logs - Sessions, ISLOnline Logs - Session Configurations, ISLOnline Logs - Sessions - *.out, Index.dat History, Index.dat History subdirectory, Index.dat Office, Index.dat Office XP, Index.dat UserData, Index.dat cookies, Kaseya Agent Edge Service Logs, Kaseya Agent Endpoint Service Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Service Log, Kaseya Live Connect Logs, Kaseya Live Connect Logs (XP), Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Level RMM Client Application logs, Local Internet Explorer folder, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Local User Quarantine, LocalSessionManager Event Logs, LocalSessionManager Event Logs, LogMeIn Application Logs, LogMeIn ProgramData Logs, Login Data, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Scan Logs, MalwareBytes Anti-Malware Scan Results Logs, MalwareBytes Anti-Malware Service Logs, McAfee Desktop Protection Logs, McAfee Desktop Protection Logs XP, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, McAfee ePO Logs, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Net Monitor Client Config, Net Monitor Client Logs, Net Monitor Server Config, Net Monitor Server Data, Net Monitor Server Logs, Net Monitor Server Temp Folder, Network Action Predictor, Network Persistent State, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, OneDrive Metadata Logs, OneDrive Metadata Settings, Opera - Local Folder, Opera - Roaming Folder, Password, Password, Password, Password XP, Password XP, Password XP, Permissions, Places, Places XP, PowerShell Console Log, Preferences, Preferences, Prefetch, Prefetch, Protections, Publisher Info DB/Brave Rewards, Puffin - Autocomplete Data, Puffin - Cookies, Puffin - Image Cache, Puffin - Password (Encrypted), Puffin - Password Forms Data, Puffin - Subscription Data, Puffin - data.db, Quota Manager, RDP Cache Files, RDP Cache Files, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, RECYCLER - WinXP, Radmin Server 32bit Chats, Radmin Server 32bit Log, Radmin Server 64bit Chats, Radmin Server 64bit Log, Radmin Viewer Chats, Rclone Config, RealVNC Log, RealVNC Log, RecentFileCache, RecentFileCache, Recycle Bin - Windows Vista+, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, RemoteUtilities Connection Logs, RemoteUtilities Install Log, Reporting and NEL, Restore point LNK Files XP, Roaming Internet Explorer folder, RogueKiller Reports, RustDesk logs, RustDesk logs, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SRUM, SRUM, SUM Database (.mdb files), SUPERAntiSpyware Logs, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, SYSTEM user quarantine, ScreenConnect Session Database, ScreenConnect Session Database, ScreenConnect User Config, Search, Search XP, Secure Preferences, SecureAge Antvirus Logs, SentinelOne EDR Log, Sessions Folder, Sessionstore, Sessionstore Folder, Sessionstore XP, Shortcuts, Signons, Signons XP, Sophos Logs, Sophos Logs (XP), Splashtop Log Files, Splashtop Log Files in ProgramData, Start Menu LNK Files, Storage Sync, Supremo Connection Logs, Supremo File Transfer Inbox, Symantec Endpoint Protection Logs, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Quarantine, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, Syscache, Syscache transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TeamViewer Connection Logs, TightVNC Application Logs, Top Sites, TotalAV Logs, TotalAV Logs, Trend Micro Logs, Trend Micro Security Agent Connection Logs, Trend Micro Security Agent Report Logs, UltraViewer Connection Log, UltraViewer Service Log, UltraViewer System Logs, UltraViewer User Logs, User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files, VIPRE Business Agent Logs, VIPRE Business User Logs (up to v4), VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (v7+), Visited Links, Vivaldi Bookmarks, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Cookies, Vivaldi Download Metadata, Vivaldi Favicons, Vivaldi History, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Network Persistent State, Vivaldi Notes, Vivaldi Preferences, Vivaldi Sessions Folder, Vivaldi Top Sites, Vivaldi User Tracking, Vivaldi Visited Links, Vivaldi Web Data, WBEM, WBEM, WER Files, WER Files, Web Data, Webappstore, Webappstore XP, Webroot Program Data, Windows Defender Event Logs, Windows Defender Event Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Quarantine, Windows Protect Folder, Windows Protect Folder, Windows Protect Folder, Windows.old RDP Cache Files, XML, XML, XML, Xeox RMM Client Application logs, Yandex Autofill data, Yandex Bookmarks, Yandex Cookies, Yandex Favicons, Yandex History, Yandex Login Data, Yandex Network Action Predictor, Yandex Network Persistent State, Yandex Passman logs, Yandex Preferences, Yandex Sessions Folder, Yandex Shortcuts, Yandex Top Sites, Yandex Visited Links, Yandex Web Data, Zoho Assist .conf files, Zoho Assist .conf files in Program Files*, Zoho Assist .conf files in AppData\Local, Zoho Assist .txt files in Program Files*, Zoho Assist log files in AppData\Local, Zoho Assist log files in Program Files*, Zoho Assist log files in ProgramData, at .job, at .job, at SchedLgU.txt, at SchedLgU.txt, ccSubSDK Database, mRemoteNG Connection Configuration and Backups, mRemoteNG Logs, mRemoteNG Program Settings, registrationInfo.xml"
 type: bool
 - name: _SANS_Triage
 description: "SANS Triage Collection (by Mark Hallman): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, .NET CLR UsageLogs (system-scoped), .NET CLR UsageLogs (user-scoped), AVG AV Logs, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG FileInfo DB, AVG Persistent Logs, AVG Report Logs, AVG lsdbj2 JSON, Action1 Client Application logs, ActivitiesCache.db, Addons, Addons XP, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Chat Logs - User Profile, AnyDesk Logs - ProgramData - *.conf, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Videos, AppCompat PCA Folder, Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Avast AV Index, Avast AV Logs, Avast AV Logs (XP), Avast AV User Logs, Avast Icarus Logs, Avast Persistent Data Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, BITS files, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Bookmarks, Bookmarks, Bookmarks, Box Drive Application Metadata, Box Sync Application Metadata, Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts XP, Chrome Snapshots Folder, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, Cisco Jabber Database, ComboFix, Computer Group Policy files, Cookies, Cookies, Cookies, Cookies XP, Crash Dumps, Crash Dumps, Crash Dumps, Current Session, Current Tabs, Cybereason Anti-Ransomware Logs, Cybereason Application Control and NGAV Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cylance Optics Logs, Cylance Program Files Logs, Cylance ProgramData Logs, DWAgent Log Files, Delivery Optimization Trace Logs, Desktop LNK Files, Desktop LNK Files XP, DetectionHistory, Discord Cache Files, Discord Local Storage LevelDB Files, Download Metadata, Downloads, Downloads XP, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET NOD32 AV Logs (XP), ESET Remote Administrator Logs, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Sessions Folder, Edge Shortcuts, Edge Snapshots Folder, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Edge bookmarks, Edge folder, Emsisoft Scan Logs, Energy-NTKL Trace Logs, Event logs Win7+, Event logs Win7+, Event logs XP, Extensions, F-Secure Logs, F-Secure Scheduled Scan Reports, F-Secure User Logs, Favicons, Favicons, Favicons XP, Form history, Form history XP, GatherLogs, Google Drive Backup and Sync Metadata, Google Drive for Desktop Metadata, Group Policy Files, HexChat Chat Logs, History, HitmanPro Alert Logs, HitmanPro Database, HitmanPro Logs, IE 11 Cookies, IE 11 Metadata, IE 9/10 Cookies, IE 9/10 Download History, IE 9/10 History, ISL AlwaysOn - App Logs, ISL AlwaysOn - Configuration, ISL AlwaysOn - Email Configuration, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn Logs - Sessions List, ISL Light Logs - Sessions, ISLOnline Logs - Session Configurations, ISLOnline Logs - Sessions - *.out, IceChat Chat Logs, Index.dat History, Index.dat History subdirectory, Index.dat Office, Index.dat Office XP, Index.dat UserData, Index.dat cookies, Kaseya Agent Edge Service Logs, Kaseya Agent Endpoint Service Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Service Log, Kaseya Live Connect Logs, Kaseya Live Connect Logs (XP), Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Level RMM Client Application logs, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Startup/Shutdown Scripts, Local Group Policy Files - Startup/Shutdown Scripts, Local Group Policy INI Files, Local Internet Explorer folder, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Local User Quarantine, LocalSessionManager Event Logs, LocalSessionManager Event Logs, LogMeIn Application Logs, LogMeIn ProgramData Logs, Login Data, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Scan Logs, MalwareBytes Anti-Malware Scan Results Logs, MalwareBytes Anti-Malware Service Logs, Mattermost - Chat Logs, McAfee Desktop Protection Logs, McAfee Desktop Protection Logs XP, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, McAfee ePO Logs, Microsoft Store WhatsApp Cache, Microsoft Store WhatsApp Local Storage, Microsoft Teams Cache, Microsoft Teams Config, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Logs (Windows 11), NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Net Monitor Client Config, Net Monitor Client Logs, Net Monitor Server Config, Net Monitor Server Data, Net Monitor Server Logs, Net Monitor Server Temp Folder, Network Action Predictor, Network Persistent State, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, OneDrive Metadata Logs, OneDrive Metadata Settings, Opera - Local Folder, Opera - Roaming Folder, Password, Password, Password, Password XP, Password XP, Password XP, Permissions, Places, Places XP, PowerShell Console Log, Preferences, Preferences, Prefetch, Prefetch, Protections, Publisher Info DB/Brave Rewards, Puffin - Autocomplete Data, Puffin - Cookies, Puffin - Image Cache, Puffin - Password (Encrypted), Puffin - Password Forms Data, Puffin - Subscription Data, Puffin - data.db, Quota Manager, RDP Cache Files, RDP Cache Files, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, RECYCLER - WinXP, Radmin Server 32bit Chats, Radmin Server 32bit Log, Radmin Server 64bit Chats, Radmin Server 64bit Log, Radmin Viewer Chats, Rclone Config, RealVNC Log, RealVNC Log, RecentFileCache, RecentFileCache, Recycle Bin - Windows Vista+, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, RemoteUtilities Connection Logs, RemoteUtilities Install Log, Reporting and NEL, Restore point LNK Files XP, Roaming Internet Explorer folder, RogueKiller Reports, RustDesk logs, RustDesk logs, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SRUM, SRUM, SUM Database (.mdb files), SUPERAntiSpyware Logs, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, SYSTEM user quarantine, ScreenConnect Session Database, ScreenConnect Session Database, ScreenConnect User Config, Search, Search XP, Secure Preferences, SecureAge Antvirus Logs, SentinelOne EDR Log, Sessions Folder, Sessionstore, Sessionstore Folder, Sessionstore XP, Setupapi.log Win7+, Setupapi.log Win7+, Setupapi.log XP, Shortcuts, Signal Attachments cache, Signal Database, Signal Logs, Signal config.json, Signons, Signons XP, Skype for Destkop v8+ Chromium Cache, Slack - Chat Logs, Slack Cache, Slack Electron Logs, Slack LevelDB Files, Slack Storage, SleepStudy Trace Logs, SleepStudy Trace Logs, Sophos Logs, Sophos Logs (XP), Splashtop Log Files, Splashtop Log Files in ProgramData, Start Menu LNK Files, Storage Sync, Supremo Connection Logs, Supremo File Transfer Inbox, Symantec Endpoint Protection Logs, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Quarantine, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, Syscache, Syscache transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TeamViewer Connection Logs, Telegram app folder, Telegram downloaded files, Thumbcache DB, TightVNC Application Logs, Top Sites, TotalAV Logs, TotalAV Logs, Trend Micro Logs, Trend Micro Security Agent Connection Logs, Trend Micro Security Agent Report Logs, UltraViewer Connection Log, UltraViewer Service Log, UltraViewer System Logs, UltraViewer User Logs, User Group Policy files, User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files, VIPRE Business Agent Logs, VIPRE Business User Logs (up to v4), VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (v7+), Viber Config Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Data Database, Viber Users Thumbnails Cache, Visited Links, Vivaldi Bookmarks, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Cookies, Vivaldi Download Metadata, Vivaldi Favicons, Vivaldi History, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Network Persistent State, Vivaldi Notes, Vivaldi Preferences, Vivaldi Sessions Folder, Vivaldi Top Sites, Vivaldi User Tracking, Vivaldi Visited Links, Vivaldi Web Data, WBEM, WBEM, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WER Files, WER Files, WMI Trace Logs, WMI Trace Logs, Web Data, Webappstore, Webappstore XP, Webroot Program Data, WhatsApp Cache, WhatsApp Local Storage, Windows Defender Event Logs, Windows Defender Event Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Quarantine, Windows Firewall Logs, Windows Firewall Logs, Windows Protect Folder, Windows Protect Folder, Windows Protect Folder, Windows.old RDP Cache Files, WindowsIndexSearch, XML, XML, XML, Xeox RMM Client Application logs, Yandex Autofill data, Yandex Bookmarks, Yandex Cookies, Yandex Favicons, Yandex History, Yandex Login Data, Yandex Network Action Predictor, Yandex Network Persistent State, Yandex Passman logs, Yandex Preferences, Yandex Sessions Folder, Yandex Shortcuts, Yandex Top Sites, Yandex Visited Links, Yandex Web Data, Zoho Assist .conf files, Zoho Assist .conf files in Program Files*, Zoho Assist .conf files in AppData\Local, Zoho Assist .txt files in Program Files*, Zoho Assist log files in AppData\Local, Zoho Assist log files in Program Files*, Zoho Assist log files in ProgramData, at .job, at .job, at SchedLgU.txt, at SchedLgU.txt, ccSubSDK Database, leveldb (Skype for Desktop +v8), mIRC Chat Logs (2000/XP), mIRC Chat Logs (Vista+), mRemoteNG Connection Configuration and Backups, mRemoteNG Logs, mRemoteNG Program Settings, main.db (App &amp;lt;v12), main.db Win7+, main.db XP, registrationInfo.xml, s4l-[username].db (App +v8), skype.db (App +v12)"
 type: bool
 - name: _Boot
 description: "$Boot (by Eric Zimmerman): $Boot"
 type: bool
 - name: _J
 description: "$J (by Eric Zimmerman and Andrew Rathbun): $J, $J, $Max, $Max"
 type: bool
 - name: _LogFile
 description: "$LogFile (by Eric Zimmerman): $LogFile"
 type: bool
 - name: _MFT
 description: "$MFT (by Eric Zimmerman): $MFT"
 type: bool
 - name: _MFTMirr
 description: "$MFTMirr (by Teo Kia Meng): $MFTMirr"
 type: bool
 - name: _SDS
 description: "$SDS (by Eric Zimmerman and Andrew Rathbun): $SDS, $SDS"
 type: bool
 - name: _T
 description: "$T (by Eric Zimmerman and Andrew Rathbun): $T, $T"
 type: bool
 - name: 1Password
 description: "1Password Password Manager (by Matt Dawson): 1Password Backup Databases, 1Password Database, 1Password Logs"
 type: bool
 - name: 4KVideoDownloader
 description: "4K Video Downloader (by Andrew Rathbun): 4K Video Downloader, 4K Video Downloader+"
 type: bool
 - name: AVG
 description: "AVG Antivirus Data (by Kirtan Shah and Dhiral Panjwani): AVG AV Logs, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG FileInfo DB, AVG Persistent Logs, AVG Report Logs, AVG lsdbj2 JSON"
 type: bool
 - name: AceText
 description: "AceText (by Andrew Rathbun): AceText - Clipboard History"
 type: bool
 - name: AcronisTrueImage
 description: "Acronis True Image (by Andrew Rathbun): Acronis True Image - Database Files, Acronis True Image - Logs, Acronis True Image - Scripts Folder"
 type: bool
 - name: Action1
 description: "Action1 Application Logs (by Andrew Skatoff @DFIR_TNT): Action1 Client Application logs"
 type: bool
 - name: ActiveDirectoryNTDS
 description: "Active Directory NTDS (by Zawadi Done): NTDS"
 type: bool
 - name: ActiveDirectorySysvol
 description: "Active Directory Sysvol (by Zawadi Done): SYSVOL"
 type: bool
 - name: AgentRansack
 description: "Agent Ransack - Free File Searching Utility (by Andrew Rathbun): Agent Ransack Config Logs, Agent Ransack CrashReports Logs, Agent Ransack IndexLog Logs, Agent Ransack Logs"
 type: bool
 - name: Amcache
 description: "Amcache.hve (by Eric Zimmerman): Amcache, Amcache, Amcache transaction files, Amcache transaction files"
 type: bool
 - name: Ammyy
 description: "Ammyy Data (by Drew Ervin): Ammyy Program Data"
 type: bool
 - name: Antivirus
 description: "Antivirus (by Andrew Rathbun): AVG AV Logs, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG FileInfo DB, AVG Persistent Logs, AVG Report Logs, AVG lsdbj2 JSON, Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Avast AV Index, Avast AV Logs, Avast AV Logs (XP), Avast AV User Logs, Avast Icarus Logs, Avast Persistent Data Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, ComboFix, Cybereason Anti-Ransomware Logs, Cybereason Application Control and NGAV Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cylance Optics Logs, Cylance Program Files Logs, Cylance ProgramData Logs, DetectionHistory, ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET NOD32 AV Logs (XP), ESET Remote Administrator Logs, Emsisoft Scan Logs, F-Secure Logs, F-Secure Scheduled Scan Reports, F-Secure User Logs, HitmanPro Alert Logs, HitmanPro Database, HitmanPro Logs, Local User Quarantine, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Scan Logs, MalwareBytes Anti-Malware Scan Results Logs, MalwareBytes Anti-Malware Service Logs, McAfee Desktop Protection Logs, McAfee Desktop Protection Logs XP, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, McAfee ePO Logs, RogueKiller Reports, SUPERAntiSpyware Logs, SYSTEM user quarantine, SecureAge Antvirus Logs, SentinelOne EDR Log, Sophos Logs, Sophos Logs (XP), Symantec Endpoint Protection Logs, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Quarantine, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, TotalAV Logs, TotalAV Logs, Trend Micro Logs, Trend Micro Security Agent Connection Logs, Trend Micro Security Agent Report Logs, VIPRE Business Agent Logs, VIPRE Business User Logs (up to v4), VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (v7+), Webroot Program Data, Windows Defender Event Logs, Windows Defender Event Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Quarantine, ccSubSDK Database, registrationInfo.xml"
 type: bool
 - name: AnyDesk
 description: "AnyDesk (by Andrew Rathbun, Scott Hanson, and Nicole Jao): AnyDesk Chat Logs - User Profile, AnyDesk Logs - ProgramData - *.conf, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Videos"
 type: bool
 - name: ApacheAccessLog
 description: "Apache Access Log (by Hadar Yudovich): Apache Access Log"
 type: bool
 - name: AppCompatPCA
 description: "AppCompat PCA Folder (by Andrew Rathbun): AppCompat PCA Folder"
 type: bool
 - name: AppData
 description: "AppData (by Phill Moore): AppData"
 type: bool
 - name: AppXPackages
 description: "AppXPackages (by Nisarg Suthar): AppRepository for AppX, ProgramData Packages for AppX, SystemApps for AppX, UserSpecificPackages for AppX, WindowsApps for AppX"
 type: bool
 - name: ApplicationEvents
 description: "Windows Application Event Log (by Drew Ervin): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP"
 type: bool
 - name: AsperaConnect
 description: "Aspera Connect Log Files (by Dennis Reneau): Aspera Client Logs, Aspera Server Logs"
 type: bool
 - name: AteraAgent
 description: "AteraAgent (by Andrew Rathbun): AteraAgent .ini files, AteraAgent Logs, AteraAgent Logs, AteraAgent Logs, AteraAgent Logs"
 type: bool
 - name: Avast
 description: "Avast Antivirus Data (by Drew Ervin and Dhiral Panjwani): Avast AV Index, Avast AV Logs, Avast AV Logs (XP), Avast AV User Logs, Avast Icarus Logs, Avast Persistent Data Logs"
 type: bool
 - name: AviraAVLogs
 description: "Avira Logs (by Fabian Murer and Dhiral Panjwani): Avira Activity Logs, Avira Security Logs, Avira VPN Logs"
 type: bool
 - name: BCD
 description: "Boot Configuration Files (by Troy Larson): BCD, BCD Logs"
 type: bool
 - name: BITS
 description: "Microsoft BITS (Background Intelligent Transer Service) persistent files (by Jos Clephas): BITS files"
 type: bool
 - name: BitTorrent
 description: "BitTorrent (by Banaanhangwagen): TorrentClients - BitTorrent"
 type: bool
 - name: Bitdefender
 description: "Bitdefender Antivirus Data (by Drew Ervin, Ahmed Elshaer): Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files"
 type: bool
 - name: BoxDrive_Metadata
 description: "Box Cloud Storage Metadata (by Chad Tilbury): Box Drive Application Metadata, Box Sync Application Metadata"
 type: bool
 - name: BoxDrive_UserFiles
 description: "Box Cloud Storage Files (by Chad Tilbury): Box Drive User Files, Box Sync User Files"
 type: bool
 - name: BraveBrowser
 description: "Brave Browser (by Cassie Doemel): Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Login Data, Network Action Predictor, Network Persistent State, Preferences, Publisher Info DB/Brave Rewards, Quota Manager, Reporting and NEL, Secure Preferences, Sessions Folder, Shortcuts, Top Sites, Visited Links, Web Data"
 type: bool
 - name: BrowserCache
 description: "Browser Caches (by Bjorn Vanhaeren): Brave Cache Folder, Chrome Cache Folder, Chromium Edge Cache Folder, Edge WebcacheV01.dat, Firefox Cache Folder, IE 11 Cache, IE 9/10 Cache, IE Index.dat temp internet files"
 type: bool
 - name: CertUtil
 description: "Certutil (by NVISO (@NVISOsecurity)): INetCache, System CryptnetUrlCache, User CryptnetUrlCache"
 type: bool
 - name: Chrome
 description: "Chrome (by Eric Zimmerman and Andrew Rathbun): Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts XP, Chrome Snapshots Folder, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, Windows Protect Folder"
 type: bool
 - name: ChromeExtensions
 description: "Chrome Extension Files (by piesecurity): Chrome Extension Files, Chrome Extension Files XP"
 type: bool
 - name: ChromeFileSystem
 description: "Chrome HTML5 File System Contents (by Chad Tilbury): Chrome HTML5 File System Folder"
 type: bool
 - name: CiscoJabber
 description: "Jabber (by Andrew Bannon): Cisco Jabber Database"
 type: bool
 - name: ClipboardMaster
 description: "ClipboardMaster (by Andrew Rathbun): ClipboardMaster - Clipboard History - Backups, ClipboardMaster - Clipboard History - Images, ClipboardMaster - Clipboard History - Text"
 type: bool
 - name: CloudStorage_All
 description: "Cloud Storage Contents and Metadata (by Chad Tilbury and Andrew Rathbun): Box Drive Application Metadata, Box Drive User Files, Box Sync Application Metadata, Box Sync User Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox User Files, Google Drive Backup and Sync Metadata, Google Drive Backup and Sync User Files, Google Drive for Desktop Metadata, Idrive Backup Operations, Idrive Backup Schedule, Idrive Backup Summary, Idrive Cleanup Operations, Idrive Configuration, Idrive Delete Operations, Idrive Exclusion Configurations, Idrive Local Drives, Idrive Mapped Drives, Idrive Restore Operations, Idrive SQL Databse, Idrive Schedule History, Idrive Tracefile, Idrive User Details, OneDrive Metadata Logs, OneDrive Metadata Settings, OneDrive User Files, Rclone Config, SugarSync - My SugarSync (Default Location), SugarSync - Shared Folders (Default Location), SugarSync Log File, Windows Protect Folder, pCloud Database, pCloud Database Shared Memory File, pCloud Database WAL File"
 type: bool
 - name: CloudStorage_Metadata
 description: "Cloud Storage Metadata (by Chad Tilbury and Andrew Rathbun, Eric Capuano): Box Drive Application Metadata, Box Sync Application Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Google Drive Backup and Sync Metadata, Google Drive for Desktop Metadata, OneDrive Metadata Logs, OneDrive Metadata Settings, Rclone Config, Windows Protect Folder"
 type: bool
 - name: CloudStorage_OneDriveExplorer
 description: "OneDrive and other files used with OneDriveExplorer (by Brian Maloney): NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, OneDrive Metadata Logs, OneDrive Metadata Settings, RECYCLER - WinXP, RECYCLER - WinXP, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+, UsrClass.dat registry hive, UsrClass.dat registry transaction files"
 type: bool
 - name: CombinedLogs
 description: "Collect Event logs, Trace logs, Windows Firewall, PowerShell console logs, and .NET CLR UsageLogs (by Mike Cary, Mark Hallman added the USBDevicelogs target, Thomas DIOT (Qazeer) added the .NET CLR UsageLogs target): .NET CLR UsageLogs (system-scoped), .NET CLR UsageLogs (user-scoped), Delivery Optimization Trace Logs, Energy-NTKL Trace Logs, Event logs Win7+, Event logs Win7+, Event logs XP, PowerShell Console Log, Setupapi.log Win7+, Setupapi.log Win7+, Setupapi.log XP, SleepStudy Trace Logs, SleepStudy Trace Logs, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WMI Trace Logs, WMI Trace Logs, Windows Firewall Logs, Windows Firewall Logs"
 type: bool
 - name: Combofix
 description: "ComboFix Antivirus Data (by Drew Ervin): ComboFix"
 type: bool
 - name: ConfluenceLogs
 description: "Confluence Log Files (by Eric Capuano): Confluence Wiki Log Files, Confluence Wiki Log Files"
 type: bool
 - name: Cybereason
 description: "Cybereason Sensor/Detection Logs (by piesecurity): Cybereason Anti-Ransomware Logs, Cybereason Application Control and NGAV Logs, Cybereason Sensor Communications and Anti-Malware Logs"
 type: bool
 - name: Cylance
 description: "Cylance Antivirus Logs (by Ron Rader): Cylance Optics Logs, Cylance Program Files Logs, Cylance ProgramData Logs"
 type: bool
 - name: DC__
 description: "DC++ (by Andrew Rathbun): DC++ Chat Logs"
 type: bool
 - name: DWAgent
 description: "DWAgent Log Files (by Ron Rader): DWAgent Log Files"
 type: bool
 - name: Debian
 description: "Debian on Windows Subsystem for Linux (by Matt Dawson): Debian WSL .bash_history, Debian WSL .bashrc, Debian WSL .profile, Debian WSL /etc/bash.bashrc, Debian WSL /etc/crontab, Debian WSL /etc/debian_version, Debian WSL /etc/fstab, Debian WSL /etc/group, Debian WSL /etc/hostname, Debian WSL /etc/hosts, Debian WSL /etc/os-release, Debian WSL /etc/passwd, Debian WSL /etc/profile, Debian WSL /etc/shadow, Debian WSL /etc/timezone, Debian WSL Apt Logs, Debian WSL User Crontabs, Debian WSL ext4.vhdx"
 type: bool
 - name: DirectoryOpus
 description: "Directory Opus (by Andrew Rathbun): Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus"
 type: bool
 - name: DirectoryTraversal_AudioFiles
 description: "Find audio files covering a multitude of formats (by Andrew Rathbun): Audio files"
 type: bool
 - name: DirectoryTraversal_ExcelDocuments
 description: "Find Excel and Excel alternative documents (by Andrew Rathbun): Excel and Excel-like Documents"
 type: bool
 - name: DirectoryTraversal_PDFDocuments
 description: "Find PDF and PDF alternative documents (by Andrew Rathbun): PDF and PDF-like Documents"
 type: bool
 - name: DirectoryTraversal_PictureFiles
 description: "Find picture files covering a multitude of formats (by Andrew Rathbun): Picture files"
 type: bool
 - name: DirectoryTraversal_SQLiteDatabases
 description: "Find files with common SQLite file extensions (by Andrew Rathbun): SQLite Files (.db* and .sqlite*)"
 type: bool
 - name: DirectoryTraversal_VideoFiles
 description: "Find video files covering a multitude of formats (by Andrew Rathbun): Video files"
 type: bool
 - name: DirectoryTraversal_WildCardExample
 description: "Find zip archives (by Eric Zimmerman): Zips"
 type: bool
 - name: DirectoryTraversal_WordDocuments
 description: "Find Word and Word alternative documents (by Andrew Rathbun): Word and Word-like Documents"
 type: bool
 - name: Discord
 description: "Discord Cache and LevelDB Files (by Christian Johansen and Matt Dawson): Discord Cache Files, Discord Local Storage LevelDB Files"
 type: bool
 - name: DoubleCommander
 description: "Double Commander (by Andrew Rathbun): Double Commander - FTP Log, Double Commander - doublecmd.xml, Double Commander - history.xml, Double Commander - multiarc.ini, Double Commander - pixmaps.txt, Double Commander - session.ini, Double Commander - shortcuts.scf"
 type: bool
 - name: Drivers
 description: "Windows Drivers (by Zawadi Done): Drivers"
 type: bool
 - name: Dropbox_Metadata
 description: "Dropbox Cloud Storage Metadata (by Chad Tilbury and Andrew Rathbun): Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder"
 type: bool
 - name: Dropbox_UserFiles
 description: "Dropbox Cloud Storage Files (by Chad Tilbury): Dropbox User Files"
 type: bool
 - name: EFCommander
 description: "EF Commander (by Andrew Rathbun): EF Commander - .ini File"
 type: bool
 - name: ESET
 description: "ESET Antivirus Data (by Drew Ervin, Phill Moore): ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET NOD32 AV Logs (XP), ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine"
 type: bool
 - name: Edge
 description: "Edge (by Phill Moore): Edge folder"
 type: bool
 - name: EdgeChromium
 description: "Microsoft Edge Chromium Artifacts (by Chad Tilbury and Andrew Rathbun): Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Sessions Folder, Edge Shortcuts, Edge Snapshots Folder, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Edge bookmarks, Windows Protect Folder"
 type: bool
 - name: EdgeChromiumExtensions
 description: "Edge Chromium Extension Files (by cardinsou): Edge Chromium Extension Files"
 type: bool
 - name: Emsisoft
 description: "Emsisoft Antivirus Logs (by blueskycyber): Emsisoft Scan Logs"
 type: bool
 - name: EncapsulationLogging
 description: "EncapsulationLogging (by Troy Larson): EncapsulationLogging, EncapsulationLogging, EncapsulationLogging Logs, EncapsulationLogging Logs"
 type: bool
 - name: EventLogs_RDP
 description: "Collect Win7+ RDP related Event logs (by Mark Hallman, esecrpm): Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+"
 type: bool
 - name: EventLogs
 description: "Event logs (by Eric Zimmerman): Event logs Win7+, Event logs Win7+, Event logs XP"
 type: bool
 - name: EventTraceLogs
 description: "Event Trace Logs (by Mark Hallman): Delivery Optimization Trace Logs, Energy-NTKL Trace Logs, SleepStudy Trace Logs, SleepStudy Trace Logs, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WMI Trace Logs, WMI Trace Logs"
 type: bool
 - name: EventTranscriptDB
 description: "EventTranscript.db (and other files related to Telemetry and Diagnostic Data) (by Andrew Rathbun and Josh Mitchell): EventTranscript.db, EventTranscript.db, Microsoft Office Diagnostic Logs"
 type: bool
 - name: Evernote
 description: "Evernote (by Matt Dawson): Evernote Accounts, Evernote Notebook Snippets, Evernote Notebooks"
 type: bool
 - name: Everything__VoidTools_
 description: "Everything (VoidTools) (by Andrew Rathbun): Everything (VoidTools), Everything (VoidTools) - .ini file, Everything (VoidTools) - Run History, Everything (VoidTools) - Search History"
 type: bool
 - name: EvidenceOfExecution
 description: "Evidence of execution related files (by Eric Zimmerman): Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Prefetch, Prefetch, RecentFileCache, RecentFileCache, Syscache, Syscache transaction files"
 type: bool
 - name: Exchange
 description: "Exchange Log Files (by Keith Twombley): Exchange TransportRoles log files, Exchange client access log files"
 type: bool
 - name: ExchangeClientAccess
 description: "Exchange Client Access Log Files (by Keith Twombley): Exchange client access log files"
 type: bool
 - name: ExchangeCve_2021_26855
 description: "Exchange Server Vulnerability *.Compiled Files (by Dennis Reneau): Exchange Server Modified Compiled Files, Exchange Server Modified Compiled Files, Exchange Server Modified Compiled Files, Exchange Server Modified Compiled Files"
 type: bool
 - name: ExchangeTransport
 description: "Exchange Transport Log Files (by Keith Twombley): Exchange TransportRoles log files"
 type: bool
 - name: FSecure
 description: "F-Secure Antivirus Data (by Drew Ervin): F-Secure Logs, F-Secure Scheduled Scan Reports, F-Secure User Logs"
 type: bool
 - name: FTPClients
 description: "FTP Clients (by Andrew Rathbun): FileZilla Log Files, FileZilla SQLite3 Log Files, FileZilla Server XML Log Files, FileZilla XML Log Files, WinSCP (.ini file)"
 type: bool
 - name: Fences
 description: "Fences (by Andrew Rathbun): Fences - Desktop Screenshots"
 type: bool
 - name: FileExplorerReplacements
 description: "File Explorer Replacements (by Andrew Rathbun): Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Double Commander - FTP Log, Double Commander - doublecmd.xml, Double Commander - history.xml, Double Commander - multiarc.ini, Double Commander - pixmaps.txt, Double Commander - session.ini, Double Commander - shortcuts.scf, EF Commander - .ini File, Free Commander - Backup Settings, Free Commander - FTP Log, Free Commander - FTP Related Information, Free Commander - FreeCommander.fav.xml, Free Commander - FreeCommander.ftp.ini, Free Commander - FreeCommander.hist.ini, Free Commander - FreeCommander.ini, Midnight Commander -- All Configuation Files, Multi Commander - Application Folder, Multi Commander - Config Folder, Multi Commander - Log File, Multi Commander - Log Folder, Multi Commander - UserData Folder, One Commander - All Configuration Files, One Commander - Other Configuration Files, Q-Dir - .ini File, Q-Dir - .qdr file, SpeedCommander - .ini File, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Tablacus Explorer - window1.xml, Total Commander - .ini File, Total Commander - FTP .ini File, Total Commander - FTP Logs, Total Commander - File Tree, Total Commander - Frequent Directory Listing, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal, XYplorer - .dat files, XYplorer - .ini file, XYplorer - .ini file for each respective pane, XYplorer - AutoBackup folder"
 type: bool
 - name: FileSystem
 description: "File system metadata (by Eric Zimmerman): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T"
 type: bool
 - name: FileZillaClient
 description: "FileZilla XML and SQLite Log Files (by Dennis Reneau): FileZilla SQLite3 Log Files, FileZilla XML Log Files"
 type: bool
 - name: FileZillaServer
 description: "FileZilla Server Logs (by Andrew Rathbun): FileZilla Log Files, FileZilla Server XML Log Files"
 type: bool
 - name: Firefox
 description: "Firefox (by Eric Zimmerman and Andrew Rathbun): Addons, Addons XP, Bookmarks, Bookmarks, Cookies, Cookies, Cookies XP, Downloads, Downloads XP, Extensions, Favicons, Favicons XP, Form history, Form history XP, Password, Password, Password, Password XP, Password XP, Password XP, Permissions, Places, Places XP, Preferences, Protections, Search, Search XP, Sessionstore, Sessionstore Folder, Sessionstore XP, Signons, Signons XP, Storage Sync, Webappstore, Webappstore XP"
 type: bool
 - name: FreeCommander
 description: "FreeCommander XE (by Andrew Rathbun): Free Commander - Backup Settings, Free Commander - FTP Log, Free Commander - FTP Related Information, Free Commander - FreeCommander.fav.xml, Free Commander - FreeCommander.ftp.ini, Free Commander - FreeCommander.hist.ini, Free Commander - FreeCommander.ini"
 type: bool
 - name: FreeDownloadManager
 description: "Free Download Manager (by Matt Dawson): FDM Backup Info, FDM Database, FDM Database (userdata.zip)"
 type: bool
 - name: FreeFileSync
 description: "FreeFileSync (by Andrew Rathbun): FreeFileSync"
 type: bool
 - name: Freenet
 description: "Freenet (by Charlie Rubisoff): Freenet, Freenet, Freenet, Freenet, Freenet"
 type: bool
 - name: FrostWire
 description: "FrostWire (by Andrew Rathbun): FrostWire AppData, FrostWire AppData, FrostWire Downloads"
 type: bool
 - name: Gigatribe
 description: "Gigatribe Files (by Linus Nissi): Gigatribe Files Windows Vista/7/8/10, Gigatribe Files Windows XP, Gigatribe Files Windows XP"
 type: bool
 - name: GoogleDriveBackupSync_UserFiles
 description: "Google Backup and Sync Storage Files (by Chad Tilbury): Google Drive Backup and Sync User Files"
 type: bool
 - name: GoogleDrive_Metadata
 description: "Google Drive Metadata (by Chad Tilbury): Google Drive Backup and Sync Metadata, Google Drive for Desktop Metadata"
 type: bool
 - name: GoogleEarth
 description: "Google Earth (by Guus Beckers): Google Earth My Places Backup file, Google Earth My Places Backup file (XP), Google Earth My Places file, Google Earth My Places file (XP)"
 type: bool
 - name: GroupPolicy
 description: "Current Group Policy Enforcement (by piesecurity): Computer Group Policy files, Group Policy Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Startup/Shutdown Scripts, Local Group Policy Files - Startup/Shutdown Scripts, Local Group Policy INI Files, User Group Policy files"
 type: bool
 - name: HeidiSQL
 description: "HeidiSQL (by Hyun Yi @hyuunnn): HeidiSQL (tabs.ini), HeidiSQL Backup files (*.sql)"
 type: bool
 - name: HexChat
 description: "HexChat (by Andrew Rathbun): HexChat Chat Logs"
 type: bool
 - name: HitmanPro
 description: "HitmanPro Antivirus Data (by Drew Ervin): HitmanPro Alert Logs, HitmanPro Database, HitmanPro Logs"
 type: bool
 - name: IISConfiguration
 description: "IIS (by NVISO (@NVISOsecurity)): IIS administration.config, IIS applicationHost.config, IIS redirection.config, web.config"
 type: bool
 - name: IISLogFiles
 description: "IIS Log Files (by Troy Larson): IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files"
 type: bool
 - name: IRCClients
 description: "IRC Clients (by Andrew Rathbun): HexChat Chat Logs, IceChat Chat Logs, mIRC Chat Logs (2000/XP), mIRC Chat Logs (Vista+)"
 type: bool
 - name: ISLOnline
 description: "ISLOnline Remote Access Tool (by Thomas Burnette): ISL AlwaysOn - App Logs, ISL AlwaysOn - Configuration, ISL AlwaysOn - Email Configuration, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn Logs - Sessions List, ISL Light Logs - Sessions, ISLOnline Logs - Session Configurations, ISLOnline Logs - Sessions - *.out"
 type: bool
 - name: IceChat
 description: "IceChat (by Andrew Rathbun): IceChat Chat Logs"
 type: bool
 - name: Idrive
 description: "Idrive Backup Artifacts (by Thomas Burnette): Idrive Backup Operations, Idrive Backup Schedule, Idrive Backup Summary, Idrive Cleanup Operations, Idrive Configuration, Idrive Delete Operations, Idrive Exclusion Configurations, Idrive Local Drives, Idrive Mapped Drives, Idrive Restore Operations, Idrive SQL Databse, Idrive Schedule History, Idrive Tracefile, Idrive User Details"
 type: bool
 - name: ImgBurn
 description: "ImgBurn (by Chuck Whitson): ImgBurn - Application Log File"
 type: bool
 - name: InternetExplorer
 description: "Internet Explorer (by Eric Zimmerman): IE 11 Cookies, IE 11 Metadata, IE 9/10 Cookies, IE 9/10 Download History, IE 9/10 History, Index.dat History, Index.dat History subdirectory, Index.dat Office, Index.dat Office XP, Index.dat UserData, Index.dat cookies, Local Internet Explorer folder, Roaming Internet Explorer folder"
 type: bool
 - name: IrfanView
 description: "IrfanView (by Andrew Rathbun): IrfanView Configuration File"
 type: bool
 - name: JDownloader2
 description: "JDownloader 2 (by Matt Dawson): JDownloader 2.0 Download Lists, JDownloader 2.0 General Settings, JDownloader 2.0 Link Collector, JDownloader 2.0 Link Grabber Settings, JDownloader 2.0 Proxy Settings"
 type: bool
 - name: JavaWebCache
 description: "Java WebStart Cache - (IDX Files) (by piesecurity): Java WebStart Cache System level, Java WebStart Cache System level, Java WebStart Cache System level (SysWow64), Java WebStart Cache System level (SysWow64), Java WebStart Cache System level (SysWow64) - IE Protected Mode, Java WebStart Cache System level (SysWow64) - IE Protected Mode, Java WebStart Cache System level - IE Protected Mode, Java WebStart Cache System level - IE Protected Mode, Java WebStart Cache User Level - Default, Java WebStart Cache User Level - IE Protected Mode, Java WebStart Cache User Level - XP"
 type: bool
 - name: Kali
 description: "Kali on Windows Subsystem for Linux (by Matt Dawson): Kali WSL .bash_history, Kali WSL .bashrc, Kali WSL .profile, Kali WSL /etc/bash.bashrc, Kali WSL /etc/crontab, Kali WSL /etc/debian_version, Kali WSL /etc/fstab, Kali WSL /etc/group, Kali WSL /etc/hostname, Kali WSL /etc/hosts, Kali WSL /etc/os-release, Kali WSL /etc/passwd, Kali WSL /etc/profile, Kali WSL /etc/shadow, Kali WSL /etc/timezone, Kali WSL Apt Logs, Kali WSL User Crontabs, Kali WSL ext4.vhdx"
 type: bool
 - name: KapeTriage
 description: "KapeTriage collects most of the files needed for a DFIR Investigation. This Target pulls evidence from File System files, Registry Hives, Event Logs, Scheduled Tasks, Evidence of Execution, SRUM data, SUM data, Cloud metadata, WER, WBEM, Web Browser data (IE/Edge, Chrome, Mozilla history), LNK Files, JumpLists, 3rd party remote access software logs, 3rd party antivirus software logs, Windows 10/11 Timeline database, and $I Recycle Bin files. (by Scott Downie): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, AVG AV Logs, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG FileInfo DB, AVG Persistent Logs, AVG Report Logs, AVG lsdbj2 JSON, Action1 Client Application logs, ActivitiesCache.db, Addons, Addons XP, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Chat Logs - User Profile, AnyDesk Logs - ProgramData - *.conf, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Videos, AppCompat PCA Folder, Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Avast AV Index, Avast AV Logs, Avast AV Logs (XP), Avast AV User Logs, Avast Icarus Logs, Avast Persistent Data Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Bookmarks, Bookmarks, Bookmarks, Box Drive Application Metadata, Box Sync Application Metadata, Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts XP, Chrome Snapshots Folder, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, ComboFix, Cookies, Cookies, Cookies, Cookies XP, Crash Dumps, Crash Dumps, Crash Dumps, Current Session, Current Tabs, Cybereason Anti-Ransomware Logs, Cybereason Application Control and NGAV Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cylance Optics Logs, Cylance Program Files Logs, Cylance ProgramData Logs, DWAgent Log Files, Desktop LNK Files, Desktop LNK Files XP, DetectionHistory, Download Metadata, Downloads, Downloads XP, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET NOD32 AV Logs (XP), ESET Remote Administrator Logs, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Sessions Folder, Edge Shortcuts, Edge Snapshots Folder, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Edge bookmarks, Edge folder, Emsisoft Scan Logs, Event logs Win7+, Event logs Win7+, Event logs XP, Extensions, F-Secure Logs, F-Secure Scheduled Scan Reports, F-Secure User Logs, Favicons, Favicons, Favicons XP, Form history, Form history XP, Google Drive Backup and Sync Metadata, Google Drive for Desktop Metadata, History, HitmanPro Alert Logs, HitmanPro Database, HitmanPro Logs, IE 11 Cookies, IE 11 Metadata, IE 9/10 Cookies, IE 9/10 Download History, IE 9/10 History, ISL AlwaysOn - App Logs, ISL AlwaysOn - Configuration, ISL AlwaysOn - Email Configuration, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn Logs - Sessions List, ISL Light Logs - Sessions, ISLOnline Logs - Session Configurations, ISLOnline Logs - Sessions - *.out, Index.dat History, Index.dat History subdirectory, Index.dat Office, Index.dat Office XP, Index.dat UserData, Index.dat cookies, Kaseya Agent Edge Service Logs, Kaseya Agent Endpoint Service Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Service Log, Kaseya Live Connect Logs, Kaseya Live Connect Logs (XP), Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Level RMM Client Application logs, Local Internet Explorer folder, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Local User Quarantine, LocalSessionManager Event Logs, LocalSessionManager Event Logs, LogMeIn Application Logs, LogMeIn ProgramData Logs, Login Data, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Scan Logs, MalwareBytes Anti-Malware Scan Results Logs, MalwareBytes Anti-Malware Service Logs, McAfee Desktop Protection Logs, McAfee Desktop Protection Logs XP, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, McAfee ePO Logs, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Net Monitor Client Config, Net Monitor Client Logs, Net Monitor Server Config, Net Monitor Server Data, Net Monitor Server Logs, Net Monitor Server Temp Folder, Network Action Predictor, Network Persistent State, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, OneDrive Metadata Logs, OneDrive Metadata Settings, Opera - Local Folder, Opera - Roaming Folder, Password, Password, Password, Password XP, Password XP, Password XP, Permissions, Places, Places XP, PowerShell Console Log, Preferences, Preferences, Prefetch, Prefetch, Protections, Publisher Info DB/Brave Rewards, Puffin - Autocomplete Data, Puffin - Cookies, Puffin - Image Cache, Puffin - Password (Encrypted), Puffin - Password Forms Data, Puffin - Subscription Data, Puffin - data.db, Quota Manager, RDP Cache Files, RDP Cache Files, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, RECYCLER - WinXP, Radmin Server 32bit Chats, Radmin Server 32bit Log, Radmin Server 64bit Chats, Radmin Server 64bit Log, Radmin Viewer Chats, Rclone Config, RealVNC Log, RealVNC Log, RecentFileCache, RecentFileCache, Recycle Bin - Windows Vista+, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, RemoteUtilities Connection Logs, RemoteUtilities Install Log, Reporting and NEL, Restore point LNK Files XP, Roaming Internet Explorer folder, RogueKiller Reports, RustDesk logs, RustDesk logs, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SRUM, SRUM, SUM Database (.mdb files), SUPERAntiSpyware Logs, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, SYSTEM user quarantine, ScreenConnect Session Database, ScreenConnect Session Database, ScreenConnect User Config, Search, Search XP, Secure Preferences, SecureAge Antvirus Logs, SentinelOne EDR Log, Sessions Folder, Sessionstore, Sessionstore Folder, Sessionstore XP, Shortcuts, Signons, Signons XP, Sophos Logs, Sophos Logs (XP), Splashtop Log Files, Splashtop Log Files in ProgramData, Start Menu LNK Files, Storage Sync, Supremo Connection Logs, Supremo File Transfer Inbox, Symantec Endpoint Protection Logs, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Quarantine, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, Syscache, Syscache transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TeamViewer Connection Logs, TightVNC Application Logs, Top Sites, TotalAV Logs, TotalAV Logs, Trend Micro Logs, Trend Micro Security Agent Connection Logs, Trend Micro Security Agent Report Logs, UltraViewer Connection Log, UltraViewer Service Log, UltraViewer System Logs, UltraViewer User Logs, User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files, VIPRE Business Agent Logs, VIPRE Business User Logs (up to v4), VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (v7+), Visited Links, Vivaldi Bookmarks, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Cookies, Vivaldi Download Metadata, Vivaldi Favicons, Vivaldi History, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Network Persistent State, Vivaldi Notes, Vivaldi Preferences, Vivaldi Sessions Folder, Vivaldi Top Sites, Vivaldi User Tracking, Vivaldi Visited Links, Vivaldi Web Data, WBEM, WBEM, WER Files, WER Files, Web Data, Webappstore, Webappstore XP, Webroot Program Data, Windows Defender Event Logs, Windows Defender Event Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Quarantine, Windows Protect Folder, Windows Protect Folder, Windows Protect Folder, Windows.old RDP Cache Files, XML, XML, XML, Xeox RMM Client Application logs, Yandex Autofill data, Yandex Bookmarks, Yandex Cookies, Yandex Favicons, Yandex History, Yandex Login Data, Yandex Network Action Predictor, Yandex Network Persistent State, Yandex Passman logs, Yandex Preferences, Yandex Sessions Folder, Yandex Shortcuts, Yandex Top Sites, Yandex Visited Links, Yandex Web Data, Zoho Assist .conf files, Zoho Assist .conf files in Program Files*, Zoho Assist .conf files in AppData\Local, Zoho Assist .txt files in Program Files*, Zoho Assist log files in AppData\Local, Zoho Assist log files in Program Files*, Zoho Assist log files in ProgramData, at .job, at .job, at SchedLgU.txt, at SchedLgU.txt, ccSubSDK Database, mRemoteNG Connection Configuration and Backups, mRemoteNG Logs, mRemoteNG Program Settings, registrationInfo.xml"
 type: bool
 - name: Kaseya
 description: "Kaseya Data (by Drew Ervin and Andrew Rathbun): Kaseya Agent Edge Service Logs, Kaseya Agent Endpoint Service Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Service Log, Kaseya Live Connect Logs, Kaseya Live Connect Logs (XP), Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log"
 type: bool
 - name: Keepass
 description: "Keepass (by Vito Alfano): Keepass Application Details, Keepass Config Xml, Keepass User Config"
 type: bool
 - name: KeepassXC
 description: "KeepassXC (by Vito Alfano): Keepass Local Ini, Keepass Roaming Ini"
 type: bool
 - name: LNKFilesAndJumpLists
 description: "LNK Files and jump lists (by Eric Zimmerman, Andrew Rathbun, Yogesh Khatri): Desktop LNK Files, Desktop LNK Files XP, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Restore point LNK Files XP, Start Menu LNK Files"
 type: bool
 - name: Level
 description: "Level.io Application Logs (by Andrew Skatoff @DFIR_TNT): Level RMM Client Application logs"
 type: bool
 - name: LinuxOnWindowsProfileFiles
 description: "Linux on Windows Profile Files (by Troy Larson): .bash_history, .bash_logout, .bashrc, .profile"
 type: bool
 - name: LiveUserFiles
 description: "Live User Files (by Mark Hallman): User Files - Desktop, User Files - Documents, User Files - Downloads, User Files - Dropbox"
 type: bool
 - name: LogFiles
 description: "LogFiles (includes SUM) (by Fabian Murer): Error logging, LogFiles, LogFiles"
 type: bool
 - name: LogMeIn
 description: "LogMeIn Data (by Drew Ervin): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, LogMeIn Application Logs, LogMeIn ProgramData Logs"
 type: bool
 - name: MOF
 description: "MOF files (WMI) (by Eric Zimmerman): MOF files"
 type: bool
 - name: MSSQLErrorLog
 description: "MS SQL ErrorLogs (by Troy Larson): MS SQL Errorlog, MS SQL Errorlogs"
 type: bool
 - name: MacriumReflect
 description: "Macrium Reflect (by Andrew Rathbun): Macrium Reflect, Macrium Reflect, Macrium Reflect"
 type: bool
 - name: Malwarebytes
 description: "Malwarebytes Data (by Drew Ervin &amp;amp; Kirtan Shah): MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Scan Logs, MalwareBytes Anti-Malware Scan Results Logs, MalwareBytes Anti-Malware Service Logs"
 type: bool
 - name: ManageEngineLogs
 description: "ManageEngine Log Files (by Whitney Champion, Phill Moore): ManageEngine ADSelfService Plus Log Files, ManageEngine Desktop Central Log Files"
 type: bool
 - name: Mattermost
 description: "Mattermost (by Andrew Rathbun): Mattermost - Chat Logs"
 type: bool
 - name: McAfee
 description: "McAfee Log Files (by Sam Smoker): McAfee Desktop Protection Logs, McAfee Desktop Protection Logs XP, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs"
 type: bool
 - name: McAfee_ePO
 description: "McAfee ePO Log Files (by Doug Metz): McAfee ePO Logs"
 type: bool
 - name: MediaMonkey
 description: "MediaMonkey (by Andrew Rathbun): MediaMonkey - Media SQLite Database, MediaMonkey - MediaMonkey.ini"
 type: bool
 - name: Megasync
 description: "MegaSync Data Collection (by Vito Alfano): MegaSync Folder"
 type: bool
 - name: MemoryFiles
 description: "Memory Files (by Ahmed Elshaer, Teo Kia Meng): Small Memory Dump directory, Small Memory Dump directory, hiberfil.sys, pagefile.sys, swapfile.sys"
 type: bool
 - name: MessagingClients
 description: "Messaging and communication apps (by Gregor Wegberg): Cisco Jabber Database, Discord Cache Files, Discord Local Storage LevelDB Files, HexChat Chat Logs, IceChat Chat Logs, Mattermost - Chat Logs, Microsoft Store WhatsApp Cache, Microsoft Store WhatsApp Local Storage, Microsoft Teams Cache, Microsoft Teams Config, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Logs (Windows 11), Signal Attachments cache, Signal Database, Signal Logs, Signal config.json, Skype for Destkop v8+ Chromium Cache, Slack - Chat Logs, Slack Cache, Slack Electron Logs, Slack LevelDB Files, Slack Storage, Telegram app folder, Telegram downloaded files, Viber Config Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Data Database, Viber Users Thumbnails Cache, WhatsApp Cache, WhatsApp Local Storage, leveldb (Skype for Desktop +v8), mIRC Chat Logs (2000/XP), mIRC Chat Logs (Vista+), main.db (App &amp;lt;v12), main.db Win7+, main.db XP, s4l-[username].db (App +v8), skype.db (App +v12)"
 type: bool
 - name: MicrosoftOfficeBackstage
 description: "Microsoft Office Backstage (by Brian Maloney): Microsoft Office Backstage"
 type: bool
 - name: MicrosoftOneNote
 description: "Microsoft OneNote (by Andrew Rathbun): Microsoft OneNote - AccessibilityCheckerIndex, Microsoft OneNote - FullTextSearchIndex, Microsoft OneNote - RecentNotebooks_SeenURLs, Microsoft OneNote - RecentSearches, Microsoft OneNote - User NoteTags"
 type: bool
 - name: MicrosoftStickyNotes
 description: "Microsoft Sticky Notes (by Andrew Rathbun): Microsoft Sticky Notes - 1607 and later, Microsoft Sticky Notes - Windows 7, 8, and 10 version 1511 and earlier"
 type: bool
 - name: MicrosoftTeams
 description: "Microsoft Teams (by Matt Dawson and Andrew Rathbun): Microsoft Teams Cache, Microsoft Teams Config, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Logs (Windows 11)"
 type: bool
 - name: MicrosoftToDo
 description: "Microsoft To Do (by Andrew Rathbun): Microsoft To Do - SQLite Database of To Do tasks, Microsoft To Do - User Avatar"
 type: bool
 - name: MidnightCommander
 description: "Midnight Commander (by Andrew Rathbun): Midnight Commander -- All Configuation Files"
 type: bool
 - name: MiniTimelineCollection
 description: "MFT, Registry and Event Logs to generate a mini timeline (by Mari DeGrazia): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, Event logs Win7+, Event logs Win7+, Event logs XP, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files"
 type: bool
 - name: MultiCommander
 description: "Multi Commander (by Andrew Rathbun): Multi Commander - Application Folder, Multi Commander - Config Folder, Multi Commander - Log File, Multi Commander - Log Folder, Multi Commander - UserData Folder"
 type: bool
 - name: NETCLRUsageLogs
 description: ".NET CLR UsageLogs (by Matias Davaro, Thomas DIOT (Qazeer)): .NET CLR UsageLogs (system-scoped), .NET CLR UsageLogs (user-scoped)"
 type: bool
 - name: NGINXLogs
 description: "NGINX Log Files (by Eric Capuano): NGINX Log Files"
 type: bool
 - name: NZBGet
 description: "NZBGet (by Andrew Rathbun): Usenet Clients - NZBGet Log File, Usenet Clients - NZBGet NZBs"
 type: bool
 - name: Nessus
 description: "Nessus (by Andrew Rathbun): Nessus Logs, Nessus Logs"
 type: bool
 - name: NetMonitorforEmployeesProfessional
 description: "Net Monitor for Employees Pro (by Tristan PINCEAUX - CERT CWATCH - ALMOND): Net Monitor Client Config, Net Monitor Client Logs, Net Monitor Server Config, Net Monitor Server Data, Net Monitor Server Logs, Net Monitor Server Temp Folder"
 type: bool
 - name: NewsbinPro
 description: "Newsbin Pro (by Andrew Rathbun): Usenet Clients - Newsbin Pro"
 type: bool
 - name: Newsleecher
 description: "Newsleecher (by Andrew Rathbun): Usenet Clients - Newsleecher"
 type: bool
 - name: Nicotine__
 description: "Nicotine++ (by Andrew Rathbun): Nicotine++ Buddyfileindex.db, Nicotine++ Buddyfiles.db, Nicotine++ Buddymtimes.db, Nicotine++ Buddystreams.db, Nicotine++ Buddywordindex.db, Nicotine++ Config Files, Nicotine++ Downloads.json, Nicotine++ Incomplete Downloads, Nicotine++ Logs, Nicotine++ Uploads.json, Nicotine++ User Shares"
 type: bool
 - name: Notepad__
 description: "Notepad++ Backups, recently searched/replaced terms and recently opened documents (by Banaanhangwagen and Matt Dawson): Notepad++ Config, Notepad++ Session, Notepad++ Unsaved Edits"
 type: bool
 - name: Notepad
 description: "A Target to collect files that are currently open in Notepad (Windows 11+) (by Andrew Rathbun): Notepad Session Files"
 type: bool
 - name: Notion
 description: "Notion Note-Taking App (by Thomas Burnette): Notion Custom Dictionary, Notion Local Storage"
 type: bool
 - name: OfficeAutosave
 description: "Office Autosave (by Russ Taylor): Excel Autosave Location, Powerpoint Autosave Location, Publisher Autosave Location, Word Autosave Location"
 type: bool
 - name: OfficeDiagnostics
 description: "Office Diagnostics (by teddy-ROxPin): Office Diagnostics, Office Elevated Diagnostics"
 type: bool
 - name: OfficeDocumentCache
 description: "Office Document Cache (by Banaanhangwagen): Office Document Cache"
 type: bool
 - name: OneCommander
 description: "One Commander (by Andrew Rathbun): One Commander - All Configuration Files, One Commander - Other Configuration Files"
 type: bool
 - name: OneDrive_Metadata
 description: "Microsoft OneDrive Storage Metadata (by Chad Tilbury): OneDrive Metadata Logs, OneDrive Metadata Settings"
 type: bool
 - name: OneDrive_UserFiles
 description: "Microsoft OneDrive Storage Files (by Chad Tilbury): OneDrive User Files"
 type: bool
 - name: OpenSSHClient
 description: "OpenSSH Client config, known hosts and keys (by Matt Dawson): OpenSSH Config File, OpenSSH Default DSA Private Key, OpenSSH Default ECDSA Private Key, OpenSSH Default ECDSA-SK Private Key, OpenSSH Default ED25519 Private Key, OpenSSH Default ED25519-SK Private Key, OpenSSH Default RSA Private Key, OpenSSH Known Hosts, OpenSSH Public Keys"
 type: bool
 - name: OpenSSHServer
 description: "OpenSSH Server Config and Logs (by Matt Dawson): OpenSSH Authorized Administrator Keys, OpenSSH Host DSA Key, OpenSSH Host ECDSA Key, OpenSSH Host ED25519 Key, OpenSSH Host RSA Key, OpenSSH Server Config File, OpenSSH Server Logs, OpenSSH User Authorized Keys, OpenSSH User Authorized Keys 2"
 type: bool
 - name: OpenVPNClient
 description: "OpenVPN Client Config and Log (by Mathias Frank): OpenVPN Client Config, OpenVPN Client Config, OpenVPN Client Config"
 type: bool
 - name: Opera
 description: "Opera (by Andrew Rathbun): Opera - Local Folder, Opera - Roaming Folder"
 type: bool
 - name: OutlookPSTOST
 description: "Outlook PST and OST files (by Eric Zimmerman and Chad Tilbury): NST, OST, OST (2013 or 2016), OST XP, Outlook Attachment Temporary Storage, PST, PST (2013 or 2016), PST XP"
 type: bool
 - name: P2PClients
 description: "P2P Clients (by Andrew Rathbun): DC++ Chat Logs, FrostWire AppData, FrostWire AppData, FrostWire Downloads, Gigatribe Files Windows Vista/7/8/10, Gigatribe Files Windows XP, Gigatribe Files Windows XP, Shareaza Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings"
 type: bool
 - name: PeaZip
 description: "PeaZip (by Andrew Rathbun): PeaZip Configuration Files"
 type: bool
 - name: PerfLogs
 description: "Perflogs Folder Copy (by Vito Alfano): Perflogs"
 type: bool
 - name: PowerShell7Config
 description: "PowerShell 7 Runtime Config (by Andrew Rathbun): PowerShell 7 Config JSON"
 type: bool
 - name: PowerShellConsole
 description: "PowerShell Console Log File (by Mike Cary): PowerShell Console Log"
 type: bool
 - name: PowerShellTranscripts
 description: "PowerShell Transcripts (by Andrew Rathbun and Chad Tilbury): PowerShell Transcripts - Default Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location"
 type: bool
 - name: Prefetch
 description: "Prefetch files (by Eric Zimmerman): Prefetch, Prefetch"
 type: bool
 - name: ProgramData
 description: "ProgramData Folder Copy (by Vito Alfano): ProgramData"
 type: bool
 - name: ProtonVPN
 description: "ProtonVPN (by Andrew Rathbun): ProtonVPN - Connection Logs"
 type: bool
 - name: PuffinSecureBrowser
 description: "Puffin Secure Browser (by Andrew Rathbun): Puffin - Autocomplete Data, Puffin - Cookies, Puffin - Image Cache, Puffin - Password (Encrypted), Puffin - Password Forms Data, Puffin - Subscription Data, Puffin - data.db"
 type: bool
 - name: PushNotification
 description: "Windows Push Notification Service (by Zawadi Done): WNS, WNS"
 type: bool
 - name: Q_Dir
 description: "Q-Dir (by Andrew Rathbun): Q-Dir - .ini File, Q-Dir - .qdr file"
 type: bool
 - name: QFinderPro__QNAP_
 description: "QFinderPro (QNAP) (by Andrew Rathbun): QFinderPro"
 type: bool
 - name: RDPCache
 description: "RDP Cache Files (by Hadar Yudovich): RDP Cache Files, RDP Cache Files, Windows.old RDP Cache Files"
 type: bool
 - name: RDPLogs
 description: "RDP Logs (by Drew Ervin): LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs"
 type: bool
 - name: Radmin
 description: "Radmin Server/Viewer Logs and Chats (by Mathias Frank): Radmin Server 32bit Chats, Radmin Server 32bit Log, Radmin Server 64bit Chats, Radmin Server 64bit Log, Radmin Viewer Chats"
 type: bool
 - name: RcloneConf
 description: "Rclone config file (by Eric Capuano): Rclone Config"
 type: bool
 - name: RecentFileCache
 description: "RecentFileCache (by Eric Zimmerman): RecentFileCache, RecentFileCache"
 type: bool
 - name: RecycleBin
 description: "Recycle Bin DataAndInfo (by Mark Hallman / Joshua Hickman): RECYCLER - WinXP, RECYCLER - WinXP, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+"
 type: bool
 - name: RecycleBin_DataFiles
 description: "Recycle Bin Data Files (by Joshua Hickman, Andreas Hunkeler (@Karneades), Brian Maloney): RECYCLER - WinXP, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+"
 type: bool
 - name: RecycleBin_InfoFiles
 description: "Recycle Bin Info Files (by Joshua Hickman, Andreas Hunkeler (@Karneades)): RECYCLER - WinXP, Recycle Bin - Windows Vista+"
 type: bool
 - name: RegistryHives
 description: "System and user related Registry hives (by Eric Zimmerman): Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files"
 type: bool
 - name: RegistryHivesMSIXApps
 description: "MSIX/APPX App Hives (by Zach Stanford / Mari DeGrazia): Registry.dat MSIX Hive, User.dat MSIX Hive, UserClasses.dat MSIX Hive"
 type: bool
 - name: RegistryHivesOther
 description: "Other Registry Hives (by Andrew Rathbun): BBI registry hive, BBI registry hive, BBI registry transaction files, BBI registry transaction files, BCD-Template registry hive, BCD-Template registry hive, BCD-Template registry transaction files, BCD-Template registry transaction files, COMPONENTS registry hive, COMPONENTS registry hive, COMPONENTS registry transaction files, COMPONENTS registry transaction files, DRIVERS registry hive, DRIVERS registry hive, DRIVERS registry transaction files, DRIVERS registry transaction files, ELAM registry hive, ELAM registry hive, ELAM registry transaction files, ELAM registry transaction files, VSMIDK registry hive, VSMIDK registry hive, VSMIDK registry transaction files, VSMIDK registry transaction files, userdiff registry hive, userdiff registry hive, userdiff registry transaction files, userdiff registry transaction files"
 type: bool
 - name: RegistryHivesSystem
 description: "System level/related Registry hives (by Eric Zimmerman / Mark Hallman): Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP)"
 type: bool
 - name: RegistryHivesUser
 description: "User Related Registry hives (by Eric Zimmerman / Mark Hallman): NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, UsrClass.dat registry hive, UsrClass.dat registry transaction files"
 type: bool
 - name: RemoteAdmin
 description: "Composite target for files related to remote administration tools (by Drew Ervin, Mathias Frank, Andrew Rathbun): Action1 Client Application logs, Ammyy Program Data, AnyDesk Chat Logs - User Profile, AnyDesk Logs - ProgramData - *.conf, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Videos, Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, DWAgent Log Files, ISL AlwaysOn - App Logs, ISL AlwaysOn - Configuration, ISL AlwaysOn - Email Configuration, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn Logs - Sessions List, ISL Light Logs - Sessions, ISLOnline Logs - Session Configurations, ISLOnline Logs - Sessions - *.out, Kaseya Agent Edge Service Logs, Kaseya Agent Endpoint Service Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Service Log, Kaseya Live Connect Logs, Kaseya Live Connect Logs (XP), Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, Level RMM Client Application logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, LogMeIn Application Logs, LogMeIn ProgramData Logs, Net Monitor Client Config, Net Monitor Client Logs, Net Monitor Server Config, Net Monitor Server Data, Net Monitor Server Logs, Net Monitor Server Temp Folder, RDP Cache Files, RDP Cache Files, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, Radmin Server 32bit Chats, Radmin Server 32bit Log, Radmin Server 64bit Chats, Radmin Server 64bit Log, Radmin Viewer Chats, RealVNC Log, RealVNC Log, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, RemoteUtilities Connection Logs, RemoteUtilities Install Log, RustDesk logs, RustDesk logs, ScreenConnect Session Database, ScreenConnect Session Database, ScreenConnect User Config, Splashtop Log Files, Splashtop Log Files in ProgramData, Supremo Connection Logs, Supremo File Transfer Inbox, TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TeamViewer Connection Logs, TightVNC Application Logs, UltraViewer Connection Log, UltraViewer Service Log, UltraViewer System Logs, UltraViewer User Logs, Windows.old RDP Cache Files, Xeox RMM Client Application logs, Zoho Assist .conf files, Zoho Assist .conf files in Program Files*, Zoho Assist .conf files in AppData\Local, Zoho Assist .txt files in Program Files*, Zoho Assist log files in AppData\Local, Zoho Assist log files in Program Files*, Zoho Assist log files in ProgramData, mRemoteNG Connection Configuration and Backups, mRemoteNG Logs, mRemoteNG Program Settings"
 type: bool
 - name: RemoteUtilities_app
 description: "Remote Utilities (by Ryan McVicar): RemoteUtilities Connection Logs, RemoteUtilities Install Log"
 type: bool
 - name: RoamingProfile
 description: "User Related Registry Hives, LNK files, etc (by Scott Downie): Amcache, Amcache transaction files, Chrome Cookies, Chrome Cookies, Chrome Current Session, Chrome Current Session, Chrome Current Tabs, Chrome Current Tabs, Chrome Download Metadata, Chrome Download Metadata, Chrome Extension Cookies, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons, Chrome History, Chrome History, Chrome Last Session, Chrome Last Session, Chrome Last Tabs, Chrome Last Tabs, Chrome Login Data, Chrome Login Data, Chrome Media History, Chrome Media History, Chrome Network Action Predictor, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences, Chrome Quota Manager, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts, Chrome SyncData Database, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites, Chrome Trust Tokens, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links, Chrome Web Data, Chrome Web Data, Chrome bookmarks, Chrome bookmarks, Desktop LNK Files, Edge folder, Edge folder, Excel Autosave Location, LNK Files, LNK Files from Microsoft Office Recent, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, Office Document Cache, Office Document Cache, PowerPoint Autosave Location, Publisher Autosave Location, Publisher Autosave Location, UsrClass.dat registry hive, UsrClass.dat registry transaction files, Windows Protect Folder, Windows Protect Folder, Word Autosave Location"
 type: bool
 - name: Robo_FTP
 description: "Robo-FTP (by Thomas Burnette): Robo-FTP Debug Logs, Robo-FTP Jobs, Robo-FTP PGP Keys, Robo-FTP SSH Keys, Robo-FTP SSL Certificates, Robo-FTP Script/Trace Logs, Robo-FTP User Debug Logs, Robo-FTP User PGP Keys, Robo-FTP User SSH Keys, Robo-FTP User SSL Certificates, Robo-FTP User Script/Trace Logs, Robo-FTP User Scripts, Robo-FTP User XML Config, Robo-FTP XML Config"
 type: bool
 - name: RogueKiller
 description: "RogueKiller Anti-Malware (by Adlice Software) (by Drew Ervin): RogueKiller Reports"
 type: bool
 - name: RustDesk
 description: "RustDesk (by Andrew Rathbun): RustDesk logs, RustDesk logs"
 type: bool
 - name: SABnbzd
 description: "SABnbzd (by Andrew Rathbun): Usenet Clients - SABnzbd Download Logs, Usenet Clients - SABnzbd History.db"
 type: bool
 - name: SCCMClientLogs
 description: "SCCM Client Log Files (by Andrew Rathbun): SCCM Client Log Files"
 type: bool
 - name: SDB
 description: "Shim SDB FIles (by Troy Larson): SDB Files, SDB Files, SDB Files x64, SDB Files x64"
 type: bool
 - name: SOFELK
 description: "SOF-ELK related files of interest (by Tony Knutson and Andrew Rathbun): $Boot, $J, $J, $LogFile, $MFT, $Max, $Max, $SDS, $SDS, $T, $T, Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Desktop LNK Files, Desktop LNK Files XP, Event logs Win7+, Event logs Win7+, Event logs XP, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Prefetch, Prefetch, RecentFileCache, RecentFileCache, Restore point LNK Files XP, Start Menu LNK Files, Syscache, Syscache transaction files"
 type: bool
 - name: SQLiteDatabases
 description: "SQLDatabases Target for use with SQLECmd Module (by Andrew Rathbun): 4K Video Downloader, ActivitiesCache.db, Addons, Bitdefender SQLite DB Files, Bookmarks, Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Shortcuts XP, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, Cookies, Cookies, Downloads, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge bookmarks, EventTranscript.db, EventTranscript.db, Favicons, FileZilla SQLite3 Log Files, Form history, Google File Stream Metadata, Google File Stream Metadata, Google File Stream Metadata, Google File Stream Metadata, IDrive Backed Up Files, Microsoft OneNote - AccessibilityCheckerIndex, Microsoft OneNote - FullTextSearchIndex, Microsoft OneNote - RecentNotebooks_SeenURLs, Microsoft OneNote - RecentSearches, Microsoft OneNote - User NoteTags, Microsoft Sticky Notes - 1607 and later, Microsoft To Do - SQLite Database of To Do tasks, Notion Local Storage, Permissions, Places, Protections, Robo-FTP Jobs, Search, Signons, Storage Sync, TeraCopy - History Databases, TeraCopy - Main Database, Update Store.db, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB"
 type: bool
 - name: SRUM
 description: "System Resource Usage Monitor (SRUM) Data (by Mark Hallman): SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SRUM, SRUM"
 type: bool
 - name: SUM
 description: "SUM Database (by Andrew Rathbun): SUM Database (.mdb files)"
 type: bool
 - name: SUPERAntiSpyware
 description: "SUPERAntiSpyware Data (by Drew Ervin): SUPERAntiSpyware Logs"
 type: bool
 - name: SUSELinuxEnterpriseServer
 description: "SUSE Linux Enterprise Server on Windows Subsystem for Linux (by Matt Dawson): SUSE Linux Enterprise Server WSL .bash_history, SUSE Linux Enterprise Server WSL .bashrc, SUSE Linux Enterprise Server WSL .profile, SUSE Linux Enterprise Server WSL /etc/bash.bashrc, SUSE Linux Enterprise Server WSL /etc/fstab, SUSE Linux Enterprise Server WSL /etc/group, SUSE Linux Enterprise Server WSL /etc/hostname, SUSE Linux Enterprise Server WSL /etc/hosts, SUSE Linux Enterprise Server WSL /etc/os-release, SUSE Linux Enterprise Server WSL /etc/passwd, SUSE Linux Enterprise Server WSL /etc/profile, SUSE Linux Enterprise Server WSL /etc/shadow, SUSE Linux Enterprise Server WSL /etc/timezone, SUSE Linux Enterprise Server WSL ext4.vhdx"
 type: bool
 - name: ScheduledTasks
 description: "Scheduled tasks (*.job and XML) (by Eric Zimmerman): XML, XML, XML, at .job, at .job, at SchedLgU.txt, at SchedLgU.txt"
 type: bool
 - name: ScreenConnect
 description: "ScreenConnect Data (now known as ConnectWise Control) (by Drew Ervin): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, ScreenConnect Session Database, ScreenConnect Session Database, ScreenConnect User Config"
 type: bool
 - name: SecureAge
 description: "SecureAge Antivirus Logs (by Andrew Rathbun): SecureAge Antvirus Logs"
 type: bool
 - name: SentinelOne
 description: "Sentinel One Logs (by Kirtan Shah): SentinelOne EDR Log"
 type: bool
 - name: ServerTriage
 description: "A compound target for gathering artifacts common to servers. (by Eric Capuano): Apache Access Log, Confluence Wiki Log Files, Confluence Wiki Log Files, Exchange TransportRoles log files, Exchange client access log files, FileZilla Log Files, FileZilla Server XML Log Files, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, MS SQL Errorlog, MS SQL Errorlogs, ManageEngine ADSelfService Plus Log Files, ManageEngine Desktop Central Log Files, NGINX Log Files, OpenSSH Authorized Administrator Keys, OpenSSH Host DSA Key, OpenSSH Host ECDSA Key, OpenSSH Host ED25519 Key, OpenSSH Host RSA Key, OpenSSH Server Config File, OpenSSH Server Logs, OpenSSH User Authorized Keys, OpenSSH User Authorized Keys 2"
 type: bool
 - name: ShareX
 description: "ShareX (by Andrew Rathbun): ShareX"
 type: bool
 - name: Shareaza
 description: "Shareaza (by Andrew Rathbun): Shareaza Logs"
 type: bool
 - name: SiemensTIA
 description: "Copy Siemens TIA Settings (by Olaf Schwarz (@b00010111)): Siemens TIA Settings"
 type: bool
 - name: Signal
 description: "Signal (Please view this tkape file for documentation on decryption!) (by Matt Dawson): Signal Attachments cache, Signal Database, Signal Logs, Signal config.json"
 type: bool
 - name: SignatureCatalog
 description: "Obtain detached signature catalog files (by Mike Pilkington): SignatureCatalog, SignatureCatalog"
 type: bool
 - name: Skype
 description: "Skype (by Eric Zimmerman, Matt Dawson): Skype for Destkop v8+ Chromium Cache, leveldb (Skype for Desktop +v8), main.db (App &amp;lt;v12), main.db Win7+, main.db XP, s4l-[username].db (App +v8), skype.db (App +v12)"
 type: bool
 - name: Slack
 description: "Slack (by Andrew Rathbun and Chad Tilbury): Slack - Chat Logs, Slack Cache, Slack Electron Logs, Slack LevelDB Files, Slack Storage"
 type: bool
 - name: Snagit
 description: "Snagit (by Andrew Rathbun): Snagit - Captures"
 type: bool
 - name: SnipAndSketch
 description: "Snip &amp;amp; Sketch Cached Images (by Kevin Pagano): Snip &amp;amp; Sketch"
 type: bool
 - name: Sophos
 description: "Sophos Data (by Drew Ervin): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Sophos Logs, Sophos Logs (XP)"
 type: bool
 - name: Soulseek
 description: "Soulseek (by Andrew Rathbun): Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings"
 type: bool
 - name: SpeedCommander
 description: "SpeedCommander (by Andrew Rathbun): SpeedCommander - .ini File"
 type: bool
 - name: Splashtop
 description: "Splashtop (by Andrew Rathbun, Yogesh Khatri): Splashtop Log Files, Splashtop Log Files in ProgramData"
 type: bool
 - name: StartupFolders
 description: "Startup Folders (by Jason Ballard): System-wide startup folder, User startup folders"
 type: bool
 - name: StartupInfo
 description: "StartupInfo XML Files (by Hadar Yudovich): StartupInfo XML Files, StartupInfo XML Files"
 type: bool
 - name: Steam
 description: "Steam (by Nisarg Suthar, SolitudePy): Steam Friend List and Username History file, Steam Friend List and Username History file, Steam Game Image files, Steam Game Image files, Steam Game Tray Icon files, Steam Game Tray Icon files, Steam Login Metadata file, Steam Login Metadata file, Steam Startup Times Log file, Steam Startup Times Log file, Steam User Avatar files, Steam User Avatar files"
 type: bool
 - name: SublimeText
 description: "Sublime Text 2/3/4 Auto Save Session (by Mathias Frank and Nisarg Suthar): SublimeText 2/3 Auto Save Session, SublimeText 4 Auto Save Session"
 type: bool
 - name: SugarSync
 description: "SugarSync (by Andrew Rathbun): SugarSync - My SugarSync (Default Location), SugarSync - Shared Folders (Default Location), SugarSync Log File"
 type: bool
 - name: SumatraPDF
 description: "SumatraPDF (by Andrew Rathbun): SumatraPDF Cache, SumatraPDF Settings - SessionData"
 type: bool
 - name: SupremoRemoteDesktop
 description: "Supremo Remote Desktop Control Logs (by Sandro Heckendorn): Supremo Connection Logs, Supremo File Transfer Inbox"
 type: bool
 - name: Symantec_AV_Logs
 description: "Symantec AV Logs (by Brian Maloney): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, Symantec Endpoint Protection Logs, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Quarantine, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, ccSubSDK Database, registrationInfo.xml"
 type: bool
 - name: Syscache
 description: "syscache.hve (by Phill Moore): Syscache, Syscache transaction files"
 type: bool
 - name: TablacusExplorer
 description: "Tablacus Explorer (by Andrew Rathbun): Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Tablacus Explorer - window1.xml"
 type: bool
 - name: TeamViewerLogs
 description: "TeamViewer Logs (by Hadar Yudovich, Sam Smoker): TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TeamViewer Connection Logs"
 type: bool
 - name: Telegram
 description: "Telegram Desktop (by Simone Marinari): Telegram app folder, Telegram downloaded files"
 type: bool
 - name: TeraCopy
 description: "TeraCopy log history (by Kevin Pagano): TeraCopy"
 type: bool
 - name: ThumbCache
 description: "Thumbcache DB (by Eric Zimmerman): Thumbcache DB"
 type: bool
 - name: Thunderbird
 description: "Mozilla Thunderbird Email Client (by Matt Dawson): Mozilla Thunderbird Address Book, Mozilla Thunderbird Attachments, Mozilla Thunderbird Calendar Data, Mozilla Thunderbird Global Messages Database, Mozilla Thunderbird ImapMail INBOX, Mozilla Thunderbird Install Date, Mozilla Thunderbird Mail INBOX, Mozilla Thunderbird Profiles.ini, Mozilla Thunderbird logins.json, Mozilla Thunderbird places.sqlite, Mozilla Thunderbird prefs.js"
 type: bool
 - name: TorrentClients
 description: "Torrent Clients (by Andrew Rathbun): TorrentClients - BitTorrent, TorrentClients - qBittorrent, TorrentClients - qBittorrent, TorrentClients - qBittorrent, TorrentClients - qBittorrent, TorrentClients - uTorrent"
 type: bool
 - name: Torrents
 description: "Torrent Files (by Tony Knutson): Torrents"
 type: bool
 - name: TotalAV
 description: "TotalAV Antivirus Data (by Kirtan Shah): TotalAV Logs, TotalAV Logs"
 type: bool
 - name: TotalCommander
 description: "Total Commander (by Andrew Rathbun, Jessica Venturo and Chuck Whitson): Total Commander - .ini File, Total Commander - FTP .ini File, Total Commander - FTP Logs, Total Commander - File Tree, Total Commander - Frequent Directory Listing, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal"
 type: bool
 - name: TreeSize
 description: "TreeSize - Scan History (by Andrew Rathbun): TreeSize - ScanHistory.XML"
 type: bool
 - name: TrendMicro
 description: "Trend Micro Data (by Drew Ervin): Trend Micro Logs, Trend Micro Security Agent Connection Logs, Trend Micro Security Agent Report Logs"
 type: bool
 - name: USBDetective
 description: "Collects files that can be input into USB Detective for parsing (by Kevin Pagano): Amcache, Amcache, Amcache transaction files, Amcache transaction files, Desktop LNK Files, Desktop LNK Files XP, Event logs Win7+, Event logs Win7+, Event logs XP, LNK Files from C:\ProgramData, LNK Files from Microsoft Office Recent, LNK Files from Recent, LNK Files from Recent (XP), Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT registry hive, NTUSER.DAT registry hive XP, NTUSER.DAT registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, RegBack registry transaction files, RegBack registry transaction files, Registry.dat MSIX Hive, Restore point LNK Files XP, SAM registry hive, SAM registry hive, SAM registry hive (RegBack), SAM registry hive (RegBack), SAM registry transaction files, SAM registry transaction files, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files, Setupapi.log Win7+, Setupapi.log Win7+, Setupapi.log XP, Start Menu LNK Files, System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, System Restore Points Registry Hives (XP), User.dat MSIX Hive, UserClasses.dat MSIX Hive, UsrClass.dat registry hive, UsrClass.dat registry transaction files"
 type: bool
 - name: USBDevicesLogs
 description: "USB devices log files (by Eric Zimmerman, esecrpm): Setupapi.log Win7+, Setupapi.log Win7+, Setupapi.log XP"
 type: bool
 - name: Ubuntu
 description: "Ubuntu on Windows Subsystem for Linux (by Matt Dawson): Ubuntu WSL .bash_history, Ubuntu WSL .bashrc, Ubuntu WSL .profile, Ubuntu WSL /etc/bash.bashrc, Ubuntu WSL /etc/crontab, Ubuntu WSL /etc/fstab, Ubuntu WSL /etc/group, Ubuntu WSL /etc/hostname, Ubuntu WSL /etc/hosts, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/passwd, Ubuntu WSL /etc/profile, Ubuntu WSL /etc/shadow, Ubuntu WSL /etc/timezone, Ubuntu WSL Apt Logs, Ubuntu WSL User Crontabs, Ubuntu WSL ext4.vhdx"
 type: bool
 - name: Ultraviewer
 description: "UltraViewer (by Ryan McVicar, Sam Smoker): UltraViewer Connection Log, UltraViewer Service Log, UltraViewer System Logs, UltraViewer User Logs"
 type: bool
 - name: Usenet
 description: "Usenet (NZB) Files (by Andrew Rathbun): Usenet (NZB) Files"
 type: bool
 - name: UsenetClients
 description: "Usenet Clients (by Andrew Rathbun): Usenet Clients - NZBGet Log File, Usenet Clients - NZBGet NZBs, Usenet Clients - Newsbin Pro, Usenet Clients - Newsleecher, Usenet Clients - SABnzbd Download Logs, Usenet Clients - SABnzbd History.db"
 type: bool
 - name: VIPRE
 description: "VIPRE Data (by Drew Ervin): VIPRE Business Agent Logs, VIPRE Business User Logs (up to v4), VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (v7+)"
 type: bool
 - name: VLC_Media_Player
 description: "VLC Media Player (by Matt Dawson): VLC Recently Opened Files, VLC Recorded Files"
 type: bool
 - name: VMware
 description: "Runs all VMware modules to collect VMware VM config files, logs and Virtual Hard Disks (by Matt Dawson): VDI, VHD, VHDX, VMDK, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware - Virtual Machine Inventory"
 type: bool
 - name: VMwareInventory
 description: "VMware - Virtual Machine Inventory (by Andrew Rathbun): VMware - Virtual Machine Inventory"
 type: bool
 - name: VMwareMemory
 description: "VMware - Virtual Machine Memory (by Andrew Rathbun): VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player)"
 type: bool
 - name: VNCLogs
 description: "VNC Logs (by Phill Moore): Application Event Log Win7+, Application Event Log Win7+, Application Event Log XP, Application Event Log XP, RealVNC Log, RealVNC Log, TightVNC Application Logs"
 type: bool
 - name: Viber
 description: "ViberPC Messaging App (by Matt Dawson): Viber Config Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Data Database, Viber Users Thumbnails Cache"
 type: bool
 - name: VirtualBox
 description: "Runs all VirtualBox modules to collect Virtualbox VM config files, logs and Virtual Hard Disks (by Matt Dawson): VDI, VHD, VHDX, VMDK, VirtualBox, VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox Logs, VirtualBox VM backup configs, VirtualBox VM configs"
 type: bool
 - name: VirtualBoxConfig
 description: "Collects VirtualBox configuration files (by Matt Dawson): VirtualBox VM backup configs, VirtualBox VM configs"
 type: bool
 - name: VirtualBoxLogs
 description: "Collects VirtualBox log files (by Matt Dawson): VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox Logs"
 type: bool
 - name: VirtualBoxMemory
 description: "VirtualBox - Memory (by Andrew Rathbun): VirtualBox"
 type: bool
 - name: VirtualDisks
 description: "Virtual Disks (by Phill Moore): VDI, VHD, VHDX, VMDK"
 type: bool
 - name: VisualStudioCode
 description: "Visual Studio Code artifacts (by Sebastian Søgaard): VSCode Logs, VSCode Network Cookies, VSCode Network Persistent State, VSCode Opened Files, VSCode User Preferences, VSCode User extensions, VSCode User settings, VSCode Workspaces"
 type: bool
 - name: Vivaldi
 description: "Vivaldi Artifacts (by Sebastian Søgaard): Vivaldi Bookmarks, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Cookies, Vivaldi Download Metadata, Vivaldi Favicons, Vivaldi History, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Network Persistent State, Vivaldi Notes, Vivaldi Preferences, Vivaldi Sessions Folder, Vivaldi Top Sites, Vivaldi User Tracking, Vivaldi Visited Links, Vivaldi Web Data"
 type: bool
 - name: WBEM
 description: "Web-Based Enterprise Management (WBEM) (by Mark Hallman): WBEM, WBEM"
 type: bool
 - name: WER
 description: "Windows Error Reporting (by Troy Larson): Crash Dumps, Crash Dumps, Crash Dumps, WER Files, WER Files"
 type: bool
 - name: WSL
 description: "All Windows Subsystem for Linux targets (by Matt Dawson): Debian WSL .bash_history, Debian WSL .bashrc, Debian WSL .profile, Debian WSL /etc/bash.bashrc, Debian WSL /etc/crontab, Debian WSL /etc/debian_version, Debian WSL /etc/fstab, Debian WSL /etc/group, Debian WSL /etc/hostname, Debian WSL /etc/hosts, Debian WSL /etc/os-release, Debian WSL /etc/passwd, Debian WSL /etc/profile, Debian WSL /etc/shadow, Debian WSL /etc/timezone, Debian WSL Apt Logs, Debian WSL User Crontabs, Debian WSL ext4.vhdx, Kali WSL .bash_history, Kali WSL .bashrc, Kali WSL .profile, Kali WSL /etc/bash.bashrc, Kali WSL /etc/crontab, Kali WSL /etc/debian_version, Kali WSL /etc/fstab, Kali WSL /etc/group, Kali WSL /etc/hostname, Kali WSL /etc/hosts, Kali WSL /etc/os-release, Kali WSL /etc/passwd, Kali WSL /etc/profile, Kali WSL /etc/shadow, Kali WSL /etc/timezone, Kali WSL Apt Logs, Kali WSL User Crontabs, Kali WSL ext4.vhdx, SUSE Linux Enterprise Server WSL .bash_history, SUSE Linux Enterprise Server WSL .bashrc, SUSE Linux Enterprise Server WSL .profile, SUSE Linux Enterprise Server WSL /etc/bash.bashrc, SUSE Linux Enterprise Server WSL /etc/fstab, SUSE Linux Enterprise Server WSL /etc/group, SUSE Linux Enterprise Server WSL /etc/hostname, SUSE Linux Enterprise Server WSL /etc/hosts, SUSE Linux Enterprise Server WSL /etc/os-release, SUSE Linux Enterprise Server WSL /etc/passwd, SUSE Linux Enterprise Server WSL /etc/profile, SUSE Linux Enterprise Server WSL /etc/shadow, SUSE Linux Enterprise Server WSL /etc/timezone, SUSE Linux Enterprise Server WSL ext4.vhdx, Ubuntu WSL .bash_history, Ubuntu WSL .bashrc, Ubuntu WSL .profile, Ubuntu WSL /etc/bash.bashrc, Ubuntu WSL /etc/crontab, Ubuntu WSL /etc/fstab, Ubuntu WSL /etc/group, Ubuntu WSL /etc/hostname, Ubuntu WSL /etc/hosts, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/passwd, Ubuntu WSL /etc/profile, Ubuntu WSL /etc/shadow, Ubuntu WSL /etc/timezone, Ubuntu WSL Apt Logs, Ubuntu WSL User Crontabs, Ubuntu WSL ext4.vhdx, openSUSE WSL .bash_history, openSUSE WSL .bashrc, openSUSE WSL .profile, openSUSE WSL /etc/bash.bashrc, openSUSE WSL /etc/fstab, openSUSE WSL /etc/group, openSUSE WSL /etc/hostname, openSUSE WSL /etc/hosts, openSUSE WSL /etc/os-release, openSUSE WSL /etc/passwd, openSUSE WSL /etc/profile, openSUSE WSL /etc/shadow, openSUSE WSL /etc/timezone, openSUSE WSL ext4.vhdx"
 type: bool
 - name: WebBrowsers
 description: "Web browser history, bookmarks, etc. (by Eric Zimmerman): Addons, Addons XP, Bookmarks, Bookmarks, Bookmarks, Chrome Cookies, Chrome Cookies XP, Chrome Current Session, Chrome Current Session XP, Chrome Current Tabs, Chrome Current Tabs XP, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons XP, Chrome History, Chrome History XP, Chrome Last Session, Chrome Last Session XP, Chrome Last Tabs, Chrome Last Tabs XP, Chrome Login Data, Chrome Login Data XP, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences XP, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Sessions Folder, Chrome Shortcuts, Chrome Shortcuts XP, Chrome Snapshots Folder, Chrome SyncData Database, Chrome Top Sites, Chrome Top Sites XP, Chrome Trust Tokens, Chrome Visited Links, Chrome Visited Links XP, Chrome Web Data, Chrome Web Data XP, Chrome bookmarks, Chrome bookmarks XP, Cookies, Cookies, Cookies, Cookies XP, Current Session, Current Tabs, Download Metadata, Downloads, Downloads XP, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Sessions Folder, Edge Shortcuts, Edge Snapshots Folder, Edge SyncData Database, Edge Top Sites, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Edge bookmarks, Edge folder, Extensions, Favicons, Favicons, Favicons XP, Form history, Form history XP, History, IE 11 Cookies, IE 11 Metadata, IE 9/10 Cookies, IE 9/10 Download History, IE 9/10 History, Index.dat History, Index.dat History subdirectory, Index.dat Office, Index.dat Office XP, Index.dat UserData, Index.dat cookies, Local Internet Explorer folder, Login Data, Network Action Predictor, Network Persistent State, Opera - Local Folder, Opera - Roaming Folder, Password, Password, Password, Password XP, Password XP, Password XP, Permissions, Places, Places XP, Preferences, Preferences, Protections, Publisher Info DB/Brave Rewards, Puffin - Autocomplete Data, Puffin - Cookies, Puffin - Image Cache, Puffin - Password (Encrypted), Puffin - Password Forms Data, Puffin - Subscription Data, Puffin - data.db, Quota Manager, Reporting and NEL, Roaming Internet Explorer folder, Search, Search XP, Secure Preferences, Sessions Folder, Sessionstore, Sessionstore Folder, Sessionstore XP, Shortcuts, Signons, Signons XP, Storage Sync, Top Sites, Visited Links, Vivaldi Bookmarks, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Cookies, Vivaldi Download Metadata, Vivaldi Favicons, Vivaldi History, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Network Persistent State, Vivaldi Notes, Vivaldi Preferences, Vivaldi Sessions Folder, Vivaldi Top Sites, Vivaldi User Tracking, Vivaldi Visited Links, Vivaldi Web Data, Web Data, Webappstore, Webappstore XP, Windows Protect Folder, Windows Protect Folder, Yandex Autofill data, Yandex Bookmarks, Yandex Cookies, Yandex Favicons, Yandex History, Yandex Login Data, Yandex Network Action Predictor, Yandex Network Persistent State, Yandex Passman logs, Yandex Preferences, Yandex Sessions Folder, Yandex Shortcuts, Yandex Top Sites, Yandex Visited Links, Yandex Web Data"
 type: bool
 - name: WebServers
 description: "Logs from all known web server applications and supporting services (by Eric Capuano): Apache Access Log, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, MS SQL Errorlog, MS SQL Errorlogs, NGINX Log Files"
 type: bool
 - name: Webroot
 description: "Webroot Antivirus (by Drew Ervin): Webroot Program Data"
 type: bool
 - name: WhatsApp
 description: "WhatsApp Local Files (by Matt Dawson, SolitudePy): Microsoft Store WhatsApp Cache, Microsoft Store WhatsApp Local Storage, WhatsApp Cache, WhatsApp Local Storage"
 type: bool
 - name: WhatsApp_Media
 description: "WhatsApp Shared Media Files (by SolitudePy): Microsoft Store WhatsApp Desktop Profile Pictures, Microsoft Store WhatsApp Shared Media"
 type: bool
 - name: WinDefendDetectionHist
 description: "Windows Defender Threat DetectionHistory files (by Jordan Klepser): DetectionHistory"
 type: bool
 - name: WinSCP
 description: "WinSCP (by Andrew Rathbun): WinSCP (.ini file)"
 type: bool
 - name: WindowsDefender
 description: "Windows Defender Data (by Drew Ervin): DetectionHistory, Windows Defender Event Logs, Windows Defender Event Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Logs, Windows Defender Quarantine"
 type: bool
 - name: WindowsFirewall
 description: "Windows Firewall Logs (by Mike Cary): Windows Firewall Logs, Windows Firewall Logs"
 type: bool
 - name: WindowsHello
 description: "Windows Hello (by Kevin Pagano): Cryptokeys, Masterkey, NGC, SECURITY registry hive, SECURITY registry hive, SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry hive, SOFTWARE registry hive, SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry hive, SYSTEM registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry transaction files, SYSTEM registry transaction files"
 type: bool
 - name: WindowsIndexSearch
 description: "Windows Index Search (by Mark Hallman): GatherLogs, WindowsIndexSearch"
 type: bool
 - name: WindowsNetwork
 description: "Windows Networks settings (by Zawadi Done): Network setting files"
 type: bool
 - name: WindowsNotificationsDB
 description: "Windows 10 Notification DB (by Hadar Yudovich): Windows 10 Notification DB, Windows 10 Notification DB"
 type: bool
 - name: WindowsOSUpgradeArtifacts
 description: "Windows OS Upgrade Artifacts (by Andrew Rathbun): FolderMoveLog.txt, HumanReadable.xml, MigLog.xml, Setupact.log, Update Store.db"
 type: bool
 - name: WindowsPowerDiagnostics
 description: "Windows Power Diagnostics (by Andrew Rathbun): Windows Power Diagnostics"
 type: bool
 - name: WindowsServerDNSAndDHCP
 description: "Windows Server DNS and DHCP log files (by Zawadi Done): DHCP files, DNS Netlogon files, DNS files"
 type: bool
 - name: WindowsSubsystemforAndroid
 description: "Windows Subsystem for Android (WSA) (by Andrew Rathbun): App download artifacts (ICO), App download artifacts (PNG), Appcompatdb.json, Diagnostic Logs for WSA, userdata.vhdx"
 type: bool
 - name: WindowsTelemetryDiagnosticsLegacy
 description: "Legacy Windows Telemetry and Diagnostics files (*.rbs) (by Andrew Rathbun and Josh Mitchell): Legacy .rbs files relating to Windows Telemetry and Diagnostics, Legacy .rbs files relating to Windows Telemetry and Diagnostics"
 type: bool
 - name: WindowsTimeline
 description: "ActivitiesCache.db collector (by Lee Whitfield): ActivitiesCache.db"
 type: bool
 - name: WindowsUpdate
 description: "Windows Update Logs (by Rick van Dreunen): Windows Component-Based Servicing logs, Windows Update Session Orchestrator logs, Windows Update logs"
 type: bool
 - name: WindowsYourPhone
 description: "Windows Your Phone (by Andrew Rathbun): Windows Your Phone - All Databases"
 type: bool
 - name: XPRestorePoints
 description: "XP Restore Points - System Volume Information directory (by Phill Moore): System Volume Information"
 type: bool
 - name: XYplorer
 description: "XYplorer (by Andrew Rathbun): XYplorer - .dat files, XYplorer - .ini file, XYplorer - .ini file for each respective pane, XYplorer - AutoBackup folder"
 type: bool
 - name: Xeox
 description: "Xeox Application Logs (by Andrew Skatoff @DFIR_TNT): Xeox RMM Client Application logs"
 type: bool
 - name: Yandex
 description: "Yandex Artifacts (by Sebastian Søgaard): Yandex Autofill data, Yandex Bookmarks, Yandex Cookies, Yandex Favicons, Yandex History, Yandex Login Data, Yandex Network Action Predictor, Yandex Network Persistent State, Yandex Passman logs, Yandex Preferences, Yandex Sessions Folder, Yandex Shortcuts, Yandex Top Sites, Yandex Visited Links, Yandex Web Data"
 type: bool
 - name: ZohoAssist
 description: "Zoho Assist artifacts (by Andrew Rathbun): Zoho Assist .conf files, Zoho Assist .conf files in Program Files*, Zoho Assist .conf files in AppData\Local, Zoho Assist .txt files in Program Files*, Zoho Assist log files in AppData\Local, Zoho Assist log files in Program Files*, Zoho Assist log files in ProgramData"
 type: bool
 - name: Zoom
 description: "Zoom client artifacts (by Ryan McVicar): Zoom client logs, Zoom client logs (Windows XP), Zoom client recordings, Zoom plugin (Outlook)"
 type: bool
 - name: iTunesBackup
 description: "iTunes Backups (by Tony Knutson): iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: mIRC
 description: "mIRC (by Andrew Rathbun): mIRC Chat Logs (2000/XP), mIRC Chat Logs (Vista+)"
 type: bool
 - name: mRemoteNG
 description: "mRemoteNG (by Markus Einarsson (@einarssonm)): mRemoteNG Connection Configuration and Backups, mRemoteNG Logs, mRemoteNG Program Settings"
 type: bool
 - name: openSUSE
 description: "openSUSE on Windows Subsystem for Linux (by Matt Dawson): openSUSE WSL .bash_history, openSUSE WSL .bashrc, openSUSE WSL .profile, openSUSE WSL /etc/bash.bashrc, openSUSE WSL /etc/fstab, openSUSE WSL /etc/group, openSUSE WSL /etc/hostname, openSUSE WSL /etc/hosts, openSUSE WSL /etc/os-release, openSUSE WSL /etc/passwd, openSUSE WSL /etc/profile, openSUSE WSL /etc/shadow, openSUSE WSL /etc/timezone, openSUSE WSL ext4.vhdx"
 type: bool
 - name: pCloudDatabase
 description: "pCloud Database (by Josh Hickman): pCloud Database, pCloud Database Shared Memory File, pCloud Database WAL File"
 type: bool
 - name: qBittorrent
 description: "qBittorrent (by Banaanhangwagen): TorrentClients - qBittorrent, TorrentClients - qBittorrent, TorrentClients - qBittorrent, TorrentClients - qBittorrent"
 type: bool
 - name: uTorrent
 description: "uTorrent (by Banaanhangwagen): TorrentClients - uTorrent"
 type: bool

 - name: KapeRules
 type: hidden
 description: A CSV file controlling the different Kape Target Rules
 default: |
 Id,Name,Category,Glob,Accessor,Comment
 1,$Boot,FileSystem,$Boot,ntfs,
 2,$J,FileSystem,$Extend/$UsnJrnl:$J,ntfs,
 3,$Max,FileSystem,$Extend/$UsnJrnl:$Max,ntfs,
 4,$J,FileSystem,$Extend/$J,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Targets are looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 5,$Max,FileSystem,$Extend/$Max,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Targets are looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 6,$LogFile,FileSystem,$LogFile,ntfs,
 7,$MFT,FileSystem,$MFT,ntfs,
 8,$MFTMirr,FileSystem,$MFTMirr,ntfs,$MFTMirr is a redundant copy of the first four (4) records of the MFT.
 9,$SDS,FileSystem,$Secure:$SDS,ntfs,
 10,$SDS,FileSystem,$Secure_$SDS,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Target is looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 11,$T,FileSystem,$Extend/$RmMetadata/$TxfLog/$Tops:$T,ntfs,
 12,$T,FileSystem,$Extend/$RmMetadata/$TxfLog/$T,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Target is looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 13,1Password Database,Apps,Users/*/AppData/Local/1password/data/1Password10.sqlite,lazy_ntfs,"Database which holds information about 1Password installation, such as accounts, categories, settings and more"
 14,1Password Backup Databases,Apps,Users/*/AppData/Local/1password/backups/1Password10.sqlite,lazy_ntfs,Backups of 1Password Database
 15,1Password Logs,Apps,Users/*/AppData/Local/1password/logs/*.log,lazy_ntfs,Log of usage of 1Password - can be useful for identifying periods of user activity
 16,4K Video Downloader,Apps,Users/*/AppData/Local/4kdownload.com/4K Video Downloader/4K Video Downloader/*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 17,4K Video Downloader+,Apps,Users/*/AppData/Local/4kdownload.com/4K Video Downloader+/4K Video Downloader+/*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 18,AVG AV Logs (XP),Antivirus,Documents and Settings/All Users/Application Data/AVG/Antivirus/log/**10,lazy_ntfs,
 19,AVG AV Report Logs (XP),Antivirus,Documents and Settings/All Users/Application Data/AVG/Antivirus/report/**10,lazy_ntfs,
 20,AVG AV Logs,Antivirus,ProgramData/AVG/Antivirus/log/**10,lazy_ntfs,
 21,AVG Report Logs,Antivirus,ProgramData/AVG/Antivirus/report/**10,lazy_ntfs,
 22,AVG Persistent Logs,Antivirus,ProgramData/AVG/Persistent Data/Antivirus/Logs/**10,lazy_ntfs,
 23,AVG FileInfo DB,Antivirus,ProgramData/AVG/Antivirus/**10/FileInfo2.db,lazy_ntfs,
 24,AVG lsdbj2 JSON,Antivirus,ProgramData/AVG/Antivirus/lsdb2.json,lazy_ntfs,
 25,AceText - Clipboard History,Apps,Users/*/Documents/*.atc,lazy_ntfs,Locates the Clipboard history for AceText
 26,Acronis True Image - Logs,Apps,ProgramData/Acronis/TrueImageHome/Logs/ti_demon/*,lazy_ntfs,Copies out all log files
 27,Acronis True Image - Database Files,Apps,ProgramData/Acronis/TrueImageHome/Database/archives.db*,lazy_ntfs,Copies out the Database folder which appears to have important information
 28,Acronis True Image - Scripts Folder,Apps,ProgramData/Acronis/TrueImageHome/Scripts/*,lazy_ntfs,Copies out all scripts files
 29,Action1 Client Application logs,ApplicationLogs,Windows/Action1/logs/*.log,lazy_ntfs,"Contains Application Log entries such as service start and incomming connections, and deployed scripts/jobs."
 30,NTDS,Active Directory,Windows/NTDS/**10,lazy_ntfs,
 31,SYSVOL,Active Directory,Windows/SYSVOL/**10,lazy_ntfs,
 32,Agent Ransack Config Logs,Software,Users/*/AppData/Roaming/Mythicsoft/AgentRansack/config/**10,lazy_ntfs,
 33,Agent Ransack CrashReports Logs,Software,Users/*/AppData/Roaming/Mythicsoft/AgentRansack/CrashReports/**10,lazy_ntfs,
 34,Agent Ransack IndexLog Logs,Software,Users/*/AppData/Roaming/Mythicsoft/AgentRansack/IndexLog/**10,lazy_ntfs,
 35,Agent Ransack Logs,Software,Users/*/AppData/Roaming/Mythicsoft/AgentRansack/logs/**10,lazy_ntfs,
 36,Amcache,ApplicationCompatibility,Windows/AppCompat/Programs/Amcache.hve,lazy_ntfs,
 37,Amcache,ApplicationCompatibility,Windows.old/Windows/AppCompat/Programs/Amcache.hve,lazy_ntfs,
 38,Amcache transaction files,ApplicationCompatibility,Windows/AppCompat/Programs/Amcache.hve.LOG*,lazy_ntfs,
 39,Amcache transaction files,ApplicationCompatibility,Windows.old/Windows/AppCompat/Programs/Amcache.hve.LOG*,lazy_ntfs,
 40,Ammyy Program Data,ApplicationLogs,ProgramData/Ammyy/**10,lazy_ntfs,"May not contain traditional log files, but presence of this folder may indicate historical usage"
 41,AnyDesk Logs - User Profile - *.trace,Communications,Users/*/AppData/Roaming/AnyDesk/*.trace,lazy_ntfs,Collects the trace logs for AnyDesk from a user profile
 42,AnyDesk Logs - ProgramData - *.trace,Communications,ProgramData/AnyDesk/*.trace,lazy_ntfs,Collects the trace logs for AnyDesk from ProgramData
 43,AnyDesk Logs - User Profile - *.conf,Communications,Users/*/AppData/Roaming/AnyDesk/*.conf,lazy_ntfs,Collects the conf logs for AnyDesk from a user profile
 44,AnyDesk Logs - ProgramData - *.conf,Communications,ProgramData/AnyDesk/*.conf,lazy_ntfs,Collects the conf logs for AnyDesk from ProgramData
 45,AnyDesk Videos,Communications,Users/*/Videos/AnyDesk/*.anydesk,lazy_ntfs,Collects any session recordings made by the user while using AnyDesk
 46,AnyDesk Logs - User Profile - connection_trace.txt,Communications,Users/*/AppData/Roaming/AnyDesk/connection_trace.txt,lazy_ntfs,Collects the connection trace log from user profile
 47,AnyDesk Logs - ProgramData - connection_trace.txt,Communications,ProgramData/AnyDesk/connection_trace.txt,lazy_ntfs,Collects the connection trace log from ProgramData
 48,AnyDesk Logs - System User Account,Communications,Windows/SysWOW64/config/systemprofile/AppData/Roaming/AnyDesk/*,lazy_ntfs,Collects the logs associated with the System user account
 49,AnyDesk Chat Logs - User Profile,Communications,Users/*/AppData/Roaming/AnyDesk/chat/*.txt,lazy_ntfs,Collects chat logs associated with the user profile
 50,Apache Access Log,Webservers,**10/access.log,lazy_ntfs,
 51,AppCompat PCA Folder,AppCompat,Windows/appcompat/pca,lazy_ntfs,
 52,AppData,UserData,Users/*/AppData/**10,lazy_ntfs,
 53,WindowsApps for AppX,Apps,Program Files/WindowsApps/Deleted*/**10,lazy_ntfs,Locates all the user AppX package directories which were installed through Microsoft Store and updated/uninstalled by the user.
 54,SystemApps for AppX,Apps,Windows/SystemApps/**10,lazy_ntfs,Locates all the system AppX package directories which were installed by the system.
 55,UserSpecificPackages for AppX,Apps,Users/*/AppData/Local/Packages/**10,lazy_ntfs,Locates all the user and system AppX package directories which are user specific on the system.
 56,AppRepository for AppX,Apps,ProgramData/Microsoft/Windows/AppRepository/Packages/**10/StateRepository-*.srd,lazy_ntfs,Locates the StateRepository .srd databases.
 57,ProgramData Packages for AppX,Apps,ProgramData/Packages/**10,lazy_ntfs,Locates the ProgramData AppX package directories.
 58,Application Event Log XP,EventLogs,Windows/System32/config/AppEvent.evt,lazy_ntfs,
 59,Application Event Log XP,EventLogs,Windows.old/Windows/System32/config/AppEvent.evt,lazy_ntfs,
 60,Application Event Log Win7+,EventLogs,Windows/System32/winevt/logs/application.evtx,lazy_ntfs,
 61,Application Event Log Win7+,EventLogs,Windows.old/Windows/System32/winevt/logs/application.evtx,lazy_ntfs,
 62,Aspera Client Logs,FileDownload,Users/*/AppData/Local/Aspera/Aspera Connect/var/log/**10/*.log,lazy_ntfs,
 63,Aspera Server Logs,FileDownload,Users/*/.aspera/connect/var/log/**10/*.log,lazy_ntfs,
 64,AteraAgent .ini files,Software,Program Files/ATERA Networks/AteraAgent/**10/*.ini,lazy_ntfs,Collects logs for AteraAgent
 65,AteraAgent Logs,Software,Program Files/ATERA Networks/AteraAgent/**10/*.txt,lazy_ntfs,Collects logs for AteraAgent
 66,AteraAgent Logs,Software,Program Files/ATERA Networks/AteraAgent/**10/*.db,lazy_ntfs,Collects logs for AteraAgent
 67,AteraAgent Logs,Software,Program Files/ATERA Networks/AteraAgent/**10/*.config,lazy_ntfs,Collects logs for AteraAgent
 68,AteraAgent Logs,Software,Program Files/ATERA Networks/AteraAgent/**10/*.cfg,lazy_ntfs,Collects logs for AteraAgent
 69,Avast AV Logs (XP),Antivirus,Documents And Settings/All Users/Application Data/Avast Software/Avast/Log/**10,lazy_ntfs,
 70,Avast AV Logs,Antivirus,ProgramData/Avast Software/Avast/Log/**10,lazy_ntfs,
 71,Avast AV User Logs,Antivirus,Users/*/Avast Software/Avast/Log/**10,lazy_ntfs,
 72,Avast AV Index,Antivirus,ProgramData/Avast Software/Avast/Chest/index.xml,lazy_ntfs,
 73,Avast Persistent Data Logs,Antivirus,ProgramData/Avast Software/Persistent Data/Avast/Logs/**10,lazy_ntfs,
 74,Avast Icarus Logs,Antivirus,ProgramData/Avast Software/Icarus/Logs/**10,lazy_ntfs,
 75,Avira Activity Logs,Antivirus,ProgramData/Avira/Antivirus/LOGFILES/**10,lazy_ntfs,Collects the scan logs of Avira Antivirus
 76,Avira Security Logs,Antivirus,ProgramData/Avira/Security/Logs/**10,lazy_ntfs,
 77,Avira VPN Logs,Antivirus,ProgramData/Avira/VPN/**10,lazy_ntfs,Collects the VPN logs
 78,BCD,Registry,Boot/BCD,lazy_ntfs,
 79,BCD Logs,Registry,Boot/BCD.LOG*,lazy_ntfs,
 80,BITS files,Persistence,ProgramData/Microsoft/Network/Downloader/**10,lazy_ntfs,
 81,TorrentClients - BitTorrent,FileDownload,Users/*/AppData/Roaming/BitTorrent/*.dat,lazy_ntfs,
 82,Bitdefender Endpoint Security Logs,Antivirus,ProgramData/Bitdefender/Endpoint Security/Logs/**10,lazy_ntfs,
 83,Bitdefender Internet Security Logs,Antivirus,ProgramData/Bitdefender/Desktop/Profiles/Logs/**10,lazy_ntfs,
 84,Bitdefender SQLite DB Files,Antivirus,Program Files*/Bitdefender*/**10/regex:*.+/.(db|db-wal|db-shm),ntfs,Bitdefender SQLite databases
 85,Box Drive Application Metadata,Apps,Users/*/AppData/Local/Box/Box/**10,lazy_ntfs,
 86,Box Sync Application Metadata,Apps,Users/*/AppData/Local/Box Sync/**10,lazy_ntfs,
 87,Box Drive User Files,Apps,Users/*/Box/**10,lazy_ntfs,Caution! This target will collect Box Drive contents from the local drive AND on-demand cloud files. Ensure your scope of authority permits cloud collections before use or isolate system from network
 88,Box Sync User Files,Apps,Users/*/Box Sync/**10,lazy_ntfs,
 89,Bookmarks,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Bookmarks*,lazy_ntfs,
 90,Cookies,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Cookies*,lazy_ntfs,
 91,Current Session,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Current Session,lazy_ntfs,
 92,Current Tabs,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Current Tabs,lazy_ntfs,
 93,Download Metadata,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/DownloadMetadata,lazy_ntfs,
 94,Favicons,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Favicons*,lazy_ntfs,
 95,History,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/History*,lazy_ntfs,
 96,Sessions Folder,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/Default/Sessions/*,lazy_ntfs,
 97,Login Data,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Login Data,lazy_ntfs,
 98,Network Action Predictor,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Network Action Predictor,lazy_ntfs,
 99,Network Persistent State,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Network Persistent State,lazy_ntfs,
 100,Preferences,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Preferences,lazy_ntfs,
 101,Quota Manager,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/QuotaManager,lazy_ntfs,
 102,Reporting and NEL,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Reporting and NEL,lazy_ntfs,
 103,Shortcuts,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Shortcuts*,lazy_ntfs,
 104,Publisher Info DB/Brave Rewards,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/publisher_info_db*,lazy_ntfs,"SQLite Database related to ""Brave Rewards"" containing an event_log table"
 105,Top Sites,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Top Sites*,lazy_ntfs,
 106,Visited Links,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Visited Links*,lazy_ntfs,
 107,Web Data,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Web Data*,lazy_ntfs,
 108,Secure Preferences,Communications,Users/*/AppData/Local/BraveSoftware/Brave-Browser/User Data/*/Secure Preferences*,lazy_ntfs,Contains additional preferences data
 109,Chrome Cache Folder,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Cache/**10,lazy_ntfs,
 110,Chromium Edge Cache Folder,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Cache/**10,lazy_ntfs,
 111,Firefox Cache Folder,Communications,Users/*/AppData/Local/Mozilla/Firefox/Profiles/*/**10,lazy_ntfs,
 112,IE 9/10 Cache,Communications,Users/*/AppData/Local/Microsoft/Windows/Temporary Internet Files/**10,lazy_ntfs,
 113,IE Index.dat temp internet files,Communications,Documents and Settings/*/Local Settings/Temporary Internet Files/Content.IE5/index.dat,lazy_ntfs,
 114,IE 11 Cache,Communications,Users/*/AppData/Local/Microsoft/Windows/INetCache/**10,lazy_ntfs,
 115,Edge WebcacheV01.dat,Communications,Users/*/AppData/Local/Microsoft/Windows/WebCache/*,lazy_ntfs,
 116,Brave Cache Folder,Communications,Users/%users%/AppData/Local/BraveSoftware/Brave-Browser/User Data/Default/Cache/Cache_Data/**10,lazy_ntfs,
 117,System CryptnetUrlCache,FileKnowledge,Windows/System32/config/systemprofile/AppData/LocalLow/Microsoft/CryptnetUrlCache/**10,lazy_ntfs,
 118,User CryptnetUrlCache,FileKnowledge,Users/*/AppData/LocalLow/Microsoft/CryptnetUrlCache/**10,lazy_ntfs,
 119,INetCache,FileKnowledge,Users/*/AppData/Local/Microsoft/Windows/INetCache/IE/**10,lazy_ntfs,
 120,Chrome bookmarks XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 121,Chrome Cookies XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Cookies*,lazy_ntfs,
 122,Chrome Current Session XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 123,Chrome Current Tabs XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 124,Chrome Favicons XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 125,Chrome History XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/History*,lazy_ntfs,
 126,Chrome Last Session XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 127,Chrome Last Tabs XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 128,Chrome Login Data XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 129,Chrome Preferences XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 130,Chrome Shortcuts XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 131,Chrome Top Sites XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 132,Chrome Visited Links XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 133,Chrome Web Data XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 134,Chrome bookmarks,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 135,Chrome Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/**10/Cookies*,lazy_ntfs,
 136,Chrome Current Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 137,Chrome Current Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 138,Chrome Download Metadata,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/DownloadMetadata,lazy_ntfs,
 139,Chrome Extension Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Extension Cookies,lazy_ntfs,
 140,Chrome Favicons,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 141,Chrome History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/History*,lazy_ntfs,
 142,Chrome Last Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 143,Chrome Last Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 144,Chrome Sessions Folder,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sessions/*,lazy_ntfs,
 145,Chrome Login Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 146,Chrome Media History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Media History*,lazy_ntfs,
 147,Chrome Network Action Predictor,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Action Predictor,lazy_ntfs,
 148,Chrome Network Persistent State,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Persistent State,lazy_ntfs,
 149,Chrome Preferences,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 150,Chrome Quota Manager,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/QuotaManager,lazy_ntfs,
 151,Chrome Reporting and NEL,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Reporting and NEL,lazy_ntfs,
 152,Chrome Shortcuts,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 153,Chrome Top Sites,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 154,Chrome Trust Tokens,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Trust Tokens*,lazy_ntfs,
 155,Chrome SyncData Database,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 156,Chrome Visited Links,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 157,Chrome Web Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 158,Windows Protect Folder,FileSystem,Users/*/AppData/Roaming/Microsoft/Protect/*/**10,lazy_ntfs,Required for offline decryption
 159,Chrome Snapshots Folder,Communications,Users/*/AppData/Local/Google/Chrome/User Data/Snapshots/*/**10,lazy_ntfs,Grabs folder that appears to have snapshots of Chrome SQLite DBs organized by version #.
 160,Chrome Extension Files,Communication,Users/*/AppData/Local/Google/Chrome/User Data/*/Extensions/**10,lazy_ntfs,
 161,Chrome Extension Files XP,Communications,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Extensions/**10,lazy_ntfs,
 162,Chrome HTML5 File System Folder,Communication,Users/*/AppData/Local/Google/Chrome/User Data/*/File System/**10,lazy_ntfs,
 163,Cisco Jabber Database,Communications,Users/*/AppData/Local/Cisco/Unified Communications/Jabber/CSF/History/*.db,lazy_ntfs,The Cisco Jabber process needs to be killed before database can be copied.
 164,ClipboardMaster - Clipboard History - Text,Apps,Users/*/AppData/Roaming/Jumping Bytes/ClipboardMaster/Clipboard.clm4,lazy_ntfs,Locates the user’s clipboard history (text) for ClipboardMaster
 165,ClipboardMaster - Clipboard History - Images,Apps,Users/*/AppData/Roaming/Jumping Bytes/ClipboardMaster/pics/**10,lazy_ntfs,Locates the user’s clipboard history (images) for ClipboardMaster
 166,ClipboardMaster - Clipboard History - Backups,Apps,Users/*/AppData/Roaming/Jumping Bytes/ClipboardMaster/Clipboard.clm4.ba*,lazy_ntfs,Locates the user’s clipboard history (backups) for ClipboardMaster
 167,ComboFix,Antivirus,ComboFix.txt,lazy_ntfs,
 168,Confluence Wiki Log Files,Logs,Atlassian/Application Data/Confluence/logs/*.log*,lazy_ntfs,
 169,Confluence Wiki Log Files,Logs,Program Files/Atlassian/Confluence/logs/*.log,lazy_ntfs,
 170,Cybereason Anti-Ransomware Logs,Antivirus,ProgramData/crs1/Logs/**10,lazy_ntfs,
 171,Cybereason Sensor Communications and Anti-Malware Logs,Antivirus,ProgramData/apv2/Logs/**10,lazy_ntfs,
 172,Cybereason Application Control and NGAV Logs,Antivirus,ProgramData/crb1/Logs/**10,lazy_ntfs,
 173,Cylance ProgramData Logs,Antivirus,ProgramData/Cylance/Desktop/**10,lazy_ntfs,
 174,Cylance Optics Logs,Antivirus,ProgramData/Cylance/Optics/Log/**10,lazy_ntfs,
 175,Cylance Program Files Logs,Antivirus,Program Files/Cylance/Desktop/log/**10,lazy_ntfs,
 176,DC++ Chat Logs,FileDownload,Users/*/AppData/Local/DC++/Logs/**10,lazy_ntfs,Locates DC++ hub/chat logs and copies them. Current as of version 0.868.
 177,DWAgent Log Files,Logs,ProgramData/DWAgent*/*.log*,lazy_ntfs,
 178,Debian WSL /etc/debian_version,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/debian_version,lazy_ntfs,
 179,Debian WSL /etc/fstab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/fstab,lazy_ntfs,
 180,Debian WSL /etc/os-release,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/os-release,lazy_ntfs,
 181,Debian WSL /etc/passwd,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/passwd,lazy_ntfs,
 182,Debian WSL /etc/group,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/group,lazy_ntfs,
 183,Debian WSL /etc/shadow,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/shadow,lazy_ntfs,
 184,Debian WSL /etc/timezone,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/timezone,lazy_ntfs,
 185,Debian WSL /etc/hostname,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/hostname,lazy_ntfs,
 186,Debian WSL /etc/hosts,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/hosts,lazy_ntfs,
 187,Debian WSL /etc/crontab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/crontab,lazy_ntfs,
 188,Debian WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/bash.bashrc,lazy_ntfs,
 189,Debian WSL /etc/profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/etc/profile,lazy_ntfs,
 190,Debian WSL .bash_history,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/**10/.bash_history,lazy_ntfs,
 191,Debian WSL .bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/**10/.bashrc,lazy_ntfs,
 192,Debian WSL .profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/**10/.profile,lazy_ntfs,
 193,Debian WSL User Crontabs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/var/spool/cron/crontabs/**10,lazy_ntfs,
 194,Debian WSL Apt Logs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/rootfs/var/log/apt/**10/*.log,lazy_ntfs,
 195,Debian WSL ext4.vhdx,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/TheDebianProject.DebianGNULinux_*/LocalState/ext4.vhdx,lazy_ntfs,
 196,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/MRU/rename_folders.osd,lazy_ntfs,Locates .osd file which contains names of folders that have been renamed manually by the user.
 197,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/MRU/rename_files.osd,lazy_ntfs,Locates .osd file which contains names of files that have been renamed manually by the user.
 198,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/MRU/find_contains.osd,lazy_ntfs,Locates .osd file which contains search queries initiated by the user during a search for files with contents related to the search query.
 199,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/MRU/find_name.osd,lazy_ntfs,Locates .osd file which contains search queries initiated by the user during a search for files with a filename related to the search query.
 200,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/MRU/find_path.osd,lazy_ntfs,Locates .osd file which contains file paths related to user activity - not exactly sure how these are generated at this time.
 201,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/recent.osd,lazy_ntfs,Locates .osd file which contains file paths related to recent user activity. Effectively the DOpus Shellbags-equivalent. Appears to be for last 10 folder visited within the Lister.
 202,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/State Data/backupconfig.osd,lazy_ntfs,Locates .osd file which contains file paths related to the location of the backup settings files for Directory Opus.
 203,Directory Opus,Apps,Users/*/AppData/Local/GPSoftware/Directory Opus/Thumbnail Cache/*,lazy_ntfs,Locates .osd file which contains file paths related to the location of the backup settings files for Directory Opus.
 204,Directory Opus,Apps,Users/*/AppData/Roaming/GPSoftware/Directory Opus/Logs/*,lazy_ntfs,Locates .txt files that will be named with the IP address of the FTP server Directory Opus was used to connect to. All-activity.txt will simply be a combination of all other .txt files present in this directory.
 205,Audio files,Multimedia,**10/regex:*.+/.(3gp|aa|aac|act|aiff|alac|amr|ape|au|awb|dss|dvf|flac|gsm|iklax|ivs|m4a|m4b|m4p|mmf|mp3|mpc|msv|nmf|ogg|oga|mogg|opus|ra|rm|raw|rf64|sln|tta|voc|vox|wav|wma|wv|webm),ntfs,Covers most (if not all) audio file formats
 206,Excel and Excel-like Documents,Documents,**10/regex:*.+/.(xls|xlsx|csv|tsv|xlt|xlm|xlsm|xltx|xltm|xlsb|xla|xlam|xll|xlw|ods|fodp|qpw),ntfs,"Covers all document file formats for Excel, OpenOffice, LibreOffice, Apache OpenOffice, WPS Office, SoftMaker Office, and more"
 207,PDF and PDF-like Documents,Documents,**10/regex:*.+/.(pdf|xps|oxps),ntfs,Covers all PDF and PDF-like document formats
 208,Picture files,Multimedia,**10/regex:*.+/.(ai|bmp|bpg|cdr|cpc|eps|exr|flif|gif|heif|ilbm|ima|jp2|j2k|jpf|jpm|jpg2|j2c|jpc|jpx|mj2jpeg|jpg|jxl|kra|ora|pcx|pgf|pgm|png|pnm|ppm|psb|psd|psp|svg|tga|tiff|webp|xaml|xcf),ntfs,Covers most (if not all) picture file formats
 209,SQLite Files (.db* and .sqlite*),Databases,**10/regex:*.+/.(db*|sqlite*|),ntfs,Covers all common file extensions for SQLite databases
 210,Video files,Multimedia,**10/regex:*.+/.(3g2|3gp|amv|asf|avi|drc|flv|f4v|f4p|f4a|f4b|gif|gifv|m4v|mkv|mov|qt|mp4|m4p|mpg|mpeg|m2v|mp2|mpe|mpv|mts|m2ts|ts|mxf|nsv|ogv|ogg|rm|rmvb|roq|svi|viv|vob|webm|wmv|yuv),ntfs,Covers most (if not all) video file formats
 211,Zips,Archives,**10/*.zip,lazy_ntfs,This is an example of how to walk a drive for a file mask. Probably do not want to use this one as is
 212,Word and Word-like Documents,Documents,**10/regex:*.+/.(doc|docx|docm|dotx|dotm|docb|dot|wbk|odt|fodt|rtf|wp*|tmd),ntfs,"Covers all document file formats for Word, OpenOffice, LibreOffice, Apache OpenOffice, WPS Office, SoftMaker Office, and more"
 213,Discord Cache Files,Communications,Users/*/AppData/Roaming/discord/cache/**10,lazy_ntfs,Gets cached data from Discord app
 214,Discord Local Storage LevelDB Files,Communications,Users/*/AppData/Roaming/discord/local storage/leveldb/**10,lazy_ntfs,Gets LevelDB database from Discord app
 215,Double Commander - history.xml,Apps,Users/*/AppData/Roaming/doublecmd/history.xml,lazy_ntfs,Locates an .xml file that contains Shellbags-equivalent artifacts that are sorted in temporal order from bottom to top.
 216,Double Commander - doublecmd.xml,Apps,Users/*/AppData/Roaming/doublecmd/doublecmd.xml,lazy_ntfs,Locates an .xml file that contains Shellbags-equivalent artifacts that are sorted in temporal order from top to bottom.
 217,Double Commander - FTP Log,Apps,Users/*/AppData/Roaming/doublecmd/doublecmd*.log,lazy_ntfs,Locates log files that'll be named with the following naming convention: doublecmd_2021-04-03.log.
 218,Double Commander - multiarc.ini,Apps,Users/*/AppData/Roaming/doublecmd/multiarc.ini,lazy_ntfs,
 219,Double Commander - session.ini,Apps,Users/*/AppData/Roaming/doublecmd/session.ini,lazy_ntfs,
 220,Double Commander - pixmaps.txt,Apps,Users/*/AppData/Roaming/doublecmd/pixmaps.txt,lazy_ntfs,
 221,Double Commander - shortcuts.scf,Apps,Users/*/AppData/Roaming/doublecmd/shortcuts.scf,lazy_ntfs,
 222,Drivers,Drivers,Windows/system32/drivers/**10/*.sys,lazy_ntfs,
 223,Dropbox Metadata,Apps,Users/*/AppData/Local/Dropbox/info.json,lazy_ntfs,Getting individual files because folder may contain very large extraneous files. Info.json contains user's Dropbox folder location
 224,Dropbox Metadata,Apps,Users/*/AppData/Local/Dropbox/host.db,lazy_ntfs,SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64.
 225,Dropbox Metadata,Apps,Users/*/AppData/Local/Dropbox/machine_storage/tray-thumbnails.db,lazy_ntfs,SQLite database containing references to image files at one time present in a user’s Dropbox instance.
 226,Dropbox Metadata,Apps,Users/*/AppData/Local/Dropbox/host.dbx,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 227,Windows Protect Folder,FileSystem,Users/*/AppData/Roaming/Microsoft/Protect/*/**10,lazy_ntfs,Required for offline decryption of Dropbox databases
 228,Dropbox Metadata,Apps,Users/*/AppData/Local/Dropbox/instance*/**10,lazy_ntfs,instance folder holds multiple SQLite databases related to Dropbox activity and contents
 229,Dropbox User Files,Apps,Users/*/Dropbox*/**10,lazy_ntfs,"Default storage location for Dropbox Personal and Business (when using wildcard), but can be user-defined. Check info.json file in user Dropbox metadata files to identify default folder."
 230,EF Commander - .ini File,Apps,Users/*/AppData/Roaming/EFSoftware/*,lazy_ntfs,Locates folder where all configuration files reside
 231,ESET NOD32 AV Logs (XP),Antivirus,Documents and Settings/All Users/Application Data/ESET/ESET NOD32 Antivirus/Logs/**10,lazy_ntfs,
 232,ESET NOD32 AV Logs,Antivirus,ProgramData/ESET/ESET NOD32 Antivirus/Logs/**10,lazy_ntfs,Parser available at https://github.com/laciKE/EsetLogParser
 233,ESET NOD32 AV Logs,Antivirus,ProgramData/ESET/ESET Security/Logs/**10,lazy_ntfs,
 234,ESET Remote Administrator Logs,Antivirus,ProgramData/ESET/RemoteAdministrator/Agent/EraAgentApplicationData/Logs,lazy_ntfs,Remote Administrator logs include information on tasks executed on the target.
 235,Local User Quarantine,Antivirus,Users/*/AppData/Local/ESET/ESET Security/Quarantine/**10,lazy_ntfs,
 236,SYSTEM user quarantine,Antivirus,/Windows/System32/config/systemprofile/AppData/Local/ESET/ESET Security/Quarantine/**10,lazy_ntfs,
 237,Edge folder,Communications,Users/*/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/**10,lazy_ntfs,
 238,Edge bookmarks,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Bookmarks*,lazy_ntfs,
 239,Edge Collections,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Collections/collectionsSQLite,lazy_ntfs,
 240,Edge Cookies,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/**10/Cookies*,lazy_ntfs,
 241,Edge Current Session,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Current Session,lazy_ntfs,
 242,Edge Current Tabs,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Current Tabs,lazy_ntfs,
 243,Edge Favicons,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Favicons*,lazy_ntfs,
 244,Edge History,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/History*,lazy_ntfs,
 245,Edge Last Session,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Last Session,lazy_ntfs,
 246,Edge Last Tabs,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Last Tabs,lazy_ntfs,
 247,Edge Sessions Folder,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Sessions/*,lazy_ntfs,
 248,Edge Login Data,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Login Data,lazy_ntfs,
 249,Edge Media History,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Media History*,lazy_ntfs,
 250,Edge Network Action Predictor,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Network Action Predictor,lazy_ntfs,
 251,Edge Preferences,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Preferences,lazy_ntfs,
 252,Edge Shortcuts,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Shortcuts*,lazy_ntfs,
 253,Edge Top Sites,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Top Sites*,lazy_ntfs,
 254,Edge SyncData Database,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 255,Edge Bookmarks,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Bookmarks*,lazy_ntfs,
 256,Edge Visited Links,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Visited Links,lazy_ntfs,
 257,Edge Web Data,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Web Data*,lazy_ntfs,
 258,Edge WebAssistDatabase,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/*/WebAssistDatabase*,lazy_ntfs,
 259,Windows Protect Folder,FileSystem,Users/*/AppData/Roaming/Microsoft/Protect/*/**10,lazy_ntfs,Required for offline DPAPI decryption
 260,Edge Snapshots Folder,Communications,Users/*/AppData/Local/Microsoft/Edge/User Data/Snapshots/*/**10,lazy_ntfs,"Grabs folder that appears to have snapshots of Edge Chromium SQLite DBs organized by version #. In testing, there were 3 previous versions of Edge Chromium separated into different folders"
 261,Edge Chromium Extension Files,Communication,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Extensions/**10,lazy_ntfs,
 262,Emsisoft Scan Logs,ApplicationLogs,ProgramData/Emsisoft/Reports/scan*.txt,lazy_ntfs,Can contain file detection and quarantine info
 263,EncapsulationLogging,Executables,Windows/Appcompat/Programs/EncapsulationLogging.hve,lazy_ntfs,
 264,EncapsulationLogging,Executables,Windows.old/Windows/Appcompat/Programs/EncapsulationLogging.hve,lazy_ntfs,
 265,EncapsulationLogging Logs,Executables,Windows/Appcompat/Programs/EncapsulationLogging.hve.log*,lazy_ntfs,
 266,EncapsulationLogging Logs,Executables,Windows.old/Windows/Appcompat/Programs/EncapsulationLogging.hve.log*,lazy_ntfs,
 267,Event logs Win7+,EventLogs,Windows/System32/winevt/logs/System.evtx,lazy_ntfs,
 268,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/logs/System.evtx,lazy_ntfs,
 269,Event logs Win7+,EventLogs,Windows/System32/winevt/logs/Security.evtx,lazy_ntfs,
 270,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/logs/Security.evtx,lazy_ntfs,
 271,Event logs Win7+,EventLogs,Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx,lazy_ntfs,
 272,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx,lazy_ntfs,
 273,Event logs Win7+,EventLogs,Windows/System32/winevt/Logs/Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx,lazy_ntfs,
 274,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/Logs/Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx,lazy_ntfs,
 275,Event logs Win7+,EventLogs,Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx,lazy_ntfs,
 276,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx,lazy_ntfs,
 277,Event logs Win7+,EventLogs,Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx,lazy_ntfs,
 278,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/Logs/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx,lazy_ntfs,
 279,Event logs XP,EventLogs,Windows/System32/config/*.evt,lazy_ntfs,
 280,Event logs Win7+,EventLogs,Windows/System32/winevt/logs/*.evtx,lazy_ntfs,
 281,Event logs Win7+,EventLogs,Windows.old/Windows/System32/winevt/logs/*.evtx,lazy_ntfs,
 282,WDI Trace Logs 1,Event Trace Logs,Windows/System32/WDI/LogFiles/*.etl*,lazy_ntfs,
 283,WDI Trace Logs 1,Event Trace Logs,Windows.old/Windows/System32/WDI/LogFiles/*.etl*,lazy_ntfs,
 284,WDI Trace Logs 2,Event Trace Logs,Windows/System32/WDI/{*/**10,lazy_ntfs,
 285,WDI Trace Logs 2,Event Trace Logs,Windows.old/Windows/System32/WDI/{*/**10,lazy_ntfs,
 286,WMI Trace Logs,Event Trace Logs,Windows/System32/LogFiles/WMI/**10,lazy_ntfs,
 287,WMI Trace Logs,Event Trace Logs,Windows.old/Windows/System32/LogFiles/WMI/**10,lazy_ntfs,
 288,SleepStudy Trace Logs,Event Trace Logs,Windows/System32/SleepStudy/**10,lazy_ntfs,
 289,SleepStudy Trace Logs,Event Trace Logs,Windows.old/Windows/System32/SleepStudy/**10,lazy_ntfs,
 290,Energy-NTKL Trace Logs,Event Trace Logs,ProgramData/Microsoft/Windows/PowerEfficiency Diagnostics/energy-ntkl.etl,lazy_ntfs,
 291,Delivery Optimization Trace Logs,Event Trace Logs,Windows/ServiceProfiles/NetworkService/AppData/Local/Microsoft/Windows/DeliveryOptimization/Logs/*.etl*,lazy_ntfs,
 292,EventTranscript.db,SystemEvents,ProgramData/Microsoft/Diagnosis/EventTranscript/EventTranscript.db*,lazy_ntfs,
 293,EventTranscript.db,SystemEvents,Windows.old/ProgramData/Microsoft/Diagnosis/EventTranscript/EventTranscript.db*,lazy_ntfs,
 294,Microsoft Office Diagnostic Logs,SystemEvents,Users/%User%/AppData/Local/Temp/Diagnostics/**10,lazy_ntfs,
 295,Evernote Accounts,App,Users/*/AppData/Local/Evernote/Evernote/Databases/**10/.accounts,lazy_ntfs,Holds username and email of accounts
 296,Evernote Notebooks,App,Users/*/AppData/Local/Evernote/Evernote/Databases/**10/*.exb,lazy_ntfs,SQLite Database of the notes
 297,Evernote Notebook Snippets,App,Users/*/AppData/Local/Evernote/Evernote/Databases/**10/*.exb.snippets,lazy_ntfs,Note 'Snippets'
 298,Everything (VoidTools),FileSystem,Users/*/AppData/Local/Everything/Everything.db,lazy_ntfs,Copies out Everything.db
 299,Everything (VoidTools) - Run History,FileSystem,Users/*/AppData/Roaming/Everything/Run History.csv,lazy_ntfs,Copies out a CSV containing the history of items ran from Everything's search results window
 300,Everything (VoidTools) - Search History,FileSystem,Users/*/AppData/Roaming/Everything/Search History.csv,lazy_ntfs,Copies out a CSV containing the history of items searched for within Everything with timestamps
 301,Everything (VoidTools) - .ini file,FileSystem,Users/*/AppData/Roaming/Everything/Everything.ini,lazy_ntfs,Copies out the .ini file for Everything
 302,Exchange client access log files,Logs,Program Files/Microsoft/Exchange Server/*/Logging/**10/*.log,lazy_ntfs,Highly dependent on Exchange configuration
 303,Exchange Server Modified Compiled Files,Apps,Windows/Microsoft.NET/Framework*/v*/Temporary ASP.NET Files/**10/Regex:*./b[a-zA-Z0-9_-]{8}/b.compiled,ntfs,Highly dependent on Exchange configuration
 304,Exchange Server Modified Compiled Files,Apps,inetpub/wwwroot/aspnet_client/**10/Regex:*./b[a-zA-Z0-9_-]{8}/b.compiled,ntfs,Highly dependent on Exchange configuration
 305,Exchange Server Modified Compiled Files,Apps,inetpub/wwwroot/aspnet_client/system_web/**10/Regex:*./b[a-zA-Z0-9_-]{8}/b.compiled,ntfs,Highly dependent on Exchange configuration
 306,Exchange Server Modified Compiled Files,Apps,Program Files/Microsoft/Exchange Server/V15/FrontEnd/HttpProxy/owa/auth/**10/Regex:*./b[a-zA-Z0-9_-]{8}/b.compiled,ntfs,Highly dependent on Exchange configuration
 307,Exchange TransportRoles log files,Logs,Program Files/Microsoft/Exchange Server/*/TransportRoles/Logs/**10/*.log,lazy_ntfs,Highly dependent on Exchange configuration
 308,F-Secure Logs,Antivirus,ProgramData/F-Secure/Log/**10,lazy_ntfs,
 309,F-Secure User Logs,Antivirus,Users/*/AppData/Local/F-Secure/Log/**10,lazy_ntfs,
 310,F-Secure Scheduled Scan Reports,Antivirus,ProgramData/F-Secure/Antivirus/ScheduledScanReports/**10,lazy_ntfs,
 311,Fences - Desktop Screenshots,Apps,Users/*/AppData/Roaming/Stardock/Fences/Backups,lazy_ntfs,Locates all screenshots taken automatically by the Fences application
 312,FileZilla XML Log Files,Logs,Users/*/AppData/Roaming/FileZilla/*.xml*,lazy_ntfs,
 313,FileZilla SQLite3 Log Files,Logs,Users/*/AppData/Roaming/FileZilla/*.sqlite3*,lazy_ntfs,
 314,FileZilla Server XML Log Files,Logs,Users/*/AppData/Roaming/FileZilla Server/*.xml*,lazy_ntfs,
 315,FileZilla Log Files,Logs,Program Files (x86)/FileZilla Server/Logs/*.log*,lazy_ntfs,
 316,Addons,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/addons.sqlite*,lazy_ntfs,
 317,Bookmarks,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/weave/bookmarks.sqlite*,lazy_ntfs,
 318,Bookmarks,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/bookmarkbackups/**10,lazy_ntfs,
 319,Cookies,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/cookies.sqlite*,lazy_ntfs,
 320,Cookies,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/firefox_cookies.sqlite*,lazy_ntfs,
 321,Downloads,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/downloads.sqlite*,lazy_ntfs,
 322,Extensions,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/extensions.json,lazy_ntfs,
 323,Favicons,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/favicons.sqlite*,lazy_ntfs,
 324,Form history,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/formhistory.sqlite*,lazy_ntfs,
 325,Permissions,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/permissions.sqlite*,lazy_ntfs,
 326,Places,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/places.sqlite*,lazy_ntfs,
 327,Protections,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/protections.sqlite*,lazy_ntfs,
 328,Search,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/search.sqlite*,lazy_ntfs,
 329,Signons,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/signons.sqlite*,lazy_ntfs,
 330,Storage Sync,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/storage-sync.sqlite*,lazy_ntfs,
 331,Webappstore,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/webappstore.sqlite*,lazy_ntfs,
 332,Password,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/key*.db,lazy_ntfs,
 333,Password,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/signon*.*,lazy_ntfs,
 334,Password,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/logins.json,lazy_ntfs,
 335,Preferences,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/prefs.js,lazy_ntfs,
 336,Sessionstore,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/sessionstore*,lazy_ntfs,
 337,Sessionstore Folder,Communications,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/sessionstore-backups/**10,lazy_ntfs,
 338,Places XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/places.sqlite*,lazy_ntfs,
 339,Downloads XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/downloads.sqlite*,lazy_ntfs,
 340,Form history XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/formhistory.sqlite*,lazy_ntfs,
 341,Cookies XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/cookies.sqlite*,lazy_ntfs,
 342,Signons XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/signons.sqlite*,lazy_ntfs,
 343,Webappstore XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/webappstore.sqlite*,lazy_ntfs,
 344,Favicons XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/favicons.sqlite*,lazy_ntfs,
 345,Addons XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/addons.sqlite*,lazy_ntfs,
 346,Search XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/search.sqlite*,lazy_ntfs,
 347,Password XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/key*.db,lazy_ntfs,
 348,Password XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/signon*.*,lazy_ntfs,
 349,Password XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/logins.json,lazy_ntfs,
 350,Sessionstore XP,Communications,Documents and Settings/*/Application Data/Mozilla/Firefox/Profiles/*/sessionstore*,lazy_ntfs,
 351,Free Commander - FreeCommander.ini,Apps,Users/*/AppData/Local/FreeCommanderXE/Settings/FreeCommander.ini,lazy_ntfs,Locates an .ini file that contains Shellbags-equivalent artifacts.
 352,Free Commander - FreeCommander.ftp.ini,Apps,Users/*/AppData/Local/FreeCommanderXE/Settings/FreeCommander.ftp.ini,lazy_ntfs,Locates an .ini file that contains the file path to the FTP log for Free Commander.
 353,Free Commander - FreeCommander.hist.ini,Apps,Users/*/AppData/Local/FreeCommanderXE/Settings/FreeCommander.hist.ini,lazy_ntfs,Locates an .ini file that contains Shellbags-equivalent artifacts that are sorted in temporal order from top to bottom for both left and right directory browsers.
 354,Free Commander - FreeCommander.fav.xml,Apps,Users/*/AppData/Local/FreeCommanderXE/Settings/FreeCommander.fav.xml,lazy_ntfs,Locates an .xml file that contains favorited files/folder by the user.
 355,Free Commander - Backup Settings,Apps,Users/*/AppData/Local/FreeCommanderXE/Settings/Bkp_Settings*/**10,lazy_ntfs,"Locates an exact copy of the above files which will have a timestamped folder name, i.e. Bkp_Settings-YYYY-MM-DD HH-MM-SS."
 356,Free Commander - FTP Log,Apps,Users/*/AppData/Local/Temp/fc*.log,lazy_ntfs,Locates log file(s) that have a default naming convention of fc_ftplog_20210403 but can be modified by the user.
 357,Free Commander - FTP Related Information,Apps,Users/*/AppData/Local/Temp/FreeCommander*/**10,lazy_ntfs,Locates a folder that may be named randomly that contains more FTP related information as well as .tmp files that are created while the user is traversing folders during an active FTP session. These files are deleted upon program exit.
 358,FDM Database,App,Users/*/AppData/Local/Free Download Manager/**10/fdm.sqlite,lazy_ntfs,"fdm.sqlite shows Torrents, downloads, folder history, auth credentials and more. Will also pull fdm.sqlite in db_backup/"
 359,FDM Backup Info,App,Users/*/AppData/Local/Free Download Manager/backup/backup.info,lazy_ntfs,"Backup info file - can change backup name from userdata.zip, so could give indication of file name"
 360,FDM Database (userdata.zip),App,Users/*/AppData/Local/Free Download Manager/backup/userdata.zip,lazy_ntfs,fdm.sqlite can also appear in the backup folder in a compressed userdata.zip file
 361,FreeFileSync,Apps,Users/*/AppData/Roaming/FreeFileSync/Logs,lazy_ntfs,Copies out all log files
 362,Freenet,File Downloads,Users/*/AppData/Local/Freenet/node*,lazy_ntfs,
 363,Freenet,File Downloads,Users/*/AppData/Local/Freenet/*completed.list.downloads,lazy_ntfs,
 364,Freenet,File Downloads,Users/*/AppData/Local/Freenet/*completed.list.uploads,lazy_ntfs,
 365,Freenet,File Downloads,Users/*/AppData/Local/Freenet/*.bak,lazy_ntfs,
 366,Freenet,File Downloads,Users/*/AppData/Local/Freenet/downloads/**10,lazy_ntfs,
 367,FrostWire Downloads,FileDownload,Users/*/Documents/FrostWire/Torrent Data/**10,lazy_ntfs,Locates files downloaded that land in the default location as specified by FrostWire
 368,FrostWire AppData,FileDownload,Users/*/.frostwire5/frostwire.props,lazy_ntfs,Locates a file that contains important information about the instance of FrostWire on the user's system
 369,FrostWire AppData,FileDownload,Users/*/.frostwire5/itunes.props,lazy_ntfs,Locates a file that contains important information about the instance of FrostWire on the user's system
 370,Gigatribe Files Windows Vista/7/8/10,FileDownload,Users/*/AppData/Local/Shalsoft/**10,lazy_ntfs,Locates Gigatribe files and copies them
 371,Gigatribe Files Windows XP,FileDownload,Documents and Settings/*/*/Application Data/Gigatribe/**10,lazy_ntfs,Locates Gigatribe files and copies them. Different path depending on the Operating System language. In Swedish the location is C:\Documents and Settings\&amp;lt;username&amp;gt;\Lokala Inställningar\Application Data\Gigatribe
 372,Gigatribe Files Windows XP,FileDownload,Documents and Settings/*/*/Application Data/Shalsoft/**10,lazy_ntfs,Locates Gigatribe files and copies them. Different path depending on the Operating System language. In Swedish the location is C:\Documents and Settings\&amp;lt;username&amp;gt;\Lokala Inställningar\Application Data\Shalsoft
 373,Google Drive Backup and Sync User Files,Apps,Users/*/Google Drive*/**10,lazy_ntfs,Older Google Drive Backup and Sync application only
 374,Google Drive Backup and Sync Metadata,Apps,Users/*/AppData/Local/Google/Drive/**10,lazy_ntfs,Older version of Google Drive
 375,Google Drive for Desktop Metadata,Apps,Users/*/AppData/Local/Google/DriveFS/**10,lazy_ntfs,Metadata folder the same for both newer Google Drive for Desktop and older Google File Stream application
 376,Google Earth My Places file,Apps,Users/*/AppData/LocalLow/Google/GoogleEarth/myplaces.kml,lazy_ntfs,File which holds favorited locations
 377,Google Earth My Places Backup file,Apps,Users/*/AppData/LocalLow/Google/GoogleEarth/myplaces.backup.kml,lazy_ntfs,Backup file which holds favorited locations
 378,Google Earth My Places file (XP),Apps,Documents and Settings/*/Application Data/Google/GoogleEarth/myplaces.kml,lazy_ntfs,File which holds favorited locations
 379,Google Earth My Places Backup file (XP),Apps,Documents and Settings/*/Application Data/Google/GoogleEarth/myplaces.backup.kml,lazy_ntfs,Backup file which holds favorited locations
 380,Group Policy Files,Communication,Windows/System32/grouppolicy/**10,lazy_ntfs,
 381,Computer Group Policy files,Communication,ProgramData/Microsoft/Group Policy/History/**10,lazy_ntfs,
 382,User Group Policy files,Communication,Users/*/AppData/Local/Microsoft/Group Policy/History/**10,lazy_ntfs,
 383,Local Group Policy INI Files,Communication,Windows.old/Windows/System32/grouppolicy/*.ini,lazy_ntfs,
 384,Local Group Policy Files - Registry Policy Files,Communication,Windows/System32/grouppolicy/*.pol,lazy_ntfs,
 385,Local Group Policy Files - Registry Policy Files,Communication,Windows.old/Windows/System32/grouppolicy/*.pol,lazy_ntfs,
 386,Local Group Policy Files - Startup/Shutdown Scripts,Communication,Windows/System32/grouppolicy/*/Scripts/**10,lazy_ntfs,
 387,Local Group Policy Files - Startup/Shutdown Scripts,Communication,Windows.old/Windows/System32/grouppolicy/*/Scripts/**10,lazy_ntfs,
 388,HeidiSQL Backup files (*.sql),Apps,Users/*/AppData/Roaming/HeidiSQL/Backups/*,lazy_ntfs,
 389,HeidiSQL (tabs.ini),Apps,Users/*/AppData/Roaming/HeidiSQL/tabs.ini,lazy_ntfs,
 390,HexChat Chat Logs,Communications,Users/*/AppData/Roaming/HexChat/logs/**10,lazy_ntfs,
 391,HitmanPro Logs,Antivirus,ProgramData/HitmanPro/Logs/**10,lazy_ntfs,
 392,HitmanPro Alert Logs,Antivirus,ProgramData/HitmanPro.Alert/Logs/**10,lazy_ntfs,
 393,HitmanPro Database,Antivirus,ProgramData/HitmanPro.Alert/excalibur.db,lazy_ntfs,SQLite DB
 394,IIS applicationHost.config,Apps,Windows/System32/inetsrv/config/applicationHost.config,lazy_ntfs,This configuration file stores the settings for all your Web sites and applications.
 395,IIS administration.config,Apps,Windows/System32/inetsrv/config/administration.config,lazy_ntfs,This configuration file stores the settings for IIS management.
 396,IIS redirection.config,Apps,Windows/System32/inetsrv/config/redirection.config,lazy_ntfs,This configuration file contains the settings that indicate the location where the centralized configuration files are stored.
 397,web.config,Apps,inetpub/wwwroot/**10/web.config,lazy_ntfs,The web.config is a file that is read by IIS and the ASP.NET Core Module to configure an app hosted with IIS.
 398,IIS log files,Logs,Windows/System32/LogFiles/W3SVC*/*.log,lazy_ntfs,
 399,IIS log files,Logs,Windows.old/Windows/System32/LogFiles/W3SVC*/*.log,lazy_ntfs,
 400,IIS log files,Logs,inetpub/logs/LogFiles/*.log,lazy_ntfs,
 401,IIS log files,Logs,inetpub/logs/LogFiles/W3SVC*/*.log,lazy_ntfs,
 402,IIS log files,Logs,Resources/Directory/*/LogFiles/Web/W3SVC*/*.log,lazy_ntfs,
 403,IIS log files,Logs,Windows/system32/LogFiles/HTTPERR/*.log,lazy_ntfs,
 404,ISLOnline Logs - Sessions - *.out,Communications,Users/*/AppData/Local/ISL Online Cache/ISL Light Client/*/ISLClient.out,lazy_ntfs,Collects client session logs for one or more sessions
 405,ISLOnline Logs - Session Configurations,Communications,Users/*/AppData/Local/ISL Online Cache/ISL Light Client/*/conf/*,lazy_ntfs,Configurations for ISL Light sessions
 406,ISL AlwaysOn Logs - Sessions List,Communications,Program Files (x86)/ISL Online/ISL AlwaysOn/session.xml,lazy_ntfs,Collects an xml file listing all sessions for ISL AlwaysOn (Unattended Access)
 407,ISL AlwaysOn Logs - Sessions,Communications,Program Files (x86)/ISL Online/ISL AlwaysOn/sessions/*/trace.out,lazy_ntfs,Detailed log for each session for ISL AlwaysOn (Unattended Access)
 408,ISL AlwaysOn - App Logs,Communications,Program Files (x86)/ISL Online/ISL AlwaysOn/*.out,lazy_ntfs,Application logs containg various artifacts.
 409,ISL Light Logs - Sessions,Communications,Users/*/AppData/Local/ISL Online Cache/ISL Light/*/trace.out,lazy_ntfs,Collects client session logs for one or more sessions
 410,ISL AlwaysOn - Email Configuration,Communications,Program Files (x86)/ISL Online/ISL AlwaysOn/status/tray,lazy_ntfs,This file includes the email of the logged in user for ISL AlwaysOn (Unattended Access)
 411,ISL AlwaysOn - Configuration,Communications,Program Files (x86)/ISL Online/ISL AlwaysOn/StaticConfiguration.ini,lazy_ntfs,"Configuration information (port, http/htpps) for ISL AlwaysOn (Unattended Access)"
 412,IceChat Chat Logs,Communications,Users/*/AppData/Local/IceChat Networks/IceChat/Logs/**10,lazy_ntfs,
 413,Idrive Cleanup Operations,Apps,ProgramData/IDrive/IBCOMMON/*/Session/Archive Cleanup/**10/*,lazy_ntfs,Contains individual log files for each archive cleanup operation
 414,Idrive Backup Operations,Apps,ProgramData/IDrive/IBCOMMON/*/Session/Backup/**10/*,lazy_ntfs,Contains individual log files for each backup operation
 415,Idrive Delete Operations,Apps,ProgramData/IDrive/IBCOMMON/*/Session/Delete/**10/*,lazy_ntfs,Contains individual log files for each delete operation
 416,Idrive Restore Operations,Apps,ProgramData/IDrive/IBCOMMON/*/Session/Restore/*,lazy_ntfs,Contains individual log files for each restore operation
 417,Idrive Backup Summary,Apps,ProgramData/IDrive/IBCOMMON/*/Session/LOGXML/*xml,lazy_ntfs,Contains summary of each backup session
 418,Idrive Tracefile,Apps,ProgramData/IDrive/IBCOMMON/*/Tracefile.txt/Tracefile.txt,lazy_ntfs,Application log which includes error logs for failed uploads
 419,Idrive Mapped Drives,Apps,ProgramData/IDrive/IBCOMMON/IDMappedDrives.txt,lazy_ntfs,List of mapped drives for backup
 420,Idrive Backup Schedule,Apps,ProgramData/IDrive/IBCOMMON/schedule.xml,lazy_ntfs,Backup schedule configurations
 421,Idrive Schedule History,Apps,ProgramData/IDrive/IBCOMMON/Sch_Trace.txt,lazy_ntfs,History of schedule configurations
 422,Idrive Configuration,Apps,ProgramData/IDrive/IBCOMMON/idrive.ini,lazy_ntfs,List of Idrive configuration options
 423,Idrive Local Drives,Apps,ProgramData/IDrive/IBCOMMON/get_Alldrives.txt,lazy_ntfs,List of all local drives
 424,Idrive Exclusion Configurations,Apps,ProgramData/IDrive/IBCOMMON/Exclude*,lazy_ntfs,Files pertaining to exclusion configurations
 425,Idrive User Details,Apps,ProgramData/IDrive/IBCOMMON/AutoComp.ini,lazy_ntfs,"Idrive username, Scheduler notification emails, local username"
 426,Idrive SQL Databse,Apps,ProgramData/IDrive/IBCOMMON/*/LDBNEW/*/*.ibds,lazy_ntfs,Sql database of local files that are backed up
 427,ImgBurn - Application Log File,Apps,Users/*/AppData/Roaming/ImgBurn/Log Files/ImgBurn.log,lazy_ntfs,Contains the ImgBurn application log file.
 428,Index.dat History,Communications,Documents and Settings/*/Local Settings/History/History.IE5/index.dat,lazy_ntfs,
 429,Index.dat History subdirectory,Communications,Documents and Settings/*/Local Settings/History/History.IE5/*/index.dat,lazy_ntfs,
 430,Index.dat cookies,Communications,Documents and Settings/*/Cookies/index.dat,lazy_ntfs,
 431,Index.dat UserData,Communications,Documents and Settings/*/Application Data/Microsoft/Internet Explorer/UserData/index.dat,lazy_ntfs,
 432,Index.dat Office XP,Communications,Documents and Settings/*/Application Data/Microsoft/Office/Recent/index.dat,lazy_ntfs,
 433,Index.dat Office,Communications,Users/*/AppData/Roaming/Microsoft/Office/Recent/index.dat,lazy_ntfs,
 434,Local Internet Explorer folder,Communications,Users/*/AppData/Local/Microsoft/Internet Explorer/**10,lazy_ntfs,
 435,Roaming Internet Explorer folder,Communications,Users/*/AppData/Roaming/Microsoft/Internet Explorer/**10,lazy_ntfs,
 436,IE 9/10 History,Communications,Users/*/AppData/Local/Microsoft/Windows/History/**10,lazy_ntfs,
 437,IE 9/10 Cookies,Communications,Users/*/AppData/Local/Microsoft/Windows/Cookies/**10,lazy_ntfs,
 438,IE 9/10 Download History,Communications,Users/*/AppData/Local/Microsoft/Windows/IEDownloadHistory/**10,lazy_ntfs,
 439,IE 11 Metadata,Communications,Users/*/AppData/Local/Microsoft/Windows/WebCache/*,lazy_ntfs,
 440,IE 11 Cookies,Communications,Users/*/AppData/Local/Microsoft/Windows/INetCookies/**10,lazy_ntfs,
 441,IrfanView Configuration File,FileKnowledge,Users/*/AppData/Roaming/IrfanView/i_view32.ini,lazy_ntfs,
 442,JDownloader 2.0 Download Lists,App,Users/*/AppData/Local/JDownloader 2.0/cfg/**10/downloadList*.zip,lazy_ntfs,"Zip folder which contains several files (00,00_00 and extraInfo) which list the download folder, the time it was created, the name of the download, origin URL, referral URL and more"
 443,JDownloader 2.0 Link Collector,App,Users/*/AppData/Local/JDownloader 2.0/cfg/**10/linkcollector*.zip,lazy_ntfs,"Zip folder which contains several files (0X,0X_00 and extraInfo) which list the websites crawled for links, the referral URLs, timestamps and more"
 444,JDownloader 2.0 General Settings,App,Users/*/AppData/Local/JDownloader 2.0/cfg/**10/org.jdownloader.settings.GeneralSettings.json,lazy_ntfs,General user config for JDownloader 2.0. Holds default download folder.
 445,JDownloader 2.0 Link Grabber Settings,App,Users/*/AppData/Local/JDownloader 2.0/cfg/**10/org.jdownloader.gui.views.linkgrabber.addlinksdialog.LinkgrabberSettings.json,lazy_ntfs,Linkgrabber Settings for JDownloader 2.0. Holds latest download destination folder.
 446,JDownloader 2.0 Proxy Settings,App,Users/*/AppData/Local/JDownloader 2.0/cfg/**10/org.jdownloader.settings.InternetConnectionSettings.customproxylist.json,lazy_ntfs,Proxy configuration for JDownloader 2.0
 447,Java WebStart Cache User Level - Default,Communication,Users/*/AppData/Local/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 448,Java WebStart Cache User Level - IE Protected Mode,Communication,Users/*/AppData/LocalLow/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 449,Java WebStart Cache System level,Communication,Windows/System32/config/systemprofile/AppData/Local/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 450,Java WebStart Cache System level,Communication,Windows.old/Windows/System32/config/systemprofile/AppData/Local/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 451,Java WebStart Cache System level - IE Protected Mode,Communication,Windows/System32/config/systemprofile/AppData/LocalLow/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 452,Java WebStart Cache System level - IE Protected Mode,Communication,Windows.old/Windows/System32/config/systemprofile/AppData/LocalLow/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 453,Java WebStart Cache System level (SysWow64),Communication,Windows/SysWOW64/config/systemprofile/AppData/Local/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 454,Java WebStart Cache System level (SysWow64),Communication,Windows.old/Windows/SysWOW64/config/systemprofile/AppData/Local/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 455,Java WebStart Cache System level (SysWow64) - IE Protected Mode,Communication,Windows/SysWOW64/config/systemprofile/AppData/LocalLow/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 456,Java WebStart Cache System level (SysWow64) - IE Protected Mode,Communication,Windows.old/Windows/SysWOW64/config/systemprofile/AppData/LocalLow/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 457,Java WebStart Cache User Level - XP,Communications,Documents and Settings/*/Application Data/Sun/Java/Deployment/cache/*/*/*.idx,lazy_ntfs,
 458,Kali WSL /etc/debian_version,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/debian_version,lazy_ntfs,
 459,Kali WSL /etc/fstab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/fstab,lazy_ntfs,
 460,Kali WSL /etc/os-release,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/os-release,lazy_ntfs,
 461,Kali WSL /etc/passwd,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/passwd,lazy_ntfs,
 462,Kali WSL /etc/group,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/group,lazy_ntfs,
 463,Kali WSL /etc/shadow,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/shadow,lazy_ntfs,
 464,Kali WSL /etc/timezone,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/timezone,lazy_ntfs,
 465,Kali WSL /etc/hostname,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/hostname,lazy_ntfs,
 466,Kali WSL /etc/hosts,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/hosts,lazy_ntfs,
 467,Kali WSL /etc/crontab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/crontab,lazy_ntfs,
 468,Kali WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/bash.bashrc,lazy_ntfs,
 469,Kali WSL /etc/profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/etc/profile,lazy_ntfs,
 470,Kali WSL .bash_history,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/**10/.bash_history,lazy_ntfs,
 471,Kali WSL .bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/**10/.bashrc,lazy_ntfs,
 472,Kali WSL .profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/**10/.profile,lazy_ntfs,
 473,Kali WSL User Crontabs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/var/spool/cron/crontabs/**10,lazy_ntfs,
 474,Kali WSL Apt Logs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/rootfs/var/log/apt/**10/*.log,lazy_ntfs,
 475,Kali WSL ext4.vhdx,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/KaliLinux.54290C8133FEE_*/LocalState/ext4.vhdx,lazy_ntfs,
 476,Kaseya Live Connect Logs (XP),ApplicationLogs,Documents and Settings/*/Application Data/Kaseya/Log/**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 477,Kaseya Live Connect Logs,ApplicationLogs,Users/*/AppData/Local/Kaseya/Log/KaseyaLiveConnect/**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 478,Kaseya Agent Endpoint Service Logs (XP),ApplicationLogs,Documents and Settings/All Users/Application Data/Kaseya/Log/Endpoint/**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 479,Kaseya Agent Endpoint Service Logs,ApplicationLogs,ProgramData/Kaseya/Log/Endpoint/**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 480,Kaseya Agent Service Log,ApplicationLogs,Program Files*/Kaseya/*/agentmon.log*,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 481,Kaseya Setup Log,ApplicationLogs,Users/*/AppData/Local/Temp/KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 482,Kaseya Setup Log,ApplicationLogs,Windows/Temp/KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 483,Kaseya Setup Log,ApplicationLogs,Windows.old/Windows/Temp/KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 484,Kaseya Agent Edge Service Logs,ApplicationLogs,ProgramData/Kaseya/Log/KaseyaEdgeServices/**10,lazy_ntfs,https://www.huntress.com/blog/rapid-response-kaseya-vsa-mass-msp-ransomware-incident
 485,Keepass User Config,App,Users/*/AppData/Roaming/KeePass/*.xml,lazy_ntfs,Collecting Keepass User Configuration File
 486,Keepass Config Xml,App,Program Files/KeePass Password Safe*/*.xml,lazy_ntfs,Collecting Keepass Configuration File
 487,Keepass Application Details,App,Program Files/KeePass Password Safe*/*.config,lazy_ntfs,Collecting Keepass Application Details
 488,Keepass Local Ini,App,Users/*/AppData/Local/KeePassXC/*.ini,lazy_ntfs,
 489,Keepass Roaming Ini,App,Users/*/AppData/Roaming/KeePassXC/*.ini,lazy_ntfs,
 490,LNK Files from Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Windows/Recent/**10,lazy_ntfs,Also includes automatic and custom jumplist directories
 491,LNK Files from Microsoft Office Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Office/Recent/**10,lazy_ntfs,
 492,Start Menu LNK Files,LNKFiles,Users/*/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/*.LNK,lazy_ntfs,
 493,LNK Files from Recent (XP),LNKFiles,Documents and Settings/*/Recent/**10,lazy_ntfs,
 494,Desktop LNK Files XP,LNKFiles,Documents and Settings/*/Desktop/*.LNK,lazy_ntfs,
 495,Desktop LNK Files,LNKFiles,Users/*/Desktop/*.LNK,lazy_ntfs,
 496,Restore point LNK Files XP,LNKFiles,System Volume Information/_restore*/RP*/*.LNK,lazy_ntfs,
 497,LNK Files from C:\ProgramData,LNKFiles,ProgramData/Microsoft/Windows/Start Menu/Programs/*.LNK,lazy_ntfs,
 498,Level RMM Client Application logs,ApplicationLogs,Program Files/Level/*.log,lazy_ntfs,Contains Application Log entries such as service start and incoming connections.
 499,.bash_history,Windows Linux Profile,Users/*/AppData/Local/Packages/*/LocalState/rootfs/home/*/.bash_history,lazy_ntfs,
 500,.bash_logout,Windows Linux Profile,Users/*/AppData/Local/Packages/*/LocalState/rootfs/home/*/.bash_logout,lazy_ntfs,
 501,.bashrc,Windows Linux Profile,Users/*/AppData/Local/Packages/*/LocalState/rootfs/home/*/.bashrc,lazy_ntfs,
 502,.profile,Windows Linux Profile,Users/*/AppData/Local/Packages/*/LocalState/rootfs/home/*/.profile,lazy_ntfs,
 503,User Files - Desktop,LiveUserFiles,Users/*/Desktop/**10,lazy_ntfs,
 504,User Files - Documents,LiveUserFiles,Users/*/Documents/**10,lazy_ntfs,
 505,User Files - Downloads,LiveUserFiles,Users/*/Downloads/**10,lazy_ntfs,
 506,User Files - Dropbox,LiveUserFiles,Users/*/Dropbox*/**10,lazy_ntfs,
 507,LogFiles,Logs,Windows/System32/LogFiles/**10,lazy_ntfs,
 508,LogFiles,Logs,Windows.old/Windows/System32/LogFiles/**10,lazy_ntfs,
 509,Error logging,Misc,windows/PFRO.log,lazy_ntfs,
 510,LogMeIn ProgramData Logs,ApplicationLogs,ProgramData/LogMeIn/Logs/**10,lazy_ntfs,
 511,LogMeIn Application Logs,ApplicationLogs,Users/*/AppData/Local/temp/LogMeInLogs/**10,lazy_ntfs,"Contains RemoteAssist (formerly GoToAssist), GoToMeeting, and other GoTo* logs"
 512,MOF files,WMI,**10/*.MOF,lazy_ntfs,
 513,MS SQL Errorlog,SQL Exploitation,Program Files/Microsoft SQL Server/*/MSSQL/LOG/ERRORLOG,lazy_ntfs,
 514,MS SQL Errorlogs,SQL Exploitation,Program Files/Microsoft SQL Server/*/MSSQL/LOG/ERRORLOG.*,lazy_ntfs,
 515,Macrium Reflect,Apps,ProgramData/Macrium/Macrium Service/*,lazy_ntfs,Copies out all log files
 516,Macrium Reflect,Apps,ProgramData/Macrium/Reflect/*,lazy_ntfs,Copies out the Reflect folder which contains many important logs
 517,Macrium Reflect,Apps,ProgramData/Macrium/Reflect Launcher,lazy_ntfs,Copies out the Reflect folder which contains many important logs
 518,MalwareBytes Anti-Malware Logs,Antivirus,ProgramData/Malwarebytes/Malwarebytes Anti-Malware/Logs/mbam-log-*.xml,lazy_ntfs,
 519,MalwareBytes Anti-Malware Service Logs,Antivirus,ProgramData/Malwarebytes/MBAMService/logs/mbamservice.log*,lazy_ntfs,
 520,MalwareBytes Anti-Malware Scan Logs,Antivirus,Users/*/AppData/Roaming/Malwarebytes/Malwarebytes Anti-Malware/Logs/**10,lazy_ntfs,
 521,MalwareBytes Anti-Malware Scan Results Logs,Antivirus,ProgramData/Malwarebytes/MBAMService/ScanResults/**10,lazy_ntfs,
 522,ManageEngine Desktop Central Log Files,Logs,ManageEngine/DesktopCentral_Server/logs/**10,lazy_ntfs,
 523,ManageEngine ADSelfService Plus Log Files,Logs,ManageEngine/ADSelfService Plus/logs/**10,lazy_ntfs,
 524,Mattermost - Chat Logs,Apps,Users/*/AppData/Roaming/Mattermost/IndexedDB/**10,lazy_ntfs,Locates Mattermost logs and copies them
 525,McAfee Desktop Protection Logs XP,Antivirus,Users/All Users/Application Data/McAfee/DesktopProtection/**10,lazy_ntfs,
 526,McAfee Desktop Protection Logs,Antivirus,ProgramData/McAfee/DesktopProtection/**10,lazy_ntfs,
 527,McAfee Endpoint Security Logs,Antivirus,ProgramData/McAfee/Endpoint Security/Logs/**10,lazy_ntfs,
 528,McAfee Endpoint Security Logs,Antivirus,ProgramData/McAfee/Endpoint Security/Logs_Old/**10,lazy_ntfs,
 529,McAfee VirusScan Logs,Antivirus,ProgramData/Mcafee/VirusScan/**10,lazy_ntfs,
 530,McAfee ePO Logs,Antivirus,ProgramData/McAfee/Endpoint Security/Logs/**10,lazy_ntfs,
 531,MediaMonkey - Media SQLite Database,Apps,Users/*/AppData/Roaming/MediaMonkey/MM.DB,lazy_ntfs,Locates SQLite DB that contains a complete enumeration of the user's media collection within MediaMonkey
 532,MediaMonkey - MediaMonkey.ini,Apps,Users/*/AppData/Roaming/MediaMonkey/MediaMonkey.ini,lazy_ntfs,Locates .ini file which contains information about the user's MediaMonkey application instance
 533,MegaSync Folder,ApplicationLogs,Users/*/AppData/Local/Mega Limited/MEGAsync/**10,lazy_ntfs,
 534,hiberfil.sys,Memory,hiberfil.sys,lazy_ntfs,
 535,pagefile.sys,Memory,pagefile.sys,lazy_ntfs,
 536,swapfile.sys,Memory,swapfile.sys,lazy_ntfs,
 537,Small Memory Dump directory,Memory,Windows/Minidump/*.dmp,lazy_ntfs,https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/small-memory-dump
 538,Small Memory Dump directory,Memory,Windows.old/Windows/Minidump/*.dmp,lazy_ntfs,https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/small-memory-dump
 539,Microsoft Office Backstage,FileKnowledge,Users/*/AppData/Local/Microsoft/Office/*/BackstageinAppNavCache/**10,lazy_ntfs,
 540,Microsoft OneNote - FullTextSearchIndex,Apps,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/*/FullTextSearchIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's text content
 541,Microsoft OneNote - RecentNotebooks_SeenURLs,Apps,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/Notifications/RecentNotebooks_SeenURLs,lazy_ntfs,Grabs a file that appears to record recently seen OneNote notebooks
 542,Microsoft OneNote - AccessibilityCheckerIndex,Apps,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/AccessibilityCheckerIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's version sync error history
 543,Microsoft OneNote - User NoteTags,Apps,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/NoteTags/*LiveId.db,lazy_ntfs,Grabs a database that stores the user specified tags within OneNote to be used application-wide
 544,Microsoft OneNote - RecentSearches,Apps,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/RecentSearches/RecentSearches.db,lazy_ntfs,Grabs a database that stores the user's recent searches within OneNote
 545,"Microsoft Sticky Notes - Windows 7, 8, and 10 version 1511 and earlier",Apps,Users/*/AppData/Roaming/Microsoft/StickyNotes/StickyNotes.snt,lazy_ntfs,
 546,Microsoft Sticky Notes - 1607 and later,Apps,Users/*/AppData/Local/Packages/Microsoft.MicrosoftStickyNotes*/LocalState/plum.sqlite*,lazy_ntfs,
 547,Microsoft Teams IndexedDB Cache,Apps,Users/*/AppData/Roaming/Microsoft/Teams/IndexedDB/https_teams.microsoft.com_0.indexeddb.leveldb/**10,lazy_ntfs,"LevelDB database which can contain inbound/outbound chat messages, call history and more"
 548,Microsoft Teams Local Storage Cache,Apps,Users/*/AppData/Roaming/Microsoft/Teams/Local Storage/leveldb/**10,lazy_ntfs,"LevelDB database which can contain meeting history, file transfer logs and more"
 549,Microsoft Teams Cache,Apps,Users/*/AppData/Roaming/Microsoft/Teams/Cache/**10,lazy_ntfs,Chromium cache which can be viewed with Nirsoft's ChromeCacheView
 550,Microsoft Teams Config,Apps,Users/*/AppData/Roaming/Microsoft/Teams/desktop-config.json,lazy_ntfs,JSON config file for Teams
 551,Microsoft Teams Logs (Windows 11),Apps,Users/%User%/AppData/Local/Packages/MicrosoftTeams_8wekyb3d8bbwe/LocalCache/Microsoft/MSTeams/Logs,lazy_ntfs,Lots of log files for MS Teams
 552,Microsoft To Do - SQLite Database of To Do tasks,Apps,Users/*/AppData/Local/Packages/Microsoft.Todos_8wekyb3d8bbwe/LocalState/AccountsRoot/*/todosqlite.db*,lazy_ntfs,
 553,Microsoft To Do - User Avatar,Apps,Users/*/AppData/Local/Packages/Microsoft.Todos_8wekyb3d8bbwe/LocalState/AccountsRoot/4c444a17ebb042fb92df97d00d1c802a/avatars/UserAvatar.jpg,lazy_ntfs,
 554,Midnight Commander -- All Configuation Files,Apps,Users/*/Midnight Commander/*,lazy_ntfs,Locates folder where all configuration files reside
 555,Multi Commander - Application Folder,Apps,Users/*/AppData/Local/MultiCommander*/**10,lazy_ntfs,Locates the contents of the Application folder.
 556,Multi Commander - Config Folder,Apps,Users/*/AppData/Roaming/MultiCommander*/Config/**10,lazy_ntfs,Locates the contents of the Config folder.
 557,Multi Commander - Log Folder,Apps,Users/*/AppData/Roaming/MultiCommander*/Logs/**10,lazy_ntfs,Locates log file(s) related to user activity within Multi Commander.
 558,Multi Commander - UserData Folder,Apps,Users/*/AppData/Roaming/MultiCommander*/UserData/**10,lazy_ntfs,Locates the contents of the UserData folder.
 559,Multi Commander - Log File,Apps,Users/*/AppData/Roaming/MultiCommander*/**10/*MultiCommander.log,lazy_ntfs,Locates log file(s) associated with Milti Commander. Commonly in YYYY-MM-DD (numbers)-MultiCommander.log naming convention.
 560,.NET CLR UsageLogs (user-scoped),.NET CLR UsageLogs,Users/*/AppData/Local/Microsoft/CLR_*/**10/*.log,lazy_ntfs,
 561,.NET CLR UsageLogs (system-scoped),.NET CLR UsageLogs,Windows*/System32/config/systemprofile/AppData/Local/Microsoft/CLR_*/**10/*.log,lazy_ntfs,
 562,NGINX Log Files,Logs,nginx/logs/*.log,lazy_ntfs,
 563,Usenet Clients - NZBGet Log File,FileDownload,ProgramData/NZBGet/nzbget.log,lazy_ntfs,Locates NZBGet download log file
 564,Usenet Clients - NZBGet NZBs,FileDownload,ProgramData/NZBGet/nzb/*,lazy_ntfs,Locates NZBGet NZB files that were used by the user
 565,Nessus Logs,Nessus,ProgramData/Tenable/Nessus/conf/**10,lazy_ntfs,
 566,Nessus Logs,Nessus Logs,ProgramData/Tenable/Nessus/nessus/logs/**10,lazy_ntfs,
 567,Net Monitor Server Logs,ApplicationLogs,ProgramData/Net Monitor for Employees Pro/log/*/**10,lazy_ntfs,Contains Net Monitor server logs
 568,Net Monitor Server Data,Communication,ProgramData/Net Monitor for Employees Pro/data/**10,lazy_ntfs,Contains Net Monitor server data - Indicates what have been seen as the attacker
 569,Net Monitor Server Config,Apps,ProgramData/Net Monitor for Employees Pro/config/**10,lazy_ntfs,Contains Net Monitor server config
 570,Net Monitor Server Temp Folder,Apps,ProgramData/Net Monitor for Employees Pro/tmp/**10,lazy_ntfs,
 571,Net Monitor Client Logs,ApplicationLogs,Program Files*/Net Monitor for Employees Pro/log/**10,lazy_ntfs,Contains Net Monitor client logs
 572,Net Monitor Client Config,ApplicationLogs,Program Files*/Net Monitor for Employees Pro/config/**10,lazy_ntfs,Contains Net Monitor client config
 573,Usenet Clients - Newsbin Pro,FileDownload,Users/*/AppData/Local/Newsbin/Downloaded.db3,lazy_ntfs,Locates Newsbin Pro download log database
 574,Usenet Clients - Newsleecher,FileDownload,Users/*/AppData/Roaming/NewsLeecher/downloaded.dat,lazy_ntfs,Locates Newsleecher download .dat file
 575,Nicotine++ Logs,FileDownload,Users/%User%/AppData/Roaming/nicotine/logs/**10,lazy_ntfs,"Locates Nicotine++ chat logs, room logs, transfer logs, and debug logs (if enabled)"
 576,Nicotine++ Incomplete Downloads,FileDownload,Users/%User%/AppData/Roaming/nicotine/incomplete/**10,lazy_ntfs,Locates files that did not finish downloading
 577,Nicotine++ Buddyfiles.db,FileDownload,Users/%User%/AppData/Roaming/nicotine/buddyfiles.db/**10,lazy_ntfs,Locates a DB that appears to include shared files from a user's buddy list
 578,Nicotine++ Buddystreams.db,FileDownload,Users/%User%/AppData/Roaming/nicotine/buddystreams.db/**10,lazy_ntfs,Locates a DB that appears to include shared files from a user's buddy list
 579,Nicotine++ Buddymtimes.db,FileDownload,Users/%User%/AppData/Roaming/nicotine/buddymtimes.db/**10,lazy_ntfs,"Locates a DB that appears to enumerate which files the user is sharing to their buddy list, from a folder level"
 580,Nicotine++ Buddyfileindex.db,FileDownload,Users/%User%/AppData/Roaming/nicotine/buddyfileindex.db/**10,lazy_ntfs,"Locates a DB that appears to enumerate which files the user is sharing to their buddy list, from a file level"
 581,Nicotine++ Buddywordindex.db,FileDownload,Users/%User%/AppData/Roaming/nicotine/buddywordindex.db/**10,lazy_ntfs,Unknown what this is for at this time
 582,Nicotine++ Config Files,FileDownload,Users/%User%/AppData/Roaming/nicotine/config/**10,lazy_ntfs,Locates config files
 583,Nicotine++ User Shares,FileDownload,Users/%User%/AppData/Roaming/nicotine/usershares/**10,lazy_ntfs,Locates a DB that appears to store a list of files per user that they are sharing within Nicotine++. Note: this requires the user to right-click -&amp;gt; browse files shared by that user
 584,Nicotine++ Downloads.json,FileDownload,Users/%User%/AppData/Roaming/nicotine/downloads.json*,lazy_ntfs,Locates downloads.json
 585,Nicotine++ Uploads.json,FileDownload,Users/%User%/AppData/Roaming/nicotine/uploads.json*,lazy_ntfs,Locates uploads.json
 586,Notepad++ Unsaved Edits,Text Editor,Users/*/AppData/Roaming/Notepad++/backup/**10,lazy_ntfs,Locates non-saved Notepad++ files and copies them.
 587,Notepad++ Config,Text Editor,Users/*/AppData/Roaming/Notepad++/config.xml,lazy_ntfs,"Retrieves config.xml which contains recently searched terms, replaced terms and recently opened documents"
 588,Notepad++ Session,Text Editor,Users/*/AppData/Roaming/Notepad++/session.xml,lazy_ntfs,Retrieves session.xml which contains session date
 589,Notepad Session Files,Windows Notepad,Users/*/AppData/Local/Packages/Microsoft.WindowsNotepad_8wekyb3d8bbwe/LocalState/TabState/*.bin,lazy_ntfs,Contains .bin files which consist of the files opened in each tab in Windows Notepad
 590,Notion Local Storage,App,Users/*/AppData/Roaming/Notion/notion.db,lazy_ntfs,"Local storage file containing all pages, databases, users, etc."
 591,Notion Custom Dictionary,App,Users/*/AppData/Roaming/Notion/Partitions/notion/Custom Dictionary.txt,lazy_ntfs,
 592,Word Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Word/**10,lazy_ntfs,
 593,Excel Autosave Location,ApplicationCompatibility,Users/*/AppData/Roaming/Microsoft/Excel/**10,lazy_ntfs,
 594,Powerpoint Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Powerpoint/**10,lazy_ntfs,
 595,Publisher Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Publisher/**10,lazy_ntfs,
 596,Office Diagnostics,Execution,Users/*/AppData/Local/Diagnostics/PCW.debugreport.xml,lazy_ntfs,Payloads for CVE-2022-30190 ('Follina') will be in this log
 597,Office Elevated Diagnostics,Execution,Users/*/AppData/Local/ElevatedDiagnostics/PCW.debugreport.xml,lazy_ntfs,Payloads for CVE-2022-30190 ('Follina') will be in this log
 598,Office Document Cache,FileKnowledge,Users/*/AppData/Local/Microsoft/Office/*/OfficeFileCache/**10,lazy_ntfs,
 599,One Commander - All Configuration Files,Apps,Users/*/OneCommander/*,lazy_ntfs,Locates folder where all configuration files reside
 600,One Commander - Other Configuration Files,Apps,Users/*/AppData/Local/Apps/2.0/*/*/onec*/**10,lazy_ntfs,Locates folder where all configuration files reside
 601,OneDrive Metadata Logs,Apps,Users/*/AppData/Local/Microsoft/OneDrive/logs/**10,lazy_ntfs,
 602,OneDrive Metadata Settings,Apps,Users/*/AppData/Local/Microsoft/OneDrive/settings/**10,lazy_ntfs,
 603,OneDrive User Files,Apps,Users/*/OneDrive*/**10,lazy_ntfs,Caution -- This target will collect OneDrive contents from the local drive AND on-demand cloud files. Ensure your scope of authority permits cloud collections before use or isolate system from network.
 604,OpenSSH Config File,Apps,Users/*/.ssh/config,lazy_ntfs,"Config file can hold usernames, IP addresses and ports, key locations and configured shortcuts for servers e.g. ssh web-server"
 605,OpenSSH Known Hosts,Apps,Users/*/.ssh/known_hosts,lazy_ntfs,"Known hosts file can hold a list of connected FQDNs/IP Addresses and ports if they are non-default, as well as public key fingerprints"
 606,OpenSSH Public Keys,Apps,Users/*/.ssh/*.pub,lazy_ntfs,"Gets all public keys (*.pub). It is more difficult to find private keys as they typically do not have a file extension. However, the .pub files should be able to help find the private keys as they are typically named the same."
 607,OpenSSH Default RSA Private Key,Apps,Users/*/.ssh/id_rsa,lazy_ntfs,Default name for an auto-generated SSH RSA private key
 608,OpenSSH Default ECDSA Private Key,Apps,Users/*/.ssh/id_ecdsa,lazy_ntfs,Default name for an auto-generated SSH ECDSA private key
 609,OpenSSH Default ECDSA-SK Private Key,Apps,Users/*/.ssh/id_ecdsa_sk,lazy_ntfs,Default name for an auto-generated SSH ECDSA private key using a Security Key
 610,OpenSSH Default ED25519 Private Key,Apps,Users/*/.ssh/id_ed25519,lazy_ntfs,Default name for an auto-generated SSH ED25519 private key
 611,OpenSSH Default ED25519-SK Private Key,Apps,Users/*/.ssh/id_ed25519_sk,lazy_ntfs,Default name for an auto-generated SSH ED25519 private key using a Security Key
 612,OpenSSH Default DSA Private Key,Apps,Users/*/.ssh/id_dsa,lazy_ntfs,Default name for an auto-generated SSH DSA private key
 613,OpenSSH Server Config File,Apps,ProgramData/ssh/sshd_config,lazy_ntfs,Config file can hold information on allowed/denied users
 614,OpenSSH Server Logs,Apps,ProgramData/ssh/logs/*,lazy_ntfs,OpenSSH server logs
 615,OpenSSH Host ECDSA Key,Apps,ProgramData/ssh/ssh_host_ecdsa_key,lazy_ntfs,Retrieves the host ECDSA key
 616,OpenSSH Host ED25519 Key,Apps,ProgramData/ssh/ssh_host_ed25519_key,lazy_ntfs,Retrieves the host ED25519 key
 617,OpenSSH Host DSA Key,Apps,ProgramData/ssh/ssh_host_dsa_key,lazy_ntfs,Retrieves the host DSA key
 618,OpenSSH Host RSA Key,Apps,ProgramData/ssh/ssh_host_rsa_key,lazy_ntfs,Retrieves the host RSA key
 619,OpenSSH User Authorized Keys,Apps,Users/*/.ssh/authorized_keys,lazy_ntfs,Retrieves the user's authorised public keys
 620,OpenSSH User Authorized Keys 2,Apps,Users/*/.ssh/authorized_keys2,lazy_ntfs,Retrieves the user's authorised public keys from the second file
 621,OpenSSH Authorized Administrator Keys,Apps,ProgramData/ssh/administrators_authorized_keys,lazy_ntfs,Retrieves the administrator group's authorised public keys
 622,OpenVPN Client Config,ApplicationLogs,Users/*/OpenVPN/config/**10,lazy_ntfs,Contains OpenVPN Configs (Profiles)
 623,OpenVPN Client Config,ApplicationLogs,Program Files*/OpenVPN/config/**10,lazy_ntfs,Contains OpenVPN Configs(Profiles)
 624,OpenVPN Client Config,ApplicationLogs,Users/*/OpenVPN/log/*.log,lazy_ntfs,Contains OpenVPN Logs for each Config(Profile)
 625,Opera - Local Folder,Communications,Users/*/AppData/Local/Opera Software/Opera Stable/**10,lazy_ntfs,Grabs entire contents of the Opera AppData\Local folder
 626,Opera - Roaming Folder,Communications,Users/*/AppData/Roaming/Opera Software/Opera Stable/**10,lazy_ntfs,Grabs entire contents of the Opera AppData\Roaming folder
 627,PST XP,Communications,Documents and Settings/*/Local Settings/Application Data/Microsoft/Outlook/*.pst,lazy_ntfs,
 628,OST XP,Communications,Documents and Settings/*/Local Settings/Application Data/Microsoft/Outlook/*.ost,lazy_ntfs,
 629,PST (2013 or 2016),Communications,Users/*/Documents/Outlook Files/*.pst,lazy_ntfs,
 630,OST (2013 or 2016),Communications,Users/*/Documents/Outlook Files/*.ost,lazy_ntfs,
 631,PST,Communications,Users/*/AppData/Local/Microsoft/Outlook/*.pst,lazy_ntfs,"Outlook Data File: POP accounts, archives, older installations"
 632,OST,Communications,Users/*/AppData/Local/Microsoft/Outlook/*.ost,lazy_ntfs,"Offline Outlook Data File: M365, Exchange, IMAP"
 633,NST,Communications,Users/*/AppData/Local/Microsoft/Outlook/*.nst,lazy_ntfs,Outlook Group Storage File: Group conversations and calendar
 634,Outlook Attachment Temporary Storage,Communications,Users/*/AppData/Local/Microsoft/Windows/INetCache/Content.Outlook/**10,lazy_ntfs,Outlook temporary storage folder for user attachments
 635,PeaZip Configuration Files,FileKnowledge,Users/*/AppData/Roaming/PeaZip/**10,lazy_ntfs,
 636,Perflogs,Application,PerfLogs/**10,lazy_ntfs,
 637,PowerShell 7 Config JSON,PowerShell,Program Files/PowerShell/7/powershell.config.json,lazy_ntfs,
 638,PowerShell Console Log,PowerShellConsoleLog,Users/*/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadline/*_history.txt,lazy_ntfs,
 639,PowerShell Transcripts - Default Location,PowerShellTranscripts,Users/*/Documents/20*/PowerShell_transcript.*.txt,lazy_ntfs,
 640,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Windows/SysWOW64/*/PowerShell_transcript.*.txt,lazy_ntfs,
 641,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Program Files/Amazon/Ec2ConfigService/Scripts/*/PowerShell_transcript.*.txt,lazy_ntfs,
 642,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Windows/System32/*/PowerShell_transcript.*.txt,lazy_ntfs,
 643,Prefetch,Prefetch,Windows/prefetch/*.pf,lazy_ntfs,
 644,Prefetch,Prefetch,Windows.old/Windows/prefetch/*.pf,lazy_ntfs,
 645,ProgramData,Application Data,ProgramData/**10,lazy_ntfs,
 646,ProtonVPN - Connection Logs,ApplicationLogs,Users/*/AppData/Local/ProtonVPN/Logs,lazy_ntfs,Locates ProtonVPN connection logs.
 647,Puffin - data.db,Communications,Users/*/AppData/Local/PuffinSecureBrowser/data.db,lazy_ntfs,Grabs an important database file that contains browser history
 648,Puffin - Autocomplete Data,Communications,Users/*/AppData/Local/PuffinSecureBrowser/autocompletes.dat,lazy_ntfs,Grabs a file that stores autocomplete data
 649,Puffin - Password Forms Data,Communications,Users/*/AppData/Local/PuffinSecureBrowser/passwordForms.dat,lazy_ntfs,Grabs a file that stores some saved password data
 650,Puffin - Password (Encrypted),Communications,Users/*/AppData/Local/PuffinSecureBrowser/credential.dat,lazy_ntfs,Grabs a file that stores passwords in an encrypted format
 651,Puffin - Subscription Data,Communications,Users/*/AppData/Local/PuffinSecureBrowser/subscription,lazy_ntfs,Grabs a file that stores the user's email address that's associated with their Puffin subscription
 652,Puffin - Cookies,Communications,Users/*/AppData/Local/PuffinSecureBrowser/cookies.dat,lazy_ntfs,Grabs a file that stores information related to cookies
 653,Puffin - Image Cache,Communications,Users/*/AppData/Local/PuffinSecureBrowser/image_cache/**10,lazy_ntfs,Grabs a directory that caches images from websites visited
 654,WNS,WNS,Users/%user/AppData/Local/Microsoft/Windows/Notifications/appdb.dat,lazy_ntfs,
 655,WNS,WNS,Users/%user/AppData/Local/Microsoft/Windows/Notifications/wpndatabase.db,lazy_ntfs,
 656,Q-Dir - .ini File,Apps,Users/*/AppData/Roaming/Q-Dir/Q-Dir.ini,lazy_ntfs,Locates .ini file associated with Q-Dir which stores useful user activity information.
 657,Q-Dir - .qdr file,Apps,Users/*/AppData/Roaming/Q-Dir/start.qdr,lazy_ntfs,"Locates .qdr file associated with Q-Dir which stores useful user activity information, including the last 4 folders opened (encoded, unfortunately)."
 658,QFinderPro,Apps,Users/*/AppData/Local/QNAP/QfinderPro,lazy_ntfs,Locates a JSON file that provides network location information for any QNAP connected devices.
 659,RDP Cache Files,FileSystem,Users/*/AppData/Local/Microsoft/Terminal Server Client/Cache/*,lazy_ntfs,
 660,Windows.old RDP Cache Files,FileSystem,Windows.old/Users/*/AppData/Local/Microsoft/Terminal Server Client/Cache/*,lazy_ntfs,
 661,RDP Cache Files,FileSystem,Documents and Settings/*/Local Settings/Application Data/Microsoft/Terminal Server Client/Cache/*,lazy_ntfs,
 662,RemoteConnectionManager Event Logs,EventLogs,Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-RemoteConnectionManager*,lazy_ntfs,
 663,RemoteConnectionManager Event Logs,EventLogs,Windows.old/Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-RemoteConnectionManager*,lazy_ntfs,
 664,LocalSessionManager Event Logs,EventLogs,Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-LocalSessionManager*,lazy_ntfs,
 665,LocalSessionManager Event Logs,EventLogs,Windows.old/Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-LocalSessionManager*,lazy_ntfs,
 666,RDPClient Event Logs,EventLogs,Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-RDPClient*,lazy_ntfs,
 667,RDPClient Event Logs,EventLogs,Windows.old/Windows/System32/winevt/logs/Microsoft-Windows-TerminalServices-RDPClient*,lazy_ntfs,
 668,RDPCoreTS Event Logs,EventLogs,Windows/System32/winevt/logs/Microsoft-Windows-RemoteDesktopServices-RdpCoreTS*,lazy_ntfs,Can be used to correlate RDP logon failures by originating IP
 669,RDPCoreTS Event Logs,EventLogs,Windows.old/Windows/System32/winevt/logs/Microsoft-Windows-RemoteDesktopServices-RdpCoreTS*,lazy_ntfs,Can be used to correlate RDP logon failures by originating IP
 670,Radmin Server 32bit Log,ApplicationLogs,Windows/SysWOW64/rserver30/Radm_log.htm,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 671,Radmin Server 64bit Log,ApplicationLogs,Windows/System32/rserver30/Radm_log.htm,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 672,Radmin Server 32bit Chats,ApplicationLogs,Windows/SysWOW64/rserver30/CHATLOGS/*/*.htm,lazy_ntfs,Previous chat logs
 673,Radmin Server 64bit Chats,ApplicationLogs,Windows/System32/rserver30/CHATLOGS/*/*.htm,lazy_ntfs,Previous chat logs
 674,Radmin Viewer Chats,ApplicationLogs,Users/*/Documents/ChatLogs/*/*.htm,lazy_ntfs,Previous chat logs
 675,Rclone Config,Apps,**10/rclone.conf,lazy_ntfs,
 676,RecentFileCache,ApplicationCompatability,Windows/AppCompat/Programs/RecentFileCache.bcf,lazy_ntfs,
 677,RecentFileCache,ApplicationCompatability,Windows.old/Windows/AppCompat/Programs/RecentFileCache.bcf,lazy_ntfs,
 678,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin/**10/$R*,lazy_ntfs,
 679,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin/*/$R*/**10,lazy_ntfs,
 680,RECYCLER - WinXP,FileDeletion,RECYCLE*/**10/D*,lazy_ntfs,
 681,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin/**10/$I*,lazy_ntfs,
 682,RECYCLER - WinXP,FileDeletion,RECYCLE*/**10/INFO2,lazy_ntfs,
 683,Registry.dat MSIX Hive,Registry,Users/*/AppData/Local/Packages/*/SystemAppData/Helium/Registry.dat*,lazy_ntfs,
 684,User.dat MSIX Hive,Registry,Users/*/AppData/Local/Packages/*/SystemAppData/Helium/User.dat*,lazy_ntfs,
 685,UserClasses.dat MSIX Hive,Registry,Users/*/AppData/Local/Packages/*/SystemAppData/Helium/UserClasses.dat*,lazy_ntfs,
 686,BBI registry hive,Registry,Windows/System32/config/BBI,lazy_ntfs,
 687,BBI registry hive,Registry,Windows.old/Windows/System32/config/BBI,lazy_ntfs,
 688,BBI registry transaction files,Registry,Windows/System32/config/BBI.LOG*,lazy_ntfs,
 689,BBI registry transaction files,Registry,Windows.old/System32/config/BBI.LOG*,lazy_ntfs,
 690,BCD-Template registry hive,Registry,Windows/System32/config/BCD-Template,lazy_ntfs,
 691,BCD-Template registry hive,Registry,Windows.old/Windows/System32/config/BCD-Template,lazy_ntfs,
 692,BCD-Template registry transaction files,Registry,Windows/System32/config/BCD-Template.LOG*,lazy_ntfs,
 693,BCD-Template registry transaction files,Registry,Windows.old/System32/config/BCD-Template.LOG*,lazy_ntfs,
 694,COMPONENTS registry hive,Registry,Windows/System32/config/COMPONENTS,lazy_ntfs,
 695,COMPONENTS registry hive,Registry,Windows.old/Windows/System32/config/COMPONENTS,lazy_ntfs,
 696,COMPONENTS registry transaction files,Registry,Windows/System32/config/COMPONENTS.LOG*,lazy_ntfs,
 697,COMPONENTS registry transaction files,Registry,Windows.old/System32/config/COMPONENTS.LOG*,lazy_ntfs,
 698,DRIVERS registry hive,Registry,Windows/System32/config/DRIVERS,lazy_ntfs,
 699,DRIVERS registry hive,Registry,Windows.old/Windows/System32/config/DRIVERS,lazy_ntfs,
 700,DRIVERS registry transaction files,Registry,Windows/System32/config/DRIVERS.LOG*,lazy_ntfs,
 701,DRIVERS registry transaction files,Registry,Windows.old/System32/config/DRIVERS.LOG*,lazy_ntfs,
 702,ELAM registry hive,Registry,Windows/System32/config/ELAM,lazy_ntfs,
 703,ELAM registry hive,Registry,Windows.old/Windows/System32/config/ELAM,lazy_ntfs,
 704,ELAM registry transaction files,Registry,Windows/System32/config/ELAM.LOG*,lazy_ntfs,
 705,ELAM registry transaction files,Registry,Windows.old/System32/config/ELAM.LOG*,lazy_ntfs,
 706,userdiff registry hive,Registry,Windows/System32/config/userdiff,lazy_ntfs,
 707,userdiff registry hive,Registry,Windows.old/Windows/System32/config/userdiff,lazy_ntfs,
 708,userdiff registry transaction files,Registry,Windows/System32/config/userdiff.LOG*,lazy_ntfs,
 709,userdiff registry transaction files,Registry,Windows.old/System32/config/userdiff.LOG*,lazy_ntfs,
 710,VSMIDK registry hive,Registry,Windows/System32/config/VSMIDK,lazy_ntfs,
 711,VSMIDK registry hive,Registry,Windows.old/Windows/System32/config/VSMIDK,lazy_ntfs,
 712,VSMIDK registry transaction files,Registry,Windows/System32/config/VSMIDK.LOG*,lazy_ntfs,
 713,VSMIDK registry transaction files,Registry,Windows.old/System32/config/VSMIDK.LOG*,lazy_ntfs,
 714,SAM registry transaction files,Registry,Windows/System32/config/SAM.LOG*,lazy_ntfs,
 715,SAM registry transaction files,Registry,Windows.old/Windows/System32/config/SAM.LOG*,lazy_ntfs,
 716,SECURITY registry transaction files,Registry,Windows/System32/config/SECURITY.LOG*,lazy_ntfs,
 717,SECURITY registry transaction files,Registry,Windows.old/Windows/System32/config/SECURITY.LOG*,lazy_ntfs,
 718,SOFTWARE registry transaction files,Registry,Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 719,SOFTWARE registry transaction files,Registry,Windows.old/Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 720,SYSTEM registry transaction files,Registry,Windows/System32/config/SYSTEM.LOG*,lazy_ntfs,
 721,SYSTEM registry transaction files,Registry,Windows.old/Windows/System32/config/SYSTEM.LOG*,lazy_ntfs,
 722,SAM registry hive,Registry,Windows/System32/config/SAM,lazy_ntfs,
 723,SAM registry hive,Registry,Windows.old/Windows/System32/config/SAM,lazy_ntfs,
 724,SECURITY registry hive,Registry,Windows/System32/config/SECURITY,lazy_ntfs,
 725,SECURITY registry hive,Registry,Windows.old/Windows/System32/config/SECURITY,lazy_ntfs,
 726,SOFTWARE registry hive,Registry,Windows/System32/config/SOFTWARE,lazy_ntfs,
 727,SOFTWARE registry hive,Registry,Windows.old/Windows/System32/config/SOFTWARE,lazy_ntfs,
 728,SYSTEM registry hive,Registry,Windows/System32/config/SYSTEM,lazy_ntfs,
 729,SYSTEM registry hive,Registry,Windows.old/Windows/System32/config/SYSTEM,lazy_ntfs,
 730,RegBack registry transaction files,Registry,Windows/System32/config/RegBack/*.LOG*,lazy_ntfs,
 731,RegBack registry transaction files,Registry,Windows.old/Windows/System32/config/RegBack/*.LOG*,lazy_ntfs,
 732,SAM registry hive (RegBack),Registry,Windows/System32/config/RegBack/SAM,lazy_ntfs,
 733,SAM registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SAM,lazy_ntfs,
 734,SECURITY registry hive (RegBack),Registry,Windows/System32/config/RegBack/SECURITY,lazy_ntfs,
 735,SECURITY registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SECURITY,lazy_ntfs,
 736,SOFTWARE registry hive (RegBack),Registry,Windows/System32/config/RegBack/SOFTWARE,lazy_ntfs,
 737,SOFTWARE registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SOFTWARE,lazy_ntfs,
 738,SYSTEM registry hive (RegBack),Registry,Windows/System32/config/RegBack/SYSTEM,lazy_ntfs,
 739,SYSTEM registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SYSTEM,lazy_ntfs,
 740,SYSTEM registry hive (RegBack),Registry,Windows/System32/config/RegBack/SYSTEM1,lazy_ntfs,
 741,SYSTEM registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SYSTEM1,lazy_ntfs,
 742,System Profile registry hive,Registry,Windows/System32/config/systemprofile/NTUSER.DAT,lazy_ntfs,
 743,System Profile registry hive,Registry,Windows.old/Windows/System32/config/systemprofile/NTUSER.DAT,lazy_ntfs,
 744,System Profile registry transaction files,Registry,Windows/System32/config/systemprofile/NTUSER.DAT.LOG*,lazy_ntfs,
 745,System Profile registry transaction files,Registry,Windows.old/Windows/System32/config/systemprofile/NTUSER.DAT.LOG*,lazy_ntfs,
 746,Local Service registry hive,Registry,Windows/ServiceProfiles/LocalService/NTUSER.DAT,lazy_ntfs,
 747,Local Service registry hive,Registry,Windows.old/Windows/ServiceProfiles/LocalService/NTUSER.DAT,lazy_ntfs,
 748,Local Service registry transaction files,Registry,Windows/ServiceProfiles/LocalService/NTUSER.DAT.LOG*,lazy_ntfs,
 749,Local Service registry transaction files,Registry,Windows.old/Windows/ServiceProfiles/LocalService/NTUSER.DAT.LOG*,lazy_ntfs,
 750,Network Service registry hive,Registry,Windows/ServiceProfiles/NetworkService/NTUSER.DAT,lazy_ntfs,
 751,Network Service registry hive,Registry,Windows.old/Windows/ServiceProfiles/NetworkService/NTUSER.DAT,lazy_ntfs,
 752,Network Service registry transaction files,Registry,Windows/ServiceProfiles/NetworkService/NTUSER.DAT.LOG*,lazy_ntfs,
 753,Network Service registry transaction files,Registry,Windows.old/Windows/ServiceProfiles/NetworkService/NTUSER.DAT.LOG*,lazy_ntfs,
 754,System Restore Points Registry Hives (XP),Registry,System Volume Information/_restore*/RP*/snapshot/_REGISTRY_*,lazy_ntfs,
 755,NTUSER.DAT registry hive XP,Registry,Documents and Settings/*/NTUSER.DAT,lazy_ntfs,
 756,NTUSER.DAT registry hive,Registry,Users/*/NTUSER.DAT,lazy_ntfs,
 757,NTUSER.DAT registry transaction files,Registry,Users/*/NTUSER.DAT.LOG*,lazy_ntfs,
 758,NTUSER.DAT DEFAULT registry hive,Registry,Windows/System32/config/DEFAULT,lazy_ntfs,
 759,NTUSER.DAT DEFAULT registry hive,Registry,Windows.old/Windows/System32/config/DEFAULT,lazy_ntfs,
 760,NTUSER.DAT DEFAULT transaction files,Registry,Windows/System32/config/DEFAULT.LOG*,lazy_ntfs,
 761,NTUSER.DAT DEFAULT transaction files,Registry,Windows.old/Windows/System32/config/DEFAULT.LOG*,lazy_ntfs,
 762,UsrClass.dat registry hive,Registry,Users/*/AppData/Local/Microsoft/Windows/UsrClass.dat,lazy_ntfs,
 763,UsrClass.dat registry transaction files,Registry,Users/*/AppData/Local/Microsoft/Windows/UsrClass.dat.LOG*,lazy_ntfs,
 764,RemoteUtilities Connection Logs,Remote Access,Program Files*/Remote Utilities - Host/Logs/rut_log_*.html,lazy_ntfs,Includes connection log files
 765,RemoteUtilities Install Log,Remote Access,ProgramData/Remote Utilities/install.log,lazy_ntfs,Includes Install log file
 766,NTUSER.DAT registry hive,Registry,**10/NTUSER.DAT,lazy_ntfs,
 767,NTUSER.DAT registry transaction files,Registry,**10/NTUSER.DAT.LOG*,lazy_ntfs,
 768,NTUSER.DAT DEFAULT registry hive,Registry,**10/DEFAULT,lazy_ntfs,
 769,NTUSER.DAT DEFAULT transaction files,Registry,**10/DEFAULT.LOG*,lazy_ntfs,
 770,UsrClass.dat registry hive,Registry,**10/UsrClass.dat,lazy_ntfs,
 771,UsrClass.dat registry transaction files,Registry,**10/UsrClass.dat.LOG*,lazy_ntfs,
 772,LNK Files,LNKFiles,**10/*.LNK,lazy_ntfs,
 773,Word Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Word/*,lazy_ntfs,
 774,Excel Autosave Location,ApplicationCompatibility,Users/*/AppData/Roaming/Microsoft/Excel/*,lazy_ntfs,
 775,PowerPoint Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/PowerPoint/*,lazy_ntfs,
 776,Publisher Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Publisher/*,lazy_ntfs,
 777,Publisher Autosave Location,FileKnowledge,Users/*/AppData/Roaming/Microsoft/Word/*,lazy_ntfs,
 778,Office Document Cache,FileKnowledge,Users/*/AppData/Local/Microsoft/Office/*/OfficeFileCache/*,lazy_ntfs,
 779,Office Document Cache,FileKnowledge,Users/*/AppData/Local/Microsoft/Office/*/OfficeFileCache/*,lazy_ntfs,
 780,Chrome bookmarks,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 781,Chrome bookmarks,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 782,Chrome Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/**10/Cookies*,lazy_ntfs,
 783,Chrome Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/**10/Cookies*,lazy_ntfs,
 784,Chrome Current Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 785,Chrome Current Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 786,Chrome Current Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 787,Chrome Current Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 788,Chrome Download Metadata,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Download Metadata,lazy_ntfs,
 789,Chrome Download Metadata,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Download Metadata,lazy_ntfs,
 790,Chrome Extension Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Extension Cookies,lazy_ntfs,
 791,Chrome Extension Cookies,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Extension Cookies,lazy_ntfs,
 792,Chrome Favicons,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 793,Chrome Favicons,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 794,Chrome History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/History*,lazy_ntfs,
 795,Chrome History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/History*,lazy_ntfs,
 796,Chrome Last Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 797,Chrome Last Session,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 798,Chrome Last Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 799,Chrome Last Tabs,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 800,Chrome Sessions Folder,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sessions/*,lazy_ntfs,
 801,Chrome Sessions Folder,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sessions/*,lazy_ntfs,
 802,Chrome Login Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 803,Chrome Login Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 804,Chrome Media History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Media History*,lazy_ntfs,
 805,Chrome Media History,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Media History*,lazy_ntfs,
 806,Chrome Network Action Predictor,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Action Predictor,lazy_ntfs,
 807,Chrome Network Action Predictor,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Action Predictor,lazy_ntfs,
 808,Chrome Network Persistent State,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Persistent State,lazy_ntfs,
 809,Chrome Network Persistent State,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Persistent State,lazy_ntfs,
 810,Chrome Preferences,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 811,Chrome Preferences,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 812,Chrome Quota Manager,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/QuotaManager,lazy_ntfs,
 813,Chrome Quota Manager,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/QuotaManager,lazy_ntfs,
 814,Chrome Reporting and NEL,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Reporting and NEL,lazy_ntfs,
 815,Chrome Reporting and NEL,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Reporting and NEL,lazy_ntfs,
 816,Chrome Shortcuts,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 817,Chrome Shortcuts,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 818,Chrome Top Sites,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 819,Chrome Top Sites,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 820,Chrome Trust Tokens,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Trust Tokens*,lazy_ntfs,
 821,Chrome Trust Tokens,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Trust Tokens*,lazy_ntfs,
 822,Chrome SyncData Database,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 823,Chrome SyncData Database,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 824,Chrome Visited Links,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 825,Chrome Visited Links,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 826,Chrome Web Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 827,Chrome Web Data,Communications,Users/*/AppData/Local/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 828,Windows Protect Folder,FileSystem,Users/*/AppData/Roaming/Microsoft/Protect/*/**10,lazy_ntfs,Required for offline decryption
 829,Windows Protect Folder,FileSystem,Users/*/AppData/Roaming/Microsoft/Protect/*/**10,lazy_ntfs,Required for offline decryption
 830,Edge folder,Communications,Users/*/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/**10,lazy_ntfs,
 831,Edge folder,Communications,Users/*/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/**10,lazy_ntfs,
 832,Amcache,ApplicationCompatibility,**10/Amcache.hve,lazy_ntfs,
 833,Amcache transaction files,ApplicationCompatibility,**10/Amcache.hve.LOG*,lazy_ntfs,
 834,LNK Files from Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Windows/Recent/**10,lazy_ntfs,
 835,LNK Files from Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Windows/Recent/**10,lazy_ntfs,
 836,LNK Files from Microsoft Office Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Office/Recent/**10,lazy_ntfs,
 837,LNK Files from Microsoft Office Recent,LNKFiles,Users/*/AppData/Roaming/Microsoft/Office/Recent/**10,lazy_ntfs,
 838,Desktop LNK Files,LNKFiles,**10/*.LNK,lazy_ntfs,
 839,Robo-FTP User Scripts,Apps,Program Files/Robo-FTP 3.12/UserData/*/Scripts/*.s,lazy_ntfs,Custom scripts created by each user
 840,Robo-FTP User Debug Logs,Apps,Program Files/Robo-FTP 3.12/UserData/*/Debug/*.log,lazy_ntfs,"Debug logs generated for each user, if enabled"
 841,Robo-FTP User Script/Trace Logs,Apps,Program Files/Robo-FTP 3.12/UserData/*/Logs/*,lazy_ntfs,Script and Trace logs generated for each user
 842,Robo-FTP User XML Config,Apps,Program Files/Robo-FTP 3.12/UserData/*/config.xml,lazy_ntfs,Config.xml unique to each user. Contains list of custom scripts and ftp sites
 843,Robo-FTP User SSH Keys,Apps,Program Files/Robo-FTP 3.12/UserData/*/SSH Keys/*,lazy_ntfs,Saved SSH keys for each user
 844,Robo-FTP User SSL Certificates,Apps,Program Files/Robo-FTP 3.12/UserData/*/SSL Certificates/*,lazy_ntfs,Saved SSL Certificates for each user
 845,Robo-FTP User PGP Keys,Apps,Program Files/Robo-FTP 3.12/UserData/*/PGP Keys/*,lazy_ntfs,Saved PGP Keys for each user
 846,Robo-FTP SSH Keys,Apps,Program Files/Robo-FTP 3.12/ProgramData/SSH Keys/*,lazy_ntfs,Shared SSH keys
 847,Robo-FTP SSL Certificates,Apps,Program Files/Robo-FTP 3.12/ProgramData/SSL Certificates/*,lazy_ntfs,Shared SSL Certificates
 848,Robo-FTP PGP Keys,Apps,Program Files/Robo-FTP 3.12/ProgramData/PGP Keys/*,lazy_ntfs,Shared PGP Keys
 849,Robo-FTP Debug Logs,Apps,Program Files/Robo-FTP 3.12/ProgramData/Debug/*,lazy_ntfs,Debug logs generated by Robo-FTP
 850,Robo-FTP Script/Trace Logs,Apps,Program Files/Robo-FTP 3.12/ProgramData/Logs/*,lazy_ntfs,Script and Trace logs generated by Robo-FTP
 851,Robo-FTP XML Config,Apps,Program Files/Robo-FTP 3.12/ProgramData/config.xml,lazy_ntfs,Config.xml. Contains list of custom scripts and ftp sites
 852,Robo-FTP Jobs,Apps,Program Files/Robo-FTP 3.12/ProgramData/SchedulerService.sqlite,lazy_ntfs,Contains details of scheduled jobs
 853,RogueKiller Reports,Antivirus,ProgramData/RogueKiller/logs/AdliceReport_*.json,lazy_ntfs,
 854,RustDesk logs,Communications,Users/*/AppData/Roaming/RustDesk/*,lazy_ntfs,Collects all log files related to RustDesk
 855,RustDesk logs,Communications,Windows/ServiceProfiles/LocalService/AppData/Roaming/RustDesk/log/server,lazy_ntfs,Collects all log files related to RustDesk
 856,Usenet Clients - SABnzbd Download Logs,FileDownload,Users/*/AppData/Local/sabnzbd/logs/sabnzbd.log,lazy_ntfs,Locates SABnzbd download log
 857,Usenet Clients - SABnzbd History.db,FileDownload,Users/*/AppData/Local/sabnzbd/admin/history1.db,lazy_ntfs,Locates SABnzbd history log
 858,SCCM Client Log Files,Logs,Windows/CCM/Logs,lazy_ntfs,
 859,SDB Files,Executables,Windows/apppatch/Custom/*.sdb,lazy_ntfs,
 860,SDB Files,Executables,Windows.old/Windows/apppatch/Custom/*.sdb,lazy_ntfs,
 861,SDB Files x64,Executables,Windows/apppatch/Custom/Custom64/*.sdb,lazy_ntfs,
 862,SDB Files x64,Executables,Windows.old/Windows/apppatch/Custom/Custom64/*.sdb,lazy_ntfs,
 863,4K Video Downloader,SQLDatabases,Users/*/AppData/Local/4kdownload.com/4K Video Downloader/4K Video Downloader/*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 864,Microsoft OneNote - FullTextSearchIndex,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/*/FullTextSearchIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's text content
 865,Microsoft OneNote - RecentNotebooks_SeenURLs,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/Notifications/RecentNotebooks_SeenURLs,lazy_ntfs,Grabs a file that appears to record recently seen OneNote notebooks
 866,Microsoft OneNote - AccessibilityCheckerIndex,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/AccessibilityCheckerIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's version sync error history
 867,Microsoft OneNote - User NoteTags,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/NoteTags/*LiveId.db,lazy_ntfs,Grabs a database that stores the user specified tags within OneNote to be used application-wide
 868,Microsoft OneNote - RecentSearches,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/LocalState/AppData/Local/OneNote/16.0/RecentSearches/RecentSearches.db,lazy_ntfs,Grabs a database that stores the user's recent searches within OneNote
 869,Microsoft Sticky Notes - 1607 and later,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.MicrosoftStickyNotes*/LocalState/plum.sqlite*,lazy_ntfs,
 870,Microsoft To Do - SQLite Database of To Do tasks,SQLDatabases,Users/*/AppData/Local/Packages/Microsoft.Todos_8wekyb3d8bbwe/LocalState/AccountsRoot/*/todosqlite.db*,lazy_ntfs,
 871,Robo-FTP Jobs,Apps,Program Files/Robo-FTP */ProgramData/SchedulerService.sqlite,lazy_ntfs,
 872,TeraCopy - History Databases,SQLDatabases,Users/*/AppData/Roaming/TeraCopy/History/*.db,lazy_ntfs,
 873,TeraCopy - Main Database,SQLDatabases,Users/*/AppData/Roaming/TeraCopy/main.db,lazy_ntfs,
 874,Notion Local Storage,App,Users/*/AppData/Roaming/Notion/notion.db,lazy_ntfs,
 875,IDrive Backed Up Files,App,ProgramData/IDrive/IBCOMMON/*/LDBNEW/*/*.idbs,lazy_ntfs,
 876,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/filecache.db*,lazy_ntfs,Getting individual files because folder may contain very large extraneous files
 877,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/config.dbx,lazy_ntfs,Getting individual files because folder may contain very large extraneous files
 878,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/home.db,lazy_ntfs,SQlite database which appears to keep track of the user's recent Dropbox activity
 879,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/icon.db,lazy_ntfs,SQLite database which appears to keep track of icons in the user's Drobox sync history which can give an indication as to which files and folders are present
 880,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/sync_history.db,lazy_ntfs,SQLite database which appears to keep track of the user's Drobox sync history
 881,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/sync/nucleus.sqlite3*,lazy_ntfs,SQLite database which appears to contain a table for deleted files
 882,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/host.db,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 883,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/host.dbx,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 884,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/sync/aggregation.dbx,lazy_ntfs,SQLite database which appears to contain snapshot table of the user's Dropbox contents in JSON with timestamps in UNIX Epoch
 885,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/avatarcache.db,lazy_ntfs,SQLite database which appears to contain the ID's of account(s) on the user's system where Dropbox is installed
 886,Dropbox Metadata,SQLDatabases,Users/*/AppData/Local/Dropbox/*/avatarcache.db,lazy_ntfs,SQLite database which appears to contain the ID's of account(s) on the user's system where Dropbox is installed
 887,Google File Stream Metadata,SQLDatabases,Users/*/AppData/Local/Google/Drive/*/cloud_graph/cloud_graph.db,lazy_ntfs,Windows_GoogleDrive_CloudGraphDB.smap
 888,Google File Stream Metadata,SQLDatabases,Users/*/AppData/Local/Google/Drive/*/TempData/*/change_buffer/**10,lazy_ntfs,DB(s) with seemingly randomized filename(s) that track file system changes within Google Drive
 889,Google File Stream Metadata,SQLDatabases,Users/*/AppData/Local/Google/Drive/*/snapshot.db,lazy_ntfs,Windows_GoogleDrive_SnapshotDB.smap
 890,Google File Stream Metadata,SQLDatabases,Users/*/AppData/Local/Google/Drive/*/sync_config.db,lazy_ntfs,Windows_GoogleDrive_SyncConfigDB.smap
 891,FileZilla SQLite3 Log Files,SQLDatabases,Users/*/AppData/Roaming/FileZilla/*.sqlite3*,lazy_ntfs,
 892,Chrome bookmarks XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 893,Chrome Cookies XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Cookies*,lazy_ntfs,
 894,Chrome Current Session XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 895,Chrome Current Tabs XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 896,Chrome Favicons XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 897,Chrome History XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/History*,lazy_ntfs,
 898,Chrome Last Session XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 899,Chrome Last Tabs XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 900,Chrome Login Data XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 901,Chrome Preferences XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 902,Chrome Shortcuts XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 903,Chrome Top Sites XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 904,Chrome Visited Links XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 905,Chrome Web Data XP,SQLDatabases,Documents and Settings/*/Local Settings/Application Data/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 906,Chrome bookmarks,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Bookmarks*,lazy_ntfs,
 907,Chrome Cookies,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Cookies*,lazy_ntfs,
 908,Chrome Current Session,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Session,lazy_ntfs,
 909,Chrome Current Tabs,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Current Tabs,lazy_ntfs,
 910,Chrome Download Metadata,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Download Metadata,lazy_ntfs,
 911,Chrome Extension Cookies,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Extension Cookies,lazy_ntfs,
 912,Chrome Favicons,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Favicons*,lazy_ntfs,
 913,Chrome History,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/History*,lazy_ntfs,
 914,Chrome Last Session,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Session,lazy_ntfs,
 915,Chrome Last Tabs,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Last Tabs,lazy_ntfs,
 916,Chrome Login Data,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Login Data,lazy_ntfs,
 917,Chrome Media History,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Media History*,lazy_ntfs,
 918,Chrome Network Action Predictor,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Action Predictor,lazy_ntfs,
 919,Chrome Network Persistent State,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Network Persistent State,lazy_ntfs,
 920,Chrome Preferences,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Preferences,lazy_ntfs,
 921,Chrome Quota Manager,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/QuotaManager,lazy_ntfs,
 922,Chrome Reporting and NEL,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Reporting and NEL,lazy_ntfs,
 923,Chrome Shortcuts,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Shortcuts*,lazy_ntfs,
 924,Chrome Top Sites,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Top Sites*,lazy_ntfs,
 925,Chrome Trust Tokens,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Trust Tokens*,lazy_ntfs,
 926,Chrome SyncData Database,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 927,Chrome Visited Links,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Visited Links,lazy_ntfs,
 928,Chrome Web Data,SQLDatabases,Users/*/AppData/Local/Google/Chrome/User Data/*/Web Data*,lazy_ntfs,
 929,Edge bookmarks,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Bookmarks*,lazy_ntfs,
 930,Edge Collections,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Collections/collectionsSQLite,lazy_ntfs,
 931,Edge Cookies,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Cookies*,lazy_ntfs,
 932,Edge Current Session,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Current Session,lazy_ntfs,
 933,Edge Current Tabs,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Current Tabs,lazy_ntfs,
 934,Edge Favicons,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Favicons*,lazy_ntfs,
 935,Edge History,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/History*,lazy_ntfs,
 936,Edge Last Session,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Last Session,lazy_ntfs,
 937,Edge Last Tabs,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Last Tabs,lazy_ntfs,
 938,Edge Login Data,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Login Data,lazy_ntfs,
 939,Edge Media History,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Media History*,lazy_ntfs,
 940,Edge Network Action Predictor,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Network Action Predictor,lazy_ntfs,
 941,Edge Preferences,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Preferences,lazy_ntfs,
 942,Edge Shortcuts,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Shortcuts*,lazy_ntfs,
 943,Edge Top Sites,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Top Sites*,lazy_ntfs,
 944,Edge SyncData Database,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Sync Data/SyncData.sqlite3,lazy_ntfs,
 945,Edge Bookmarks,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Bookmarks*,lazy_ntfs,
 946,Edge Visited Links,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Visited Links,lazy_ntfs,
 947,Edge Web Data,SQLDatabases,Users/*/AppData/Local/Microsoft/Edge/User Data/*/Web Data*,lazy_ntfs,
 948,Addons,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/addons.sqlite*,lazy_ntfs,
 949,Bookmarks,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/weave/bookmarks.sqlite*,lazy_ntfs,
 950,Cookies,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/cookies.sqlite*,lazy_ntfs,
 951,Cookies,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/firefox_cookies.sqlite*,lazy_ntfs,
 952,Downloads,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/downloads.sqlite*,lazy_ntfs,
 953,Favicons,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/favicons.sqlite*,lazy_ntfs,
 954,Form history,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/formhistory.sqlite*,lazy_ntfs,
 955,Permissions,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/permissions.sqlite*,lazy_ntfs,
 956,Places,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/places.sqlite*,lazy_ntfs,
 957,Protections,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/protections.sqlite*,lazy_ntfs,
 958,Search,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/search.sqlite*,lazy_ntfs,
 959,Signons,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/signons.sqlite*,lazy_ntfs,
 960,Storage Sync,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/storage-sync.sqlite*,lazy_ntfs,
 961,Webappstore,SQLDatabases,Users/*/AppData/Roaming/Mozilla/Firefox/Profiles/*/webappstore.sqlite*,lazy_ntfs,
 962,Windows 10 Notification DB,SQLDatabases,Users/*/AppData/Local/Microsoft/Windows/Notifications/wpndatabase.db,lazy_ntfs,
 963,Windows 10 Notification DB,SQLDatabases,Users/*/AppData/Local/Microsoft/Windows/Notifications/appdb.dat,lazy_ntfs,
 964,ActivitiesCache.db,SQLDatabases,Users/*/AppData/Local/ConnectedDevicesPlatform/*/ActivitiesCache.db*,lazy_ntfs,
 965,Update Store.db,OS Upgrade,ProgramData/USOPrivate/UpdateStore/store.db,lazy_ntfs,
 966,Bitdefender SQLite DB Files,Antivirus,Program Files*/Bitdefender*/**10/regex:*.+/.(db|db-wal|db-shm),ntfs,Bitdefender SQLite databases
 967,EventTranscript.db,SystemEvents,ProgramData/Microsoft/Diagnosis/EventTranscript/EventTranscript.db*,lazy_ntfs,
 968,EventTranscript.db,SystemEvents,Windows.old/ProgramData/Microsoft/Diagnosis/EventTranscript/EventTranscript.db*,lazy_ntfs,
 969,SRUM,Execution,Windows/System32/SRU/**10,lazy_ntfs,
 970,SRUM,Execution,Windows.old/Windows/System32/SRU/**10,lazy_ntfs,
 971,SOFTWARE registry hive,Registry,Windows/System32/config/SOFTWARE,lazy_ntfs,
 972,SOFTWARE registry hive,Registry,Windows.old/Windows/System32/config/SOFTWARE,lazy_ntfs,
 973,SOFTWARE registry transaction files,Registry,Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 974,SOFTWARE registry transaction files,Registry,Windows.old/Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 975,SUM Database (.mdb files),Logs,Windows/System32/LogFiles/SUM/*.mdb,lazy_ntfs,"Grabs Current.mdb, SystemIdentity.mdb, and [GUID].mdb"
 976,SUPERAntiSpyware Logs,Antivirus,Users/*/AppData/Roaming/SUPERAntiSpyware/Logs/**10,lazy_ntfs,
 977,SUSE Linux Enterprise Server WSL /etc/os-release,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/os-release,lazy_ntfs,
 978,SUSE Linux Enterprise Server WSL /etc/fstab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/fstab,lazy_ntfs,
 979,SUSE Linux Enterprise Server WSL /etc/passwd,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/passwd,lazy_ntfs,
 980,SUSE Linux Enterprise Server WSL /etc/group,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/group,lazy_ntfs,
 981,SUSE Linux Enterprise Server WSL /etc/shadow,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/shadow,lazy_ntfs,
 982,SUSE Linux Enterprise Server WSL /etc/timezone,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/timezone,lazy_ntfs,
 983,SUSE Linux Enterprise Server WSL /etc/hostname,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/hostname,lazy_ntfs,
 984,SUSE Linux Enterprise Server WSL /etc/hosts,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/hosts,lazy_ntfs,
 985,SUSE Linux Enterprise Server WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/bash.bashrc,lazy_ntfs,
 986,SUSE Linux Enterprise Server WSL /etc/profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/etc/profile,lazy_ntfs,
 987,SUSE Linux Enterprise Server WSL .bash_history,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/**10/.bash_history,lazy_ntfs,
 988,SUSE Linux Enterprise Server WSL .bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/**10/.bashrc,lazy_ntfs,
 989,SUSE Linux Enterprise Server WSL .profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/rootfs/**10/.profile,lazy_ntfs,
 990,SUSE Linux Enterprise Server WSL ext4.vhdx,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.SUSELinuxEnterpriseServer*/LocalState/ext4.vhdx,lazy_ntfs,
 991,at .job,Persistence,Windows/Tasks/*.job,lazy_ntfs,
 992,at .job,Persistence,Windows.old/Windows/Tasks/*.job,lazy_ntfs,
 993,at SchedLgU.txt,Persistence,Windows/SchedLgU.txt,lazy_ntfs,
 994,at SchedLgU.txt,Persistence,Windows.old/Windows/SchedLgU.txt,lazy_ntfs,
 995,XML,Persistence,Windows/System32/Tasks/**10,lazy_ntfs,
 996,XML,Persistence,Windows/syswow64/Tasks/**10,lazy_ntfs,
 997,XML,Persistence,Windows.old/Windows/System32/Tasks/**10,lazy_ntfs,
 998,ScreenConnect Session Database,ApplicationLogs,Program Files*/ScreenConnect/App_Data/Session.db,lazy_ntfs,SQLite database with session information
 999,ScreenConnect Session Database,ApplicationLogs,Program Files*/ScreenConnect/App_Data/User.xml,lazy_ntfs,Contains each user's last authenticated time
 1000,ScreenConnect User Config,ApplicationLogs,ProgramData/ScreenConnect Client*/user.config,lazy_ntfs,Contains server domain and IP info
 1001,SecureAge Antvirus Logs,Antivirus,ProgramData/SecureAge Technology/SecureAge/log/**10,lazy_ntfs,
 1002,SentinelOne EDR Log,Antivirus,programdata/sentinel/logs/**10,lazy_ntfs,Logs are in Binary Format (.binlog)
 1003,ShareX,Apps,Users/*/Documents/ShareX/**10,lazy_ntfs,Locates and captures all files within the default ShareX folder path
 1004,Shareaza Logs,FileDownload,Users/*/AppData/Roaming/Shareaza/**10,lazy_ntfs,Locates Shareaza logs and copies them.
 1005,Siemens TIA Settings,ICS,Users/*/AppData/Roaming/Siemens/Automation/Portal*/Settings/**10,lazy_ntfs,
 1006,Signal Attachments cache,Communications,Users/*/AppData/Roaming/Signal/attachments.noindex/**10,lazy_ntfs,Profile pictures (and possibly attachments) for users who this individual has as contacts or has communicated with
 1007,Signal Logs,Communications,Users/*/AppData/Roaming/Signal/logs/**10,lazy_ntfs,"Logs for Signal. Most recent has the extension .log while old ones will have extension .log.0, .log.1 etc."
 1008,Signal config.json,Communications,Users/*/AppData/Roaming/Signal/config.json,lazy_ntfs,config.json holds the db.sqlite SQLCipher raw key
 1009,Signal Database,Communications,Users/*/AppData/Roaming/Signal/sql/db.sqlite,lazy_ntfs,"Stores attachment details, conversations, messages, and more"
 1010,SignatureCatalog,FileMetadata,Windows/System32/CatRoot/**10,lazy_ntfs,
 1011,SignatureCatalog,FileMetadata,Windows.old/Windows/System32/CatRoot/**10,lazy_ntfs,
 1012,main.db (App &amp;lt;v12),Communications,Users/*/AppData/Local/Packages/Microsoft.SkypeApp_*/LocalState/*/main.db,lazy_ntfs,
 1013,skype.db (App +v12),Communications,Users/*/AppData/Local/Packages/Microsoft.SkypeApp_*/LocalState/*/skype.db,lazy_ntfs,
 1014,main.db XP,Communications,Documents and Settings/*/Application Data/Skype/*/main.db,lazy_ntfs,
 1015,main.db Win7+,Communications,Users/*/AppData/Roaming/Skype/*/main.db,lazy_ntfs,
 1016,s4l-[username].db (App +v8),Communications,Users/*/AppData/Local/Packages/Microsoft.SkypeApp_*/LocalState/s4l-*.db,lazy_ntfs,
 1017,leveldb (Skype for Desktop +v8),Communications,Users/*/AppData/Roaming/Microsoft/Skype for Desktop/IndexedDB/*.leveldb/**10,lazy_ntfs,
 1018,Skype for Destkop v8+ Chromium Cache,Communications,Users/*/AppData/Roaming/Microsoft/Skype for Desktop/Cache/**10,lazy_ntfs,Can be viewed with Nirsoft's ChromeCacheView
 1019,Slack - Chat Logs,Apps,Users/*/AppData/Roaming/Slack/IndexedDB/**10,lazy_ntfs,Locates Slack logs and copies them
 1020,Slack LevelDB Files,Apps,Users/*/AppData/Roaming/Slack/Local Storage/leveldb/**10,lazy_ntfs,
 1021,Slack Electron Logs,Apps,Users/*/AppData/Roaming/Slack/logs/**10,lazy_ntfs,Current Slack application is based on Electron and additional logging can be found here.
 1022,Slack Cache,Apps,Users/*/AppData/Roaming/Slack/Cache/**10,lazy_ntfs,Collects Slack cache files. This folder can be parsed like a Chrome Browser cache using a tool like Nirsoft ChromeCacheView
 1023,Slack Storage,Apps,Users/*/AppData/Roaming/Slack/storage/**10,lazy_ntfs,User activity logs can be present including slack-downloads log
 1024,Snagit - Captures,Apps,Users/*/AppData/Local/TechSmith/Snagit/DataStore,lazy_ntfs,Locates all Snagit captures
 1025,Snip &amp;amp; Sketch,FileKnowledge,Users/*/AppData/Local/Packages/Microsoft.ScreenSketch_8wekyb3d8bbwe/TempState/*.png,lazy_ntfs,Pulls all temporary .png images generated by the Snip &amp;amp; Sketch screen capture tool built into Windows
 1026,Sophos Logs (XP),Antivirus,Documents and Settings/All Users/Application Data/Sophos/Sophos */Logs/**10,lazy_ntfs,"Includes Anti-Virus, Client Firewall, Data Control, Device Control, Endpoint Defense, Network Threat Detection, Management Communications System, Patch Control, Tamper Protection"
 1027,Sophos Logs,Antivirus,ProgramData/Sophos/Sophos */Logs/**10,lazy_ntfs,"Includes Anti-Virus, Client Firewall, Data Control, Device Control, Endpoint Defense, Network Threat Detection, Management Communications System, Patch Control, Tamper Protection"
 1028,Soulseek Chat Logs,FileDownload,Users/*/AppData/Local/SoulseekQt/Soulseek Chat Logs/**10,lazy_ntfs,Locates Soulseek chat logs and copies them. Chat logs are in plaintext. Current as of version 2019.7.22.
 1029,Soulseek Search History/Shared Folders/Settings,FileDownload,Users/*/AppData/Local/SoulseekQt/1/*.dat,lazy_ntfs,"Locates .dat file(s) containing: search history, active searches (search_record), current shared folders (shared_file_folder), and wish list items (wish_list_item)."
 1030,SpeedCommander - .ini File,Apps,Users/*/AppData/Roaming/SpeedProject/SpeedCommander 19/*,lazy_ntfs,Locates folder where all configuration files reside
 1031,Splashtop Log Files,Software,Program Files*/Splashtop/Splashtop Remote/Server/log/**10,lazy_ntfs,Collects logs for Splashtop
 1032,Splashtop Log Files in ProgramData,Software,ProgramData/Splashtop/Temp/log/**10,lazy_ntfs,Collects logs for Splashtop
 1033,User startup folders,Persistence,Users/*/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup,lazy_ntfs,
 1034,System-wide startup folder,Persistence,ProgramData/Microsoft/Windows/Start Menu/Programs/StartUp,lazy_ntfs,
 1035,StartupInfo XML Files,Persistence,Windows/System32/WDI/LogFiles/StartupInfo/*.xml,lazy_ntfs,
 1036,StartupInfo XML Files,Persistence,Windows.old/Windows/System32/WDI/LogFiles/StartupInfo/*.xml,lazy_ntfs,
 1037,Steam Game Image files,Apps,Program Files/Steam/appcache/librarycache/**10,lazy_ntfs,Locates the directory containing image resources of installed/uninstalled games.
 1038,Steam Login Metadata file,Apps,Program Files/Steam/config/**10/loginusers.vdf,lazy_ntfs,Locates file containing Steam username and persona name.
 1039,Steam Friend List and Username History file,Apps,Program Files/Steam/userdata/*/config/**10/localconfig.vdf,lazy_ntfs,Locates file containing Steam Friend List and Username History.
 1040,Steam User Avatar files,Apps,Program Files/Steam/config/avatarcache/**10,lazy_ntfs,Locates the directory containing avatar cache.
 1041,Steam Game Tray Icon files,Apps,Program Files/Steam/steam/games/**10,lazy_ntfs,Locates the directory containing game icons appearing from tray menu.
 1042,Steam Startup Times Log file,Apps,Program Files/Steam/logs/**10/bootstrap_log.txt,lazy_ntfs,Locates the directory containing log for Steam startup times.
 1043,Steam Game Image files,Apps,Program Files (x86)/Steam/appcache/librarycache/**10,lazy_ntfs,Locates the directory containing image resources of installed/uninstalled games.
 1044,Steam Login Metadata file,Apps,Program Files (x86)/Steam/config/**10/loginusers.vdf,lazy_ntfs,Locates file containing Steam username and persona name.
 1045,Steam Friend List and Username History file,Apps,Program Files (x86)/Steam/userdata/*/config/**10/localconfig.vdf,lazy_ntfs,Locates file containing Steam Friend List and Username History.
 1046,Steam User Avatar files,Apps,Program Files (x86)/Steam/config/avatarcache/**10,lazy_ntfs,Locates the directory containing avatar cache.
 1047,Steam Game Tray Icon files,Apps,Program Files (x86)/Steam/steam/games/**10,lazy_ntfs,Locates the directory containing game icons appearing from tray menu.
 1048,Steam Startup Times Log file,Apps,Program Files (x86)/Steam/logs/**10/bootstrap_log.txt,lazy_ntfs,Locates the directory containing log for Steam startup times.
 1049,SublimeText 2/3 Auto Save Session,Text Editor,Users/*/AppData/Roaming/Sublime Text*/Settings/Session.sublime_session,lazy_ntfs,Sublime Text 2/3 stores unsaved (temporary) files and its content in its Session.sublime_session file
 1050,SublimeText 4 Auto Save Session,Text Editor,Users/*/AppData/Roaming/Sublime Text*/Local/*.sublime_session,lazy_ntfs,Sublime Text 4 stores unsaved (temporary) files and its content in its .sublime_session files
 1051,SugarSync Log File,Apps,Users/*/AppData/Local/SugarSync/sc1.log,lazy_ntfs,Locates a log file the gives a play-by-play of what the user synced when.
 1052,SugarSync - Shared Folders (Default Location),Apps,Users/*/Documents/SugarSync Shared Folders/**10,lazy_ntfs,
 1053,SugarSync - My SugarSync (Default Location),Apps,Users/*/Documents/My SugarSync/**10,lazy_ntfs,
 1054,SumatraPDF Settings - SessionData,FileKnowledge,Users/*/AppData/Local/SumatraPDF/SumatraPDF-settings.txt,lazy_ntfs,Settings file which contains information about previous user session
 1055,SumatraPDF Cache,FileKnowledge,Users/*/AppData/Local/SumatraPDF/sumatrapdfcache,lazy_ntfs,Folder contains a PNG snapshot of each PDF file the user had open at the time of last application close
 1056,Supremo Connection Logs,Communications,ProgramData/SupremoRemoteDesktop/Log/*.log,lazy_ntfs,Includes Supremo.00.Client.log and Supremo.00.Incoming.log
 1057,Supremo File Transfer Inbox,Communications,ProgramData/SupremoRemoteDesktop/Inbox,lazy_ntfs,Includes all files transferred to the inbox folder during a remote session
 1058,Symantec Endpoint Protection Logs (XP),Antivirus,Documents and Settings/All Users/Application Data/Symantec/Symantec Endpoint Protection/Logs/AV/**10,lazy_ntfs,
 1059,Symantec Endpoint Protection Logs,Antivirus,ProgramData/Symantec/Symantec Endpoint Protection/*/Data/Logs/**10,lazy_ntfs,
 1060,Symantec Endpoint Protection User Logs,Antivirus,Users/*/AppData/Local/Symantec/Symantec Endpoint Protection/Logs/**10,lazy_ntfs,
 1061,Symantec Event Log Win7+,EventLogs,Windows/System32/winevt/logs/Symantec Endpoint Protection Client.evtx,lazy_ntfs,Symantec specific Windows event log
 1062,Symantec Event Log Win7+,EventLogs,Windows.old/Windows/System32/winevt/logs/Symantec Endpoint Protection Client.evtx,lazy_ntfs,Symantec specific Windows event log
 1063,Symantec Endpoint Protection Quarantine (XP),Antivirus,Documents and Settings/All Users/Application Data/Symantec/Symantec Endpoint Protection/Quarantine/**10,lazy_ntfs,
 1064,Symantec Endpoint Protection Quarantine,Antivirus,ProgramData/Symantec/Symantec Endpoint Protection/*/Data/Quarantine/**10,lazy_ntfs,
 1065,ccSubSDK Database,Antivirus,ProgramData/Symantec/Symantec Endpoint Protection/*/Data/CmnClnt/ccSubSDK/**10,lazy_ntfs,
 1066,registrationInfo.xml,Antivirus,ProgramData/Symantec/Symantec Endpoint Protection/*/Data/registrationInfo.xml,lazy_ntfs,
 1067,Syscache,Program Execution,System Volume Information/Syscache.hve,lazy_ntfs,
 1068,Syscache transaction files,Program Execution,System Volume Information/Syscache.hve.LOG*,lazy_ntfs,
 1069,Tablacus Explorer - remember.xml,Logs,Users/*/AppData/Local/Temp/*/config/**10/remember.xml,lazy_ntfs,
 1070,Tablacus Explorer - window.xml,Logs,Users/*/AppData/Local/Temp/*/config/**10/window.xml,lazy_ntfs,
 1071,Tablacus Explorer - window1.xml,Logs,Users/*/AppData/Local/Temp/*/config/**10/window1.xml,lazy_ntfs,
 1072,TeamViewer Connection Logs,Communications,Program Files*/TeamViewer/connections*.txt,lazy_ntfs,Includes connections_incoming.txt and connections.txt
 1073,TeamViewer Application Logs,ApplicationLogs,Program Files*/TeamViewer/TeamViewer*_Logfile*,lazy_ntfs,Includes TeamViewer&amp;lt;version&amp;gt;_Logfile.log and TeamViewer&amp;lt;version&amp;gt;_Logfile_OLD.log
 1074,TeamViewer Application User Logs,ApplicationLogs,Users/*/AppData/Roaming/TeamViewer/TeamViewer*_Logfile*,lazy_ntfs,Alternate location for TeamViewer&amp;lt;version&amp;gt;_Logfile.log
 1075,TeamViewer Configuration Files,ApplicationLogs,Users/*/AppData/Roaming/TeamViewer/MRU/RemoteSupport/**10,lazy_ntfs,Includes miscellaneous config files
 1076,Telegram app folder,Apps,Users/*/AppData/Roaming/Telegram Desktop/**10,lazy_ntfs,Telegram app folder structure
 1077,Telegram downloaded files,Apps,Users/*/Downloads/Telegram Desktop/**10,lazy_ntfs,Chat Attachments
 1078,TeraCopy,TeraCopy,Users/*/AppData/Roaming/TeraCopy/**10,lazy_ntfs,
 1079,Thumbcache DB,FileKnowledge,Users/*/AppData/Local/Microsoft/Windows/Explorer/thumbcache_*.db,lazy_ntfs,
 1080,Mozilla Thunderbird Install Date,Apps,Users/*/AppData/Roaming/Thunderbird/Crash Reports/InstallTime*,lazy_ntfs,Holds install time in Unix Seconds timestamp
 1081,Mozilla Thunderbird Profiles.ini,Apps,Users/*/AppData/Roaming/Thunderbird/profiles.ini,lazy_ntfs,Profiles list - can hold references to other profiles held elsewhere on the device
 1082,Mozilla Thunderbird prefs.js,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/prefs.js,lazy_ntfs,User Preferences for that profile
 1083,Mozilla Thunderbird Global Messages Database,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/global-messages-db.sqlite,lazy_ntfs,"Holds list of contacts, emails, and other potentially useful artifacts"
 1084,Mozilla Thunderbird logins.json,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/logins.json,lazy_ntfs,"Holds last time online login used, last time password changed, hostname, HTTP(s) URL and more"
 1085,Mozilla Thunderbird places.sqlite,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/places.sqlite,lazy_ntfs,"Holds history for Thunderbird - as it contains portions of Firefox embedded, it can be used to visit websites too"
 1086,Mozilla Thunderbird ImapMail INBOX,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/ImapMail/**10/INBOX,lazy_ntfs,"Holds all email files with headers, content etc"
 1087,Mozilla Thunderbird Mail INBOX,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/Mail/**10/INBOX,lazy_ntfs,"Holds all email files with headers, content etc"
 1088,Mozilla Thunderbird Calendar Data,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/calendar-data/local.sqlite,lazy_ntfs,Holds local calendar data
 1089,Mozilla Thunderbird Attachments,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/Attachments/*,lazy_ntfs,Holds attachments
 1090,Mozilla Thunderbird Address Book,Apps,Users/*/AppData/Roaming/Thunderbird/Profiles/*/abook.sqlite,lazy_ntfs,Holds local address book
 1091,Torrents,FileDownload,**10/*.torrent,lazy_ntfs,
 1092,TotalAV Logs,Antivirus,Program Files*/TotalAV/logs/**10,lazy_ntfs,
 1093,TotalAV Logs,Antivirus,ProgramData/TotalAV/logs/**10,lazy_ntfs,
 1094,Total Commander - .ini File,Apps,Users/*/AppData/Roaming/GHISLER/wincmd.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful user activity information.
 1095,Total Commander - Log File,Apps,**10/totalcmd.log,lazy_ntfs,Locates log file associated with Total Commander. NOTE: this log file is NOT enabled by default and the filename can be modified.
 1096,Total Commander - Temp Files Created During Folder Traversal,Apps,Users/*/AppData/Local/Temp/FTP*.tmp,lazy_ntfs,Locates .tmp files which are created during the user's folder traversal and provide insight into contents of each folder traversed.
 1097,Total Commander - FTP .ini File,Apps,Users/*/AppData/Roaming/GHISLER/wcx_ftp.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful FTP information.
 1098,Total Commander - File Tree,Apps,Users/*/AppData/Local/GHISLER/treeinfo*.wc,lazy_ntfs,Locates a file that contains an exhaustive file tree of a user's file system.
 1099,Total Commander - Frequent Directory Listing,Apps,Users/*/AppData/Local/GHISLER/tcDirFrq.txt,lazy_ntfs,Locates a file that contains a frequently accessed folder listing.
 1100,Total Commander - FTP Logs,Apps,Users/*/AppData/Local/Temp/tcftp.log,lazy_ntfs,Locates a file that contains the Total Commander FTP logs.
 1101,TreeSize - ScanHistory.XML,Apps,Users/*/AppData/Roaming/JAM Software/TreeSize/scanhistory.xml,lazy_ntfs,Locates XML file that provides a list of previously scanned directories by the user.
 1102,Trend Micro Logs,Antivirus,ProgramData/Trend Micro/**10,lazy_ntfs,
 1103,Trend Micro Security Agent Report Logs,Antivirus,Program Files*/Trend Micro/Security Agent/Report/*.log,lazy_ntfs,
 1104,Trend Micro Security Agent Connection Logs,Antivirus,Program Files*/Trend Micro/Security Agent/ConnLog/*.log,lazy_ntfs,
 1105,Setupapi.log XP,USBDevices,Windows/setupapi.log,lazy_ntfs,
 1106,Setupapi.log Win7+,USBDevices,Windows/inf/setupapi.*.log,lazy_ntfs,
 1107,Setupapi.log Win7+,USBDevices,Windows.old/Windows/inf/setupapi.*.log,lazy_ntfs,
 1108,Ubuntu WSL /etc/os-release,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/os-release,lazy_ntfs,
 1109,Ubuntu WSL /etc/fstab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/fstab,lazy_ntfs,
 1110,Ubuntu WSL /etc/passwd,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/passwd,lazy_ntfs,
 1111,Ubuntu WSL /etc/group,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/group,lazy_ntfs,
 1112,Ubuntu WSL /etc/shadow,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/shadow,lazy_ntfs,
 1113,Ubuntu WSL /etc/timezone,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/timezone,lazy_ntfs,
 1114,Ubuntu WSL /etc/hostname,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/hostname,lazy_ntfs,
 1115,Ubuntu WSL /etc/hosts,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/hosts,lazy_ntfs,
 1116,Ubuntu WSL /etc/crontab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/crontab,lazy_ntfs,
 1117,Ubuntu WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/bash.bashrc,lazy_ntfs,
 1118,Ubuntu WSL /etc/profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/etc/profile,lazy_ntfs,
 1119,Ubuntu WSL .bash_history,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/**10/.bash_history,lazy_ntfs,
 1120,Ubuntu WSL .bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/**10/.bashrc,lazy_ntfs,
 1121,Ubuntu WSL .profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/**10/.profile,lazy_ntfs,
 1122,Ubuntu WSL User Crontabs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/var/spool/cron/crontabs/**10,lazy_ntfs,
 1123,Ubuntu WSL Apt Logs,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/rootfs/var/log/apt/**10/*.log,lazy_ntfs,
 1124,Ubuntu WSL ext4.vhdx,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/CanonicalGroupLimited.Ubuntu*/LocalState/ext4.vhdx,lazy_ntfs,
 1125,UltraViewer User Logs,Remote Access,Users/*/AppData/Roaming/UltraViewer/**10,lazy_ntfs,"Includes all files related to UltraViewer chat, connections, and recordings"
 1126,UltraViewer System Logs,Remote Access,Windows/SysWOW64/config/systemprofile/AppData/Roaming/UltraViewer/**10,lazy_ntfs,"Includes all files related to UltraViewer chat, connections, and recordings"
 1127,UltraViewer Service Log,Remote Access,Program Files*/UltraViewer/UltraViewerService_log.txt,lazy_ntfs,UltraViewer Service log file
 1128,UltraViewer Connection Log,Remote Access,Program Files*/UltraViewer/ConnectionLog.Log,lazy_ntfs,UltraViewer Service level connection log
 1129,Usenet (NZB) Files,FileDownload,**10/*.nzb,lazy_ntfs,
 1130,VIPRE Business Agent Logs,Antivirus,ProgramData/VIPRE Business Agent/Logs/**10,lazy_ntfs,
 1131,VIPRE Business User Logs (v7+),Antivirus,Users/*/AppData/Roaming/VIPRE Business/**10,lazy_ntfs,
 1132,VIPRE Business User Logs (v5-v6),Antivirus,Users/*/AppData/Roaming/GFI Software/AntiMalware/Logs/**10,lazy_ntfs,
 1133,VIPRE Business User Logs (up to v4),Antivirus,Users/*/AppData/Roaming/Sunbelt Software/AntiMalware/Logs/**10,lazy_ntfs,
 1134,VLC Recently Opened Files,Apps,Users/*/AppData/Roaming/vlc/vlc-qt-interface.ini,lazy_ntfs,Configuration file for VLC. Holds [RecentsMRL] key which lists recently opened files as well as sometimes retaining timestamps for file opening
 1135,VLC Recorded Files,Apps,Users/*/Videos/vlc-*.avi,lazy_ntfs,"Recorded files in VLC. Sometimes the Record button may be pressed instead of Play by suspects, which can record them watching content with VLC"
 1136,VMware - Virtual Machine Inventory,Apps,Users/*/AppData/Roaming/VMware,lazy_ntfs,Locates an inventory of all Virtual Machines on disk.
 1137,VMware (Fusion/Workstation/Server/Player),Memory,**10/*.vmem,lazy_ntfs,Captures all raw memory from VMware virtual machines.
 1138,VMware (Fusion/Workstation/Server/Player),Memory,**10/*.vmss,lazy_ntfs,Captures all memory images from VMware virtual machines.
 1139,VMware (Fusion/Workstation/Server/Player),Memory,**10/*.vmsn,lazy_ntfs,Captures all memory images from VMware virtual machines.
 1140,RealVNC Log,ApplicationLogs,Users/*/AppData/Local/RealVNC/vncserver.log,lazy_ntfs,https://www.realvnc.com/en/connect/docs/logging.html#logging
 1141,RealVNC Log,ApplicationLogs,ProgramData/RealVNC-Service/vncserver.log,lazy_ntfs,https://help.realvnc.com/hc/en-us/articles/360002254238-All-About-Logging-
 1142,TightVNC Application Logs,ApplicationLogs,ProgramData/TightVNC/Server/Logs,lazy_ntfs,https://ro.ecu.edu.au/cgi/viewcontent.cgi?article=1160&amp;amp;context=adf
 1143,Viber Config Database,Apps,Users/*/AppData/Roaming/ViberPC/config.db,lazy_ntfs,Configuration file for Viber
 1144,Viber Users Data Database,Apps,Users/*/AppData/Roaming/ViberPC/*/viber.db,lazy_ntfs,"Viber data for that user, containing Calls, Chat Messages, Contacts and more"
 1145,Viber Users Avatars Cache,Apps,Users/*/AppData/Roaming/ViberPC/*/Avatars,lazy_ntfs,Cache of the Avatars for other Viber users
 1146,Viber Users Backgrounds Cache,Apps,Users/*/AppData/Roaming/ViberPC/*/Backgrounds,lazy_ntfs,Store of the backgrounds
 1147,Viber Users Thumbnails Cache,Apps,Users/*/AppData/Roaming/ViberPC/*/Thumbnails,lazy_ntfs,Cache of the thumbnails for uploaded/downloaded images
 1148,VirtualBox VM configs,Apps,**10/*.vbox,lazy_ntfs,Locates all .vbox VM configuration files on disk
 1149,VirtualBox VM backup configs,Apps,**10/*.vbox-prev,lazy_ntfs,Locates all backup .vbox VM configuration files on disk
 1150,VirtualBox Logs,Apps,**10/VBox.log,lazy_ntfs,Locates all VBox.log files on disk
 1151,VirtualBox Backup Logs,Apps,**10/VBox.log.*,lazy_ntfs,Locates all backup VBox.log files on disk - these can show historic VM usage
 1152,VirtualBox Hardening Logs,Apps,**10/VBoxHardening.log,lazy_ntfs,Locates all VBoxHardening.log files on disk
 1153,VirtualBox,Memory,**10/*.sav,lazy_ntfs,Captures all partial memory images from VirtualBox.
 1154,VHD,Disk Images,**10/*.VHD,lazy_ntfs,
 1155,VHDX,Disk Images,**10/*.VHDX,lazy_ntfs,
 1156,VDI,Disk Images,**10/*.VDI,lazy_ntfs,
 1157,VMDK,Disk Images,**10/*.VMDK,lazy_ntfs,
 1158,VSCode Opened Files,Apps,Users/*/AppData/Roaming/Code/User/History/*/**10,lazy_ntfs,Grabs the files in the VSCode history. These are files the user has opened with VSCode
 1159,VSCode Workspaces,Apps,Users/*/AppData/Roaming/Code/User/globalStorage/storage.json*,lazy_ntfs,Grabs the file containing information about the users workspaces
 1160,VSCode User extensions,Apps,Users/*/AppData/Roaming/Code/CachedExtensions/user*,lazy_ntfs,Grabs the files relating to the users installed extensions
 1161,VSCode User settings,Apps,Users/*/AppData/Roaming/Code/User/settings.json*,lazy_ntfs,Grabs the file containing the settings the user has set.
 1162,VSCode User Preferences,Apps,Users/*/AppData/Roaming/Code/preferences*,lazy_ntfs,Grabs the file containing the preferences the user has set.
 1163,VSCode Network Cookies,Apps,Users/*/AppData/Roaming/Code/Network/Cookies*,lazy_ntfs,Grabs the cookie files. Same format as Chromium Cookies
 1164,VSCode Network Persistent State,Apps,Users/*/AppData/Roaming/Code/Network/Network Persistent State*,lazy_ntfs,Grabs the Network Persistent State file. Same format as in Chromium
 1165,VSCode Logs,Apps,Users/*/AppData/Roaming/Code/logs/**10,lazy_ntfs,"Grabs the VSCode logs. Further analysis is needed to determine which logs are junk, and which can be vital."
 1166,Vivaldi Cookies,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/**10/Cookies*,lazy_ntfs,
 1167,Vivaldi Network Persistent State,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/**10/Network Persistent State,lazy_ntfs,
 1168,Vivaldi Favicons,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Favicons*,lazy_ntfs,
 1169,Vivaldi History,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/History*,lazy_ntfs,
 1170,Vivaldi Sessions Folder,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Sessions/*,lazy_ntfs,
 1171,Vivaldi Login Data,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Login Data,lazy_ntfs,
 1172,Vivaldi Network Action Predictor,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Network Action Predictor,lazy_ntfs,
 1173,Vivaldi Preferences,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Preferences,lazy_ntfs,
 1174,Vivaldi Top Sites,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Top Sites*,lazy_ntfs,
 1175,Vivaldi Bookmarks,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Bookmarks*,lazy_ntfs,
 1176,Vivaldi Visited Links,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Visited Links,lazy_ntfs,
 1177,Vivaldi Web Data,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Web Data*,lazy_ntfs,
 1178,Vivaldi User Tracking,Communications,Users/*/.vivaldi_reporting_data*,lazy_ntfs,
 1179,Vivaldi Calendar,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Calendar*,lazy_ntfs,
 1180,Vivaldi Contacts,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Contacts*,lazy_ntfs,
 1181,Vivaldi Notes,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/Notes*,lazy_ntfs,
 1182,Vivaldi Download Metadata,Communications,Users/*/AppData/Local/Vivaldi/User Data/*/DownloadMetadata*,lazy_ntfs,
 1183,WBEM,WBEM,Windows/System32/wbem/Repository/**10,lazy_ntfs,
 1184,WBEM,WBEM,Windows.old/Windows/System32/wbem/Repository/**10,lazy_ntfs,
 1185,WER Files,Executables,ProgramData/Microsoft/Windows/WER/**10,lazy_ntfs,
 1186,WER Files,Executables,Users/*/AppData/Local/Microsoft/Windows/WER/**10,lazy_ntfs,
 1187,Crash Dumps,SQL Exploitation,Users/*/AppData/Local/CrashDumps/*.dmp,lazy_ntfs,
 1188,Crash Dumps,SQL Exploitation,Windows/*.dmp,lazy_ntfs,
 1189,Crash Dumps,SQL Exploitation,Windows.old/Windows/*.dmp,lazy_ntfs,
 1190,Webroot Program Data,Antivirus,ProgramData/WRData/WRLog.log,lazy_ntfs,
 1191,WhatsApp Cache,Apps,Users/*/AppData/Roaming/WhatsApp/Cache,lazy_ntfs,"Copies the cache of WhatsApp. Can be opened with Chrome Cache Viewer for viewing embedded thumbnails and other image artefacts, as well as extracting .enc message files or other files"
 1192,WhatsApp Local Storage,Apps,Users/*/AppData/Roaming/WhatsApp/Local Storage/leveldb,lazy_ntfs,"Copies the Local Storage leveldb of WhatsApp. Contains phone model and name of user, plus encrypted base64 strings which can be viewed with LevelDBDumper"
 1193,Microsoft Store WhatsApp Cache,Apps,Users/*/AppData/Local/Packages/*WhatsAppDesktop*/LocalCache/Roaming/WhatsApp/Cache,lazy_ntfs,"Copies the cache of WhatsApp. Can be opened with Chrome Cache Viewer for viewing embedded thumbnails and other image artefacts, as well as extracting .enc message files or other files"
 1194,Microsoft Store WhatsApp Local Storage,Apps,Users/*/AppData/Local/Packages/*WhatsAppDesktop*/LocalCache/Roaming/WhatsApp/Local Storage/leveldb,lazy_ntfs,"Copies the Local Storage leveldb of WhatsApp. Contains phone model and name of user, plus encrypted base64 strings which can be viewed with LevelDBDumper"
 1195,Microsoft Store WhatsApp Desktop Profile Pictures,Apps,Users/*/AppData/Local/Packages/*WhatsAppDesktop*/LocalState/profilePictures,lazy_ntfs,"Copies the local store of contacts profile pictures, simply open with a photos software"
 1196,Microsoft Store WhatsApp Shared Media,Apps,Users/*/AppData/Local/Packages/*WhatsAppDesktop*/LocalState/shared/transfers/**10/regex:.*/.(jpg|mp4|pdf|webp),ntfs,"Copies the shared media, can get very large."
 1197,DetectionHistory,Antivirus,ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory/*/**10,lazy_ntfs,
 1198,WinSCP (.ini file),Logs,**10/WinSCP.ini,lazy_ntfs,
 1199,Windows Defender Logs,Antivirus,ProgramData/Microsoft/Microsoft AntiMalware/Support/**10,lazy_ntfs,
 1200,Windows Defender Event Logs,EventLogs,Windows/System32/winevt/Logs/Microsoft-Windows-Windows Defender*.evtx,lazy_ntfs,
 1201,Windows Defender Event Logs,EventLogs,Windows.old/Windows/System32/winevt/Logs/Microsoft-Windows-Windows Defender*.evtx,lazy_ntfs,
 1202,Windows Defender Logs,Antivirus,ProgramData/Microsoft/Windows Defender/Support/**10,lazy_ntfs,
 1203,Windows Defender Logs,Antivirus,Windows/Temp/MpCmdRun.log,lazy_ntfs,
 1204,Windows Defender Logs,Antivirus,Windows.old/Windows/Temp/MpCmdRun.log,lazy_ntfs,
 1205,DetectionHistory,Antivirus,ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory/*/**10,lazy_ntfs,
 1206,Windows Defender Quarantine,Antivirus,ProgramData/Microsoft/Windows Defender/Quarantine/**10,lazy_ntfs,
 1207,Windows Firewall Logs,WindowsFirewallLogs,Windows/System32/LogFiles/Firewall/pfirewall.*,lazy_ntfs,
 1208,Windows Firewall Logs,WindowsFirewallLogs,Windows.old/Windows/System32/LogFiles/Firewall/pfirewall.*,lazy_ntfs,
 1209,Cryptokeys,Windows Hello,Windows/ServiceProfiles/LocalService/AppData/Roaming/Microsoft/Crypto/Keys/**10,lazy_ntfs,
 1210,Masterkey,Windows Hello,Windows/System32/Microsoft/Protect/S-1-5-18/User/**10,lazy_ntfs,
 1211,NGC,Windows Hello,Windows/ServiceProfiles/LocalService/AppData/Local/Microsoft/Ngc/**10,lazy_ntfs,
 1212,SECURITY registry transaction files,Registry,Windows/System32/config/SECURITY.LOG*,lazy_ntfs,
 1213,SECURITY registry transaction files,Registry,Windows.old/Windows/System32/config/SECURITY.LOG*,lazy_ntfs,
 1214,SOFTWARE registry transaction files,Registry,Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 1215,SOFTWARE registry transaction files,Registry,Windows.old/Windows/System32/config/SOFTWARE.LOG*,lazy_ntfs,
 1216,SYSTEM registry transaction files,Registry,Windows/System32/config/SYSTEM.LOG*,lazy_ntfs,
 1217,SYSTEM registry transaction files,Registry,Windows.old/Windows/System32/config/SYSTEM.LOG*,lazy_ntfs,
 1218,SECURITY registry hive,Registry,Windows/System32/config/SECURITY,lazy_ntfs,
 1219,SECURITY registry hive,Registry,Windows.old/Windows/System32/config/SECURITY,lazy_ntfs,
 1220,SOFTWARE registry hive,Registry,Windows/System32/config/SOFTWARE,lazy_ntfs,
 1221,SOFTWARE registry hive,Registry,Windows.old/Windows/System32/config/SOFTWARE,lazy_ntfs,
 1222,SYSTEM registry hive,Registry,Windows/System32/config/SYSTEM,lazy_ntfs,
 1223,SYSTEM registry hive,Registry,Windows.old/Windows/System32/config/SYSTEM,lazy_ntfs,
 1224,SECURITY registry hive (RegBack),Registry,Windows/System32/config/RegBack/SECURITY,lazy_ntfs,
 1225,SECURITY registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SECURITY,lazy_ntfs,
 1226,SOFTWARE registry hive (RegBack),Registry,Windows/System32/config/RegBack/SOFTWARE,lazy_ntfs,
 1227,SOFTWARE registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SOFTWARE,lazy_ntfs,
 1228,SYSTEM registry hive (RegBack),Registry,Windows/System32/config/RegBack/SYSTEM,lazy_ntfs,
 1229,SYSTEM registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SYSTEM,lazy_ntfs,
 1230,SYSTEM registry hive (RegBack),Registry,Windows/System32/config/RegBack/SYSTEM1,lazy_ntfs,
 1231,SYSTEM registry hive (RegBack),Registry,Windows.old/Windows/System32/config/RegBack/SYSTEM1,lazy_ntfs,
 1232,WindowsIndexSearch,FileKnowledge,programdata/microsoft/search/data/applications/windows/*,lazy_ntfs,
 1233,GatherLogs,FileKnowledge,programdata/microsoft/search/data/applications/windows/GatherLogs/**10,lazy_ntfs,
 1234,Network setting files,Misc,windows/system32/drivers/etc/**10,lazy_ntfs,
 1235,Windows 10 Notification DB,Notifications,Users/*/AppData/Local/Microsoft/Windows/Notifications/wpndatabase.db,lazy_ntfs,
 1236,Windows 10 Notification DB,Notifications,Users/*/AppData/Local/Microsoft/Windows/Notifications/appdb.dat,lazy_ntfs,
 1237,MigLog.xml,OS Upgrade,Windows/Panther/MigLog.xml,lazy_ntfs,
 1238,Setupact.log,OS Upgrade,Windows/Panther/Setupact.log,lazy_ntfs,
 1239,HumanReadable.xml,OS Upgrade,Windows/Panther/*HumanReadable.xml,lazy_ntfs,
 1240,FolderMoveLog.txt,OS Upgrade,Windows/Panther/Rollback/FolderMoveLog.txt,lazy_ntfs,
 1241,Update Store.db,OS Upgrade,ProgramData/USOPrivate/UpdateStore/store.db,lazy_ntfs,
 1242,Windows Power Diagnostics,Diagnostics,ProgramData/Microsoft/Windows/Power Efficiency Diagnostics/**10,lazy_ntfs,
 1243,DNS Netlogon files,DNS,Windows/System32/config/**10/netlogon.*,lazy_ntfs,
 1244,DNS files,DNS,Windows/System32/dns/**10,lazy_ntfs,
 1245,DHCP files,DHCP,Windows/System32/dhcp/**10,lazy_ntfs,
 1246,Diagnostic Logs for WSA,Windows Subsystem for Android,Users/*/AppData/Local/Packages/MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe/LocalState/diagnostics/logcat/*.log,lazy_ntfs,Filenames should be %timestamp%.log
 1247,App download artifacts (PNG),Windows Subsystem for Android,Users/*/AppData/Local/Packages/MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe/LocalCache/*.png,lazy_ntfs,Will provide examiners with indicators of which apps were downloaded
 1248,App download artifacts (ICO),Windows Subsystem for Android,Users/*/AppData/Local/Packages/MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe/LocalCache/*.ico,lazy_ntfs,Will provide examiners with indicators of which apps were downloaded WHEN since .ico files appear immediately when download of an application completes
 1249,Appcompatdb.json,Windows Subsystem for Android,Users/*/AppData/Local/Packages/MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe/LocalState/appcompatdb.json,lazy_ntfs,"Grabs the appcompatdb.json, unknown exactly what this is but further relevance could be uncovered after more research is conducted"
 1250,userdata.vhdx,Windows Subsystem for Android,Users/*/AppData/Local/Packages/MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe/LocalCache/userdata.vhdx,lazy_ntfs,Grabs the user's data which appears to be stored in a VHDX
 1251,Legacy .rbs files relating to Windows Telemetry and Diagnostics,SystemEvents,ProgramData/Microsoft/Diagnosis/events*.rbs,lazy_ntfs,
 1252,Legacy .rbs files relating to Windows Telemetry and Diagnostics,SystemEvents,Windows.old/ProgramData/Microsoft/Diagnosis/events*.rbs,lazy_ntfs,
 1253,ActivitiesCache.db,FileFolderAccess,Users/*/AppData/Local/ConnectedDevicesPlatform/*/ActivitiesCache.db*,lazy_ntfs,
 1254,Windows Update Session Orchestrator logs,EventLogs,ProgramData/USOShared/Logs/System/**10/*.etl,lazy_ntfs,
 1255,Windows Update logs,EventLogs,Windows/Logs/WindowsUpdate/**10/WindowsUpdate*.etl,lazy_ntfs,
 1256,Windows Component-Based Servicing logs,EventLogs,Windows/Logs/CBS/**10/CBS*.log,lazy_ntfs,
 1257,Windows Your Phone - All Databases,Apps,Users/*/AppData/Local/Packages/Microsoft.YourPhone_8wekyb3d8bbwe/LocalCache/Indexed/**10,lazy_ntfs,Locates all Your Phone database files
 1258,System Volume Information,Folder capture,System Volume Information/**10,lazy_ntfs,
 1259,XYplorer - .ini file,Apps,Users/*/AppData/Roaming/XYplorer/XYplorer.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful user activity information.
 1260,XYplorer - .ini file for each respective pane,Apps,Users/*/AppData/Roaming/XYplorer/Panes/*/**10/pane.ini,lazy_ntfs,Locates the .ini file for the left and right pane.
 1261,XYplorer - AutoBackup folder,Apps,Users/*/AppData/Roaming/XYplorer/AutoBackup/**10,lazy_ntfs,Locates the AutoBackup folder and copies its contents.
 1262,XYplorer - .dat files,Apps,Users/*/AppData/Roaming/XYplorer/**10/*.dat,lazy_ntfs,"Locates the .dat files in the XYplorer's AppData folder, all of which are updated upon program's exit."
 1263,Xeox RMM Client Application logs,ApplicationLogs,Program Files/Xeox/*.log,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 1264,Yandex Cookies,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/**10/Cookies*,lazy_ntfs,
 1265,Yandex Network Persistent State,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/**10/Network Persistent State,lazy_ntfs,
 1266,Yandex Favicons,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Favicons*,lazy_ntfs,
 1267,Yandex History,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/History*,lazy_ntfs,
 1268,Yandex Sessions Folder,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Sessions/*,lazy_ntfs,
 1269,Yandex Login Data,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Ya Passman Data*,lazy_ntfs,
 1270,Yandex Network Action Predictor,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Network Action Predictor,lazy_ntfs,
 1271,Yandex Preferences,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Preferences,lazy_ntfs,
 1272,Yandex Top Sites,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Top Sites*,lazy_ntfs,
 1273,Yandex Bookmarks,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Bookmarks*,lazy_ntfs,
 1274,Yandex Visited Links,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Visited Links,lazy_ntfs,
 1275,Yandex Web Data,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Web Data*,lazy_ntfs,
 1276,Yandex Autofill data,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Ya Autofill Data*,lazy_ntfs,
 1277,Yandex Passman logs,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Passman Logs*,lazy_ntfs,
 1278,Yandex Shortcuts,Communications,Users/*/AppData/Local/Yandex/YandexBrowser/User Data/*/Shortcuts*,lazy_ntfs,
 1279,Zoho Assist log files in AppData\Local,Apps,Users/*/AppData/Local/ZohoMeeting/log/**10,lazy_ntfs,Zoho Assist log files in AppData
 ocal
 1280,Zoho Assist .conf files in AppData\Local,Apps,Users/*/AppData/Local/ZohoMeeting/*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Connection/Settings)
 1281,Zoho Assist log files in ProgramData,Apps,ProgramData/ZohoMeeting/log/**10,lazy_ntfs,Zoho Assist log files in ProgramData
 1282,Zoho Assist .conf files,Apps,ProgramData/ZohoMeeting/**10/*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Connection/Proxy/Settings)
 1283,Zoho Assist log files in Program Files*,Apps,Program Files*/ZohoMeeting/UnAttended/ZohoMeeting/logs/**10,lazy_ntfs,Zoho Assist log files in Program Files*
 1284,Zoho Assist .conf files in Program Files*,Apps,Program Files*/ZohoMeeting/UnAttended/ZohoMeeting/*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Service/Settings)
 1285,Zoho Assist .txt files in Program Files*,Apps,Program Files*/ZohoMeeting/UnAttended/ZohoMeeting/*.txt,lazy_ntfs,Grabs all .txt files present in this folder (Service/Settings)
 1286,Zoom client logs,Apps,Users/*/AppData/Roaming/Zoom/logs/**10/*,lazy_ntfs,Zoom client artifacts
 1287,Zoom client logs (Windows XP),Apps,Documents and Settings/*/Application Data/Zoom/**10/*,lazy_ntfs,Zoom client artifacts (Windows XP)
 1288,Zoom client recordings,Apps,Users/*/Documents/Zoom/**10/*,lazy_ntfs,Zoom recording artifacts
 1289,Zoom plugin (Outlook),Apps,Users/*/AppData/Roaming/Zoom Plugin/*.json,lazy_ntfs,Zoom plugin artifacts
 1290,iTunes Backup Folder,Communications,Users/*/AppData/Roaming/Apple/Mobilesync/Backup/**10,lazy_ntfs,
 1291,iTunes Backup Folder,Communications,Users/*/AppData/Roaming/Apple Computer/Mobilesync/Backup/**10,lazy_ntfs,
 1292,iTunes Backup Folder - iOS13,Communications,Users/*/Apple/Mobilesync/Backup/**10,lazy_ntfs,
 1293,mIRC Chat Logs (Vista+),Communications,Users/*/AppData/Roaming/mIRC/logs/**10,lazy_ntfs,
 1294,mIRC Chat Logs (2000/XP),Communications,Documents and Settings/*/Application Data/mIRC/logs/**10,lazy_ntfs,
 1295,mRemoteNG Logs,Communications,Users/*/AppData/Roaming/mRemoteNG/mRemoteNG.log,lazy_ntfs,Contains log entries for remote connections
 1296,mRemoteNG Connection Configuration and Backups,Communications,Users/*/AppData/Roaming/mRemoteNG/confCons.xml*,lazy_ntfs,"Contains connection config, often with obfuscated credentials"
 1297,mRemoteNG Program Settings,Communications,Users/*/AppData/*/mRemoteNG/**10/user.config,lazy_ntfs,Contains user-specific program settings
 1298,openSUSE WSL /etc/os-release,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/os-release,lazy_ntfs,
 1299,openSUSE WSL /etc/fstab,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/fstab,lazy_ntfs,
 1300,openSUSE WSL /etc/passwd,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/passwd,lazy_ntfs,
 1301,openSUSE WSL /etc/group,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/group,lazy_ntfs,
 1302,openSUSE WSL /etc/shadow,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/shadow,lazy_ntfs,
 1303,openSUSE WSL /etc/timezone,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/timezone,lazy_ntfs,
 1304,openSUSE WSL /etc/hostname,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/hostname,lazy_ntfs,
 1305,openSUSE WSL /etc/hosts,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/hosts,lazy_ntfs,
 1306,openSUSE WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/bash.bashrc,lazy_ntfs,
 1307,openSUSE WSL /etc/profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/etc/profile,lazy_ntfs,
 1308,openSUSE WSL .bash_history,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/**10/.bash_history,lazy_ntfs,
 1309,openSUSE WSL .bashrc,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/**10/.bashrc,lazy_ntfs,
 1310,openSUSE WSL .profile,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/rootfs/**10/.profile,lazy_ntfs,
 1311,openSUSE WSL ext4.vhdx,Windows Subsystem for Linux,Users/*/AppData/Local/Packages/46932SUSE.openSUSE*Leap*/LocalState/ext4.vhdx,lazy_ntfs,
 1312,pCloud Database,Apps,Users/*/AppData/Local/pCloud/*.db,lazy_ntfs,Database contains all files sync'd with pCloud account.
 1313,pCloud Database WAL File,Apps,Users/*/AppData/Local/pCloud/*.db-wal,lazy_ntfs,Write-Ahead Log for pCloud database file.
 1314,pCloud Database Shared Memory File,Apps,Users/*/AppData/Local/pCloud/*.db-shm,lazy_ntfs,Shared Memory for the pCloud database file.
 1315,TorrentClients - qBittorrent,FileDownload,Users/*/AppData/Roaming/qBittorrent/*.ini,lazy_ntfs,
 1316,TorrentClients - qBittorrent,FileDownload,Users/*/AppData/Local/qBittorrent/logs/*,lazy_ntfs,
 1317,TorrentClients - qBittorrent,FileDownload,Users/*/AppData/Local/qBittorrent/GeoDB/*,lazy_ntfs,Locate .mmdb file for network peer connection analysis.
 1318,TorrentClients - qBittorrent,FileDownload,Users/*/AppData/Local/qBittorrent/BT_backup/*,lazy_ntfs,Locate active (in-progress) torrent files.
 1319,TorrentClients - uTorrent,FileDownload,Users/*/AppData/Roaming/uTorrent/*.dat,lazy_ntfs,
 - name: KapeTargets
 type: hidden
 description: Each parameter above represents a group of rules to be triggered. This table specifies which rule IDs will be included when the parameter is checked.
 default: |
 Group,RuleIds
 _BasicCollection,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 36, 37, 38, 39, 51, 279, 280, 281, 490, 491, 492, 493, 494, 495, 496, 497, 638, 643, 644, 676, 677, 681, 682, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 969, 970, 971, 972, 973, 974, 991, 992, 993, 994, 995, 996, 997, 1067, 1068, 1079, 1105, 1106, 1107, 1232, 1233]"
 _KapeTriage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 170, 171, 172, 173, 174, 175, 177, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 279, 280, 281, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 374, 375, 391, 392, 393, 404, 405, 406, 407, 408, 409, 410, 411, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 510, 511, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 567, 568, 569, 570, 571, 572, 601, 602, 625, 626, 638, 643, 644, 647, 648, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 853, 854, 855, 969, 970, 971, 972, 973, 974, 975, 976, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1026, 1027, 1031, 1032, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1073, 1074, 1075, 1092, 1093, 1102, 1103, 1104, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1140, 1141, 1142, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1253, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1295, 1296, 1297]"
 _SANS_Triage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 167, 170, 171, 172, 173, 174, 175, 177, 213, 214, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 374, 375, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 510, 511, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 547, 548, 549, 550, 551, 560, 561, 567, 568, 569, 570, 571, 572, 601, 602, 625, 626, 638, 643, 644, 647, 648, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 853, 854, 855, 969, 970, 971, 972, 973, 974, 975, 976, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1031, 1032, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1092, 1093, 1102, 1103, 1104, 1105, 1106, 1107, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1232, 1233, 1253, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1293, 1294, 1295, 1296, 1297]"
 _Boot,[1]
 _J,"[2, 3, 4, 5]"
 _LogFile,[6]
 _MFT,[7]
 _MFTMirr,[8]
 _SDS,"[9, 10]"
 _T,"[11, 12]"
 1Password,"[13, 14, 15]"
 4KVideoDownloader,"[16, 17]"
 AVG,"[18, 19, 20, 21, 22, 23, 24]"
 AceText,[25]
 AcronisTrueImage,"[26, 27, 28]"
 Action1,[29]
 ActiveDirectoryNTDS,[30]
 ActiveDirectorySysvol,[31]
 AgentRansack,"[32, 33, 34, 35]"
 Amcache,"[36, 37, 38, 39]"
 Ammyy,[40]
 Antivirus,"[18, 19, 20, 21, 22, 23, 24, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 167, 170, 171, 172, 173, 174, 175, 231, 232, 233, 234, 235, 236, 262, 308, 309, 310, 391, 392, 393, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 853, 976, 1001, 1002, 1026, 1027, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1092, 1093, 1102, 1103, 1104, 1130, 1131, 1132, 1133, 1190, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206]"
 AnyDesk,"[41, 42, 43, 44, 45, 46, 47, 48, 49]"
 ApacheAccessLog,[50]
 AppCompatPCA,[51]
 AppData,[52]
 AppXPackages,"[53, 54, 55, 56, 57]"
 ApplicationEvents,"[58, 59, 60, 61]"
 AsperaConnect,"[62, 63]"
 AteraAgent,"[64, 65, 66, 67, 68]"
 Avast,"[69, 70, 71, 72, 73, 74]"
 AviraAVLogs,"[75, 76, 77]"
 BCD,"[78, 79]"
 BITS,[80]
 BitTorrent,[81]
 Bitdefender,"[82, 83, 84]"
 BoxDrive_Metadata,"[85, 86]"
 BoxDrive_UserFiles,"[87, 88]"
 BraveBrowser,"[89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]"
 BrowserCache,"[109, 110, 111, 112, 113, 114, 115, 116]"
 CertUtil,"[117, 118, 119]"
 Chrome,"[120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]"
 ChromeExtensions,"[160, 161]"
 ChromeFileSystem,[162]
 CiscoJabber,[163]
 ClipboardMaster,"[164, 165, 166]"
 CloudStorage_All,"[85, 86, 87, 88, 223, 224, 225, 226, 227, 228, 229, 373, 374, 375, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 601, 602, 603, 675, 1051, 1052, 1053, 1312, 1313, 1314]"
 CloudStorage_Metadata,"[85, 86, 223, 224, 225, 226, 227, 228, 374, 375, 601, 602, 675]"
 CloudStorage_OneDriveExplorer,"[601, 602, 678, 679, 680, 681, 682, 755, 756, 757, 758, 759, 760, 761, 762, 763]"
 CombinedLogs,"[279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 560, 561, 638, 1105, 1106, 1107, 1207, 1208]"
 Combofix,[167]
 ConfluenceLogs,"[168, 169]"
 Cybereason,"[170, 171, 172]"
 Cylance,"[173, 174, 175]"
 DC__,[176]
 DWAgent,[177]
 Debian,"[178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195]"
 DirectoryOpus,"[196, 197, 198, 199, 200, 201, 202, 203, 204]"
 DirectoryTraversal_AudioFiles,[205]
 DirectoryTraversal_ExcelDocuments,[206]
 DirectoryTraversal_PDFDocuments,[207]
 DirectoryTraversal_PictureFiles,[208]
 DirectoryTraversal_SQLiteDatabases,[209]
 DirectoryTraversal_VideoFiles,[210]
 DirectoryTraversal_WildCardExample,[211]
 DirectoryTraversal_WordDocuments,[212]
 Discord,"[213, 214]"
 DoubleCommander,"[215, 216, 217, 218, 219, 220, 221]"
 Drivers,[222]
 Dropbox_Metadata,"[223, 224, 225, 226, 227, 228]"
 Dropbox_UserFiles,[229]
 EFCommander,[230]
 ESET,"[231, 232, 233, 234, 235, 236]"
 Edge,[237]
 EdgeChromium,"[238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260]"
 EdgeChromiumExtensions,[261]
 Emsisoft,[262]
 EncapsulationLogging,"[263, 264, 265, 266]"
 EventLogs_RDP,"[267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278]"
 EventLogs,"[279, 280, 281]"
 EventTraceLogs,"[282, 283, 284, 285, 286, 287, 288, 289, 290, 291]"
 EventTranscriptDB,"[292, 293, 294]"
 Evernote,"[295, 296, 297]"
 Everything__VoidTools_,"[298, 299, 300, 301]"
 EvidenceOfExecution,"[36, 37, 38, 39, 51, 643, 644, 676, 677, 1067, 1068]"
 Exchange,"[302, 307]"
 ExchangeClientAccess,[302]
 ExchangeCve_2021_26855,"[303, 304, 305, 306]"
 ExchangeTransport,[307]
 FSecure,"[308, 309, 310]"
 FTPClients,"[312, 313, 314, 315, 1198]"
 Fences,[311]
 FileExplorerReplacements,"[196, 197, 198, 199, 200, 201, 202, 203, 204, 215, 216, 217, 218, 219, 220, 221, 230, 351, 352, 353, 354, 355, 356, 357, 554, 555, 556, 557, 558, 559, 599, 600, 656, 657, 1030, 1069, 1070, 1071, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1259, 1260, 1261, 1262]"
 FileSystem,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]"
 FileZillaClient,"[312, 313]"
 FileZillaServer,"[314, 315]"
 Firefox,"[316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350]"
 FreeCommander,"[351, 352, 353, 354, 355, 356, 357]"
 FreeDownloadManager,"[358, 359, 360]"
 FreeFileSync,[361]
 Freenet,"[362, 363, 364, 365, 366]"
 FrostWire,"[367, 368, 369]"
 Gigatribe,"[370, 371, 372]"
 GoogleDriveBackupSync_UserFiles,[373]
 GoogleDrive_Metadata,"[374, 375]"
 GoogleEarth,"[376, 377, 378, 379]"
 GroupPolicy,"[380, 381, 382, 383, 384, 385, 386, 387]"
 HeidiSQL,"[388, 389]"
 HexChat,[390]
 HitmanPro,"[391, 392, 393]"
 IISConfiguration,"[394, 395, 396, 397]"
 IISLogFiles,"[398, 399, 400, 401, 402, 403]"
 IRCClients,"[390, 412, 1293, 1294]"
 ISLOnline,"[404, 405, 406, 407, 408, 409, 410, 411]"
 IceChat,[412]
 Idrive,"[413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426]"
 ImgBurn,[427]
 InternetExplorer,"[428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440]"
 IrfanView,[441]
 JDownloader2,"[442, 443, 444, 445, 446]"
 JavaWebCache,"[447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457]"
 Kali,"[458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475]"
 KapeTriage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 170, 171, 172, 173, 174, 175, 177, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 279, 280, 281, 308, 309, 310, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 374, 375, 391, 392, 393, 404, 405, 406, 407, 408, 409, 410, 411, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 510, 511, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 567, 568, 569, 570, 571, 572, 601, 602, 625, 626, 638, 643, 644, 647, 648, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 853, 854, 855, 969, 970, 971, 972, 973, 974, 975, 976, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1026, 1027, 1031, 1032, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1073, 1074, 1075, 1092, 1093, 1102, 1103, 1104, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1140, 1141, 1142, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1253, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1295, 1296, 1297]"
 Kaseya,"[476, 477, 478, 479, 480, 481, 482, 483, 484]"
 Keepass,"[485, 486, 487]"
 KeepassXC,"[488, 489]"
 LNKFilesAndJumpLists,"[490, 491, 492, 493, 494, 495, 496, 497]"
 Level,[498]
 LinuxOnWindowsProfileFiles,"[499, 500, 501, 502]"
 LiveUserFiles,"[503, 504, 505, 506]"
 LogFiles,"[507, 508, 509]"
 LogMeIn,"[58, 59, 60, 61, 510, 511]"
 MOF,[512]
 MSSQLErrorLog,"[513, 514]"
 MacriumReflect,"[515, 516, 517]"
 Malwarebytes,"[518, 519, 520, 521]"
 ManageEngineLogs,"[522, 523]"
 Mattermost,[524]
 McAfee,"[525, 526, 527, 528, 529]"
 McAfee_ePO,[530]
 MediaMonkey,"[531, 532]"
 Megasync,[533]
 MemoryFiles,"[534, 535, 536, 537, 538]"
 MessagingClients,"[163, 213, 214, 390, 412, 524, 547, 548, 549, 550, 551, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1143, 1144, 1145, 1146, 1147, 1191, 1192, 1193, 1194, 1293, 1294]"
 MicrosoftOfficeBackstage,[539]
 MicrosoftOneNote,"[540, 541, 542, 543, 544]"
 MicrosoftStickyNotes,"[545, 546]"
 MicrosoftTeams,"[547, 548, 549, 550, 551]"
 MicrosoftToDo,"[552, 553]"
 MidnightCommander,[554]
 MiniTimelineCollection,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 279, 280, 281, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763]"
 MultiCommander,"[555, 556, 557, 558, 559]"
 NETCLRUsageLogs,"[560, 561]"
 NGINXLogs,[562]
 NZBGet,"[563, 564]"
 Nessus,"[565, 566]"
 NetMonitorforEmployeesProfessional,"[567, 568, 569, 570, 571, 572]"
 NewsbinPro,[573]
 Newsleecher,[574]
 Nicotine__,"[575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585]"
 Notepad__,"[586, 587, 588]"
 Notepad,[589]
 Notion,"[590, 591]"
 OfficeAutosave,"[592, 593, 594, 595]"
 OfficeDiagnostics,"[596, 597]"
 OfficeDocumentCache,[598]
 OneCommander,"[599, 600]"
 OneDrive_Metadata,"[601, 602]"
 OneDrive_UserFiles,[603]
 OpenSSHClient,"[604, 605, 606, 607, 608, 609, 610, 611, 612]"
 OpenSSHServer,"[613, 614, 615, 616, 617, 618, 619, 620, 621]"
 OpenVPNClient,"[622, 623, 624]"
 Opera,"[625, 626]"
 OutlookPSTOST,"[627, 628, 629, 630, 631, 632, 633, 634]"
 P2PClients,"[176, 367, 368, 369, 370, 371, 372, 1004, 1028, 1029]"
 PeaZip,[635]
 PerfLogs,[636]
 PowerShell7Config,[637]
 PowerShellConsole,[638]
 PowerShellTranscripts,"[639, 640, 641, 642]"
 Prefetch,"[643, 644]"
 ProgramData,[645]
 ProtonVPN,[646]
 PuffinSecureBrowser,"[647, 648, 649, 650, 651, 652, 653]"
 PushNotification,"[654, 655]"
 Q_Dir,"[656, 657]"
 QFinderPro__QNAP_,[658]
 RDPCache,"[659, 660, 661]"
 RDPLogs,"[662, 663, 664, 665, 666, 667, 668, 669]"
 Radmin,"[670, 671, 672, 673, 674]"
 RcloneConf,[675]
 RecentFileCache,"[676, 677]"
 RecycleBin,"[678, 679, 680, 681, 682]"
 RecycleBin_DataFiles,"[678, 679, 680]"
 RecycleBin_InfoFiles,"[681, 682]"
 RegistryHives,"[683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763]"
 RegistryHivesMSIXApps,"[683, 684, 685]"
 RegistryHivesOther,"[686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713]"
 RegistryHivesSystem,"[714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754]"
 RegistryHivesUser,"[755, 756, 757, 758, 759, 760, 761, 762, 763]"
 RemoteAdmin,"[29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 177, 404, 405, 406, 407, 408, 409, 410, 411, 476, 477, 478, 479, 480, 481, 482, 483, 484, 498, 510, 511, 567, 568, 569, 570, 571, 572, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 764, 765, 854, 855, 998, 999, 1000, 1031, 1032, 1056, 1057, 1072, 1073, 1074, 1075, 1125, 1126, 1127, 1128, 1140, 1141, 1142, 1263, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1295, 1296, 1297]"
 RemoteUtilities_app,"[764, 765]"
 RoamingProfile,"[766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838]"
 Robo_FTP,"[839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852]"
 RogueKiller,[853]
 RustDesk,"[854, 855]"
 SABnbzd,"[856, 857]"
 SCCMClientLogs,[858]
 SDB,"[859, 860, 861, 862]"
 SOFELK,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 36, 37, 38, 39, 51, 279, 280, 281, 490, 491, 492, 493, 494, 495, 496, 497, 643, 644, 676, 677, 1067, 1068]"
 SQLiteDatabases,"[863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968]"
 SRUM,"[969, 970, 971, 972, 973, 974]"
 SUM,[975]
 SUPERAntiSpyware,[976]
 SUSELinuxEnterpriseServer,"[977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990]"
 ScheduledTasks,"[991, 992, 993, 994, 995, 996, 997]"
 ScreenConnect,"[58, 59, 60, 61, 998, 999, 1000]"
 SecureAge,[1001]
 SentinelOne,[1002]
 ServerTriage,"[50, 168, 169, 302, 307, 314, 315, 398, 399, 400, 401, 402, 403, 513, 514, 522, 523, 562, 613, 614, 615, 616, 617, 618, 619, 620, 621]"
 ShareX,[1003]
 Shareaza,[1004]
 SiemensTIA,[1005]
 Signal,"[1006, 1007, 1008, 1009]"
 SignatureCatalog,"[1010, 1011]"
 Skype,"[1012, 1013, 1014, 1015, 1016, 1017, 1018]"
 Slack,"[1019, 1020, 1021, 1022, 1023]"
 Snagit,[1024]
 SnipAndSketch,[1025]
 Sophos,"[58, 59, 60, 61, 1026, 1027]"
 Soulseek,"[1028, 1029]"
 SpeedCommander,[1030]
 Splashtop,"[1031, 1032]"
 StartupFolders,"[1033, 1034]"
 StartupInfo,"[1035, 1036]"
 Steam,"[1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048]"
 SublimeText,"[1049, 1050]"
 SugarSync,"[1051, 1052, 1053]"
 SumatraPDF,"[1054, 1055]"
 SupremoRemoteDesktop,"[1056, 1057]"
 Symantec_AV_Logs,"[58, 59, 60, 61, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066]"
 Syscache,"[1067, 1068]"
 TablacusExplorer,"[1069, 1070, 1071]"
 TeamViewerLogs,"[1072, 1073, 1074, 1075]"
 Telegram,"[1076, 1077]"
 TeraCopy,[1078]
 ThumbCache,[1079]
 Thunderbird,"[1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090]"
 TorrentClients,"[81, 1315, 1316, 1317, 1318, 1319]"
 Torrents,[1091]
 TotalAV,"[1092, 1093]"
 TotalCommander,"[1094, 1095, 1096, 1097, 1098, 1099, 1100]"
 TreeSize,[1101]
 TrendMicro,"[1102, 1103, 1104]"
 USBDetective,"[36, 37, 38, 39, 279, 280, 281, 490, 491, 492, 493, 494, 495, 496, 497, 683, 684, 685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 1105, 1106, 1107]"
 USBDevicesLogs,"[1105, 1106, 1107]"
 Ubuntu,"[1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124]"
 Ultraviewer,"[1125, 1126, 1127, 1128]"
 Usenet,[1129]
 UsenetClients,"[563, 564, 573, 574, 856, 857]"
 VIPRE,"[1130, 1131, 1132, 1133]"
 VLC_Media_Player,"[1134, 1135]"
 VMware,"[1136, 1137, 1138, 1139, 1154, 1155, 1156, 1157]"
 VMwareInventory,[1136]
 VMwareMemory,"[1137, 1138, 1139]"
 VNCLogs,"[58, 59, 60, 61, 1140, 1141, 1142]"
 Viber,"[1143, 1144, 1145, 1146, 1147]"
 VirtualBox,"[1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157]"
 VirtualBoxConfig,"[1148, 1149]"
 VirtualBoxLogs,"[1150, 1151, 1152]"
 VirtualBoxMemory,[1153]
 VirtualDisks,"[1154, 1155, 1156, 1157]"
 VisualStudioCode,"[1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165]"
 Vivaldi,"[1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182]"
 WBEM,"[1183, 1184]"
 WER,"[1185, 1186, 1187, 1188, 1189]"
 WSL,"[178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311]"
 WebBrowsers,"[89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 625, 626, 647, 648, 649, 650, 651, 652, 653, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278]"
 WebServers,"[50, 398, 399, 400, 401, 402, 403, 513, 514, 562]"
 Webroot,[1190]
 WhatsApp,"[1191, 1192, 1193, 1194]"
 WhatsApp_Media,"[1195, 1196]"
 WinDefendDetectionHist,[1197]
 WinSCP,[1198]
 WindowsDefender,"[1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206]"
 WindowsFirewall,"[1207, 1208]"
 WindowsHello,"[1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231]"
 WindowsIndexSearch,"[1232, 1233]"
 WindowsNetwork,[1234]
 WindowsNotificationsDB,"[1235, 1236]"
 WindowsOSUpgradeArtifacts,"[1237, 1238, 1239, 1240, 1241]"
 WindowsPowerDiagnostics,[1242]
 WindowsServerDNSAndDHCP,"[1243, 1244, 1245]"
 WindowsSubsystemforAndroid,"[1246, 1247, 1248, 1249, 1250]"
 WindowsTelemetryDiagnosticsLegacy,"[1251, 1252]"
 WindowsTimeline,[1253]
 WindowsUpdate,"[1254, 1255, 1256]"
 WindowsYourPhone,[1257]
 XPRestorePoints,[1258]
 XYplorer,"[1259, 1260, 1261, 1262]"
 Xeox,[1263]
 Yandex,"[1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278]"
 ZohoAssist,"[1279, 1280, 1281, 1282, 1283, 1284, 1285]"
 Zoom,"[1286, 1287, 1288, 1289]"
 iTunesBackup,"[1290, 1291, 1292]"
 mIRC,"[1293, 1294]"
 mRemoteNG,"[1295, 1296, 1297]"
 openSUSE,"[1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311]"
 pCloudDatabase,"[1312, 1313, 1314]"
 qBittorrent,"[1315, 1316, 1317, 1318]"
 uTorrent,[1319]

 - name: NTFS_CACHE_TIME
 type: int
 description: How often to flush the NTFS cache. (Default is never).
 default: "1000000"

sources:
 - name: All File Metadata
 query: |
 -- Select all the rule Ids to be included depending on the group
 -- selection.
 LET targets &amp;lt;= SELECT * FROM parse_csv(
 filename=KapeTargets, accessor="data")
 WHERE get(member=Group) AND log(message="Selecting " + Group)

 -- Filter only the rules in the rule table that have an Id we
 -- want. Targets with $ in their name probably refer to ntfs
 -- special files and so they are designated as ntfs
 -- accessor. Other targets may need ntfs parsing but not
 -- necessary - they are designated with the lazy_ntfs accessor.
 LET rule_specs &amp;lt;= SELECT Id, Glob
 FROM parse_csv(filename=KapeRules, accessor="data")
 WHERE Id in array(array=targets.RuleIds)
 AND log(message="file: Selecting glob " + Glob)

 -- Call the generic VSS file collector with the globs we want in
 -- a new CSV file.
 LET all_results &amp;lt;= SELECT * FROM Artifact.Generic.Collectors.File(
 Root=Device, Separator="/", Accessor="file", collectionSpec=rule_specs)

 SELECT * FROM all_results WHERE _Source =~ "Metadata"

 - name: Uploads
 query: |
 SELECT * FROM all_results WHERE _Source =~ "Uploads"

reports:
 - type: CLIENT
 template: |
 {{ import "Reporting.Default" "Templates" }}

 &amp;lt;!-- Default report in case the artifact does not have one --&amp;gt;
 ## {{ .Name }}

 {{ $name := .Name }}

 {{ template "hidden_paragraph_start" dict "description" "View Artifact Description" }}

 {{ Markdown .Description }}

 ### References&amp;lt;/h3&amp;gt;

 {{ range .Reference }}
 * [{{ . }}]({{.}})
 {{- end }}

 {{ template "hidden_paragraph_end" }}

 {{ $query := print "SELECT SourceFile, Size, Modified, LastAccessed, Created \
 FROM source(source='All File Metadata')" }}

 &amp;lt;!-- There could be a huge number of rows just to get the count, so we cap at 10000 --&amp;gt;
 {{ $count := Get ( Query (print "LET X = " $query " LIMIT 10000 " \
 " SELECT 1 AS ALL, count() AS Count FROM X Group BY ALL") | Expand ) \
 "0.Count" 0 }}

 &amp;lt;!-- If this is a flow show the parameters. --&amp;gt;
 {{ $flow := Query "LET X = SELECT Request.Parameters.env AS \
 Env FROM flows(client_id=ClientId, flow_id=FlowId)" \
 "SELECT * FROM foreach(row=X[0].Env, query={ \
 SELECT Key, Value FROM scope()})" | Expand }}

 {{ if $flow }}

 ### Selected Targets

 {{- range $flow -}}{{- if eq (Get . "Value") "Y" }}
 * {{ Get . "Key" }}
 {{- end -}}{{- end }}
 {{ end }}

 ## Files collected

 {{ if gt $count 9999 }}
 Collected more than {{ $count }} files.
 {{ else }}
 Collected a total of {{ $count }} files.
 {{ end }}

 {{ Query $query | Table }}


&lt;/code>&lt;/pre></description></item><item><title>Linux.Mounts</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.mounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.mounts/</guid><description>&lt;p>List mounted filesystems by reading /proc/mounts&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Mounts
description: List mounted filesystems by reading /proc/mounts

parameters:
 - name: ProcMounts
 default: /proc/mounts

precondition: |
 SELECT OS From info() where OS = 'linux'

sources:
 - query: |
 SELECT Device, Mount, FSType, split(string=Opts, sep=",") As Options
 FROM parse_records_with_regex(
 file=ProcMounts,
 regex='(?m)^(?P&amp;lt;Device&amp;gt;[^ ]+) (?P&amp;lt;Mount&amp;gt;[^ ]+) (?P&amp;lt;FSType&amp;gt;[^ ]+) '+
 '(?P&amp;lt;Opts&amp;gt;[^ ]+)')


reports:
 - type: CLIENT
 template: |
 # Mounted filesystems

 {{ Query "SELECT * FROM source()" | Table }}

&lt;/code>&lt;/pre></description></item><item><title>Linux.Network.Netstat</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.network.netstat/</guid><description>&lt;p>This artifact will parse /proc and reveal information
about current network connections.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Network.Netstat
description: |
 This artifact will parse /proc and reveal information
 about current network connections.

type: CLIENT

parameters:
 - name: StateRegex
 type: regex
 default: "LISTEN|ESTAB"
 description: Only show these states

sources:
 - precondition:
 SELECT OS From info() where OS = 'linux'

 query: |
 -- Break down the address of the form 0100007F:22B9
 LET _X(x) = parse_string_with_regex(string=addr,
 regex="(..)(..)(..)(..):(....)")

 -- Unroll hex encoded IPv4 address into more usual form.
 LET ParseAddress(addr) = dict(
 IP=format(format="%d.%d.%d.%d", args=[
 int(int="0x" + _X(x=addr).g4),
 int(int="0x" + _X(x=addr).g3),
 int(int="0x" + _X(x=addr).g2),
 int(int="0x" + _X(x=addr).g1)]),
 Port=int(int="0x" + _X(x=addr).g5)
 )

 -- https://elixir.bootlin.com/linux/latest/source/include/net/tcp_states.h#L14
 LET StateLookup &amp;lt;= dict(
 `01`="Established",
 `02`="Syn Sent",
 `06`="Time Wait", -- No owner process
 `0A`="Listening"
 )

 -- Enumerate all the sockets and cache them in memory for
 -- reverse lookup. The following is basically lsof.
 LET X = SELECT OSPath[1] AS Pid,
 Data.Link AS Filename,
 parse_string_with_regex(
 string=Data.Link,
 regex="(?P&amp;lt;Type&amp;gt;socket|pipe):\\[(?P&amp;lt;inode&amp;gt;[0-9]+)\\]") AS Details
 FROM glob(globs="/proc/*/fd/*")

 LET AllSockets &amp;lt;= SELECT atoi(string=Pid) AS Pid,
 read_file(filename="/proc/" + Pid + "/comm") AS Command,
 read_file(filename="/proc/" + Pid + "/cmdline") AS CommandLine,
 Filename,
 Details.Type AS Type,
 Details.inode AS Inode
 FROM X
 WHERE Type =~ "socket"

 -- Parse the TCP table and refer back to the socket
 -- so we can print process info.
 SELECT inode, get(item=StateLookup, field=st) AS State, uid, {
 SELECT * FROM AllSockets
 WHERE Inode=inode
 LIMIT 1
 } AS ProcessInfo,
 ParseAddress(addr=local_address) AS LocalAddr,
 ParseAddress(addr=rem_address) AS RemoteAddr
 FROM split_records(
 columns=["_", "sl","local_address", "rem_address", "st", "queues", "tr_tm_when",
 "retransmit", "uid", "timeout", "inode"],
 filenames="/proc/net/tcp",
 regex=" +")
 WHERE sl =~ ":" -- Remove header row
 AND State =~ StateRegex

&lt;/code>&lt;/pre></description></item><item><title>Linux.Network.NetstatEnriched</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.network.netstatenriched/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.network.netstatenriched/</guid><description>&lt;p>Report network connections, and enrich with process information.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Network.NetstatEnriched
description: |
 Report network connections, and enrich with process information.

type: CLIENT

precondition:
 SELECT OS From info() where OS = 'linux'

parameters:
 - name: IPRegex
 description: "regex search over IP address fields."
 default: "."
 type: regex
 - name: PortRegex
 description: "regex search over port fields."
 default: "."
 type: regex
 - name: ProcessNameRegex
 description: "regex search over source process name"
 default: "."
 type: regex
 - name: UsernameRegex
 description: "regex search over source process user context"
 default: "."
 type: regex
 - name: ConnectionStatusRegex
 description: "regex search over connection status"
 default: "LISTEN|ESTAB"
 type: regex
 - name: ProcessPathRegex
 description: "regex search over source process path"
 default: "."
 type: regex
 - name: CommandLineRegex
 description: "regex search over source process commandline"
 default: "."
 type: regex
 - name: CallChainRegex
 description: "regex search over the process callchain"
 default: "."
 type: regex


sources:
 - query: |
 SELECT Laddr.IP AS Laddr,
 Laddr.Port AS Lport,
 Raddr.IP AS Raddr,
 Raddr.Port AS Rport,
 Pid,
 Status,
 process_tracker_get(id=Pid).Data AS ProcInfo,
 join(array=process_tracker_callchain(id=Pid).Data.Name, sep=" -&amp;gt; ") AS CallChain,
 process_tracker_tree(id=Pid) AS ChildrenTree
 FROM connections()
 WHERE Status =~ ConnectionStatusRegex
 AND Raddr =~ IPRegex
 AND ( Lport =~ PortRegex OR Rport =~ PortRegex )
 AND ProcInfo.Name =~ ProcessNameRegex
 AND ProcInfo.Username =~ UsernameRegex
 AND ProcInfo.Exe =~ ProcessPathRegex
 AND ProcInfo.CommandLine =~ CommandLineRegex
 AND CallChain =~ CallChainRegex

column_types:
 - name: ChildrenTree
 type: tree

&lt;/code>&lt;/pre></description></item><item><title>Linux.Network.PacketCapture</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.network.packetcapture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.network.packetcapture/</guid><description>&lt;p>This artifact leverages tcpdump to natively capture packets.&lt;/p>
&lt;p>The &lt;code>Duration&lt;/code> parameter is used to define how long (in seconds) the capture should be. Specific interfaces can be defined using the &lt;code>Interface&lt;/code> parameter, otherwise the artifact defaults to an interface assignment of &lt;code>any&lt;/code>.&lt;/p>
&lt;p>A &lt;code>BPF&lt;/code> (Berkeley Packet Filter) expression can also be supplied to filter the captured traffic as desired.&lt;/p>
&lt;p>Read more about BPF expressions here: &lt;a href="https://biot.com/capstats/bpf.html" target="_blank" >https://biot.com/capstats/bpf.html&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Network.PacketCapture
author: Wes Lambert, @therealwlambert
description: |
 This artifact leverages tcpdump to natively capture packets.

 The `Duration` parameter is used to define how long (in seconds) the capture should be. Specific interfaces can be defined using the `Interface` parameter, otherwise the artifact defaults to an interface assignment of `any`.

 A `BPF` (Berkeley Packet Filter) expression can also be supplied to filter the captured traffic as desired.
 
 Read more about BPF expressions here: https://biot.com/capstats/bpf.html

required_permissions:
 - EXECVE

parameters:
 - name: Duration
 type: integer
 description: Duration (in seconds) of PCAP to be recorded.
 default: 10
 
 - name: Interface
 type: string
 default: any

 - name: BPF
 type: string
 default:
 
precondition:
 SELECT * FROM info() where OS = 'linux'

sources:
 - query: |
 LET pcap &amp;lt;= tempfile(extension=".pcap")
 SELECT *, upload(file=pcap) AS PCAP
 FROM execve(argv=['bash', '-c', format(format='''(tcpdump -nni %v -w %v %v) &amp;amp; sleep %v; kill $!''', args=[Interface, pcap, BPF, Duration])], length=1000000)

&lt;/code>&lt;/pre></description></item><item><title>Linux.OSQuery.Generic</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.osquery.generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.osquery.generic/</guid><description>&lt;p>OSQuery is an excellent tool for querying system state across the
three supported Velociraptor platform (Windows/Linux/MacOS).&lt;/p>
&lt;p>You can read more about OSQuery on &lt;a href="https://osquery.io/" target="_blank" >https://osquery.io/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.OSQuery.Generic
description: |
 OSQuery is an excellent tool for querying system state across the
 three supported Velociraptor platform (Windows/Linux/MacOS).

 You can read more about OSQuery on https://osquery.io/

reference:
 - https://osquery.io/
 - https://github.com/osquery/osquery

# I am not actually sure if OSQuery allows arbitrary command execution via SQL?
required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'linux'

tools:
 - name: OSQueryLinux
 github_project: Velocidex/OSQuery-Releases
 github_asset_regex: linux-amd64

parameters:
 - name: Query
 default: "SELECT * FROM osquery_info"

sources:
 - query: |
 LET binary &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Utils.FetchBinary(ToolName="OSQueryLinux")

 LET result = SELECT * FROM execve(
 argv=[binary[0].OSPath, "--json", Query],
 length=1000000)

 SELECT * FROM foreach(row=result,
 query={
 SELECT * FROM parse_json_array(data=Stdout)
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Proc.Arp</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.proc.arp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.proc.arp/</guid><description>&lt;p>ARP table via /proc/net/arp.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Proc.Arp
description: ARP table via /proc/net/arp.
parameters:
 - name: ProcNetArp
 default: /proc/net/arp
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 SELECT * from split_records(
 filenames=ProcNetArp,
 regex='\\s{3,20}',
 first_row_is_headers=true)

&lt;/code>&lt;/pre></description></item><item><title>Linux.Proc.Modules</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.proc.modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.proc.modules/</guid><description>&lt;p>Module listing via /proc/modules.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Proc.Modules
description: Module listing via /proc/modules.
parameters:
 - name: ProcModules
 default: /proc/modules

sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 SELECT Name,
 atoi(string=Size) As Size,
 atoi(string=UseCount) As UseCount,
 parse_string_with_regex(regex='''(?P&amp;lt;UsedBy&amp;gt;.*),''', string=UsedBy).UsedBy AS UsedBy,
 Status, 
 Address
 FROM split_records(
 filenames=ProcModules,
 regex='\\s+',
 columns=['Name', 'Size', 'UseCount', 'UsedBy', 'Status', 'Address'])

&lt;/code>&lt;/pre></description></item><item><title>Linux.Remediation.Quarantine</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.remediation.quarantine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.remediation.quarantine/</guid><description>&lt;p>This artifact applies quarantine to Linux systems via nftables.
It expects the target system to have nftables installed, and
hence the availability of nft CLI.&lt;/p>
&lt;p>This artifact will create a table, with the default name
&lt;em>vrr_quarantine_table&lt;/em>, which contains three chains. One
for inbound traffic, one for outbound traffic, and the other
for forwarding traffic. The chains will cut off all traffics
except those for DNS lookup and velociraptor itself.&lt;/p>
&lt;p>To unquarantine the system, set the &lt;em>RemovePolicy&lt;/em> parameter to &lt;em>True&lt;/em>.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Remediation.Quarantine
description: |
 This artifact applies quarantine to Linux systems via nftables.
 It expects the target system to have nftables installed, and
 hence the availability of nft CLI.

 This artifact will create a table, with the default name
 *vrr_quarantine_table*, which contains three chains. One
 for inbound traffic, one for outbound traffic, and the other
 for forwarding traffic. The chains will cut off all traffics
 except those for DNS lookup and velociraptor itself.

 To unquarantine the system, set the *RemovePolicy* parameter to *True*.

precondition: SELECT OS From info() where OS = 'linux'

type: CLIENT

required_permissions:
 - EXECVE

parameters:
 - name: pathToNFT
 default: /usr/sbin/nft
 description: We depend on nft to manage the tables, chains, and rules.

 - name: TableName
 default: vrr_quarantine_table
 description: Name of the quarantine table

 - name: MessageBox
 description: |
 Optional message box notification to send to logged in users. 256
 character limit.

 - name: RemovePolicy
 type: bool
 description: Tickbox to remove policy.

sources:
 - query: |
 LET run_command(Cmd, Message) = SELECT timestamp(epoch=now()) as Time,
 format(format="Running %v: %v, Returned %v %v",
 args=[Cmd, Stdout || Stderr,
 ReturnCode, Message || ""]) AS Result
 FROM execve(argv=Cmd, length=10000)

 // If a MessageBox configured truncate to 256 character limit
 LET MessageBox &amp;lt;= parse_string_with_regex(
 regex='^(?P&amp;lt;Message&amp;gt;.{0,255}).*',
 string=MessageBox).Message

 // Parse a URL to get domain name.
 LET get_domain(URL) = split(string=url(parse=URL).Host, sep=":")[0]
 LET get_port(URL) = if(condition=url(parse=URL).Host =~ ":",
 then=split(string=url(parse=URL).Host, sep=":")[1],
 else=if(condition=url(parse=URL).Scheme = "https",
 then="443", else="80"))

 // extract Velociraptor config for policy
 LET extracted_config &amp;lt;= SELECT * FROM foreach(
 row=config.server_urls,
 query={
 SELECT
 get_domain(URL=_value) AS DstAddr,
 get_port(URL=_value) AS DstPort,
 'VelociraptorFrontEnd' AS Description,
 _value AS URL
 FROM scope()
 })

 // delete table
 LET delete_table_cmd = (pathToNFT, 'delete', 'table', 'inet', TableName)

 // add table
 LET add_table_cmd = (pathToNFT, 'add', 'table', 'inet', TableName)

 // add inbound chain
 LET add_inbound_chain_cmd = (
 pathToNFT, 'add', 'chain', 'inet', TableName, 'inbound_chain',
 '{', 'type', 'filter', 'hook', 'input', 'priority', '0\;', 'policy', 'drop\;', '}')

 // add udp rule inbound chain to allow DNS lookups
 LET add_udp_rule_to_inbound_chain_cmd = (
 pathToNFT,'add','rule','inet', TableName, 'inbound_chain',
 'udp', 'sport', 'domain',
 'ct', 'state', 'established', 'accept')

 // add outbound chain
 LET add_outbound_chain_cmd = (
 pathToNFT, 'add', 'chain', 'inet', TableName, 'outbound_chain',
 '{', 'type', 'filter', 'hook', 'output', 'priority', '0\;', 'policy', 'drop\;', '}')

 // add tcp rule outbound chain to allow DNS traffics
 LET add_tcp_rule_to_outbound_chain_cmd = (
 pathToNFT, 'add', 'rule', 'inet', TableName, 'outbound_chain',
 'tcp', 'dport', '{', '53', '}',
 'ct', 'state', 'new,established', 'accept')

 // add udp rule outbound chain to allow DNS and DHCP traffics
 LET add_udp_rule_to_outbound_chain_cmd = (
 pathToNFT,'add','rule','inet', TableName, 'outbound_chain',
 'udp', 'dport', '{', '53,67,68', '}',
 'ct', 'state', 'new,established', 'accept')

 // add forward chain
 LET add_forward_chain_cmd = (
 pathToNFT, 'add', 'chain', 'inet', TableName, 'forward_chain',
 '{', 'type', 'filter', 'hook', 'forward', 'priority', '0\;', 'policy', 'drop\;', '}')


 // delete quarantine table
 LET delete_quarantine_table = SELECT
 timestamp(epoch=now()) as Time,
 TableName + ' table removed.' AS Result
 FROM execve(argv=delete_table_cmd, length=10000)

 // add tcp rule to inbound_chain to allow connections from Velociraptor
 // FIXME(gye): may need to add IPv6 rules if DstAddr is an IPv6 address
 LET add_velociraptor_rule_to_inbound_chain = SELECT * FROM foreach(
 row={
 SELECT DstAddr, DstPort, (
 pathToNFT, 'add', 'rule', 'inet', TableName, 'inbound_chain',

 'ip', 'saddr', DstAddr, 'tcp', 'sport', '{', DstPort, '}',
 'ct', 'state', 'established',
 'accept') AS add_velociraptor_rule_to_inbound_chain_cmd
 FROM extracted_config
 },
 query={
 SELECT * FROM run_command(Cmd=add_velociraptor_rule_to_inbound_chain_cmd,
 Message='Added tcp rule to inbound_chain in ' + TableName + ' table.')
 })

 // add tcp rule to inbound_chain to allow connections from Velociraptor
 // FIXME(gye): may need to add IPv6 rules if DstAddr is an IPv6 address
 LET add_velociraptor_rule_to_outbound_chain = SELECT * FROM foreach(
 row={
 SELECT DstAddr, DstPort, (
 pathToNFT, 'add', 'rule', 'inet', TableName, 'outbound_chain',
 'ip', 'daddr', DstAddr, 'tcp', 'dport', '{', DstPort, '}',
 'ct', 'state', 'established,new',
 'accept') AS add_velociraptor_rule_to_outbound_chain_cmd
 FROM extracted_config
 },
 query={
 SELECT * FROM run_command(
 Cmd=add_velociraptor_rule_to_outbound_chain_cmd,
 Message='Added tcp rule to inbound_chain in ' +
 TableName + ' table.')
 })

 // test connection to a frontend server
 LET test_connection = SELECT * FROM foreach(
 row={
 SELECT DstAddr, DstPort, URL + 'server.pem' AS pem_url
 FROM extracted_config
 WHERE log(message="Will check connectivity with " + pem_url)
 },
 query={
 SELECT format(format="Testing connectivity with %v: %v", args=[Url, Response]) AS Result
 FROM http_client(url=pem_url, disable_ssl_security='TRUE')
 WHERE Response = 200
 LIMIT 1
 })

 // final check to keep or remove policy
 // TODO(gyee): for now we are using the wall commmand to send the message.
 // Will need to look into using libnotify instead.
 LET final_check = SELECT * FROM if(condition= test_connection,
 then={
 SELECT
 timestamp(epoch=now()) as Time,
 if(condition=MessageBox,
 then= TableName + ' connection test successful. MessageBox sent.',
 else= TableName + ' connection test successful.'
 ) AS Result
 FROM if(condition=MessageBox,
 then= {
 SELECT * FROM execve(argv=['wall', MessageBox])
 },
 else={
 SELECT * FROM scope()
 })
 },
 else=run_command(
 Cmd=delete_table_cmd,
 Message= TableName + ' failed connection test. Removing quarantine table.'))

 LET check_nft_cmd = (pathToNFT, "--version")

 // Execute content
 LET doit = SELECT * FROM if(condition=RemovePolicy,
 then=delete_quarantine_table,
 else={
 SELECT * FROM chain(
 a=delete_quarantine_table,
 b=run_command(Cmd=add_table_cmd, Message=TableName + ' added.'),
 c=run_command(Cmd=add_inbound_chain_cmd,
 Message='Added inbound_chain to ' +
 TableName + ' table.'),
 d=add_velociraptor_rule_to_inbound_chain,
 e=run_command(Cmd=add_udp_rule_to_inbound_chain_cmd,
 Message='Added udp rule to inbound_chain in ' +
 TableName + ' table.'),
 f=run_command(Cmd=add_outbound_chain_cmd,
 Message='Added outbound_chain to ' +
 TableName + ' table.'),
 g=add_velociraptor_rule_to_outbound_chain,
 h=run_command(Cmd=add_tcp_rule_to_outbound_chain_cmd,
 Message='Added tcp rule to outbound_chain in ' +
 TableName + ' table.'),
 i=run_command(Cmd=add_udp_rule_to_outbound_chain_cmd,
 Message='Added udp rule to outbound_chain in ' +
 TableName + ' table.'),
 j=run_command(Cmd=add_forward_chain_cmd,
 Message='Added forward_chain to ' +
 TableName + ' table.'),
 k=final_check)
 })

 SELECT * FROM if(condition={
 SELECT * FROM run_command(
 Cmd=check_nft_cmd, Message='Check for ' + pathToNFT)
 WHERE Result =~ "nftables"
 }, then=doit,
 else={
 SELECT * FROM scope() WHERE log(level="ERROR",
 message="nftables is not installed - quarantine not supported")
 AND FALSE
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.RHEL.Packages</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.rhel.packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.rhel.packages/</guid><description>&lt;p>Parse packages installed from dnf or yum&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.RHEL.Packages
description: |
 Parse packages installed from dnf or yum
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 LET Data &amp;lt;= SELECT * FROM switch(
 a={ SELECT Stdout FROM execve(argv=["dnf", "--quiet", "list", "installed"], length=10000000) WHERE Stdout },
 b={ SELECT Stdout FROM execve(argv=["yum", "--quiet", "list", "installed"], length=10000000) WHERE Stdout },
 c={SELECT "" AS Stdout FROM scope() WHERE log(level="ERROR",message="Could not retrieve package list") })

 // Sometimes lines overflow to the next line, correct for that
 LET Normalized &amp;lt;= regex_replace(source=Data[0].Stdout, re='''(?sm)\n\s''', replace="")
 LET Parsed = SELECT parse_string_with_regex(string=Line, regex='''([^\s]+)\s+([^\s]+)\s+([^\s]+)''') AS Parsed
 FROM parse_lines(accessor="data", filename=Normalized)

 SELECT Parsed.g1 AS Package, Parsed.g2 AS Version, Parsed.g3 AS Repository
 FROM Parsed
 WHERE Repository =~ "^@"

&lt;/code>&lt;/pre></description></item><item><title>Linux.Search.FileFinder</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.search.filefinder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.search.filefinder/</guid><description>&lt;p>Find files on the filesystem using the filename or content.&lt;/p>
&lt;h2 id="performance-note">Performance Note&lt;/h2>
&lt;p>This artifact can be quite expensive, especially if we search file
content. It will require opening each file and reading its entire
content. To minimize the impact on the endpoint we recommend this
artifact is collected with a rate limited way (about 20-50 ops per
second).&lt;/p>
&lt;p>This artifact is useful in the following scenarios:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We need to locate all the places on our network where customer
data has been copied.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We’ve identified malware in a data breach, named using short
random strings in specific folders and need to search for other
instances across the network.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We believe our user account credentials have been dumped and
need to locate them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to search for exposed credit card data to satisfy PCI
requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We have a sample of data that has been disclosed and need to
locate other similar files&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Search.FileFinder
description: |
 Find files on the filesystem using the filename or content.


 ## Performance Note

 This artifact can be quite expensive, especially if we search file
 content. It will require opening each file and reading its entire
 content. To minimize the impact on the endpoint we recommend this
 artifact is collected with a rate limited way (about 20-50 ops per
 second).

 This artifact is useful in the following scenarios:

 * We need to locate all the places on our network where customer
 data has been copied.

 * We’ve identified malware in a data breach, named using short
 random strings in specific folders and need to search for other
 instances across the network.

 * We believe our user account credentials have been dumped and
 need to locate them.

 * We need to search for exposed credit card data to satisfy PCI
 requirements.

 * We have a sample of data that has been disclosed and need to
 locate other similar files


precondition:
 SELECT * FROM info() where OS = 'linux'

parameters:
 - name: SearchFilesGlob
 default: /home/*
 description: Use a glob to define the files that will be searched.

 - name: SearchFilesGlobTable
 type: csv
 default: |
 Glob
 /home/someuser/*
 description: Alternative specify multiple globs in a table

 - name: YaraRule
 type: yara
 default:
 description: A yara rule to search for matching files.

 - name: Upload_File
 default: N
 type: bool

 - name: Calculate_Hash
 default: N
 type: bool

 - name: MoreRecentThan
 default: ""
 type: timestamp

 - name: ModifiedBefore
 default: ""
 type: timestamp

 - name: ExcludePathRegex
 default: "^/(proc|sys|run|snap)"
 type: regex
 description: If this regex matches the path of any directory we do not even descend inside of it.

 - name: LocalFilesystemOnly
 default: Y
 type: bool
 description: When set we stay on local attached filesystems including loop, attached disk, cdrom, device mapper, and excluding proc, nfs etc.

 - name: OneFilesystem
 default: N
 type: bool
 description: When set we do not follow a link to go on to a different filesystem.

 - name: DoNotFollowSymlinks
 type: bool
 default: N
 description: If specified we are allowed to follow symlinks while globbing

sources:
- query: |
 -- This list comes from cat /proc/devices and represents actual
 -- devices. Most virtual devices like /proc, fuse and network
 -- filesystems have a major number of 0.
 LET LocalDeviceMajor &amp;lt;= (
 253,
 7, -- loop
 8, -- sd
 9, -- md
 11, -- sr
 65, -- sd
 66, -- sd
 67, -- sd
 68, -- sd
 69, -- sd
 70, -- sd
 71, -- sd
 128, -- sd
 129, -- sd
 130, -- sd
 131, -- sd
 132, -- sd
 133, -- sd
 134, -- sd
 135, -- sd
 202, -- xvd
 253, -- device-mapper
 254, -- mdp
 259, -- blkext
 )

 LET RecursionCallback = if(
 condition=LocalFilesystemOnly,
 then=if(condition=ExcludePathRegex,
 then="x=&amp;gt;x.Data.DevMajor IN LocalDeviceMajor AND NOT x.OSPath =~ ExcludePathRegex",
 else="x=&amp;gt;x.Data.DevMajor IN LocalDeviceMajor"),
 else=if(condition=ExcludePathRegex,
 then="x=&amp;gt;NOT x.OSPath =~ ExcludePathRegex",
 else=""))

 LET file_search = SELECT OSPath,
 Sys.mft as Inode,
 Mode.String AS Mode, Size,
 Mtime AS MTime,
 Atime AS ATime,
 Ctime AS CTime,
 IsDir, Mode, Data
 FROM glob(globs=SearchFilesGlobTable.Glob + SearchFilesGlob,
 recursion_callback=RecursionCallback,
 one_filesystem=OneFilesystem,
 accessor="file", nosymlink=DoNotFollowSymlinks)

 LET more_recent = SELECT * FROM if(
 condition=MoreRecentThan,
 then={
 SELECT * FROM file_search
 WHERE MTime &amp;gt; MoreRecentThan
 }, else={
 SELECT * FROM file_search
 })

 LET modified_before = SELECT * FROM if(
 condition=ModifiedBefore,
 then={
 SELECT * FROM more_recent
 WHERE MTime &amp;lt; ModifiedBefore
 AND MTime &amp;gt; MoreRecentThan
 }, else={
 SELECT * FROM more_recent
 })

 LET keyword_search = SELECT * FROM if(
 condition=YaraRule,
 then={
 SELECT * FROM foreach(
 row={
 SELECT * FROM modified_before
 WHERE Mode.IsRegular
 },
 query={
 SELECT OSPath, Inode, Mode,
 Size, ATime, MTime, CTime,
 str(str=String.Data) As Keywords

 FROM yara(files=OSPath,
 key="A",
 rules=YaraRule,
 accessor="file")
 })
 }, else={
 SELECT *, NULL AS Keywords FROM modified_before
 })

 SELECT OSPath, Inode, Mode, Size, ATime,
 MTime, CTime, Keywords,
 if(condition=Upload_File and Mode.IsRegular,
 then=upload(file=OSPath,
 accessor="file")) AS Upload,
 if(condition=Calculate_Hash and Mode.IsRegular,
 then=hash(path=OSPath,
 accessor="file")) AS Hash
 FROM keyword_search

column_types:
 - name: ATime
 type: timestamp
 - name: MTime
 type: timestamp
 - name: CTime
 type: timestamp
 - name: Upload
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Linux.Ssh.AuthorizedKeys</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.authorizedkeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.authorizedkeys/</guid><description>&lt;p>Find and parse ssh authorized keys files.&lt;/p>
&lt;p>From &lt;code>man authorized_keys&lt;/code>:&lt;/p>
&lt;p>&lt;code>AUTHORIZED_KEYS FILE FORMAT&lt;/code>: Each line of the file contains one
key (empty lines and lines starting with a ‘#’ are ignored as
comments). Public keys consist of the following space-separated
fields: options, keytype, base64-encoded key, comment. The options
field is optional.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Ssh.AuthorizedKeys
description: |
 Find and parse ssh authorized keys files.

 From `man authorized_keys`:

 `AUTHORIZED_KEYS FILE FORMAT`: Each line of the file contains one
 key (empty lines and lines starting with a ‘#’ are ignored as
 comments). Public keys consist of the following space-separated
 fields: options, keytype, base64-encoded key, comment. The options
 field is optional.

parameters:
 - name: sshKeyFiles
 default: '.ssh/authorized_keys*'
 description: Glob of authorized_keys file relative to a user's home directory.
 - name: keyTypes
 type: regex
 description: A regex to identify supported key types
 default: "sk-ecdsa-sha2-nistp256|ecdsa-sha2-nistp256|ecdsa-sha2-nistp384|ecdsa-sha2-nistp521|sk-ssh-ed25519|ssh-ed25519|ssh-dss|ssh-rsa"

 - name: AlsoUpload
 type: bool
 description: Also upload the raw files for closer inspection.

sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 -- Find all eligible files.
 LET authorized_keys = SELECT * from foreach(
 row={
 SELECT Uid, User, Homedir from Artifact.Linux.Sys.Users()
 },
 query={
 SELECT OSPath,
 if(condition=AlsoUpload, then=upload(file=OSPath)) AS _Upload,
 Mtime, Ctime, User, Uid
 FROM glob(root=Homedir, globs=sshKeyFiles)
 WHERE log(message="Parsing file %v", args=OSPath, dedup=-1)
 })

 -- Split each line into parts considering possible quoting
 LET Parse(OSPath) =
 -- Pad a bit so index does not wrap.
 SELECT ParseParts(Parts=commandline_split(command=Line, bash_style=TRUE) + ("", "", "", "", "")) AS Parsed
 FROM parse_lines(filename=OSPath)
 WHERE NOT Line =~ "^#" AND Parsed.keytype =~ keyTypes

 -- The option may or may not be there - determine by the key regex
 LET ParseParts(Parts) = if(condition= Parts[0] =~ keyTypes,
 -- No options
 then=dict(options="", keytype=Parts[0], base64key=Parts[1], comment=Parts[2] || ""),

 -- The line has options
 else=dict(options=ParseOptions(Opts=Parts[0]),
 keytype=Parts[1], base64key=Parts[2], comment=Parts[3] || ""))

 -- Option can have value or just be bare
 LET ParseOptions(Opts) = split(string=Opts, sep_string=",")

 SELECT * FROM foreach(row=authorized_keys,
 query={
 SELECT Uid, User, OSPath, _Upload, *
 FROM foreach(column="Parsed", row= Parse(OSPath=OSPath))
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Ssh.KnownHosts</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.knownhosts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.knownhosts/</guid><description>&lt;p>Find and parse ssh known hosts files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Ssh.KnownHosts
description: Find and parse ssh known hosts files.
parameters:
 - name: sshKnownHostsFiles
 default: '.ssh/known_hosts*'

precondition: SELECT OS From info() where OS = 'linux'

sources:
 - query: |
 // For each user on the system, search for known_hosts files.
 LET authorized_keys = SELECT * from foreach(
 row={
 SELECT Uid, User, Homedir from Artifact.Linux.Sys.Users()
 },
 query={
 SELECT OSPath, Mtime, Ctime, User, Uid
 FROM glob(
 globs=sshKnownHostsFiles,
 root=Homedir)
 })

 // For each known_hosts file, extract each line on a different row.
 SELECT * from foreach(
 row=authorized_keys,
 query={
 SELECT Uid, User, OSPath, Hostname, Type, PublicKey
 FROM split_records(
 filenames=OSPath, regex=" ", record_regex="\n",
 columns=["Hostname", "Type", "PublicKey"])
 /* Ignore comment lines. */
 WHERE not Hostname =~ "^[^#]+#"
 })

 - name: HostPublicKeys
 query: |
 LET Me &amp;lt;= SELECT * FROM info()

 SELECT * FROM foreach(row={
 SELECT OSPath
 FROM glob(globs="/etc/ssh/ssh_host*.pub")
 }, query={
 SELECT *, Me[0].Fqdn AS Fqdn
 FROM split_records(columns=["Type", "PublicKey", "KeyName"],
 filenames=OSPath,
 regex=" +")
 })

 notebook:
 - type: vql_suggestion
 name: "Resolve Known Hosts"
 template: |
 /*
 # Resolve Hostnames

 This query resolves the public keys in the known hosts file
 with the collected public keys from all hosts.

 This works best when this cell applies to a hunt collection
 from a wide number of hosts. It helps to resolve the
 hostnames from known hosts to real host names (these are
 usually hashed within the file).

 This artifact helps to establish historical SSH access from
 one machine to another machine.
 */

 LET lookup &amp;lt;= memoize(
 key="PublicKey",
 query={
 SELECT *
 FROM source(artifact="Linux.Ssh.KnownHosts/HostPublicKeys")
 })

 SELECT *, get(item=lookup, field=PublicKey) AS Hostname
 FROM source(artifact="Linux.Ssh.KnownHosts")

&lt;/code>&lt;/pre></description></item><item><title>Linux.Ssh.PrivateKeys</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.privatekeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.ssh.privatekeys/</guid><description>&lt;p>SSH Private keys can be either encrypted or unencrypted. Unencrypted
private keys are more risky because an attacker can use them without
needing to unlock them with a password.&lt;/p>
&lt;p>In particular, AWS instances are usually accessed by way of an SSH
key pair generated by the AWS console. This key is not encrypted by
default and it is possible that administrators simply save the key
on their systems without encrypting it.&lt;/p>
&lt;p>This artifact searches for private keys in the usual locations and
also records if they are encrypted or not. Not all key types are
supported&lt;/p>
&lt;p>NOTE: In order to encrypt your private key run:&lt;/p>
&lt;pre>&lt;code>ssh-keygen -p -f my_private_key
&lt;/code>&lt;/pre>
&lt;p>Change the glob to /** if you would like to search the entire filesystem.
Be aware, this is an expensive operation.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Ssh.PrivateKeys
description: |
 SSH Private keys can be either encrypted or unencrypted. Unencrypted
 private keys are more risky because an attacker can use them without
 needing to unlock them with a password.

 In particular, AWS instances are usually accessed by way of an SSH
 key pair generated by the AWS console. This key is not encrypted by
 default and it is possible that administrators simply save the key
 on their systems without encrypting it.

 This artifact searches for private keys in the usual locations and
 also records if they are encrypted or not. Not all key types are
 supported

 NOTE: In order to encrypt your private key run:

 ```
 ssh-keygen -p -f my_private_key
 ```

 Change the glob to /** if you would like to search the entire filesystem.
 Be aware, this is an expensive operation.

reference:
 - https://attack.mitre.org/techniques/T1145/
 - https://coolaj86.com/articles/the-openssh-private-key-format/
 - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html

precondition: SELECT OS From info() where OS = 'linux'

parameters:
 - name: KeyGlobs
 default: /home/*/.ssh/{*.pem,id_rsa,id_dsa}

 - name: ExcludePathRegex
 default: "^/(proc|sys|run|snap)"
 type: regex
 description: If this regex matches the path of any directory we do not even descend inside of it.
 
 - name: LocalFilesystemOnly
 default: Y
 type: bool
 description: |
 When set, we stay on local attached filesystems including loop, attached disk, cdrom, device mapper, and excluding proc, nfs etc.
 When set, it can miss keys in some Linux distros. If not sure, or run accross multiple distros, it is recommended to not set it.

sources:
 - query: |
 -- For new OpenSSH format
 LET SSHProfile = '''[
 ["Header", 0, [
 ["Magic", 0, "String", {
 "length": 100,
 }],
 ["cipher_length", 15, "uint32b"],
 ["cipher", 19, "String", {
 "length": "x=&amp;gt;x.cipher_length",
 }]
 ]]]
 '''

 -- Device major numbers considered local. See Linux.Search.FileFinder
 LET LocalDeviceMajor &amp;lt;= (NULL,
 253, 7, 8, 9, 11, 65, 66, 67, 68, 69, 70,
 71, 128, 129, 130, 131, 132, 133, 134, 135, 202, 253, 254, 259)

 -- By default set to 'True', to only search local filesystems.
 LET RecursionCallback = if(
 condition=LocalFilesystemOnly,
 then=if(condition=ExcludePathRegex,
 then="x=&amp;gt;x.Data.DevMajor IN LocalDeviceMajor AND NOT x.OSPath =~ ExcludePathRegex",
 else="x=&amp;gt;x.Data.DevMajor IN LocalDeviceMajor"),
 else=if(condition=ExcludePathRegex,
 then="x=&amp;gt;NOT x.OSPath =~ ExcludePathRegex",
 else=""))

 LET _Hits = SELECT OSPath,
 read_file(filename=OSPath, length=20240) AS Data
 FROM glob(globs=KeyGlobs, recursion_callback=RecursionCallback)
 WHERE Size &amp;lt; 20000

 LET Hits = SELECT OSPath, Data,
 base64decode(
 string=parse_string_with_regex(
 string=Data,
 regex="(?sm)KEY-----(.+)-----END").g1) || "" AS Decoded,
 parse_string_with_regex(
 string=Data,
 regex="(BEGIN.* PRIVATE KEY)").g1 AS Header,
 read_file(filename=OSPath.Dirname + (OSPath.Basename + ".pub") ) AS PublicKey
 FROM _Hits
 WHERE Header

 LET OpenSSHKeyParser(OSPath, Decoded) = SELECT OSPath,
 parse_binary(accessor="data", filename=Decoded,
 profile=SSHProfile, struct="Header") AS Parsed
 FROM scope()

 -- Support both types of ssh keys dependingg on the header
 SELECT * FROM foreach(row={SELECT * FROM Hits},
 query={
 SELECT * FROM switch(
 a={
 -- new format
 SELECT OSPath,
 Parsed.Magic AS KeyType,
 Parsed.cipher AS Cipher,
 Header, PublicKey
 FROM OpenSSHKeyParser(OSPath= OSPath, Decoded=Decoded)
 WHERE Header =~ "BEGIN OPENSSH PRIVATE KEY"
 },
 a2={
 -- encrypted rsa key from e.g. putty
 SELECT OSPath,
 "PKCS8" AS KeyType,
 parse_string_with_regex(string=Data,
 regex="DEK-Info: ([-a-zA-Z0-9]+)").g1 AS Cipher,
 Header, PublicKey
 FROM scope()
 WHERE Header =~ "BEGIN RSA PRIVATE KEY"
 AND "Proc-Type: 4,ENCRYPTED" in Data
 },
 b={
 -- unencrypted rsa key from e.g. AWS
 SELECT OSPath,
 "PKCS8" AS KeyType,
 "none" AS Cipher,
 Header, PublicKey
 FROM scope()
 WHERE Header =~ "BEGIN (RSA )?PRIVATE KEY"
 },
 c={
 -- old format encrypted
 SELECT OSPath,
 "PKCS8" AS KeyType,
 "PKCS#5" AS Cipher,
 Header, PublicKey
 FROM scope()
 WHERE Header =~ "BEGIN ENCRYPTED PRIVATE KEY"
 },
 d={
 -- catch all for unknown keys
 SELECT OSPath,
 "Unknown" AS KeyType,
 "Unknown" AS Cipher,
 Header, PublicKey
 FROM scope()
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.SuSE.Packages</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.suse.packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.suse.packages/</guid><description>&lt;p>Parse list of installed packages from zypper output&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.SuSE.Packages
author: Hilko Bengen &amp;lt;bengen@hilluzination.de&amp;gt;
description: |
 Parse list of installed packages from zypper output

sources:
 - precondition: |
 SELECT OS From info() WHERE OS = 'linux'

 query: |
 LET zypper_output = SELECT *
 FROM execve(
 length=1000000,
 argv=["zypper", "--xmlout", "search", "--installed-only", "--details", "--type=package"])
 
 LET xml = parse_xml(
 file=str(str=zypper_output.Stdout),
 accessor="data")
 
 SELECT *
 FROM foreach(
 row=xml.stream.`search-result`.`solvable-list`.solvable,
 query={
 SELECT Attrname AS Package,
 Attredition AS Version,
 Attrarch AS Architecture,
 Attrrepository AS Repository
 FROM _value
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.ACPITables</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.acpitables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.acpitables/</guid><description>&lt;p>Firmware ACPI functional table common metadata and content.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.ACPITables
description: Firmware ACPI functional table common metadata and content.
reference:
 - https://osquery.io/schema/3.2.6#acpi_tables
parameters:
 - name: kLinuxACPIPath
 default: /sys/firmware/acpi/tables
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 LET hashes = SELECT Name, Size, hash(path=OSPath) as Hash
 FROM glob(globs="*", root=kLinuxACPIPath)

 SELECT Name, Size, Hash.MD5, Hash.SHA1, Hash.SHA256 from hashes

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.BashHistory</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.bashhistory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.bashhistory/</guid><description>&lt;p>This artifact enables grep of Bash and alternate shell history files.&lt;/p>
&lt;p>It can also be used to target other files located in the user profile such as
&lt;em>_profile and &lt;em>rc files.
shell history: /{root,home/&lt;/em>}/.&lt;/em>_history
profile: /{root,home/&lt;em>}/.&lt;/em>_profile
&lt;em>rc file: /{root,home/&lt;/em>}/.*rc&lt;/p>
&lt;p>tags: .bash_history .bash_profile .bashrc&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.BashHistory
author: "Matt Green - @mgreen27"
description: |
 This artifact enables grep of Bash and alternate shell history files.

 It can also be used to target other files located in the user profile such as
 *_profile and *rc files.
 shell history: /{root,home/*}/.*_history
 profile: /{root,home/*}/.*_profile
 *rc file: /{root,home/*}/.*rc

 tags: .bash_history .bash_profile .bashrc


parameters:
 - name: TargetGlob
 default: /{root,home/*}/.*_history
 - name: SearchRegex
 type: regex
 description: "Regex of strings to search in line."
 default: '.'
 - name: WhitelistRegex
 type: regex
 description: "Regex of strings to leave out of output."
 default:

sources:
 - query: |
 LET files = SELECT OSPath FROM glob(globs=TargetGlob)

 SELECT * FROM foreach(row=files,
 query={
 SELECT Line, OSPath FROM parse_lines(filename=OSPath)
 WHERE
 Line =~ SearchRegex
 AND NOT if(condition= WhitelistRegex,
 then= Line =~ WhitelistRegex,
 else= FALSE)
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.BashShell</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.bashshell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.bashshell/</guid><description>&lt;p>This artifact allows running arbitrary commands through the system
shell.&lt;/p>
&lt;p>Since Velociraptor typically runs as root, the commands will also
run as root.&lt;/p>
&lt;p>This is a very powerful artifact since it allows for arbitrary
command execution on the endpoints. Therefore this artifact requires
elevated permissions (specifically the &lt;code>EXECVE&lt;/code>
permission). Typically it is only available with the &lt;code>administrator&lt;/code>
role.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.BashShell
description: |
 This artifact allows running arbitrary commands through the system
 shell.

 Since Velociraptor typically runs as root, the commands will also
 run as root.

 This is a very powerful artifact since it allows for arbitrary
 command execution on the endpoints. Therefore this artifact requires
 elevated permissions (specifically the `EXECVE`
 permission). Typically it is only available with the `administrator`
 role.

required_permissions:
 - EXECVE

parameters:
 - name: Command
 default: "ls -l /"

sources:
 - query: |
 SELECT * FROM execve(argv=["/bin/bash", "-c", Command])

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.CPUTime</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.cputime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.cputime/</guid><description>&lt;p>Displays information from /proc/stat file about the time the cpu
cores spent in different parts of the system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.CPUTime
description: |
 Displays information from /proc/stat file about the time the cpu
 cores spent in different parts of the system.
parameters:
 - name: procStat
 default: /proc/stat
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 LET raw = SELECT * FROM split_records(
 filenames=procStat,
 regex=' +',
 columns=['core', 'user', 'nice', 'system',
 'idle', 'iowait', 'irq', 'softirq',
 'steal', 'guest', 'guest_nice'])
 WHERE core =~ 'cpu.+'

 SELECT core AS Core,
 atoi(string=user) as User,
 atoi(string=nice) as Nice,
 atoi(string=system) as System,
 atoi(string=idle) as Idle,
 atoi(string=iowait) as IOWait,
 atoi(string=irq) as IRQ,
 atoi(string=softirq) as SoftIRQ,
 atoi(string=steal) as Steal,
 atoi(string=guest) as Guest,
 atoi(string=guest_nice) as GuestNice FROM raw

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Crontab</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.crontab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.crontab/</guid><description>&lt;p>Displays parsed information from crontab.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Crontab
description: |
 Displays parsed information from crontab.
parameters:
 - name: cronTabGlob
 default: /etc/crontab,/etc/cron.d/**,/var/at/tabs/**,/var/spool/cron/**,/var/spool/cron/crontabs/**
 - name: cronTabScripts
 default: /etc/cron.daily/*,/etc/cron.hourly/*,/etc/cron.monthly/*,/etc/cron.weekly/*
 - name: Length
 default: 10000
 type: int

precondition: SELECT OS From info() where OS = 'linux'

sources:
 - name: CronTabs
 query: |
 LET raw = SELECT * FROM foreach(
 row={
 SELECT OSPath from glob(globs=split(string=cronTabGlob, sep=","))
 },
 query={
 SELECT OSPath, data, parse_string_with_regex(
 string=data,
 regex=[
 /* Regex for event (Starts with @) */
 "^(?P&amp;lt;Event&amp;gt;@[a-zA-Z]+)\\s+(?P&amp;lt;Command&amp;gt;.+)",

 /* Regex for regular command. */
 "^(?P&amp;lt;Minute&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Hour&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;DayOfMonth&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Month&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;DayOfWeek&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;User&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Command&amp;gt;.+)$"]) as Record

 /* Read lines from the file and filter ones that start with "#" */
 FROM split_records(
 filenames=OSPath,
 regex="\n", columns=["data"]) WHERE not data =~ "^\\s*#"
 }) WHERE Record.Command

 SELECT Record.Event AS Event,
 Record.User AS User,
 Record.Minute AS Minute,
 Record.Hour AS Hour,
 Record.DayOfMonth AS DayOfMonth,
 Record.Month AS Month,
 Record.DayOfWeek AS DayOfWeek,
 Record.Command AS Command,
 OSPath AS Path
 FROM raw
 - name: CronScripts
 query: |
 SELECT Mtime, OSPath, read_file(filename=OSPath,length=Length) AS Content
 FROM glob(globs=split(string=cronTabScripts, sep=","))
 - name: Uploaded
 query: |
 SELECT OSPath, upload(file=OSPath) AS Upload
 FROM glob(globs=split(string=cronTabGlob + "," + cronTabScripts, sep=","))

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Groups</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.groups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.groups/</guid><description>&lt;p>Get system group IDs, names and memberships from /etc/group&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Groups
author: Andreas Misje – @misje
description: Get system group IDs, names and memberships from /etc/group
parameters:
 - name: GroupFile
 default: /etc/group
 description: The location of the group file

sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 SELECT Group, int(int=GID) AS GID, filter(regex='.+',
 list=split(sep_string=',', string=Members)) AS Members
 FROM split_records(
 filenames=GroupFile,
 regex=':', record_regex='\r?\n',
 columns=['Group', 'Password', 'GID', 'Members'])

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.LastUserLogin</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.lastuserlogin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.lastuserlogin/</guid><description>&lt;p>Find and parse system wtmp files. This indicate when the user last
logged in.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.LastUserLogin
description: |
 Find and parse system wtmp files. This indicate when the user last
 logged in.

parameters:
 - name: wtmpGlobs
 default: /var/log/wtmp*

 - name: MaxCount
 default: 10000
 type: int64

 - name: LoginType
 type: choices
 default: Interactive Sessions
 choices:
 - Interactive Sessions
 - All Sessions
 description: |
 Per default, we are only interested in interactive sessions, if
 you want to see more, choose the second option


 - name: recent_x_days
 default: 100000
 type: int
 description: |
 show all logs within the last X days (default 14 days)

 - name: excluded_users
 type: regex
 default: "ansible|LOGIN"
 description: |
 List of Users (regex), you are not interested in

export: |
 LET FilterLookup = dict(
 `Interactive Sessions`="USER_PROCESS|LOGIN_PROCESS",
 `All Sessions`="RUN_LVL|BOOT_TIME|INIT_PROCESS|LOGIN_PROCESS|USER_PROCESS")

 LET wtmpProfile &amp;lt;= '''
 [
 ["Header", 0, [

 ["records", 0, "Array", {
 "type": "utmp",
 "count": "x=&amp;gt;MaxCount",
 "max_count": 100000,
 }],
 ]],
 ["utmp", 384, [
 ["ut_type", 0, "Enumeration", {
 "type": "short int",
 "choices": {
 "0": "EMPTY",
 "1": "RUN_LVL",
 "2": "BOOT_TIME",
 "5": "INIT_PROCESS",
 "6": "LOGIN_PROCESS",
 "7": "USER_PROCESS",
 "8": "DEAD_PROCESS"
 }
 }],
 ["ut_pid", 4, "int"],
 ["ut_terminal", 8, "String", {"length": 32}],
 ["ut_terminal_identifier", 40, "String", {"length": 4}],
 ["ut_user", 44, "String", {"length": 32}],
 ["ut_hostname", 76, "String", {"length": 256}],
 ["ut_termination_status", 332, "int"],
 ["ut_exit_status", 334, "int"],
 ["ut_session", 336, "int"],
 ["ut_timestamp", 340, "Timestamp", {
 "type": "uint32",
 }],
 ["ut_ip_address", 348, "int64"],
 ]
 ]
 ]]
 ]'''

sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'

 query: |
 LET LoginType &amp;lt;= get(item=FilterLookup, field=LoginType) || LoginType
 LET start_time &amp;lt;= timestamp(epoch=now() - recent_x_days * 3600 * 24)

 LET _ &amp;lt;= log(message="Start time %v", args=start_time)

 LET parsed = SELECT OSPath, parse_binary(
 filename=OSPath,
 profile=wtmpProfile,
 struct="Header"
 ) AS Parsed
 FROM glob(globs=split(string=wtmpGlobs, sep=","))

 // In Order to combine Login/Logout into one Table, we create a
 // logout table first
 LET logout_table &amp;lt;= SELECT * FROM foreach(row=parsed,
 query={
 SELECT * FROM foreach(row=Parsed.records,
 query={
 SELECT ut_type AS logout_Type,
 ut_pid as logout_PID,
 ut_terminal as logout_Terminal,
 ut_timestamp as logout_time
 FROM scope()
 WHERE logout_Type = "DEAD_PROCESS"
 AND logout_time &amp;gt; start_time
 })
 })
 Order by logout_time DESC

 SELECT * FROM foreach(row=parsed,
 query={
 SELECT * FROM foreach(row=Parsed.records,
 query={
 SELECT OSPath,
 ut_type AS login_Type,
 ut_id AS login_ID,
 ut_pid as login_PID,
 ut_hostname as login_Host,
 ut_user as login_User,
 ip(netaddr4_le=ut_ip_address) AS login_IpAddr,
 ut_terminal as login_Terminal,
 ut_timestamp as login_time, {
 SELECT logout_time
 FROM logout_table
 WHERE ut_pid = logout_PID
 AND ut_terminal = logout_Terminal
 AND ut_timestamp &amp;lt; logout_time
 LIMIT 1
 } AS logout_time
 FROM scope()
 WHERE login_Type =~ LoginType
 AND NOT login_User =~ excluded_users
 AND login_time &amp;gt; start_time
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.LogGrep</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.loggrep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.loggrep/</guid><description>&lt;p>This artifact enables grep and zgrep of linux logs and gzipped log files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.LogGrep
author: "Matt Green - @mgreen27"
description: |
 This artifact enables grep and zgrep of linux logs and gzipped log files.

parameters:
 - name: TargetGlob
 default: /var/log/**
 - name: GrepRegex
 type: regex
 description: "Regex of strings to search in line."
 default: 'malware\.php'
 - name: WhitelistRegex
 type: regex
 description: "Regex of strings to leave out of output."
 default:

sources:
 - query: |
 LET files = SELECT OSPath FROM glob(globs=TargetGlob)
 WHERE NOT IsDir

 SELECT * FROM foreach(row=files,
 query={
 SELECT Line, OSPath FROM parse_lines(filename=OSPath)
 WHERE
 Line =~ GrepRegex
 AND NOT if(condition= WhitelistRegex,
 then= Line =~ WhitelistRegex,
 else= FALSE)
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.LogHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.loghunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.loghunter/</guid><description>&lt;p>This artifact enables grep of Linux, MacOS and Windows logs.
Parameters include SearchRegex and WhitelistRegex as regex terms.
I have also included a Path exclusion regex to improve result output
and automatically skip hitting notorious locations like /proc.&lt;/p>
&lt;p>NOTE: nosymlink feature of glob is set so unexpected results may occur if
targetting includes symlink files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.LogHunter
author: "Matt Green - @mgreen27"
description: |
 This artifact enables grep of Linux, MacOS and Windows logs.
 Parameters include SearchRegex and WhitelistRegex as regex terms.
 I have also included a Path exclusion regex to improve result output
 and automatically skip hitting notorious locations like /proc.

 NOTE: nosymlink feature of glob is set so unexpected results may occur if
 targetting includes symlink files.

parameters:
 - name: TargetFiles
 default: '/var/log/**'
 - name: SearchRegex
 description: "Regex of strings to search in log line."
 default: ' POST '
 type: regex
 - name: FilterRegex
 description: "Regex of strings to leave out of output."
 default:
 type: regex
 - name: ExcludeDirectoryRegex
 type: regex
 description: "Does not descend into directories that match this Regex."
 default: "^/(shared|proc|snap)"
 - name: ExcludePathRegex
 description: "Regex of paths to exclude from scanning."
 default: '\.journal$'
 type: regex

sources:
 - query: |
 LET RecursionCB &amp;lt;= if(condition= ExcludeDirectoryRegex,
 then="x =&amp;gt; NOT x.OSPath =~ ExcludeDirectoryRegex",
 else="x =&amp;gt; NOT x.OSPath =~ '^/proc' ")

 LET files = SELECT OSPath
 FROM glob(globs=TargetFiles,
 nosymlink=TRUE,
 recursion_callback=RecursionCB)
 WHERE NOT IsDir AND NOT OSPath =~ ExcludePathRegex
 AND log(message="Scanning %v", args=OSPath)

 LET hits = SELECT * FROM foreach(row=files,
 query={
 SELECT OSPath, Line FROM parse_lines(filename=OSPath)
 WHERE Line =~ SearchRegex
 })

 SELECT * FROM if(condition=FilterRegex,
 then={
 SELECT * FROM hits
 WHERE NOT Line =~ FilterRegex
 },
 else={
 SELECT * FROM hits
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Maps</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.maps/</guid><description>&lt;p>A running binary may link other binaries into its address
space. These shared objects contain exported functions which may be
used by the binary.&lt;/p>
&lt;p>This artifact parses the /proc/&lt;pid>/maps to emit all mapped files
into the process.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Maps
description: |
 A running binary may link other binaries into its address
 space. These shared objects contain exported functions which may be
 used by the binary.

 This artifact parses the /proc/&amp;lt;pid&amp;gt;/maps to emit all mapped files
 into the process.

precondition: SELECT OS From info() where OS = 'linux'

parameters:
 - name: processRegex
 description: A regex applied to process names.
 default: .
 type: regex

sources:
 - query: |
 LET processes = SELECT Pid, Name, Username
 FROM pslist()
 WHERE Name =~ processRegex

 SELECT Pid, Name, Username,
 "0x" + Record.Start AS StartHex,
 "0x" + Record.End AS EndHex,
 Record.Perm AS Perm,
 atoi(string="0x" + Record.Size) AS Size,
 "0x" + Record.Size AS SizeHex,
 Record.Filename AS Filename,
 if(condition=Record.Deleted, then=TRUE, else=FALSE) AS Deleted
 FROM foreach(
 row=processes,
 query={
 SELECT parse_string_with_regex(
 string=Line,
 regex="(?P&amp;lt;Start&amp;gt;^[^-]+)-(?P&amp;lt;End&amp;gt;[^\\s]+)\\s+(?P&amp;lt;Perm&amp;gt;[^\\s]+)\\s+(?P&amp;lt;Size&amp;gt;[^\\s]+)\\s+[^\\s]+\\s+(?P&amp;lt;PermInt&amp;gt;[^\\s]+)\\s+(?P&amp;lt;Filename&amp;gt;.+?)(?P&amp;lt;Deleted&amp;gt; \\(deleted\\))?$") AS Record,
 Pid, Name, Username
 FROM parse_lines(
 filename=format(format="/proc/%d/maps", args=[Pid]),
 accessor='file'
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Pslist</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.pslist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.pslist/</guid><description>&lt;p>List processes and their running binaries.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Pslist
description: |
 List processes and their running binaries.

aliases:
 - MacOS.Sys.Pslist

parameters:
 - name: processRegex
 default: .
 type: regex

precondition: |
 SELECT OS From info() where OS =~ 'linux|darwin'

sources:
 - query: |
 SELECT Pid, Ppid, Name, CommandLine, Exe,
 hash(path=Exe) as Hash,
 Username, timestamp(epoch=CreateTime/1000) AS CreatedTime,
 MemoryInfo.RSS AS RSS,
 Exe =~ "\\(deleted\\)$" AS Deleted
 FROM process_tracker_pslist()
 WHERE Name =~ processRegex

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Services</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.services/</guid><description>&lt;p>Parse services from systemctl&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Services
description: Parse services from systemctl 

sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 queries:
 - |
 LET services = SELECT Stdout FROM execve(argv=['systemctl', 'list-units', '--type=service'])
 
 LET all_services = SELECT grok(grok="%{NOTSPACE:Unit}%{SPACE}%{NOTSPACE:Load}%{SPACE}%{NOTSPACE:Active}%{SPACE}%{NOTSPACE:Sub}%{SPACE}%{GREEDYDATA:Description}", data=Line) AS Parsed
 FROM parse_lines(accessor="data", filename=services.Stdout)
 
 SELECT * FROM foreach(row=all_services, column="Parsed") WHERE Unit =~ ".service"
 
 
&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.SUID</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.suid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.suid/</guid><description>&lt;p>When the setuid or setgid bits are set on Linux or macOS for an
application, this means that the application will run with the
privileges of the owning user or group respectively [1]. Normally an
application is run in the current user’s context, regardless of
which user or group owns the application. There are instances where
programs need to be executed in an elevated context to function
properly, but the user running them doesn’t need the elevated
privileges. Instead of creating an entry in the sudoers file, which
must be done by root, any user can specify the setuid or setgid flag
to be set for their own applications. These bits are indicated with
an &amp;ldquo;s&amp;rdquo; instead of an &amp;ldquo;x&amp;rdquo; when viewing a file&amp;rsquo;s attributes via ls
-l. The chmod program can set these bits with via bitmasking, chmod
4777 [file] or via shorthand naming, chmod u+s [file].&lt;/p>
&lt;p>An adversary can take advantage of this to either do a shell escape
or exploit a vulnerability in an application with the setsuid or
setgid bits to get code running in a different user’s
context. Additionally, adversaries can use this mechanism on their
own malware to make sure they&amp;rsquo;re able to execute in elevated
contexts in the future [2].&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.SUID
description: |
 When the setuid or setgid bits are set on Linux or macOS for an
 application, this means that the application will run with the
 privileges of the owning user or group respectively [1]. Normally an
 application is run in the current user’s context, regardless of
 which user or group owns the application. There are instances where
 programs need to be executed in an elevated context to function
 properly, but the user running them doesn’t need the elevated
 privileges. Instead of creating an entry in the sudoers file, which
 must be done by root, any user can specify the setuid or setgid flag
 to be set for their own applications. These bits are indicated with
 an "s" instead of an "x" when viewing a file's attributes via ls
 -l. The chmod program can set these bits with via bitmasking, chmod
 4777 [file] or via shorthand naming, chmod u+s [file].

 An adversary can take advantage of this to either do a shell escape
 or exploit a vulnerability in an application with the setsuid or
 setgid bits to get code running in a different user’s
 context. Additionally, adversaries can use this mechanism on their
 own malware to make sure they're able to execute in elevated
 contexts in the future [2].

reference:
 - https://attack.mitre.org/techniques/T1166/

parameters:
 - name: GlobExpression
 default: /usr/**

sources:
 - query: |
 SELECT Mode.String AS Mode,
 OSPath, Size,
 Mtime,
 Sys.Uid AS OwnerID,
 Sys.Gid AS GroupID
 FROM glob(globs=GlobExpression) WHERE Mode =~ '^g|u'

&lt;/code>&lt;/pre></description></item><item><title>Linux.Sys.Users</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.sys.users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.sys.users/</guid><description>&lt;p>Get User specific information like homedir, group etc from /etc/passwd.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Sys.Users
description: Get User specific information like homedir, group etc from /etc/passwd.
parameters:
 - name: PasswordFile
 default: /etc/passwd
 description: The location of the password file.
sources:
 - precondition: |
 SELECT OS From info() where OS = 'linux'
 query: |
 SELECT User, Description, Uid, Gid, Homedir, Shell
 FROM split_records(
 filenames=PasswordFile,
 regex=":", record_regex="\r?\n",
 columns=["User", "X", "Uid", "Gid", "Description", "Homedir", "Shell"])

&lt;/code>&lt;/pre></description></item><item><title>Linux.Syslog.SSHLogin</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.syslog.sshlogin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.syslog.sshlogin/</guid><description>&lt;p>Parses the auth logs to determine all SSH login attempts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Syslog.SSHLogin
description: |
 Parses the auth logs to determine all SSH login attempts.

reference:
 - https://www.elastic.co/blog/grokking-the-linux-authorization-logs

type: CLIENT

parameters:
 - name: syslogAuthLogPath
 default: /var/log/{auth.log,secure}*

 - name: SSHGrok
 description: A Grok expression for parsing SSH auth lines.
 default: &amp;gt;-
 %{SYSLOGTIMESTAMP:Timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{DATA:event} %{DATA:method} for (invalid user )?%{DATA:user} from %{IPORHOST:ip} port %{NUMBER:port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?

sources:
 - query: |
 // Basic syslog parsing via GROK expressions.
 SELECT timestamp(string=Event.Timestamp) AS Time,
 Event.ip AS IP,
 Event.event AS Result,
 Event.method AS Method,
 Event.user AS AttemptedUser,
 OSPath
 FROM foreach(
 row={
 SELECT OSPath FROM glob(globs=syslogAuthLogPath)
 }, query={
 SELECT grok(grok=SSHGrok, data=Line) AS Event, OSPath
 FROM parse_lines(filename=OSPath)
 WHERE Event.program = "sshd"
 })

&lt;/code>&lt;/pre></description></item><item><title>Linux.Triage.ProcessMemory</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.triage.processmemory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.triage.processmemory/</guid><description>&lt;p>Dump process memory and upload to the server&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Triage.ProcessMemory
description: |
 Dump process memory and upload to the server

precondition: SELECT OS From info() where OS = 'linux'

parameters:
 - name: processPid
 type: int
 default: 2215

column_types:
 - name: CrashDump
 type: preview_upload

sources:
 - query: |
 SELECT Name as ProcessName, CommandLine, Pid,
 upload(file=format(format="/%d", args=processPid),
 accessor="process") as CrashDump
 FROM pslist(pid=processPid)

&lt;/code>&lt;/pre></description></item><item><title>Linux.Users.InteractiveUsers</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.users.interactiveusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.users.interactiveusers/</guid><description>&lt;p>Gets the interactive users from a Linux host.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Users.InteractiveUsers

description: |
 Gets the interactive users from a Linux host.

author: George-Andrei Iosif (@iosifache)

type: CLIENT

parameters:
 - name: NonInteractiveExecutables
 description: Non-interactive executables that may appear in user's details
 type: str
 default: "/usr/sbin/nologin,/bin/false,/sbin/nologin,/bin/sync"

sources:
 - precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'linux'

 query: |
 SELECT Fqdn AS Host,
 User,
 Description,
 Uid,
 Gid,
 Homedir,
 Shell 
 FROM Artifact.Linux.Sys.Users()
 WHERE NOT Shell IN split(string=NonInteractiveExecutables, sep_string=",")

&lt;/code>&lt;/pre></description></item><item><title>Linux.Users.RootUsers</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.users.rootusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.users.rootusers/</guid><description>&lt;p>Detects users added in the &lt;code>sudo&lt;/code> group.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Users.RootUsers

description: |
 Detects users added in the `sudo` group.

author: George-Andrei Iosif (@iosifache)

type: CLIENT

sources:
 - precondition: |
 SELECT OS
 FROM info()
 WHERE OS = 'linux'

 query: |
 SELECT *
 FROM foreach(
 row={
 SELECT *
 FROM Artifact.Linux.Sys.Users()
 },
 query={
 SELECT Fqdn AS Host,
 User,
 Description,
 Uid,
 Gid,
 Homedir,
 Shell
 FROM execve(argv=["id", "-Gn", User])
 WHERE ReturnCode = 0 AND Stdout =~ "root"
 }
 )

&lt;/code>&lt;/pre></description></item><item><title>Linux.Utils.InstallDeb</title><link>https://docs.velociraptor.app/artifact_references/pages/linux.utils.installdeb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/linux.utils.installdeb/</guid><description>&lt;p>Install a deb package and configure it with debconf answers. The package
may either be specified by name or be an uploaded file. If the package
already exists, it may be optionally reconfigured with debconf answers.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Linux.Utils.InstallDeb
author: Andreas Misje – @misje
description: |
 Install a deb package and configure it with debconf answers. The package
 may either be specified by name or be an uploaded file. If the package
 already exists, it may be optionally reconfigured with debconf answers.

type: CLIENT

required_permissions:
 - EXECVE

reference:
 - https://manpages.debian.org/bookworm/debconf-doc/debconf-devel.7.en.html#Type

parameters:
 - name: DebName
 description: |
 Package to install (by name). Ignored if DebFile is set. An absolute path
 to a deb file that already exists on the system is also accepted.

 - name: DebFile
 description: |
 Package to install (by file). Remember to click "Upload"! When set,
 DebName is ignored. Use DebName with an absolute file path if the
 file already exists on the system and does not need to be uploaded.
 type: upload

 - name: UpdateSources
 description: |
 Run `apt-get update` before installing the package. This is not necessary
 if the package has no dependencies, and it should be disabled if there
 is no Internet.
 type: bool
 default: True

 - name: ForceConfNew
 type: bool
 description: |
 Use the configuration delivered by the package instead of keeping the
 local changes.

 - name: ReconfigureIfInstalled
 type: bool
 description: |
 If the package is already installed, run pre-seed debconf and
 `dpkg-reconfigure` instead.

 - name: DebConfValues
 type: csv
 description: |
 debconf is a system used by many packages for interactive configuration.
 When using a non-interactive frontend (like this artifact), answers may
 by provided as a "pre-seed" file. Example line:

 "wireshark-common/install-setuid,boolean,false"
 default: |
 Key,Type,Value

column_types:
 - name: Stdout
 type: nobreak

 - name: Stderr
 type: nobreak

sources:
 - precondition:
 SELECT OS From info() where OS = 'linux'

 query: |
 LET Package &amp;lt;= if(
 condition=DebFile,
 then=tempfile(data=DebFile, extension='_amd64.deb'),
 else=DebName)

 /* The file name is lost from the uploaded file, so extract it from the
 package instead: */
 LET PackageInfo = SELECT Stdout
 FROM execve(argv=['/usr/bin/dpkg-deb', '--field', Package, 'Package'])

 LET PackageName = if(
 condition=DebFile,
 then=PackageInfo[0].Stdout[:-1], // remove "\n"
 else=DebName)

 /* The file format is "package_name question type answer": */
 LET PreSeedLines = SELECT
 join(
 sep=' ',
 array=(PackageName, Key, Type, Value, )) AS Line
 FROM DebConfValues

 LET PreSeedFile &amp;lt;= tempfile(data=join(sep='\n', array=PreSeedLines.Line))

 LET AptOpts &amp;lt;= ('-f', '-y', '-o', 'Debug::pkgProblemResolver=yes', '--no-install-recommends', ) + if(
 condition=ForceConfNew,
 then=('-o', 'Dpkg::Options::="--force-confnew"', ),
 else=[])

 LET PreSeed = SELECT
 'Pre-seed debconf' AS Step,
 *
 FROM if(
 condition=DebConfValues,
 then={
 SELECT *
 FROM execve(argv=['/usr/bin/debconf-set-selections', PreSeedFile, ])
 WHERE log(
 message=format(
 format='Pre-seeding %v',
 args=[PackageName, ]),
 level='INFO')
 })

 LET Install = SELECT *
 FROM chain(
 a_update={
 SELECT
 'Update index' AS Step,
 *
 FROM if(
 condition=UpdateSources,
 then={
 SELECT *
 FROM execve(argv=['/usr/bin/apt-get', '-y', 'update'])
 WHERE log(
 message='Updating package index before installing',
 level='INFO')
 })
 },
 b_debconf=PreSeed,
 c_install={
 SELECT
 'Installing package' AS Step,
 *
 FROM execve(argv=('/usr/bin/apt-get', 'install', ) + AptOpts + (Package, ))
 WHERE log(
 message=format(
 format='Installing deb package %v',
 args=[PackageName, ]),
 level='INFO')
 })

 LET IsInstalled = SELECT *
 FROM stat(
 filename=path_join(
 components=('/var/lib/dpkg/info', PackageName + '.list')))
 WHERE log(
 message=format(
 format='Package %v is already installed',
 args=[PackageName, ]),
 level='INFO')

 SELECT *
 FROM if(
 condition=IsInstalled,
 then=if(
 condition=ReconfigureIfInstalled,
 then={
 SELECT *
 FROM chain(
 a_debconf=PreSeed,
 b_reconfigure={
 SELECT
 'Reconfiguring package' AS Step,
 *
 FROM execve(argv=['/usr/sbin/dpkg-reconfigure', PackageName, ],
 env=dict(
 DEBIAN_FRONTEND='noninteractive'))
 WHERE log(
 message=format(
 format='Reconfiguring deb package %v',
 args=[PackageName, ]),
 level='INFO')
 })
 }),
 else=Install)

&lt;/code>&lt;/pre></description></item><item><title>LogScale.Events.Clients</title><link>https://docs.velociraptor.app/artifact_references/pages/logscale.events.clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/logscale.events.clients/</guid><description>&lt;p>This server side event monitoring artifact will watch a selection of client
monitoring artifacts for new events and push those to a LogScale (formerly
Humio) ingestion endpoint&lt;/p>
&lt;p>NOTE: You must ensure you are collecting these artifacts from the
clients by adding them to the &amp;ldquo;Client Events&amp;rdquo; GUI.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: LogScale.Events.Clients
description: |
 This server side event monitoring artifact will watch a selection of client
 monitoring artifacts for new events and push those to a LogScale (formerly
 Humio) ingestion endpoint

 NOTE: You must ensure you are collecting these artifacts from the
 clients by adding them to the "Client Events" GUI.

type: SERVER_EVENT

parameters:
 - name: ingestApiBase
 description: API Base Url for LogScale server
 type: string
 default: https://cloud.community.humio.com/api
 - name: ingestToken
 description: Ingest token for API
 type: string
 - name: tagFields
 description: Comma-separated list of field names to use as tags in the message; Can be renamed with &amp;lt;oldname&amp;gt;=&amp;lt;newname&amp;gt;.
 default:
 type: string
 - name: numThreads
 description: Number of threads to start up to post events
 type: int
 default: 1
 - name: httpTimeout
 description: Timeout (in seconds) for http connection attempts
 type: int
 default: 10
 - name: batchingTimeoutMs
 description: Timeout (in ms) to batch events prior to sending
 type: int
 default: 30000
 - name: eventBatchSize
 description: Count of events to batch prior to sending
 type: int
 default: 2000
 - name: statsInterval
 description: Interval to post statistics to log (in seconds, 0 to disable)
 type: int
 default: 600
 - name: debug
 description: Enable verbose logging
 type: bool
 default: false
 - name: Artifacts
 type: artifactset
 artifact_type: CLIENT_EVENT
 description: Client artifacts to monitor

sources:
 - query: |
 LET artifacts_to_watch = SELECT Artifact FROM Artifacts
 WHERE log(message="Uploading artifact " + Artifact + " to LogScale")

 LET events = SELECT * FROM foreach(
 row=artifacts_to_watch,
 async=TRUE, // Required for event queries in foreach()
 query={
 SELECT *, Artifact, timestamp(epoch=now()) AS timestamp
 FROM watch_monitoring(artifact=Artifact)
 })

 SELECT * FROM logscale_upload(
 query=events,
 apibaseurl=ingestApiBase,
 ingest_token=ingestToken,
 threads=numThreads,
 tag_fields=split(string=tagFields, sep=","),
 batching_timeout_ms=batchingTimeoutMs,
 event_batch_size=eventBatchSize,
 http_timeout=httpTimeout,
 debug=debug,
 stats_interval=statsInterval)

&lt;/code>&lt;/pre></description></item><item><title>LogScale.Flows.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/logscale.flows.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/logscale.flows.upload/</guid><description>&lt;p>This server side event monitoring artifact waits for new artifacts
to be collected from endpoints and automatically posts those to a
LogScale (formerly Humio) ingestion endpoint.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: LogScale.Flows.Upload
description: |
 This server side event monitoring artifact waits for new artifacts
 to be collected from endpoints and automatically posts those to a
 LogScale (formerly Humio) ingestion endpoint.

type: SERVER_EVENT

parameters:
 - name: ingestApiBase
 description: API Base Url for LogScale server
 type: string
 default: https://cloud.community.humio.com/api
 - name: ingestToken
 description: Ingest token for API
 type: string
 - name: tagFields
 description: Comma-separated list of field names to use as tags in the message; Can be renamed with &amp;lt;oldname&amp;gt;=&amp;lt;newname&amp;gt;.
 default:
 type: string
 - name: numThreads
 description: Number of threads to start up to post events
 type: int
 default: 1
 - name: httpTimeout
 description: Timeout (in seconds) for http connection attempts
 type: int
 default: 10
 - name: batchingTimeoutMs
 description: Timeout to batch events prior to sending
 type: int
 default: 30000
 - name: eventBatchSize
 description: Count of events to batch prior to sending
 type: int
 default: 2000
 - name: statsInterval
 description: Interval to post statistics to log (in seconds, 0 to disable)
 type: int
 default: 600
 - name: debug
 description: Enable verbose logging
 type: bool
 default: false
 - name: ArtifactNameRegex
 default: .
 type: regex
 description: Only upload these artifacts to elastic

sources:
 - query: |
 LET completions = SELECT * FROM watch_monitoring(
 artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex

 LET documents = SELECT * FROM foreach(row=completions,
 query={
 SELECT * FROM foreach(
 row=Flow.artifacts_with_results,
 query={
 SELECT *, _value AS Artifact,
 timestamp(epoch=now()) AS timestamp,
 ClientId, Flow.session_id AS FlowId
 FROM source(
 client_id=ClientId,
 flow_id=Flow.session_id,
 artifact=_value)
 })
 })

 SELECT * FROM logscale_upload(
 query=documents,
 apibaseurl=ingestApiBase,
 ingest_token=ingestToken,
 threads=numThreads,
 tag_fields=split(string=tagFields, sep=","),
 batching_timeout_ms=batchingTimeoutMs,
 event_batch_size=eventBatchSize,
 http_timeout=httpTimeout,
 debug=debug,
 stats_interval=statsInterval)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Applications.Chrome.History</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.applications.chrome.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.applications.chrome.history/</guid><description>&lt;p>Read all User&amp;rsquo;s chrome history.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Applications.Chrome.History
description: |
 Read all User's chrome history.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future


parameters:
 - name: historyGlobs
 default: /Users/*/Library/Application Support/Google/Chrome/*/History
 - name: urlSQLQuery
 default: |
 SELECT url as visited_url, title, visit_count,
 typed_count, last_visit_time
 FROM urls
 - name: userRegex
 default: .

precondition: SELECT OS From info() where OS = 'darwin'

sources:
 - query: |
 LET history_files = SELECT
 parse_string_with_regex(regex="/Users/(?P&amp;lt;User&amp;gt;[^/]+)", string=OSPath).User AS User,
 OSPath, Mtime
 FROM glob(globs=historyGlobs)

 SELECT * FROM foreach(row=history_files,
 query={
 SELECT User, OSPath,
 Mtime,
 visited_url,
 title, visit_count, typed_count,
 timestamp(winfiletime=last_visit_time * 10) as last_visit_time
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 })

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Applications.MRU</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.applications.mru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.applications.mru/</guid><description>&lt;p>Parse the MRU from MacOS users&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Applications.MRU
description: |
 Parse the MRU from MacOS users

reference:
 - https://mac-alias.readthedocs.io/en/latest/bookmark_fmt.html
 - https://github.com/al45tair/mac_alias
 - https://www.mac4n6.com/blog/2016/7/10/new-script-macmru-most-recently-used-plist-parser

type: CLIENT

parameters:
 - name: FinderPlistPath
 default: /Users/*/Library/Preferences/com.apple.finder.plist

export: |
 -- Parser for MAC Bookmark format
 LET type_lookup &amp;lt;= dict(
 `0x100`="__DataString",
 `0x200`="__DataData",
 `0x300`="__DataUint32",
 `0x400`="__DataDate",
 `0x500`="__DataBool",
 `0x600`="__DataArray",
 `0x700`="__DataDict",
 `0x800`="__DataUUID",
 `0x900`="__DataURL"
 )

 LET MRULookup &amp;lt;= dict(
 `0x2040`="Volume Bookmark",
 `0x2002`="Volume Path",
 `0x2020`="Volume Flags",
 `0x2030`="Volume is Root FS",
 `0x2011`="Volume UUID",
 `0x2012`="Volume Size",
 `0x2013`="Volume Creation Date",
 `0x2005`="Volume URL",
 `0x2040`="Volume Bookmark",
 `0x2050`="Volume Mount Point",
 `0xf080`="Security Extension",
 `0xf081`="Security Extension",
 `0x1004`="Target Path",
 `0x1005`="Target CNID Path",
 `0xc001`="Containing Folder Index",
 `0x1040`="Target Creation Date",
 `0x1010`="Target Flags",
 `0x1020`="Target Filename",
 `0xc011`="Creator Username",
 `0xc012`="Creator UID"
 )

 LET BookmarkProfile = '''[
 ["Header", 0, [
 ["Magic", 0, "String", {
 length: 4,
 }],
 ["Size", 4, "uint32"],
 ["HeaderSize", 12, "uint32"],
 ["TOCOffset", "x=&amp;gt;x.HeaderSize", "uint32"],
 ["TOC", "x=&amp;gt;x.TOCOffset + x.HeaderSize", "TOC"]
 ]],
 ["TOC", 0, [
 ["SizeOfTOC", 0, "uint32"],
 ["Magic", 4, "uint32"],
 ["TOCId", 8, "uint32"],
 ["NextTOC", 12, "uint32"],
 ["TOCCount", 16, "uint32"],
 ["Items", 20, "Array", {
 type: "TOCItem",
 count: "x=&amp;gt;x.TOCCount",
 }]
 ]],
 ["__TOCArrayPtr", 4, [
 ["Offset", 0, "uint32"],
 ["Item", 0, "Profile", {
 type: "TOCValue",
 offset: "x=&amp;gt;x.Offset + 48"
 }]
 ]],
 ["TOCValue", 0, [
 ["MyOffset", 0, "Value", {
 value: "x=&amp;gt;x.StartOf",
 }],
 ["length", 0, "uint32"],
 ["subtype", 4, "BitField", {
 type: "uint32",
 start_bit: 0,
 end_bit: 8,
 }],
 ["data_type", 4, "BitField", {
 type: "uint32",
 start_bit: 8,
 end_bit: 32,
 }],
 ["data", 0, "Value", {
 value: "x=&amp;gt;get(item=x, field=get(item=type_lookup, field=format(format='%#x', args=x.data_type)))",
 }],
 ["__DataString", 8, "String", {
 length: "x=&amp;gt;x.length",
 term: "",
 }],
 ["__DataData", 0, "Value", {
 value: "x=&amp;gt;format(format='%x', args=x.__DataStr)",
 }],
 ["__DataDateFloat", 8, "float64be"],
 ["__DataDate", 0, "Value", {
 value: "x=&amp;gt;timestamp(cocoatime=x.__DataDateFloat)",
 }],
 ["__DataUint32", 8, "uint32"],
 ["__DataBool", 0, "Value", {
 value: "x=&amp;gt;if(condition=x.subtype, then=TRUE, else=FALSE)",
 }],
 ["__DataURL", 0, "Value", {
 value: "x=&amp;gt;x.__DataString",
 }],
 ["__DataArrayOffsets", 8, "Array", {
 count: "x=&amp;gt;x.length / 4",
 type: "__TOCArrayPtr"
 }],
 ["__DataArray", 0, "Value", {
 value: "x=&amp;gt;x.__DataArrayOffsets.Item.data",
 }],
 ]],
 ["TOCItem", 12, [
 ["ID", 0, "uint32"],
 ["Offset", 4, "uint32"],
 ["TOCValue", "x=&amp;gt;x.Offset + 48 - x.StartOf", "TOCValue"],
 ]]
 ]
 '''

 LET ParseBookmark(Bookmark) =
 SELECT _value.name AS Name,
 get(item=MRULookup, field=format(format="%#x", args=ID)) AS Field,
 format(format="%#x", args=ID) AS FieldID,
 format(format="%#x", args=TOCValue.data_type) AS data_type,
 regex_replace(re="__Data", replace="",
 source=get(item=type_lookup,
 field=format(format="%#x",
 args=TOCValue.data_type))) AS type,
 TOCValue.data AS data

 FROM foreach(row=parse_binary(
 accessor="data", filename=Bookmark,
 profile=BookmarkProfile, struct="Header").TOC.Items)

sources:
 - query: |
 -- Parse the Plist file
 SELECT * FROM foreach(row={
 SELECT OSPath FROM glob(globs=FinderPlistPath)
 }, query={
 SELECT * FROM foreach(row={
 SELECT FXRecentFolders FROM plist(file=OSPath)
 }, query={
 SELECT *
 FROM foreach(row=FXRecentFolders, query={
 SELECT *, OSPath
 FROM ParseBookmark(Bookmark=_value.`file-bookmark`)
 })
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Detection.Autoruns</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.detection.autoruns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.detection.autoruns/</guid><description>&lt;p>This artifact collects evidence of autoruns. We also capture the files and upload them.&lt;/p>
&lt;p>This code is based on
&lt;a href="https://github.com/CrowdStrike/automactc/blob/master/modules/mod_autoruns_v102.py" target="_blank" >https://github.com/CrowdStrike/automactc/blob/master/modules/mod_autoruns_v102.py&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Detection.Autoruns
description: |
 This artifact collects evidence of autoruns. We also capture the files and upload them.

 This code is based on
 https://github.com/CrowdStrike/automactc/blob/master/modules/mod_autoruns_v102.py

precondition: SELECT OS FROM info() WHERE OS =~ 'darwin'

parameters:
- name: sandboxed_loginitems
 default: /var/db/com.apple.xpc.launchd/disabled.*.plist

- name: cronTabGlob
 default: /private/var/at//tabs/*

- name: LaunchAgentsDaemonsGlob
 default: |
 ["/System/Library/LaunchAgents/*.plist","/Library/LaunchAgents/*.plist",
 "/Users/*/Library/LaunchAgents/*.plist","/private/var/*/Library/LaunchAgents/*.plist",
 "/System/Library/LaunchAgents/.*.plist","/Library/LaunchAgents/.*.plist",
 "/Users/*/Library/LaunchAgents/.*.plist", "/private/var/*/Library/LaunchAgents/.*.plist",
 "/System/Library/LaunchDaemons/*.plist","/Library/LaunchDaemons/*.plist",
 "/System/Library/LaunchDaemons/.*.plist","/Library/LaunchDaemons/.*.plist"]

- name: ScriptingAdditionsGlobs
 default: |
 ["/System/Library/ScriptingAdditions/*.osax","/Library/ScriptingAdditions/*.osax",
 "/System/Library/ScriptingAdditions/.*.osax","/Library/ScriptingAdditions/.*.osax"]

- name: StartupItemsGlobs
 default: |
 ["/System/Library/StartupItems/*/*","/Library/StartupItems/*/*"]

- name: MiscItemsGlobs
 default: |
 ["/private/etc/periodic.conf", "/private/etc/periodic/*/*", "/private/etc/*.local",
 "/private/etc/rc.common",
 "/private/etc/emond.d/*","/private/etc/emond.d/*/*"]

- name: LoginItemsGlobs
 default: |
 ["/Users/*/Library/Preferences/com.apple.loginitems.plist",
 "/private/var/*/Library/Preferences/com.apple.loginitems.plist"]

sources:
- name: Sandboxed Loginitems
 query: |
 SELECT OSPath,
 Mtime,
 plist(file=OSPath) AS Disabled,
 upload(file=OSPath) AS Upload
 FROM glob(globs=sandboxed_loginitems)

- name: crontabs
 query: |
 LET raw = SELECT * FROM foreach(
 row={
 SELECT OSPath, Name, Mtime,
 upload(file=OSPath) AS Upload
 FROM glob(globs=split(string=cronTabGlob, sep=","))
 },
 query={
 SELECT OSPath, Name, Mtime, Upload,
 data, parse_string_with_regex(
 string=data,
 regex=[
 /* Regex for event (Starts with @) */
 "^(?P&amp;lt;Event&amp;gt;@[a-zA-Z]+)\\s+(?P&amp;lt;Command&amp;gt;.+)",

 /* Regex for regular command. */
 "^(?P&amp;lt;Minute&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Hour&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;DayOfMonth&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Month&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;DayOfWeek&amp;gt;[^\\s]+)\\s+"+
 "(?P&amp;lt;Command&amp;gt;.+)$"]) as Record

 /* Read lines from the file and filter ones that start with "#" */
 FROM split_records(
 filenames=OSPath,
 regex="\n", columns=["data"]) WHERE not data =~ "^\\s*#"
 }) WHERE Record.Command

 SELECT Record.Event AS Event,
 Mtime,
 Name AS User,
 Record.Minute AS Minute,
 Record.Hour AS Hour,
 Record.DayOfMonth AS DayOfMonth,
 Record.Month AS Month,
 Record.DayOfWeek AS DayOfWeek,
 Record.Command AS Command,
 OSPath AS Path,
 Upload
 FROM raw

- name: LaunchAgentsDaemons
 query: |

 LET launchd_config = SELECT OSPath, Mtime,
 plist(file=OSPath) AS LaunchdConfig,
 upload(file=OSPath) AS Upload
 FROM glob(globs=parse_json_array(data=LaunchAgentsDaemonsGlob))

 LET programs = SELECT OSPath, Mtime, LaunchdConfig,
 get(member="LaunchdConfig.Program",
 default=get(member="LaunchdConfig.ProgramArguments.0")) AS Program
 FROM launchd_config

 SELECT OSPath, Mtime, LaunchdConfig,
 Program, hash(path=Program) AS Hash,
 upload(file=OSPath) AS Upload
 FROM programs

- name: ScriptingAdditions
 query: |
 SELECT OSPath,
 Mtime,
 upload(file=OSPath) AS Upload
 FROM glob(globs=parse_json_array(data=ScriptingAdditionsGlobs))

- name: StartupItems
 query: |
 SELECT OSPath,
 Mtime,
 upload(file=OSPath) AS Upload
 FROM glob(globs=parse_json_array(data=StartupItemsGlobs))

- name: MiscItems
 query: |
 SELECT OSPath,
 Mtime,
 upload(file=OSPath) AS Upload
 FROM glob(globs=parse_json_array(data=MiscItemsGlobs))

- name: LoginItems
 query: |
 SELECT OSPath,
 Mtime,
 plist(file=OSPath) AS LoginItemConfig,
 upload(file=OSPath) AS Upload
 FROM glob(globs=parse_json_array(data=LoginItemsGlobs))

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Detection.InstallHistory</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.detection.installhistory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.detection.installhistory/</guid><description>&lt;p>This artifact collects entries from the InstallHistory .plist file&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Detection.InstallHistory
description: |
 This artifact collects entries from the InstallHistory .plist file

type: CLIENT

author: Wes Lambert - @therealwlambert

precondition: SELECT OS FROM info() WHERE OS =~ 'darwin'

parameters:
- name: InstallHistoryGlob
 default: /Library/Receipts/InstallHistory.plist

sources:
- name: Install History
 query: |
 LET SWplist = SELECT OSPath FROM glob(globs=InstallHistoryGlob)

 LET SoftwareDetails =
 SELECT * FROM foreach(
 row=plist(file=OSPath),
 query={
 SELECT
 get(member="displayName", default="") AS DisplayName,
 get(member="displayVersion", default="") AS DisplayVersion,
 get(member="processName", default="") AS ProcessName,
 get(member="date", default="") AS InstallDate,
 get(member="contentType", default="") AS ContentType,
 get(member="packageIdentifiers", default="") AS PackageIdentifiers
 FROM scope()
 })
 SELECT * FROM foreach(row=SWplist, query=SoftwareDetails)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Forensics.AppleDoubleZip</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.forensics.appledoublezip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.forensics.appledoublezip/</guid><description>&lt;p>Search for zip files containing leaked download URLs included by
MacOS users.&lt;/p>
&lt;p>MacOS filesystem can represent extended attributes. Similarly to
Windows&amp;rsquo;s ZoneIdentifier, when a file is downloaded on MacOS it also
receives an extended attribute recording where the file was
downloaded from. (See the &lt;code>Windows.Analysis.EvidenceOfDownload&lt;/code>
artifact)&lt;/p>
&lt;p>What makes MacOS different however, is that when a user adds a file
to a Zip file (in Finder, right click the file and select
&amp;ldquo;compress&amp;rdquo;), MacOS will also record the extended attributes in the
zip file under the __MACOSX folder.&lt;/p>
&lt;p>This is a huge privacy leak because people often do not realize that
the source of downloads for a file is being included inside the zip
file, which they end up sending to other people!&lt;/p>
&lt;p>Therefore this artifact can also work on other platforms because Zip
files created by MacOS users can end up on other systems, and
contain sensitive URLs embedded within them.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Forensics.AppleDoubleZip
description: |
 Search for zip files containing leaked download URLs included by
 MacOS users.

 MacOS filesystem can represent extended attributes. Similarly to
 Windows's ZoneIdentifier, when a file is downloaded on MacOS it also
 receives an extended attribute recording where the file was
 downloaded from. (See the `Windows.Analysis.EvidenceOfDownload`
 artifact)

 What makes MacOS different however, is that when a user adds a file
 to a Zip file (in Finder, right click the file and select
 "compress"), MacOS will also record the extended attributes in the
 zip file under the __MACOSX folder.

 This is a huge privacy leak because people often do not realize that
 the source of downloads for a file is being included inside the zip
 file, which they end up sending to other people!

 Therefore this artifact can also work on other platforms because Zip
 files created by MacOS users can end up on other systems, and
 contain sensitive URLs embedded within them.

reference:
 - https://opensource.apple.com/source/Libc/Libc-391/darwin/copyfile.c
 - https://datatracker.ietf.org/doc/html/rfc1740

parameters:
 - name: ZipGlob
 description: Where to search for zip files.
 default: /Users/*/Downloads/*.zip

export: |
 -- Offsets are aligned to 4 bytes
 LET Align(value) = value + value - int(int=value / 4) * 4

 LET Profile = '''[
 ["Header", 0, [
 ["Magic", 0, "uint32b"],
 ["Version", 4, "uint32b"],
 ["Filler", 8, "String", {
 length: 16,
 }],
 ["Count", 24, "uint16b"],
 ["Items", 26, "Array", {
 count: "x=&amp;gt;x.Count",
 type: "Entry",
 }],
 ["attr_header", 84, "attr_header"]
 ]],
 ["Entry", 12, [
 ["ID", 0, "uint32b"],
 ["Offset", 4, "uint32b"],
 ["Length", 8, "uint32b"],
 ["Value", 0, "Profile", {
 type: "ASFinderInfo",
 offset: "x=&amp;gt;x.Offset",
 }]
 ]],
 ["attr_header", 0, [

 # Should be ATTR
 ["Magic", 0, "String", {
 length: 4,
 }],

 ["total_size", 8, "uint32b"],
 ["data_start", 12, "uint32b"],
 ["data_length",16, "uint32b"],
 ["flags", 32, "uint16b"],
 ["num_attr", 34, "uint16b"],
 ["attrs", 36, "Array", {
 count: "x=&amp;gt;x.num_attr",
 type: "attr_t",
 }]
 ]],
 ["attr_t", "x=&amp;gt;Align(value=x.name_length + 11)", [
 ["offset", 0, "uint32b"],
 ["length", 4, "uint32b"],
 ["flags", 8, "uint16b"],
 ["name_length", 10, "uint8"],
 ["name", 11, "String", {
 length: "x=&amp;gt;x.name_length",
 }],
 ["data", 0, "Profile", {
 type: "String",
 type_options: {
 term: "",
 length: "x=&amp;gt;x.length",
 },
 offset: "x=&amp;gt;x.offset",
 }]
 ]]
 ]
 '''

 LET ParseData(data) = if(condition=data =~ "^bplist",
 then=plist(accessor="data", file=data), else=data)

 LET ParseAppleDouble(double_data) = SELECT name AS Key, ParseData(data=data) AS Value
 FROM foreach(row=parse_binary(
 filename=double_data, accessor="data",
 profile=Profile, struct="Header").attr_header.attrs)

sources:
 - query: |
 LET DoubleFiles = SELECT * FROM foreach(row={
 SELECT OSPath AS ZipPath
 FROM glob(globs=ZipGlob)
 }, query={
 SELECT OSPath, pathspec(parse=OSPath) AS PathSpec
 FROM glob(
 globs="__MACOSX/**",
 accessor="zip",
 root=pathspec(DelegatePath=ZipPath))
 })

 SELECT * FROM foreach(row=DoubleFiles,
 query={
 SELECT PathSpec.DelegatePath AS ZipFile,
 PathSpec.Path AS Member,
 Key, Value
 FROM ParseAppleDouble(double_data=read_file(filename=OSPath, accessor="zip"))
 })

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Forensics.FSEvents</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.forensics.fsevents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.forensics.fsevents/</guid><description>&lt;p>This artifact parses the FSEvents log files.&lt;/p>
&lt;p>We can filter on Path, Flags or use time box on source file&lt;/p>
&lt;p>An interesting hunt may be filter for Entries of plist files modified or
created on a specific date. Malware often creates plist files in
/Library/LaunchAgents, Library/Preferences, /Library/LaunchDaemons, or
/Library/Internet Plugins.&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>FSEvents do not have timestamps so we specify source file Mtime and
Btime.&lt;/li>
&lt;li>default timeout is only 600 seconds - you will need to increase for this
colection to finish.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Forensics.FSEvents
description: |
 This artifact parses the FSEvents log files.
 
 We can filter on Path, Flags or use time box on source file 
 
 An interesting hunt may be filter for Entries of plist files modified or 
 created on a specific date. Malware often creates plist files in 
 /Library/LaunchAgents, Library/Preferences, /Library/LaunchDaemons, or 
 /Library/Internet Plugins.
 
 NOTE: 
 
 - FSEvents do not have timestamps so we specify source file Mtime and 
 Btime. 
 - default timeout is only 600 seconds - you will need to increase for this 
 colection to finish.

reference:
- https://www.osdfcon.org/presentations/2017/Ibrahim-Understanding-MacOS-File-Ststem-Events-with-FSEvents-Parser.pdf
- https://www.crowdstrike.com/blog/using-os-x-fsevents-discover-deleted-malicious-artifact/

type: CLIENT

parameters:
 - name: GlobTable
 type: csv
 default: |
 Glob
 /.fseventsd/*
 /System/Volumes/Data/.fseventsd/*
 - name: Glob
 type: string
 description: Instead of providing the globs in a table, a single glob may e given.
 - name: PathRegex
 description: Filter the path by this regexp
 default: .
 type: regex
 - name: FlagsRegex
 description: Filter by flags
 type: regex
 default: .
 - name: DateAfter
 type: timestamp
 description: "search for source files with Btime after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for source files with Mtime before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: LogSource
 type: bool
 description: "Adds the Source file OSPath into logs"

export: |
 LET FSEventProfile = '''[
 ["Header", 0, [
 ["Signature", 0, "String", {
 length: 4
 }],
 ["StreamSize", 8, uint32],
 ["Items", 12, "Array", {
 count: 10000,
 max_count: 10000,
 type: FSEventEntry,
 sentinel: "x=&amp;gt;len(list=x.path) = 0",
 }]
 ]],
 ["FSEventEntry", "x=&amp;gt;len(list=x.path) + 21", [
 ["path", 0, "String"],
 ["id", "x=&amp;gt;len(list=x.path) + 1", "uint64"],
 ["flags", "x=&amp;gt;len(list=x.path) + 9", "Flags", {
 type: "uint32",
 bitmap: {
 FSE_CREATE_FILE: 0,
 FSE_DELETE: 1,
 FSE_STAT_CHANGED: 2,
 FSE_RENAME: 3,
 FSE_CONTENT_MODIFIED: 4,
 FSE_EXCHANGE: 5,
 FSE_FINDER_INFO_CHANGED: 6,
 FSE_CREATE_DIR: 7,
 FSE_CHOWN: 8,
 FSE_XATTR_MODIFIED: 9,
 FSE_XATTR_REMOVED: 10,
 FSE_DOCID_CREATED: 11,
 FSE_DOCID_CHANGED: 12,
 FSE_UNMOUNT_PENDING: 13,
 FSE_CLONE: 14,
 FSE_MODE_CLONE: 16,
 FSE_TRUNCATED_PATH: 17,
 FSE_REMOTE_DIR_EVENT: 18,
 FSE_MODE_LAST_HLINK: 19,
 FSE_MODE_HLINK: 20,
 IsSymbolicLink: 22,
 IsFile: 23,
 IsDirectory: 24,
 Mount: 25,
 Unmount: 26,
 EndOfTransaction: 29
 }
 }],
 ]]
 ]'''

sources:
 - query: |
 LET files = SELECT OSPath, Mtime, Btime
 FROM glob(globs=(Glob || GlobTable.Glob))
 WHERE if(condition=DateAfter, then= Btime &amp;gt; DateAfter, else= True )
 AND if(condition=DateBefore, then= Mtime &amp;lt; DateBefore, else= True )
 AND log(message=OSPath)

 SELECT * FROM foreach(row=files,
 query={
 SELECT 
 path as EntryPath,
 id as EntryId, 
 join(array=flags, sep=", ") AS EntryFlags,
 OSPath.Basename as SourceFile, 
 Mtime as SourceMtime, 
 Btime as SourceBtime 
 FROM foreach(row=parse_binary(
 filename=read_file(filename=OSPath, accessor="gzip", length=1000000),
 accessor="data",
 profile=FSEventProfile, struct="Header").Items)
 })
 WHERE EntryPath =~ PathRegex AND EntryFlags =~ FlagsRegex

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Network.Netstat</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.network.netstat/</guid><description>&lt;p>Report network connections, and enrich with process information.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Network.Netstat
description: |
 Report network connections, and enrich with process information.

type: CLIENT

precondition:
 SELECT OS From info() where OS = 'darwin'

parameters:
 - name: IPRegex
 description: "regex search over IP address fields."
 default: "."
 type: regex
 - name: PortRegex
 description: "regex search over port fields."
 default: "."
 type: regex
 - name: ProcessNameRegex
 description: "regex search over source process name"
 default: "."
 type: regex
 - name: UsernameRegex
 description: "regex search over source process user context"
 default: "."
 type: regex
 - name: ConnectionStatusRegex
 description: "regex search over connection status"
 default: "LISTEN|ESTAB"
 type: regex
 - name: ProcessPathRegex
 description: "regex search over source process path"
 default: "."
 type: regex
 - name: CommandLineRegex
 description: "regex search over source process commandline"
 default: "."
 type: regex
 - name: CallChainRegex
 description: "regex search over the process callchain"
 default: "."
 type: regex
 - name: AlsoCollectFullProcessTree
 type: bool

sources:
 - query: |
 SELECT Laddr.IP AS Laddr,
 Laddr.Port AS Lport,
 Raddr.IP AS Raddr,
 Raddr.Port AS Rport,
 Pid,
 Status, TypeString AS Type,
 process_tracker_get(id=Pid).Data AS ProcInfo,
 join(array=process_tracker_callchain(id=Pid).Data.Name,
 sep=" -&amp;gt; ") AS CallChain,
 if(condition=AlsoCollectFullProcessTree,
 then=process_tracker_tree(id=Pid)) AS ChildrenTree
 FROM netstat()
 WHERE Status =~ ConnectionStatusRegex
 AND Raddr =~ IPRegex
 AND ( Lport =~ PortRegex OR Rport =~ PortRegex )
 AND ProcInfo.Name =~ ProcessNameRegex
 AND ProcInfo.Username =~ UsernameRegex
 AND ProcInfo.Exe =~ ProcessPathRegex
 AND ProcInfo.CommandLine =~ CommandLineRegex
 AND CallChain =~ CallChainRegex

column_types:
 - name: ChildrenTree
 type: tree

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Network.PacketCapture</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.network.packetcapture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.network.packetcapture/</guid><description>&lt;p>This artifact leverages tcpdump to natively capture packets.&lt;/p>
&lt;p>The &lt;code>Duration&lt;/code> parameter is used to define how long (in seconds) the capture should be. Specific interfaces can be defined using the &lt;code>Interface&lt;/code> parameter, otherwise the artifact defaults to an interface assignment of &lt;code>any&lt;/code>.&lt;/p>
&lt;p>A &lt;code>BPF&lt;/code> (Berkeley Packet Filter) expression can also be supplied to filter the captured traffic as desired.&lt;/p>
&lt;p>Read more about BPF expressions here: &lt;a href="https://biot.com/capstats/bpf.html" target="_blank" >https://biot.com/capstats/bpf.html&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Network.PacketCapture
author: Wes Lambert, @therealwlambert
description: |
 This artifact leverages tcpdump to natively capture packets.

 The `Duration` parameter is used to define how long (in seconds) the capture should be. Specific interfaces can be defined using the `Interface` parameter, otherwise the artifact defaults to an interface assignment of `any`.

 A `BPF` (Berkeley Packet Filter) expression can also be supplied to filter the captured traffic as desired.
 
 Read more about BPF expressions here: https://biot.com/capstats/bpf.html

required_permissions:
 - EXECVE

parameters:
 - name: Duration
 type: integer
 description: Duration (in seconds) of PCAP to be recorded.
 default: 10
 
 - name: Interface
 type: string
 default: any

 - name: BPF
 type: string
 default:
 
precondition:
 SELECT * FROM info() where OS = 'darwin'

sources:
 - query: |
 LET pcap &amp;lt;= tempfile(extension=".pcap")
 SELECT *, upload(file=pcap) AS PCAP
 FROM execve(argv=['bash', '-c', format(format='''(tcpdump -nni %v -w %v %v) &amp;amp; sleep %v; kill $!''', args=[Interface, pcap, BPF, Duration])], length=1000000)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.OSQuery.Generic</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.osquery.generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.osquery.generic/</guid><description>&lt;p>OSQuery is an excellent tool for querying system state across the
three supported Velociraptor platform (Windows/Linux/MacOS).&lt;/p>
&lt;p>You can read more about OSQuery on &lt;a href="https://osquery.io/" target="_blank" >https://osquery.io/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.OSQuery.Generic
description: |
 OSQuery is an excellent tool for querying system state across the
 three supported Velociraptor platform (Windows/Linux/MacOS).

 You can read more about OSQuery on https://osquery.io/

reference:
 - https://osquery.io/
 - https://github.com/osquery/osquery

# I am not actually sure if OSQuery allows arbitrary command execution via SQL?
required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'darwin'

tools:
 - name: OSQueryDarwin
 github_project: Velocidex/OSQuery-Releases
 github_asset_regex: darwin-amd64

parameters:
 - name: Query
 default: "SELECT * FROM osquery_info"

sources:
 - query: |
 LET binary &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Utils.FetchBinary(ToolName="OSQueryDarwin")

 LET result = SELECT * FROM execve(
 argv=[binary[0].OSPath, "--json", Query],
 length=1000000)

 SELECT * FROM foreach(row=result,
 query={
 SELECT * FROM parse_json_array(data=Stdout)
 })

&lt;/code>&lt;/pre></description></item><item><title>MacOS.Search.FileFinder</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.search.filefinder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.search.filefinder/</guid><description>&lt;p>Find files on the filesystem using the filename or content.&lt;/p>
&lt;h2 id="performance-note">Performance Note&lt;/h2>
&lt;p>This artifact can be quite expensive, especially if we search file
content. It will require opening each file and reading its entire
content. To minimize the impact on the endpoint we recommend this
artifact is collected with a rate limited way (about 20-50 ops per
second).&lt;/p>
&lt;p>This artifact is useful in the following scenarios:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We need to locate all the places on our network where customer
data has been copied.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We’ve identified malware in a data breach, named using short
random strings in specific folders and need to search for other
instances across the network.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We believe our user account credentials have been dumped and
need to locate them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to search for exposed credit card data to satisfy PCI
requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We have a sample of data that has been disclosed and need to
locate other similar files&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.Search.FileFinder
description: |
 Find files on the filesystem using the filename or content.


 ## Performance Note

 This artifact can be quite expensive, especially if we search file
 content. It will require opening each file and reading its entire
 content. To minimize the impact on the endpoint we recommend this
 artifact is collected with a rate limited way (about 20-50 ops per
 second).

 This artifact is useful in the following scenarios:

 * We need to locate all the places on our network where customer
 data has been copied.

 * We’ve identified malware in a data breach, named using short
 random strings in specific folders and need to search for other
 instances across the network.

 * We believe our user account credentials have been dumped and
 need to locate them.

 * We need to search for exposed credit card data to satisfy PCI
 requirements.

 * We have a sample of data that has been disclosed and need to
 locate other similar files


precondition:
 SELECT * FROM info() where OS = 'darwin'

parameters:
 - name: SearchFilesGlob
 default: /Users/*
 description: Use a glob to define the files that will be searched (Use ** for recursive).

 - name: SearchFilesGlobTable
 type: csv
 default: |
 Glob
 /Users/someuser/*
 description: Alternative specify multiple globs in a table

 - name: YaraRule
 type: yara
 default:
 description: A yara rule to search for matching files.

 - name: Upload_File
 default: N
 type: bool

 - name: Calculate_Hash
 default: N
 type: bool

 - name: MoreRecentThan
 default: ""
 type: timestamp

 - name: ModifiedBefore
 default: ""
 type: timestamp

 - name: DoNotFollowSymlinks
 type: bool
 default: Y
 description: If specified we are allowed to follow symlinks while globbing

sources:
- query: |
 LET file_search = SELECT OSPath,
 Sys.mft as Inode,
 Mode.String AS Mode, Size,
 Mtime AS MTime,
 Atime AS ATime,
 Ctime AS CTime,
 IsDir, Mode
 FROM glob(globs=SearchFilesGlobTable.Glob + SearchFilesGlob,
 accessor="file", nosymlink=DoNotFollowSymlinks)

 LET more_recent = SELECT * FROM if(
 condition=MoreRecentThan,
 then={
 SELECT * FROM file_search
 WHERE MTime &amp;gt; MoreRecentThan
 },
 else={ SELECT * FROM file_search})

 LET modified_before = SELECT * FROM if(
 condition=ModifiedBefore,
 then={
 SELECT * FROM more_recent
 WHERE MTime &amp;lt; ModifiedBefore
 AND MTime &amp;gt; MoreRecentThan
 },
 else={SELECT * FROM more_recent})

 LET keyword_search = SELECT * FROM if(
 condition=YaraRule,
 then={
 SELECT * FROM foreach(
 row={
 SELECT * FROM modified_before
 WHERE Mode.IsRegular
 },
 query={
 SELECT OSPath, Inode, Mode,
 Size, ATime, MTime, CTime,
 str(str=String.Data) As Keywords

 FROM yara(files=OSPath,
 key="A",
 rules=YaraRule,
 accessor="file")
 })
 },
 else={SELECT * FROM modified_before})

 SELECT OSPath, Inode, Mode, Size, ATime,
 MTime, CTime, get(field='Keywords') AS Keywords,
 if(condition=Upload_File and Mode.IsRegular,
 then=upload(file=OSPath,
 accessor="file")) AS Upload,
 if(condition=Calculate_Hash and Mode.IsRegular,
 then=hash(path=OSPath,
 accessor="file")) AS Hash
 FROM keyword_search

column_types:
 - name: ATime
 type: timestamp
 - name: MTime
 type: timestamp
 - name: CTime
 type: timestamp
 - name: Upload
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.Dock</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.dock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.dock/</guid><description>&lt;p>This artifact examines the contents of the user&amp;rsquo;s dock. The
property list entry for each application represented within the dock
can be modified to point to a malcious application.&lt;/p>
&lt;p>By comparing the application name, CFURLString, and book, we can
gather greater context to assist in determining if an adversary may
have tampered with an entry, or if an entry has been added to
emulate a legitimate application.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.Dock
description: |
 This artifact examines the contents of the user's dock. The
 property list entry for each application represented within the dock
 can be modified to point to a malcious application.

 By comparing the application name, CFURLString, and book, we can
 gather greater context to assist in determining if an adversary may
 have tampered with an entry, or if an entry has been added to
 emulate a legitimate application.

reference:
 - https://specterops.io/so-con2020/event-758922
 - https://attack.mitre.org/techniques/T1547/009/
 - https://attack.mitre.org/techniques/T1647/

author: Wes Lambert - @therealwlambert

type: CLIENT

parameters:
 - name: DockGlob
 default: /Users/*/Library/Preferences/com.apple.dock.plist

sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT OSPath from glob(globs=DockGlob)
 }, query={
 SELECT OSPath, GUID,
 get(member="tile-data.file-label") AS FileLabel,
 get(member="tile-data.file-data._CFURLString") AS AppLocation,
 timestamp(mactime=get(member="tile-data.file-mod-date")) AS FileModDate,
 timestamp(mactime=get(member="tile-data.parent-mod-date")) AS ParentModDate,
 get(member="tile-data.bundle-identifier") AS BundleIdentifier,
 get(member="tile-data.dock-extra") AS DockExtra,
 base64encode(string=get(member="tile-data.book")) AS Book
 FROM foreach(row=plist(file=OSPath).`persistent-apps`)
 })

column_types:
 - name: Book
 type: base64hex

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.Packages</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.packages/</guid><description>&lt;p>Parse packages installed on Macs&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.Packages
description: |
 Parse packages installed on Macs
parameters:
 - name: Length
 description: Size (in bytes) of output that will be returned
 type: int
 default: "100000000"
sources:
 - precondition: |
 SELECT OS From info() where OS = 'darwin'
 query: |
 LET packages = SELECT parse_json(data=Stdout) AS Json 
 FROM execve(argv=[
 "system_profiler", "-json", "SPApplicationsDataType"
 ], length=Length)

 SELECT _name AS Name,
 get(field="version") AS Version, 
 path AS Path, 
 lastModified AS LastModified, 
 obtained_from AS ObtainedFrom,
 get(field="signed_by") AS SignedBy,
 arch_kind AS _Architecture
 FROM foreach(
 row=packages[0].Json.SPApplicationsDataType)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.Plist</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.plist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.plist/</guid><description>&lt;p>This artifact collects and/or parses MacOS .plist files. While simple,
this artifact allows users to specify a .plist glob, and have those plist files
returned for quick review. If more advanced parsing is desired, the artifact can be copied
and modified.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.Plist
description: |
 This artifact collects and/or parses MacOS .plist files. While simple,
 this artifact allows users to specify a .plist glob, and have those plist files
 returned for quick review. If more advanced parsing is desired, the artifact can be copied
 and modified.

type: CLIENT

author: Wes Lambert - @therealwlambert

precondition: SELECT OS FROM info() WHERE OS =~ 'darwin'

parameters:
 - name: PlistGlob
 default: /Library/Preferences/*.plist

 - name: Upload_File
 default: N
 type: bool

sources:
 - query: |
 SELECT
 OSPath,
 Mtime,
 plist(file=OSPath) AS Content,
 if(condition=Upload_File,
 then=upload(file=OSPath,
 mtime=Mtime,
 atime=Atime,
 ctime=Ctime,
 btime=Btime)) AS Upload
 FROM glob(globs=PlistGlob)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.QuarantineEvents</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.quarantineevents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.quarantineevents/</guid><description>&lt;p>This artifact parses the QuarantineEventsV2 database, which provides
information on when a file was downloaded from the internet.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.QuarantineEvents
description: |

 This artifact parses the QuarantineEventsV2 database, which provides
 information on when a file was downloaded from the internet.

type: CLIENT

author: Wes Lambert - @therealwlambert

parameters:
- name: QuarantineGlob
 default: /Users/*/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2

precondition:
 SELECT OS From info() where OS = 'darwin'

sources:
 - query: |
 LET QList = SELECT OSPath
 FROM glob(globs=QuarantineGlob)

 LET QEvents = SELECT *
 FROM sqlite(file=OSPath, query="SELECT * from LSQuarantineEvent")

 // Add delta (978307200 seconds between Cocoa timestamp
 // (2020,1,1) and epoch timestamp (1970,1,1)) to provided Cocoa
 // timestamp

 LET QEventsDetails =
 SELECT * FROM foreach(
 row=QEvents,
 query={ SELECT
 timestamp(epoch=LSQuarantineTimeStamp + 978307200) AS DownloadTime,
 LSQuarantineDataURLString AS DownloadURL,
 LSQuarantineOriginURLString AS Origin,
 LSQuarantineAgentName AS AgentName,
 LSQuarantineAgentBundleIdentifier AS AgentBundle,
 split(string=OSPath, sep='/')[2] AS User,
 LSQuarantineEventIdentifier AS EventUUID
 FROM scope()
 }
 )

 SELECT * FROM foreach(row=QList, query=QEventsDetails)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.TCC</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.tcc/</guid><description>&lt;p>This artifact provides details around the TCC (Transparency,
Consent, and Control) database, and can help reveal when access to
system services has been added or modified for an application.&lt;/p>
&lt;p>Note that this artifact has only been tested on macOS Big Sur, and
that the &lt;code>allowed&lt;/code>, and &lt;code>prompt_count&lt;/code> columns will need to be used
in place of the &lt;code>auth_value&lt;/code>, &lt;code>auth_reason&lt;/code>, and &lt;code>auth_version&lt;/code>
columns for Catalina and prior.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.TCC
description: |
 This artifact provides details around the TCC (Transparency,
 Consent, and Control) database, and can help reveal when access to
 system services has been added or modified for an application.

 Note that this artifact has only been tested on macOS Big Sur, and
 that the `allowed`, and `prompt_count` columns will need to be used
 in place of the `auth_value`, `auth_reason`, and `auth_version`
 columns for Catalina and prior.

type: CLIENT

author: Wes Lambert - @therealwlambert

parameters:
- name: TCCGlob
 default: /Library/Application Support/com.apple.TCC/TCC.db,/Users/*/Library/Application Support/com.apple.TCC/TCC.db

precondition:
 SELECT OS From info() where OS = 'darwin'

sources:
 - query: |
 LET TCCList = SELECT OSPath
 FROM glob(globs=split(string=TCCGlob, sep=","))

 LET TCCAccess = SELECT *
 FROM sqlite(file=OSPath, query="SELECT * from access")

 LET TCCAccessDetails =
 SELECT * FROM foreach(
 row=TCCAccess,
 query={ SELECT
 timestamp(epoch=last_modified) AS LastModified,
 service AS Service,
 client AS Client,
 if(condition= client_type= 0, then="Console", else=if(condition= client_type= 1, then="Service/Script", else="Other")) AS ClientType,
 if(condition= auth_value= 2, then="Yes", else="No") AS Allowed,
 if(condition= OSPath =~ "Users", then=path_split(path=OSPath)[-5], else="System") AS User,
 auth_reason AS _AuthReason,
 auth_version AS _AuthVersion,
 csreq AS _CSReq,
 policy_id as _PolicyId,
 indirect_object_identifier_type as _IndirectObjectIdentifierType,
 indirect_object_identifier as IndirectObjectIdentifier,
 indirect_object_code_identity as _IndirectObjectCodeIdentity,
 flags as _Flags,
 OSPath AS _OSPath
 FROM scope()
 }
 )
 SELECT * FROM foreach(row=TCCList, query=TCCAccessDetails)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.TimeMachine</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.timemachine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.timemachine/</guid><description>&lt;p>This artifact collects information about MacOS Time Machine backups.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.TimeMachine
description: |
 This artifact collects information about MacOS Time Machine backups.

type: CLIENT

author: Wes Lambert - @therealwlambert

parameters:
 - name: TimeMachineGlob
 default: /Library/Preferences/com.apple.TimeMachine.plist

sources:
 - query: |
 LET TMPlist = SELECT OSPath FROM glob(globs=TimeMachineGlob)
 LET TMDetails =
 SELECT * FROM foreach(
 row=plist(file=OSPath),
 query={ SELECT
 plist(file=OSPath).LocalizedDiskImageVolumeName AS VolumeName,
 plist(file=OSPath).AutoBackup AS AutoBackup,
 plist(file=OSPath).LastDestinationID AS LastDestination,
 plist(file=OSPath).HostUUIDs[0] AS HostUUID,
 plist(file=OSPath).Destinations AS Destinations
 FROM scope()
 }
 )
 SELECT * FROM foreach(row=TMPlist, query=TMDetails)

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.Users</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.users/</guid><description>&lt;p>This artifact collects information about the local users on the
system. The information is stored in plist files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.Users
description: |
 This artifact collects information about the local users on the
 system. The information is stored in plist files.

parameters:
 - name: UserPlistGlob
 default: /private/var/db/dslocal/nodes/Default/users/*.plist
 - name: OnlyShowRealUsers
 type: bool
 default: Y

sources:
 - query: |
 LET user_plist = SELECT OSPath FROM glob(globs=UserPlistGlob)
 LET UserDetails(OSPath) =
 SELECT get(member="name.0", default="") AS Name,
 get(member="realname.0", default="") AS RealName,
 get(member="shell.0", default="") AS UserShell,
 get(member="home.0", default="") AS HomeDir,
 if(condition=LinkedIdentity,
 then=plist(file=LinkedIdentity[0],
 accessor='data')) as AppleId,
 if(condition=accountPolicyData,
 then=plist(file=accountPolicyData[0],
 accessor='data')) AS AccountPolicyData
 FROM plist(file=OSPath)

 SELECT Name, RealName, UserShell, HomeDir,
 get(item=AppleId, field="appleid.apple.com") AS AppleId,
 timestamp(epoch=AccountPolicyData.creationTime) AS CreationTime,
 AccountPolicyData.failedLoginCount AS FailedLoginCount,
 timestamp(epoch=AccountPolicyData.failedLoginTimestamp) AS FailedLoginTimestamp,
 timestamp(epoch=AccountPolicyData.passwordLastSetTime) AS PasswordLastSetTime
 FROM foreach(row=user_plist, query={
 SELECT * FROM UserDetails(OSPath= OSPath)
 })
 WHERE NOT OnlyShowRealUsers OR NOT UserShell =~ 'false'

&lt;/code>&lt;/pre></description></item><item><title>MacOS.System.Wifi</title><link>https://docs.velociraptor.app/artifact_references/pages/macos.system.wifi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/macos.system.wifi/</guid><description>&lt;p>This artifact looks for all Wifi networks to which a host has
joined. This can be useful in determining where a machine has
been, or if a user has joined an illegitimate or unauthorized
wireless network.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: MacOS.System.Wifi
description: |
 This artifact looks for all Wifi networks to which a host has
 joined. This can be useful in determining where a machine has
 been, or if a user has joined an illegitimate or unauthorized
 wireless network.

type: CLIENT

author: Wes Lambert - @therealwlambert

parameters:
 - name: WifiGlob
 default: /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist

precondition:
 SELECT OS From info() where OS = 'darwin'

sources:
 - query: |
 LET WifiPlist = SELECT OSPath from glob(globs=WifiGlob)
 LET KnownNetworksQuery = SELECT get(member="KnownNetworks") as KN
 FROM plist(file=WifiPlist.OSPath)
 WHERE KN

 LET EachNetwork = SELECT * from foreach(
 row=KnownNetworksQuery,
 query={
 SELECT _key AS Network, _value AS Value
 FROM items(item=KN)
 })
 SELECT Network,
 Value.SSIDString AS SSID,
 Value.SecurityType AS SecurityType,
 Value.HiddenNetwork AS HiddenNetwork,
 Value.PersonalHotspot AS PersonalHotspot,
 Value.AddedAt AS AddedAt,
 Value.LastAutoJoinAt AS LastAutoJoinAt,
 Value.LastManualJoinAt AS LastManualJoinAt,
 Value AS _Data
 FROM EachNetwork

&lt;/code>&lt;/pre></description></item><item><title>Network.ExternalIpAddress</title><link>https://docs.velociraptor.app/artifact_references/pages/network.externalipaddress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/network.externalipaddress/</guid><description>&lt;p>Detect the external ip address of the end point.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Network.ExternalIpAddress
description: Detect the external ip address of the end point.
parameters:
 - name: externalUrl
 default: http://www.myexternalip.com/raw
 description: The URL of the external IP detection site.
sources:
 - precondition: SELECT * from info()
 query: |
 SELECT Content as IP from http_client(url=externalUrl)

&lt;/code>&lt;/pre></description></item><item><title>Notebooks.Default</title><link>https://docs.velociraptor.app/artifact_references/pages/notebooks.default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/notebooks.default/</guid><description>&lt;p>A default notebook.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Notebooks.Default
description: |
 A default notebook.

type: NOTEBOOK

sources:
 - notebook:
 - type: markdown
 template: |
 # Welcome to Velociraptor notebooks!

 * Update this notebook with any VQL or markdown cells.
 * You can copy cells into this notebook from other collection or hunt notebooks.

 - type: vql_suggestion
 name: A Cell Suggestion
 template: |
 /*
 # This is a cell suggestion
 */
 SELECT * FROM info()

&lt;/code>&lt;/pre></description></item><item><title>Notebooks.Timelines</title><link>https://docs.velociraptor.app/artifact_references/pages/notebooks.timelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/notebooks.timelines/</guid><description>&lt;p>The notebook creates a default Super-Timeline.&lt;/p>
&lt;p>Timelines are used to visualize time series data from other
collections in the same place. This notebook template creates an
initial timeline.&lt;/p>
&lt;p>Once this timeline is created, you can add any time series table in
other notebooks (e.g. Collection or Hunt notebooks) to this super
timeline.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Notebooks.Timelines
description: |
 The notebook creates a default Super-Timeline.

 Timelines are used to visualize time series data from other
 collections in the same place. This notebook template creates an
 initial timeline.

 Once this timeline is created, you can add any time series table in
 other notebooks (e.g. Collection or Hunt notebooks) to this super
 timeline.

type: NOTEBOOK

parameters:
 - name: TimelineName
 description: The name of the super timeline to create.
 default: Supertimeline

sources:
 - notebook:
 - type: markdown
 template: |
 # {{ Scope "TimelineName" }}

 Add to this timeline any time-series data from any other
 notebooks:

 1. Click the `Add Timeline` button at the top of any table.
 2. Switch to global notebook timelines and select this timeline.
 3. Select the timestamp and message columns to add a timeline.

 {{ Scope "TimelineName" | Timeline }}

 - type: vql
 template: |
 /*
 # Timeline Annotations

 Refresh this to list all timeline annotations as a table.
 */
 SELECT *
 FROM timeline(notebook_id=NotebookId,
 components="Annotation",
 timeline=TimelineName)
 ORDER BY Timestamp

&lt;/code>&lt;/pre></description></item><item><title>Notebooks.VQLx2</title><link>https://docs.velociraptor.app/artifact_references/pages/notebooks.vqlx2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/notebooks.vqlx2/</guid><description>&lt;p>A notebook initialized with 2 VQL cells&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Notebooks.VQLx2
description: |
 A notebook initialized with 2 VQL cells

type: NOTEBOOK

sources:
 - notebook:
 - type: vql
 output: |
 &amp;lt;&amp;lt; 1st cell: Click here to edit &amp;gt;&amp;gt;
 template: |
 SELECT * FROM orgs()
 - type: vql
 output: |
 &amp;lt;&amp;lt; 2nd cell: Click here to edit &amp;gt;&amp;gt;
 template: |
 SELECT * FROM gui_users() WHERE name = whoami()
&lt;/code>&lt;/pre></description></item><item><title>Reporting.Default</title><link>https://docs.velociraptor.app/artifact_references/pages/reporting.default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/reporting.default/</guid><description>&lt;p>A default template for HTML export. This template will be used to
host html exports such as the notebook and the reporting
templates. Velociraptor will evaluate this template on the following
dict:&lt;/p>
&lt;ul>
&lt;li>key main: contains a string with all the results of rendering
the notebook inside.&lt;/li>
&lt;/ul>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>All html elements are allowed in a html template.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is possible to run arbitrary VQL (and therefore arbitrary
code) inside HTML templates. Therefore to modify this you will
need the SERVER_ARTIFACT_WRITER permission.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Reporting.Default

type: SERVER

description: |
 A default template for HTML export. This template will be used to
 host html exports such as the notebook and the reporting
 templates. Velociraptor will evaluate this template on the following
 dict:

 - key main: contains a string with all the results of rendering
 the notebook inside.

 ## Notes

 1. All html elements are allowed in a html template.

 2. It is possible to run arbitrary VQL (and therefore arbitrary
 code) inside HTML templates. Therefore to modify this you will
 need the SERVER_ARTIFACT_WRITER permission.

reports:
 - name: Templates
 type: TEMPLATES
 template: |
 {{ define "fold_start" }}
 &amp;lt;div role="button" class="btn btn-primary btn-block row collapsible"&amp;gt;View Details&amp;lt;/div&amp;gt;
 &amp;lt;div class="collapse row"&amp;gt;&amp;lt;div class="card card-body overflow-auto"&amp;gt;
 {{end}}
 {{ define "fold_end" }}
 &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
 {{ end }}

 {{ define "hidden_paragraph_start" }}
 {{- if .description -}}
 &amp;lt;div&amp;gt;&amp;lt;a href="#" class="collapsible"&amp;gt;{{ .description }} ...&amp;lt;/a&amp;gt;
 {{- else -}}
 &amp;lt;div&amp;gt;&amp;lt;a href="#" class="collapsible"&amp;gt;More ...&amp;lt;/a&amp;gt;
 {{- end -}}
 &amp;lt;div class="collapse"&amp;gt;
 {{end}}

 {{ define "hidden_paragraph_end" }}
 &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
 {{ end }}


 - type: HTML
 template: |
 {{ import "Reporting.Default" "Templates" }}

 &amp;lt;!doctype html&amp;gt;
 &amp;lt;html lang="en-US"&amp;gt;
 &amp;lt;head&amp;gt;
 {{ $hostinfo := Query "SELECT timestamp(epoch=now()).UTC.String AS Time, \
 OS, Fqdn FROM info()" | Expand }}

 &amp;lt;meta charset="utf-8"&amp;gt;
 &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
 &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;

 &amp;lt;!-- Name of the scan --&amp;gt;
 &amp;lt;title&amp;gt;{{ Get $hostinfo "0.Fqdn" }} Artifact Collection&amp;lt;/title&amp;gt;
 &amp;lt;style&amp;gt;
 @charset "UTF-8";
 body {
 padding-top: 57px;
 }
 .btn-primary.btn {
 color: #00aa00;
 background-color: #fff;
 border-color: #fff;
 }
 .btn-primary.btn:hover {
 color: #fff;
 background-color: #00911e;
 border-color: #00911e;
 }
 .btn.btn-primary:not(:disabled):not(.disabled):active, .btn.btn-primary:not(:disabled):not(.disabled).active {
 color: #fff;
 background-color: #008773;
 border-color: #008773;
 }
 .btn.btn-primary:focus, .btn.btn-primary.focus {
 color: #fff;
 background-color: #00911e;
 border-color: #00911e;
 box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
 }
 .header {
 background-color: black;
 border-bottom: 1px solid #00aa00;
 }
 .collapse {
 display: none;
 }
 .anchor {
 display: block;
 position: relative;
 top: -57px;
 visibility: hidden;
 }
 .logo {
 margin-top: -17px;
 margin-bottom: -10px;
 margin-left: 20px;
 height: 40px;
 }

 .section {
 color: #FFFFFF;
 font-size: 24px;
 background-color: #00aa00;
 font-family: Gotham, "Helvetica Neue", Helvetica, Arial, sans-serif;
 font-variant: normal;
 padding-top: 15px;
 padding-bottom: 15px;
 text-align: center;
 }
 .top-section {
 border-bottom-left-radius: 40px;
 border-bottom-right-radius: 40px;
 }

 /* Error */ .chromaerr { color: #a61717; background-color: #e3d2d2 }
 /* LineTableTD */ .chromalntd { vertical-align: top; padding: 0; margin: 0; border: 0; }
 /* LineTable */ .chromalntable { border-spacing: 0; padding: 0; margin: 0; border: 0; width: auto; overflow: auto; display: block; }
 /* LineHighlight */ .chromahl { display: block; width: 100%; }
 /* LineNumbersTable */ .chromalnt { margin-right: 0.4em; padding: 0 0.4em 0 0.4em; }
 /* LineNumbers */ .chromaln { display: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em; }
 /* Keyword */ .chromak { color: #000000; font-weight: bold }
 /* KeywordConstant */ .chromakc { color: #000000; font-weight: bold }
 /* KeywordDeclaration */ .chromakd { color: #000000; font-weight: bold }
 /* KeywordNamespace */ .chromakn { color: #000000; font-weight: bold }
 /* KeywordPseudo */ .chromakp { color: #000000; font-weight: bold }
 /* KeywordReserved */ .chromakr { color: #000000; font-weight: bold }
 /* KeywordType */ .chromakt { color: #445588; font-weight: bold }
 /* NameAttribute */ .chromana { color: #008080 }
 /* NameBuiltin */ .chromanb { color: #0086b3 }
 /* NameBuiltinPseudo */ .chromabp { color: #999999 }
 /* NameClass */ .chromanc { color: #445588; font-weight: bold }
 /* NameConstant */ .chromano { color: #008080 }
 /* NameDecorator */ .chromand { color: #3c5d5d; font-weight: bold }
 /* NameEntity */ .chromani { color: #800080 }
 /* NameException */ .chromane { color: #990000; font-weight: bold }
 /* NameFunction */ .chromanf { color: #990000; font-weight: bold }
 /* NameLabel */ .chromanl { color: #990000; font-weight: bold }
 /* NameNamespace */ .chromann { color: #555555 }
 /* NameTag */ .chromant { color: #000080 }
 /* NameVariable */ .chromanv { color: #008080 }
 /* NameVariableClass */ .chromavc { color: #008080 }
 /* NameVariableGlobal */ .chromavg { color: #008080 }
 /* NameVariableInstance */ .chromavi { color: #008080 }
 /* LiteralString */ .chromas { color: #dd1144 }
 /* LiteralStringAffix */ .chromasa { color: #dd1144 }
 /* LiteralStringBacktick */ .chromasb { color: #dd1144 }
 /* LiteralStringChar */ .chromasc { color: #dd1144 }
 /* LiteralStringDelimiter */ .chromadl { color: #dd1144 }
 /* LiteralStringDoc */ .chromasd { color: #dd1144 }
 /* LiteralStringDouble */ .chromas2 { color: #dd1144 }
 /* LiteralStringEscape */ .chromase { color: #dd1144 }
 /* LiteralStringHeredoc */ .chromash { color: #dd1144 }
 /* LiteralStringInterpol */ .chromasi { color: #dd1144 }
 /* LiteralStringOther */ .chromasx { color: #dd1144 }
 /* LiteralStringRegex */ .chromasr { color: #009926 }
 /* LiteralStringSingle */ .chromas1 { color: #dd1144 }
 /* LiteralStringSymbol */ .chromass { color: #990073 }
 /* LiteralNumber */ .chromam { color: #009999 }
 /* LiteralNumberBin */ .chromamb { color: #009999 }
 /* LiteralNumberFloat */ .chromamf { color: #009999 }
 /* LiteralNumberHex */ .chromamh { color: #009999 }
 /* LiteralNumberInteger */ .chromami { color: #009999 }
 /* LiteralNumberIntegerLong */ .chromail { color: #009999 }
 /* LiteralNumberOct */ .chromamo { color: #009999 }
 /* Operator */ .chromao { color: #000000; font-weight: bold }
 /* OperatorWord */ .chromaow { color: #000000; font-weight: bold }
 /* Comment */ .chromac { color: #999988; font-style: italic }
 /* CommentHashbang */ .chromach { color: #999988; font-style: italic }
 /* CommentMultiline */ .chromacm { color: #999988; font-style: italic }
 /* CommentSingle */ .chromac1 { color: #999988; font-style: italic }
 /* CommentSpecial */ .chromacs { color: #999999; font-weight: bold; font-style: italic }
 /* CommentPreproc */ .chromacp { color: #999999; font-weight: bold; font-style: italic }
 /* CommentPreprocFile */ .chromacpf { color: #999999; font-weight: bold; font-style: italic }
 /* GenericDeleted */ .chromagd { color: #000000; background-color: #ffdddd }
 /* GenericEmph */ .chromage { color: #000000; font-style: italic }
 /* GenericError */ .chromagr { color: #aa0000 }
 /* GenericHeading */ .chromagh { color: #999999 }
 /* GenericInserted */ .chromagi { color: #000000; background-color: #ddffdd }
 /* GenericOutput */ .chromago { color: #888888 }
 /* GenericPrompt */ .chromagp { color: #555555 }
 /* GenericStrong */ .chromags { font-weight: bold }
 /* GenericSubheading */ .chromagu { color: #aaaaaa }
 /* GenericTraceback */ .chromagt { color: #aa0000 }
 /* TextWhitespace */ .chromaw { color: #bbbbbb }

 &amp;lt;/style&amp;gt;
 &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;

 &amp;lt;!-- Bootstrap core CSS --&amp;gt;
 &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"&amp;gt;
 &amp;lt;link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css" &amp;gt;

 &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;nav class="header navbar navbar-expand-lg navbar-dark fixed-top"&amp;gt;
 &amp;lt;a class="navbar-brand" href="#" aria-label="CyberCX"&amp;gt;
 &amp;lt;img src="https://docs.velociraptor.app/artifact_references/pages/reporting.default/https://www.velocidex.com/images/logos/velo_word_on_side.svg" class="logo"/&amp;gt;
 &amp;lt;/a&amp;gt;
 &amp;lt;button class="navbar-toggler" type="button"
 data-toggle="collapse"
 data-target="#navbarSupportedContent"
 aria-controls="navbarSupportedContent"
 aria-expanded="false" aria-label="Toggle navigation"&amp;gt;
 &amp;lt;span class="navbar-toggler-icon"&amp;gt;&amp;lt;/span&amp;gt;
 &amp;lt;/button&amp;gt;
 &amp;lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&amp;gt;
 &amp;lt;ul class="navbar-nav mr-auto"&amp;gt;
 &amp;lt;li class="nav-item active"&amp;gt;
 &amp;lt;a class="nav-link" href="#"&amp;gt;Top &amp;lt;span class="sr-only"&amp;gt;(top)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li class="nav-item"&amp;gt;
 &amp;lt;a class="nav-link" href="https://github.com/Velocidex/velociraptor"&amp;gt;GitHub&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li class="nav-item"&amp;gt;
 &amp;lt;a class="nav-link" href="#" id="print-button"&amp;gt;Print&amp;lt;/a&amp;gt;
 &amp;lt;/li&amp;gt;

 &amp;lt;li class="nav-item dropdown"&amp;gt;
 &amp;lt;a class="nav-link dropdown-toggle" href="#"
 id="navbarDropdown" role="button"
 data-toggle="dropdown"
 aria-haspopup="true" aria-expanded="false"&amp;gt;
 Artifacts Collected
 &amp;lt;/a&amp;gt;
 &amp;lt;div class="dropdown-menu" aria-labelledby="navbarDropdown"&amp;gt;
 {{ range .parts }}
 &amp;lt;a class="dropdown-item" href="#{{- .Artifact.Name -}}"&amp;gt;
 {{ .Artifact.Name }}
 &amp;lt;/a&amp;gt;
 {{ end }}
 &amp;lt;/div&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/nav&amp;gt;

 &amp;lt;main role="main" class="container"&amp;gt;
 &amp;lt;div class="row section top-section"&amp;gt;
 &amp;lt;div class="col"&amp;gt;
 {{ $data := Query "SELECT timestamp(epoch=now()).UTC.String AS Time, OS, Fqdn FROM info()" | Expand }}
 {{ Get $hostinfo "0.Fqdn" }} Artifact Collection
 &amp;lt;/div&amp;gt;
 &amp;lt;div class="col"&amp;gt;{{- Get $data "0" -}}&amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;

 {{ range .parts }}

 &amp;lt;div class=""&amp;gt;
 &amp;lt;a class="anchor" name="{{- .Artifact.Name -}}"&amp;gt;&amp;lt;/a&amp;gt;
 &amp;lt;!-- If the artifact has its own report, just include it as is --&amp;gt;
 {{ if .HTML }}
 {{ .HTML }}
 {{ else }}
 &amp;lt;!-- Default report in case the artifact does not have one --&amp;gt;
 &amp;lt;h1&amp;gt;{{ .Artifact.Name }}
 &amp;lt;div class="btn btn-primary-outline float-right"&amp;gt;{{ .Artifact.Author }}
 &amp;lt;/div&amp;gt;
 &amp;lt;/h1&amp;gt;

 {{ $name := .Artifact.Name }}

 {{ template "hidden_paragraph_start" dict "description" "View Artifact Description" }}
 {{ Markdown .Artifact.Description }}

 {{ if .Artifact.Reference }}
 &amp;lt;h3&amp;gt;References&amp;lt;/h3&amp;gt;
 &amp;lt;ul&amp;gt;
 {{ range .Artifact.Reference }}
 &amp;lt;li&amp;gt;&amp;lt;a href="{{ . }}"&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
 {{ end }}
 &amp;lt;/ul&amp;gt;
 {{ end }}
 {{ template "hidden_paragraph_end" }}

 {{ range .Artifact.Sources }}
 {{ $source := print "source(\n source='" .Name "', artifact='" $name "')" }}
 {{ $query := print "SELECT * FROM " $source " \nLIMIT 100" }}

 &amp;lt;!-- There could be a huge number of rows just to get the count, so we cap at 10000 --&amp;gt;
 {{ $count := Get ( Query (print "LET X = SELECT * FROM " $source \
 " LIMIT 10000 SELECT 1 AS ALL, count() AS Count FROM X Group BY ALL") | Expand ) \
 "0.Count" }}

 {{ if $count }}
 {{ if .Name }}
 &amp;lt;h3&amp;gt;Source {{ $name }}/{{ .Name }}&amp;lt;/h3&amp;gt;
 {{ Markdown .Description }}
 {{ end }}

 &amp;lt;!-- Show the artifact source if required. --&amp;gt;
 {{ template "hidden_paragraph_start" dict "description" "Source" }}
 &amp;lt;div class="row card card-body noprint"&amp;gt;
 {{ if .Query }}
 {{ Markdown ( print "```vql\n" .Query "```\n") }}
 {{ else }}
 {{ range .Queries }}
 {{ Markdown ( print "```vql\n" . "```\n") }}
 {{ end }}
 {{ end }}
 &amp;lt;/div&amp;gt;
 {{ template "hidden_paragraph_end" }}

 &amp;lt;!-- If this is a flow show the parameters. --&amp;gt;
 {{ $flow := Query "LET X = SELECT Request.Parameters.env AS Env FROM flows(client_id=ClientId, flow_id=FlowId)" \
 "SELECT * FROM foreach(row=X[0].Env, query={ SELECT Key, Value FROM scope()})" | Expand }}
 {{ if $flow }}
 {{ template "hidden_paragraph_start" dict "description" "Parameters" }}
 &amp;lt;div class="row card card-body noprint"&amp;gt;
 &amp;lt;h3&amp;gt; Parameters &amp;lt;/h3&amp;gt;

 &amp;lt;table class="table"&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Value&amp;lt;/th&amp;gt;&amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
 {{ range $flow }}
 &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;{{ Get . "Key" }}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;{{ Get . "Value" }}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
 {{ end }}
 &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;
 &amp;lt;/div&amp;gt;
 {{ template "hidden_paragraph_end" }}
 {{ end }}

 {{ if gt $count 9999 }}
 &amp;lt;p&amp;gt;The source produced more than {{ $count }} rows.&amp;lt;/p&amp;gt;
 {{ else }}
 &amp;lt;p&amp;gt;The source retrieved a total of {{ $count }} rows.&amp;lt;/p&amp;gt;
 {{ end }}

 {{ template "fold_start" }}
 &amp;lt;div class="noprint"&amp;gt;
 &amp;lt;p&amp;gt; Below you will find a table of the first 100 rows, obtained by the VQL query:
 &amp;lt;/p&amp;gt;
 {{ Markdown (print "```vql\n" $query "\n```\n" ) }}
 &amp;lt;/div&amp;gt;
 {{ Query $query | Table }}
 {{ template "fold_end" }}

 {{ else }}
 &amp;lt;p&amp;gt;No rows returned&amp;lt;/p&amp;gt;
 {{ end }}
 {{ end }}
 {{ end }}
 &amp;lt;/div&amp;gt;

 {{ end }}
 &amp;lt;/main&amp;gt;
 &amp;lt;script&amp;gt;
 $(".collapsible").click(function() {
 $(this).next().toggle("slow");
 try {
 $("table.table-striped").DataTable().columns.adjust();
 } catch(e) {

 };
 });

 $("#print-button").click(function() {
 $(".collapse").removeClass("collapse");
 $('table.table-striped').DataTable().destroy();
 $(".collapsible").hide();
 $(".noprint").hide();
 setTimeout(function() {
 window.print();
 location.reload();
 }, 1000);
 });

 $(document).ready( function () {
 try {
 $('table.table-striped').DataTable({
 "scrollY": 400,
 "scrollX": true,
 "autoWidth": false,
 });
 } catch(e) {};
 });
 &amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;

&lt;/code>&lt;/pre></description></item><item><title>Reporting.Hunts.Details</title><link>https://docs.velociraptor.app/artifact_references/pages/reporting.hunts.details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/reporting.hunts.details/</guid><description>&lt;p>Report details about which client ran each hunt, how long it took
and if it has completed.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Reporting.Hunts.Details
description: |
 Report details about which client ran each hunt, how long it took
 and if it has completed.

type: SERVER

parameters:
 - name: ArtifactRegex
 type: regex
 default: .
 description: Filter hunts by this

 - name: DescriptionRegex
 type: regex
 default: .
 description: Filter hunts by this description

sources:
 - query: |
 LET hunts = SELECT hunt_id,
 create_time,
 hunt_description
 FROM hunts()
 WHERE artifacts =~ ArtifactRegex AND hunt_description =~ DescriptionRegex
 ORDER BY create_time DESC

 LET flows = SELECT hunt_id,
 hunt_description,
 client_info(client_id=ClientId).os_info.fqdn AS FQDN,
 ClientId,
 client_info(client_id=ClientId).os_info.system AS OS,
 timestamp(epoch=Flow.create_time) AS create_time,
 timestamp(epoch=Flow.start_time) AS start_time,
 timestamp(epoch=Flow.active_time) AS active_time,
 FlowId AS flow_id,
 Flow.execution_duration / 1000000000 AS Duration,
 Flow.state AS State
 FROM hunt_flows(hunt_id=hunt_id)
 ORDER BY create_time DESC

 SELECT * FROM foreach(row=hunts, query=flows)

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.Notification</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.notification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.notification/</guid><description>&lt;p>This artifact forwards alerts from Server.Internal.Alerts to a Slack/Teams/Discord via a Webhook.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.Notification
description: |
 This artifact forwards alerts from Server.Internal.Alerts to a Slack/Teams/Discord via a Webhook.

author: Jos Clephas - @DfirJos

type: SERVER_EVENT

parameters:
 - name: SlackToken
 description: The token URL obtained from Slack/Teams/Discord (or basicly any communication-service that supports webhooks). Leave blank to use server metadata. e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ

sources:
 - query: |
 LET token_url = if(
 condition=SlackToken,
 then=SlackToken,
 else=server_metadata().SlackToken)

 LET hits = SELECT * from watch_monitoring(artifact='Server.Internal.Alerts')

 SELECT * FROM foreach(row=hits,
 query={
 SELECT * FROM http_client(
 data=serialize(item=dict(
 text=format(format="Alert: %v | Details: %v | Artifact: %v | ClientId: %v | Timestamp: %v)",
 args=[name, event_data, artifact, client_id, timestamp])),
 format="json"),
 headers=dict(`Content-Type`="application/json"),
 method="POST",
 url=token_url)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.ProcessCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.processcreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.processcreation/</guid><description>&lt;p>This artifact alerts when a process was detected with the artifact &amp;lsquo;Windows.Detection.ProcessCreation&amp;rsquo; (which is a client_event artifact that needs to be enabled first).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.ProcessCreation
description: |
 This artifact alerts when a process was detected with the artifact 'Windows.Detection.ProcessCreation' (which is a client_event artifact that needs to be enabled first).

author: Jos Clephas - @DfirJos

type: SERVER_EVENT

parameters:
 - name: SlackToken
 description: The token URL obtained from Slack/Teams/Discord (or basicly any communication-service that supports webhooks). Leave blank to use server metadata. e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ

sources:
 - query: |
 LET token_url = if(
 condition=SlackToken,
 then=SlackToken,
 else=server_metadata().SlackToken)

 LET hits = SELECT * from watch_monitoring(artifact='Windows.Detection.ProcessCreation')

 SELECT * FROM foreach(row=hits,
 query={
 SELECT EventData.CommandLine, EventData, Hostname, ClientId, Url, Content, Response FROM http_client(
 data=serialize(item=dict(
 text=format(format="Alert - Command detected '%v' on system %v with client Id %v. Syslog timestamp: %v ",
 args=[EventData.CommandLine, Hostname, ClientId, Timestamp])),
 format="json"),
 headers=dict(`Content-Type`="application/json"),
 method="POST",
 url=token_url)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.PsExec</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.psexec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.psexec/</guid><description>&lt;p>Send an email if execution of the psexec service was detected on
any client. This is a server side artifact.&lt;/p>
&lt;p>Note this requires that the Windows.Event.ProcessCreation
monitoring artifact be collected from clients.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.PsExec
description: |
 Send an email if execution of the psexec service was detected on
 any client. This is a server side artifact.

 Note this requires that the Windows.Event.ProcessCreation
 monitoring artifact be collected from clients.

type: SERVER_EVENT

parameters:
 - name: EmailAddress
 default: admin@example.com
 - name: SkipVerify
 type: bool
 description: If set we skip TLS verification.
 - name: MessageTemplate
 default: |
 PsExec execution detected at %v: %v for client %v

sources:
 - query: |
 SELECT * FROM foreach(
 row={
 SELECT * from watch_monitoring(
 artifact='Windows.Events.ProcessCreation')
 WHERE Name =~ 'psexesvc'
 },
 query={
 SELECT * FROM mail(
 to=EmailAddress,
 subject='PsExec launched on host',
 period=60,
 skip_verify=SkipVerify,
 body=format(
 format=MessageTemplate,
 args=[Timestamp, CommandLine, ClientId])
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.TheHive.Alert</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.thehive.alert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.thehive.alert/</guid><description>&lt;p>Create a TheHive alert when monitored artifacts complete with results.
Much of this was borrowed from: &lt;a href="https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d" target="_blank" >https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d&lt;/a>
&lt;/p>
&lt;p>It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.TheHive.Alert
description: |
 Create a TheHive alert when monitored artifacts complete with results.
 Much of this was borrowed from: https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d
 
 It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.
 
type: SERVER_EVENT

author: Wes Lambert - @therealwlambert

parameters:
 - name: TheHiveURL
 default: https://mythehive
 - name: TheHiveKey
 default: ''
 - name: VeloServerURL
 default: https://myvelo
 - name: ArtifactsToAlertOn
 default: .
 - name: DisableSSLVerify
 type: bool
 default: True

sources:
 - query: |
 LET thehive_key = if(
 condition=TheHiveKey,
 then=TheHiveKey,
 else=server_metadata().TheHiveKey)
 LET flow_info = SELECT timestamp(epoch=Timestamp) AS Timestamp,
 client_info(client_id=ClientId).os_info.fqdn AS FQDN,
 ClientId, FlowId, Flow.artifacts_with_results[0] AS FlowResults
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactsToAlertOn
 
 LET hits = SELECT * FROM foreach(row=flow_info,
 query={
 SELECT *, Timestamp, FQDN, ClientId 
 FROM source(artifact=FlowResults, 
 client_id=ClientId, flow_id=FlowId)
 })
 
 SELECT * FROM foreach(row=flow_info,
 query={
 SELECT * FROM http_client(
 data=serialize(item=dict(
 title=format(format="Hit on %v for %v", args=[FlowResults, FQDN]), description=format(format="ClientId: %v\n\nFlowID: %v\n\nURL: %v//app/index.html?#/collected/%v/%v", args=[ClientId, FlowId, VeloServerURL, ClientId, FlowId]), type="artifact-alert", source="velociraptor", sourceRef=format(format="%v", args=[rand(range=1000000000)])), format="json"),
 headers=dict(`Content-Type`="application/json", `Authorization`=format(format="Bearer %v", args=[thehive_key])),
 disable_ssl_security=DisableSSLVerify,
 method="POST", 
 url=format(format="%v/api/alert", args=[TheHiveURL]))
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.TheHive.Case</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.thehive.case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.thehive.case/</guid><description>&lt;p>Create a TheHive case when monitored artifacts complete with results. Add the ClientId, FlowId, and FQDN as tags to the case. Add FQDN as an observable.
Much of this was borrowed from: &lt;a href="https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d" target="_blank" >https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d&lt;/a>
&lt;/p>
&lt;p>It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.TheHive.Case
description: |
 Create a TheHive case when monitored artifacts complete with results. Add the ClientId, FlowId, and FQDN as tags to the case. Add FQDN as an observable.
 Much of this was borrowed from: https://gist.github.com/scudette/3a32abd19350c8fe3368661c4278869d

 It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.

type: SERVER_EVENT

author: Wes Lambert - @therealwlambert

parameters:
 - name: TheHiveURL
 default: https://mythehive
 - name: VeloServerURL
 default: https://myvelo
 - name: ArtifactsToAlertOn
 default: .
 type: regex
 - name: DisableSSLVerify
 type: bool
 default: true

sources:
 - query: |
 LET thehive_key = if(
 condition=TheHiveKey,
 then=TheHiveKey,
 else=server_metadata().TheHiveKey)
 LET flow_info = SELECT timestamp(epoch=Timestamp) AS Timestamp,
 client_info(client_id=ClientId).os_info.fqdn AS FQDN,
 ClientId, FlowId, Flow.artifacts_with_results[0] AS FlowResults
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactsToAlertOn

 LET cases = SELECT * FROM foreach(row=flow_info,
 query={
 SELECT FQDN, parse_json(data=Content)._id AS CaseID FROM http_client(
 data=serialize(item=dict(
 title=format(format="Hit on %v for %v", args=[FlowResults, FQDN]), description=format(format="ClientId: %v\n\nFlowID: %v\n\nURL: %v//app/index.html?#/collected/%v/%v", args=[ClientId, FlowId, VeloServerURL, ClientId, FlowId,]), tags=[ClientId,FlowId, FQDN]), format="json"),
 headers=dict(`Content-Type`="application/json", `Authorization`=format(format="Bearer %v", args=[thehive_key])),
 disable_ssl_security=DisableSSLVerify,
 method="POST",
 url=format(format="%v/api/case", args=[TheHiveURL]))
 })

 SELECT * from foreach(row=cases,
 query={
 SELECT * FROM http_client(
 data=serialize(item=dict(data=FQDN, dataType="fqdn", message=FQDN)),
 headers=dict(`Content-Type`="application/json", `Authorization`=format(format="Bearer %v", args=[thehive_key])),
 disable_ssl_security=DisableSSLVerify,
 method="POST",
 url=format(format="%v/api/case/%v/artifact", args=[TheHiveURL, CaseID]))
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.Trackaccount</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.trackaccount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.trackaccount/</guid><description>&lt;p>This artifact alerts when account usage of a monitored account is detected. This is a server-side artifact, please note that it requires the client_event artifact &amp;lsquo;Windows.Events.Trackaccount&amp;rsquo; to be enabled.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.Trackaccount
description: |
 This artifact alerts when account usage of a monitored account is detected. This is a server-side artifact, please note that it requires the client_event artifact 'Windows.Events.Trackaccount' to be enabled.

author: Jos Clephas - @DfirJos

type: SERVER_EVENT

parameters:
 - name: SlackToken
 description: The token URL obtained from Slack/Teams/Discord (or basicly any communication-service that supports webhooks). Leave blank to use server metadata. e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ

sources:
 - query: |
 LET token_url = if(
 condition=SlackToken,
 then=SlackToken,
 else=server_metadata().SlackToken)

 LET hits = SELECT * from watch_monitoring(artifact='Windows.Events.Trackaccount')

 SELECT * FROM foreach(row=hits,
 query={
 SELECT EventRecordID, EventID, TargetUserName, TargetWorkstationName, SourceComputer, LogonType, EventTime, ClientId, Url, Content, Response FROM http_client(
 data=serialize(item=dict(
 text=format(format="EventID: %v - Account '%v' authenticated from system '%v' to '%v' with LogonType %v at %v on client %v (EventRecordID: %v)",
 args=[EventID, TargetUserName, TargetWorkstationName, SourceComputer, LogonType, EventTime, ClientId, EventRecordID])),
 format="json"),
 headers=dict(`Content-Type`="application/json"),
 method="POST",
 url=token_url)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Alerts.WinPmem</title><link>https://docs.velociraptor.app/artifact_references/pages/server.alerts.winpmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.alerts.winpmem/</guid><description>&lt;p>Send an email if the pmem service has been installed on any of the
endpoints.&lt;/p>
&lt;p>Note this requires that the Windows.Event.ServiceCreation
monitoring artifact be collected from clients.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Alerts.WinPmem
description: |
 Send an email if the pmem service has been installed on any of the
 endpoints.

 Note this requires that the Windows.Event.ServiceCreation
 monitoring artifact be collected from clients.

type: SERVER_EVENT

parameters:
 - name: EmailAddress
 default: admin@example.com
 - name: SkipVerify
 type: bool
 description: If set we skip TLS verification.

sources:
 - query: |
 SELECT * FROM foreach(
 row={
 SELECT * from watch_monitoring(
 artifact='Windows.Events.ServiceCreation')
 WHERE ServiceName =~ 'pmem'
 },
 query={
 SELECT * FROM mail(
 to=EmailAddress,
 subject='Pmem launched on host',
 period=60,
 skip_verify=SkipVerify,
 body=format(
 format="WinPmem execution detected at %s for client %v",
 args=[Timestamp, ClientId]
 )
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Audit.Logs</title><link>https://docs.velociraptor.app/artifact_references/pages/server.audit.logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.audit.logs/</guid><description>&lt;p>This internal event artifact collects relevant audit events from the
server. Audit events are significant auditable actions that a user
takes, for example, starting a new collection, creating a new hunt,
updating an artifact definition etc.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Audit.Logs
description: |
 This internal event artifact collects relevant audit events from the
 server. Audit events are significant auditable actions that a user
 takes, for example, starting a new collection, creating a new hunt,
 updating an artifact definition etc.

type: SERVER_EVENT

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.CortexAnalyzer</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.cortexanalyzer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.cortexanalyzer/</guid><description>&lt;p>Run Cortex analyzer jobs across all enabled and applicable analyzers (based on supported analyzer data types), then retrieve the results.&lt;/p>
&lt;p>This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.&lt;/p>
&lt;p>Ex.&lt;/p>
&lt;p>&lt;code>SELECT * from Artifact.Server.Enrichment.CortexAnalyzer(Observable=$YOURHASH, ObservableType='hash')&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.CortexAnalyzer
description: |
 Run Cortex analyzer jobs across all enabled and applicable analyzers (based on supported analyzer data types), then retrieve the results.

 This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.

 Ex.

 `SELECT * from Artifact.Server.Enrichment.CortexAnalyzer(Observable=$YOURHASH, ObservableType='hash')`

reference:
 - https://github.com/TheHive-Project/Cortex

author: Wes Lambert - @therealwlambert

type: SERVER

parameters:
 - name: Observable
 description: Data to be analyzed by Cortex 
 default: 
 - name: ObservableType
 description: Type of observable to be submitted to Cortex. Ex. `hash`, `domain`, `ip`
 default:
 - name: TLP
 description: TLP for the job submitted to Cortex
 default: 0
 - name: CortexURL
 description: URL used for Cortex job submission. It is recommended to use the &amp;lt;a href="#/host/server"&amp;gt;server metadata store&amp;lt;/a&amp;gt; for this.
 default: ''
 - name: CortexKey
 description: API key used for authentication to Cortex. It is recommended to use the &amp;lt;a href="#/host/server"&amp;gt;server metadata store&amp;lt;/a&amp;gt; for this.
 default: ''
 - name: DisableSSLVerify
 type: bool
 description: Disable SSL Verification
 default: True
 - name: JobMessage
 description: Message to be used when running analyzer job
 default: Job submmitted by Velociraptor
 - name: JobWaitTime
 description: Amount of time to wait for a report from Cortex.
 default: 10minute

sources:
 - query: |
 LET OBSERVABLE &amp;lt;= Observable
 LET OBSERVABLE_DATATYPE &amp;lt;= ObservableType
 LET URL &amp;lt;= if(
 condition=CortexURL,
 then=CortexURL,
 else=server_metadata().CortexURL)
 LET cortex_key = 
 if(
 condition=CortexKey,
 then=CortexKey,
 else=server_metadata().CortexKey)
 LET ENABLED_ANALYZERS = SELECT Content FROM 
 http_client(
 url=URL + '/analyzer', 
 method='GET', 
 disable_ssl_security=DisableSSLVerify, 
 headers=dict(
 `Authorization`=format(format="Bearer %v", args=[cortex_key])))
 LET ANALYZERS_SUPPORTED = SELECT name AS AnalyzerName, id AS ID, dataTypeList AS DList FROM parse_json_array(data=ENABLED_ANALYZERS.Content)
 LET ANALYZERS_MATCH_TYPE = SELECT ID FROM foreach(row=ANALYZERS_SUPPORTED, query={ SELECT AnalyzerName, ID, _value AS Match FROM 
 if(
 condition= filter(list=DList, regex=OBSERVABLE_DATATYPE),
 then="yes",
 else="no")}) WHERE Match = "yes"
 LET ANALYZER_RUN = SELECT parse_json(data=Content) AS Resp FROM 
 http_client(
 url=URL + '/analyzer/'+ ID + '/run' , 
 method='POST', 
 disable_ssl_security=DisableSSLVerify, 
 headers=dict(
 `Content-Type`="application/json", 
 `Authorization`=format(format="Bearer %v", 
 args=[cortex_key])),
 data=serialize(item=dict(
 data=OBSERVABLE, dataType=OBSERVABLE_DATATYPE, tlp=TLP, message=JobMessage
 ))
 )
 LET JOBID = SELECT Resp.id AS JobID from foreach(row=ANALYZER_RUN)
 LET GETREPORT = SELECT Content AS Resp FROM 
 http_client(
 url=format(format="%v/job/%v/waitreport?atMost=%v", args=[URL,JOBID.JobID[0], JobWaitTime]),
 method='GET', 
 disable_ssl_security=DisableSSLVerify, 
 headers=dict(
 `Content-Type`="application/json", 
 `Authorization`=format(format="Bearer %v", 
 args=[cortex_key])
 )
 )
 LET REPORT = SELECT parse_json(data=Resp) AS Details FROM GETREPORT
 SELECT Observable, Details.workerName as AnalyzerName, Details as _Details, Details.report AS Report FROM foreach(row=ANALYZERS_MATCH_TYPE, query={SELECT * FROM REPORT})

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.GeoIP</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.geoip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.geoip/</guid><description>&lt;p>This artifact can use the MaxMind database to Geo resolve an IP
address. You will need to provide a valid GeoIP database.&lt;/p>
&lt;p>You can obtain a free to use (gratis but not libre) database from
&lt;a href="https://www.maxmind.com/" target="_blank" >https://www.maxmind.com/&lt;/a>
 or you can pay for a more accurate option.&lt;/p>
&lt;p>After storing the database somewhere on your server, you should the
location in the server metadata screen to it under the key &amp;ldquo;GeoIPDB&amp;rdquo;
(for example &lt;code>/usr/shared/GeoLite2-City_20210803/GeoLite2-City.mmdb&lt;/code>)&lt;/p>
&lt;p>Alternatively you can import this artifact to gain access to the
utility functions (or just copy them into your own artifact).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.GeoIP
description: |
 This artifact can use the MaxMind database to Geo resolve an IP
 address. You will need to provide a valid GeoIP database.

 You can obtain a free to use (gratis but not libre) database from
 https://www.maxmind.com/ or you can pay for a more accurate option.

 After storing the database somewhere on your server, you should the
 location in the server metadata screen to it under the key "GeoIPDB"
 (for example `/usr/shared/GeoLite2-City_20210803/GeoLite2-City.mmdb`)

 Alternatively you can import this artifact to gain access to the
 utility functions (or just copy them into your own artifact).

export: |
 LET DB = server_metadata().GeoIPDB
 LET Country(IP) = geoip(db=DB, ip=IP).country.names.en
 LET State(IP) = geoip(db=DB, ip=IP).subdivisions[0].names.en
 LET City(IP) = geoip(db=DB, ip=IP).city.names.en

parameters:
 - name: IP
 description: An IP to lookup

sources:
 - query: |
 SELECT Country(IP=_value) AS Country,
 State(IP=_value) AS State,
 City(IP=_value) AS City
 FROM foreach(row=IP)

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.GeoIPISP</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.geoipisp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.geoipisp/</guid><description>&lt;p>This artifact can use the MaxMind database to Geo resolve an IP
address using the GeoIP ISP Database. You will need to provide a valid GeoIP ISP database.&lt;/p>
&lt;p>You can obtain a free to use (gratis but not libre) database from
&lt;a href="https://www.maxmind.com/" target="_blank" >https://www.maxmind.com/&lt;/a>
 or you can pay for a more accurate option.&lt;/p>
&lt;p>After storing the database somewhere on your server, you should the
location in the server metadata screen to it under the key &amp;ldquo;GeoIPISPDB&amp;rdquo;
(for example &lt;code>/usr/shared/GeoIP2-City_20210910/GeoIP2-ISP.mmdb&lt;/code>)&lt;/p>
&lt;p>Alternatively you can import this artifact to gain access to the
utility functions (or just copy them into your own artifact).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.GeoIPISP
description: |
 This artifact can use the MaxMind database to Geo resolve an IP
 address using the GeoIP ISP Database. You will need to provide a valid GeoIP ISP database.

 You can obtain a free to use (gratis but not libre) database from
 https://www.maxmind.com/ or you can pay for a more accurate option.

 After storing the database somewhere on your server, you should the
 location in the server metadata screen to it under the key "GeoIPISPDB"
 (for example `/usr/shared/GeoIP2-City_20210910/GeoIP2-ISP.mmdb`)

 Alternatively you can import this artifact to gain access to the
 utility functions (or just copy them into your own artifact).

export: |
 LET ISPDB = server_metadata().GeoIPISPDB
 LET ISP(IP) = geoip(db=ISPDB, ip=IP).isp
 LET ORG(IP) = geoip(db=ISPDB, ip=IP).organization
 LET ASN(IP) = geoip(db=ISPDB, ip=IP).autonomous_system_number
 LET ASO(IP) = geoip(db=ISPDB, ip=IP).autonomous_system_organization

parameters:
 - name: IP
 description: An IP to lookup

sources:
 - query: |
 SELECT ISP(IP=_value) AS ISP,
 ORG(IP=_value) AS Organization,
 ASN(IP=_value) AS ASN,
 ASO(IP=_value) AS ASO
 FROM foreach(row=IP)

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.GreyNoise</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.greynoise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.greynoise/</guid><description>&lt;p>Submit an IP to the GreyNoise API.&lt;/p>
&lt;p>&lt;a href="https://developer.greynoise.io/reference/community-api" target="_blank" >https://developer.greynoise.io/reference/community-api&lt;/a>
&lt;/p>
&lt;p>This is a rather simple artifact that can be called from within another artifact (such as one looking for network connections) to enrich the data made available by that artifact.&lt;/p>
&lt;p>Ex.&lt;/p>
&lt;p>&lt;code>SELECT * from Artifact.Server.Enrichment.GreyNoise(IP=$YOURIP)&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.GreyNoise
author: Wes Lambert -- @therealwlambert
description: |
 Submit an IP to the GreyNoise API.

 https://developer.greynoise.io/reference/community-api

 This is a rather simple artifact that can be called from within another artifact (such as one looking for network connections) to enrich the data made available by that artifact.

 Ex.

 `SELECT * from Artifact.Server.Enrichment.GreyNoise(IP=$YOURIP)`


type: SERVER

parameters:
 - name: IP
 type: string
 description: The IP to submit to GreyNoise.
 default:
 - name: ApiKey
 type: string
 description: The API key to submit to GreyNoise.
 default: ''
 - name: AccountType
 type: choices
 description: The GreyNoise account type - enterprise or community.
 default: community
 choices:
 - community
 - enterprise
 - name: CommunityURL
 type: string
 description: The GreyNoise community API URL.
 default: https://api.greynoise.io/v3/community/
 - name: EnterpriseURL
 type: string
 description: The GreyNoise enterprise API URL.
 default: https://api.greynoise.io/v2/noise/quick/

sources:
 - query: |
 LET URL &amp;lt;= if(condition= AccountType='community', then=CommunityURL, else=EnterpriseURL)

 LET Data = if(condition= ApiKey!='', 
 then={
 SELECT parse_json(data=Content) AS GreyNoiseLookup
 FROM http_client(url=URL + IP, headers=dict(`Accept`="application/json",`key`=ApiKey), method='GET')
 }, else={
 SELECT parse_json(data=Content) AS GreyNoiseLookup
 FROM http_client(url=URL + IP, headers=dict(`Accept`="application/json"), method='GET')
 })

 SELECT
 GreyNoiseLookup.ip AS IP,
 GreyNoiseLookup.classification AS Classification,
 GreyNoiseLookup.name AS Name,
 GreyNoiseLookup.riot AS Riot,
 GreyNoiseLookup.noise AS Noise,
 GreyNoiseLookup.last_seen AS LastSeen,
 GreyNoiseLookup.link AS Link,
 GreyNoiseLookup AS _GreyNoiseLookup
 FROM Data

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.HybridAnalysis</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.hybridanalysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.hybridanalysis/</guid><description>&lt;p>Submit a file hash to Hybrid Analysis for a verdict. Default free API restriction is 200 requests/min or 2000 requests/hour.&lt;/p>
&lt;p>This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.&lt;/p>
&lt;p>Ex.&lt;/p>
&lt;p>&lt;code>SELECT * from Artifact.Server.Enrichment.HybridAnalysis(Hash=$YOURHASH)&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.HybridAnalysis
author: Wes Lambert -- @therealwlambert
description: |
 Submit a file hash to Hybrid Analysis for a verdict. Default free API restriction is 200 requests/min or 2000 requests/hour.

 This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.

 Ex.

 `SELECT * from Artifact.Server.Enrichment.HybridAnalysis(Hash=$YOURHASH)`

type: SERVER

parameters:
 - name: Hash
 type: string
 description: The file hash to submit to Hybrid Analysis (MD5, SHA1, SHA256).
 default:

 - name: HybridAnalysisKey
 type: string
 description: API key for Hybrid Analysis. Leave blank here if using server metadata store.
 default:

 - name: UserAgent
 type: string
 description: Name of the user agent used for submitting hashes.
 default: Velociraptor

sources:
 - query: |
 LET Creds = if(
 condition=HybridAnalysisKey,
 then=HybridAnalysisKey,
 else=server_metadata().HybridAnalysisKey)

 LET URL &amp;lt;= 'https://hybrid-analysis.com/api/v2/search/hash'

 LET Data = SELECT parse_json_array(data=Content) as Content
 FROM http_client(
 url=URL,
 headers=dict(`api-key`=Creds,
 `user-agent`=UserAgent,
 `Content-Type`="application/x-www-form-urlencoded"),
 params=dict(hash=Hash),
 method='POST')

 SELECT * from foreach (
 row=Data,
 query={
 SELECT Content as _Content,
 Content.verdict[0] as Verdict
 FROM scope()
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Enrichment.Virustotal</title><link>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.virustotal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.enrichment.virustotal/</guid><description>&lt;p>Submit a file hash to Virustotal for details. Default Public API restriction is 4 requests/min.&lt;/p>
&lt;p>This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.&lt;/p>
&lt;p>Ex.&lt;/p>
&lt;p>&lt;code>SELECT * from Artifact.Server.Enrichment.Virustotal(Hash=$YOURHASH)&lt;/code>&lt;/p>
&lt;p>&lt;code>TO-DO&lt;/code>: Implement a timer to spread out requests&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Enrichment.Virustotal
author: Wes Lambert -- @therealwlambert
description: |
 Submit a file hash to Virustotal for details. Default Public API restriction is 4 requests/min.

 This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.

 Ex.

 `SELECT * from Artifact.Server.Enrichment.Virustotal(Hash=$YOURHASH)`

 `TO-DO`: Implement a timer to spread out requests

type: SERVER

parameters:
 - name: Hash
 type: string
 description: The file hash to submit to Hybrid Analysis (MD5, SHA1, SHA256).
 default:

 - name: VirustotalKey
 type: string
 description: API key for Virustotal. Leave blank here if using server metadata store.
 default:

sources:
 - query: |
 LET Creds = if(
 condition=VirustotalKey,
 then=VirustotalKey,
 else=server_metadata().VirustotalKey)

 LET URL &amp;lt;= 'https://www.virustotal.com/api/v3/files/' + Hash

 LET Data = SELECT parse_json(data=Content) AS VTData
 FROM http_client(url=URL, headers=dict(`x-apikey`=Creds))

 SELECT format(format='%v/%v',
 args=[VTData.data.attributes.last_analysis_stats.malicious,
 VTData.data.attributes.last_analysis_stats.malicious +
 VTData.data.attributes.last_analysis_stats.undetected]) As VTRating,
 timestamp(epoch=VTData.data.attributes.first_seen_itw_date) AS FirstSeen,
 timestamp(epoch=VTData.data.attributes.first_submission_date) AS FirstSubmitted,
 timestamp(epoch=VTData.data.attributes.last_analysis_date) AS LastAnalysis,
 VTData.data.attributes.crowdsourced_yara_results AS YARAResults,
 VTData AS _Data
 FROM Data

&lt;/code>&lt;/pre></description></item><item><title>Server.Hunts.AddFlow</title><link>https://docs.velociraptor.app/artifact_references/pages/server.hunts.addflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.hunts.addflow/</guid><description>&lt;p>This artifact adds an exisiting flow to a running hunt.&lt;/p>
&lt;p>This helps in the case where the original flow in the hunt timed
out. The user then can re-run the hunt manually possibly increasing
timeout. Then they can simply click the add flow to hunt button in
the UI to add the flow to an existing time.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Hunts.AddFlow
description: |
 This artifact adds an exisiting flow to a running hunt.

 This helps in the case where the original flow in the hunt timed
 out. The user then can re-run the hunt manually possibly increasing
 timeout. Then they can simply click the add flow to hunt button in
 the UI to add the flow to an existing time.

type: SERVER

parameters:
 - name: HuntId
 - name: ClientId
 - name: FlowId

sources:
 - query: |
 SELECT * FROM if(condition=HuntId AND ClientId AND FlowId,
 then={
 SELECT hunt_add(hunt_id=HuntId,
 client_id=ClientId,
 flow_id=FlowId)
 FROM scope()
 }, else={
 SELECT * FROM scope() WHERE
 log(message="&amp;lt;red&amp;gt;ERROR&amp;lt;/&amp;gt;: You must set HuntId, ClientId and FlowId.") AND FALSE
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Hunts.CancelAndDelete</title><link>https://docs.velociraptor.app/artifact_references/pages/server.hunts.cancelanddelete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.hunts.cancelanddelete/</guid><description>&lt;p>Velociraptor Hunts are a way of running the same flow on
many endpoints at once. Hunts issue very quickly and wait
until each endpoint returns results.&lt;/p>
&lt;p>Sometimes, the artifacts collected might take a long time and
have unacceptable performance impact on the endpoint.
In some cases the artifacts end up retrieving too much data
that is not needed.&lt;/p>
&lt;p>For those cases you might want to run the following server
artifact. It cancels all currently in-flight collections.&lt;/p>
&lt;p>Optionally you can also remove any files already collected if you
do not need them.&lt;/p>
&lt;p>This artifact is implicitly collected by the GUI when pressing the
&amp;ldquo;Delete Hunt&amp;rdquo; Button.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Hunts.CancelAndDelete
description: |
 Velociraptor Hunts are a way of running the same flow on
 many endpoints at once. Hunts issue very quickly and wait
 until each endpoint returns results.

 Sometimes, the artifacts collected might take a long time and
 have unacceptable performance impact on the endpoint.
 In some cases the artifacts end up retrieving too much data
 that is not needed.

 For those cases you might want to run the following server
 artifact. It cancels all currently in-flight collections.

 Optionally you can also remove any files already collected if you
 do not need them.

 This artifact is implicitly collected by the GUI when pressing the
 "Delete Hunt" Button.

type: SERVER

parameters:
 - name: HuntId
 description: hunt_id you would like to kill all associated flows.
 default: "H.XXXXXX"
 - name: DeleteAllFiles
 description: Also delete all collected files
 type: bool

sources:
 - name: CancelFlows
 query: |
 // Get the flows and their running state for this hunt.
 LET flows = SELECT ClientId, FlowId, HuntId, {
 SELECT state FROM flows(client_id=ClientId, flow_id=FlowId)
 } AS FlowState
 FROM hunt_flows(hunt_id=HuntId)

 // Only cancel running flows.
 SELECT *, cancel_flow(client_id=ClientId, flow_id=FlowId) as cancel_flow
 FROM flows
 WHERE FlowState = "RUNNING"

 - name: HuntFiles
 query: |
 SELECT * FROM hunt_delete(hunt_id=HuntId, really_do_it=DeleteAllFiles)

&lt;/code>&lt;/pre></description></item><item><title>Server.Hunts.List</title><link>https://docs.velociraptor.app/artifact_references/pages/server.hunts.list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.hunts.list/</guid><description>&lt;p>List Hunts currently scheduled on the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Hunts.List
description: |
 List Hunts currently scheduled on the server.

type: SERVER

sources:
 - query: |
 SELECT hunt_id,
 timestamp(epoch=create_time) as Created,
 join(array=start_request.artifacts, sep=",") as Artifact,
 state
 FROM hunts()

&lt;/code>&lt;/pre></description></item><item><title>Server.Hunts.Results</title><link>https://docs.velociraptor.app/artifact_references/pages/server.hunts.results/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.hunts.results/</guid><description>&lt;p>Show the results from each artifact collection hunt.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Hunts.Results
description: |
 Show the results from each artifact collection hunt.
parameters:
 - name: huntId
 default: H.d05b2482
 - name: ArtifactName
 default: Linux.Mounts

type: SERVER

sources:
 - query: |
 SELECT * FROM hunt_results(hunt_id=huntId, artifact=ArtifactName)

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.ArtifactExchange</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.artifactexchange/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.artifactexchange/</guid><description>&lt;p>This artifact will automatically import the latest artifact
exchange bundle into the current server.&lt;/p>
&lt;h2 id="security-note">Security note&lt;/h2>
&lt;p>The artifact exchange is not officially supported by the
Velociraptor team and contains contributions from the
community. The quality, security and stability of artifacts from
the exchange is not guaranteed. Some artifacts from the exchange
will fetch external binaries and run them on your endpoints! These
binaries are not reviewed or endorsed by the Velociraptor team or
Rapid7!&lt;/p>
&lt;p>Contributions to the exchange must meet a lower quality bar than
built in artifacts (for example lacking tests), which means that
they may break at any time or not work as described!&lt;/p>
&lt;p>Collecting any of the artifacts in the exchange is purely at your
own risk!.&lt;/p>
&lt;p>We strongly suggest users review exchange artifacts carefully
before deploying them on their network!&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.ArtifactExchange
description: |
 This artifact will automatically import the latest artifact
 exchange bundle into the current server.

 ## Security note

 The artifact exchange is not officially supported by the
 Velociraptor team and contains contributions from the
 community. The quality, security and stability of artifacts from
 the exchange is not guaranteed. Some artifacts from the exchange
 will fetch external binaries and run them on your endpoints! These
 binaries are not reviewed or endorsed by the Velociraptor team or
 Rapid7!

 Contributions to the exchange must meet a lower quality bar than
 built in artifacts (for example lacking tests), which means that
 they may break at any time or not work as described!

 Collecting any of the artifacts in the exchange is purely at your
 own risk!.

 We strongly suggest users review exchange artifacts carefully
 before deploying them on their network!

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: ExchangeURL
 default: https://github.com/Velocidex/velociraptor-docs/raw/gh-pages/exchange/artifact_exchange_v2.zip
 - name: Prefix
 description: Add artifacts with this prefix
 default: Exchange.
 - name: ArchiveGlob
 default: "/**/*.{yaml,yml}"

sources:
 - query: |
 LET X = SELECT artifact_set(prefix=Prefix, definition=Definition) AS Definition
 FROM foreach(row={
 SELECT Content FROM http_client(
 remove_last=TRUE,
 tempfile_extension=".zip", url=ExchangeURL)
 }, query={
 SELECT read_file(accessor="zip", filename=OSPath) AS Definition
 FROM glob(
 globs=ArchiveGlob,
 root=pathspec(
 DelegateAccessor="auto",
 DelegatePath=Content),
 accessor="zip")
 })

 SELECT Definition.name AS Name,
 Definition.description AS Description,
 Definition.author AS Author
 FROM X

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.CuratedSigma</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.curatedsigma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.curatedsigma/</guid><description>&lt;p>This artifact allows importing curated Sigma rules from
&lt;a href="https://sigma.velocidex.com" target="_blank" >https://sigma.velocidex.com&lt;/a>
&lt;/p>
&lt;p>Collect this artifact on the server to automatically import or
update these artifacts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.CuratedSigma
description: |
 This artifact allows importing curated Sigma rules from
 https://sigma.velocidex.com

 Collect this artifact on the server to automatically import or
 update these artifacts.

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: PackageNames
 type: multichoice
 default: '["Velociraptor Hayabusa Ruleset"]'
 choices:
 - Velociraptor Hayabusa Ruleset
 - Velociraptor Hayabusa Live Detection
 - Velociraptor ChopChopGo Ruleset (Linux)

 - name: Prefix
 description: Add this prefix to imported artifacts
 validating_regex: '^[a-zA-Z0-9_.]*$'

sources:
 - query: |
 LET URLlookup = dict(
 `Velociraptor ChopChopGo Ruleset (Linux)`="https://sigma.velocidex.com/Velociraptor-ChopChopGo-Rules.zip",
 `Velociraptor Hayabusa Ruleset`="https://sigma.velocidex.com/Velociraptor-Hayabusa-Rules.zip",
 `Velociraptor Hayabusa Live Detection`="https://sigma.velocidex.com/Velociraptor-Hayabusa-Monitoring.zip")

 SELECT * FROM foreach(row=PackageNames,
 query={SELECT * FROM
 Artifact.Server.Import.ArtifactExchange(
 Prefix=Prefix,
 ArchiveGlob="*.yaml",
 ExchangeURL=get(item= URLlookup, member= _value))})

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.DeleteArtifacts</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.deleteartifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.deleteartifacts/</guid><description>&lt;p>This artifact will remove customized artifacts from the Velociraptor
server based on a regex.&lt;/p>
&lt;p>NOTE: It is impossible to remove built in artifacts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.DeleteArtifacts
description: |
 This artifact will remove customized artifacts from the Velociraptor
 server based on a regex.

 NOTE: It is impossible to remove built in artifacts.

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: ArtifactRegex
 type: regex
 description: A regex to select artifacts to delete.
 default: ^(Exchange|Custom)
 - name: ReallyDoIt
 type: bool

sources:
 - query: |
 SELECT name, description,
 if(condition=ReallyDoIt, then=artifact_delete(name=name)) AS ReallyDoIt
 FROM artifact_definitions()
 WHERE NOT built_in
 AND name =~ ArtifactRegex

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.PreviousReleases</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.previousreleases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.previousreleases/</guid><description>&lt;p>When upgrading the Velociraptor server the built in artifacts may
change using newer VQL features that are not present on older
clients.&lt;/p>
&lt;p>If you have some older clients that can not be upgraded, sometimes
collecting standard built-in artifacts will fail. In this case it is
handy to import older VQL artifacts that work with these older
clients.&lt;/p>
&lt;p>This server artifact allows you to automatically import all
artifacts that came bundled with previous versions. These should be
compatible with older clients.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.PreviousReleases
description: |
 When upgrading the Velociraptor server the built in artifacts may
 change using newer VQL features that are not present on older
 clients.

 If you have some older clients that can not be upgraded, sometimes
 collecting standard built-in artifacts will fail. In this case it is
 handy to import older VQL artifacts that work with these older
 clients.

 This server artifact allows you to automatically import all
 artifacts that came bundled with previous versions. These should be
 compatible with older clients.

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: VelociraptorRelease
 description: |
 The Velociraptor Release to import.
 type: choices
 default: v0.72
 choices:
 - v0.7.0
 - v0.7.1
 - v0.72

sources:
 - query: |
 LET Prefix &amp;lt;= regex_replace(source=VelociraptorRelease, re='\\.', replace="") + "."
 LET ExchangeURL = "https://docs.velociraptor.app/release_artifacts/release_artifacts_" + VelociraptorRelease + ".zip"

 LET X = SELECT artifact_set(
 prefix=Prefix,
 definition=Definition) AS Definition
 FROM foreach(row={
 SELECT Content FROM http_client(
 remove_last=TRUE,
 tempfile_extension=".zip", url=ExchangeURL)
 }, query={
 -- Replace internal references to use the same version so
 -- artifacts are still internally consistent.
 SELECT regex_replace(source=read_file(accessor="zip", filename=OSPath),
 re='''(?sm) Artifact\.([a-z0-9._]+?[(])''',
 replace=" Artifact." + Prefix + "$1") AS Definition
 FROM glob(
 globs='/**/*.yaml',
 root=pathspec(
 DelegateAccessor="auto",
 DelegatePath=Content),
 accessor="zip")
 WHERE NOT Definition =~ "(?ms)type: +INTERNAL"
 })

 SELECT Definition.name AS Name,
 Definition.description AS Description,
 Definition.author AS Author
 FROM X

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.Rapid7Labs</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.rapid7labs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.rapid7labs/</guid><description>&lt;p>This artifact will import curated artifacts by Rapid7 Labs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.Rapid7Labs
description: |
 This artifact will import curated artifacts by Rapid7 Labs.

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: Rapid7LabsURL
 default: https://github.com/rapid7/Rapid7-Labs/raw/main/Vql/release/Rapid7LabsVQL.zip
 - name: Prefix
 description: Add artifacts with this prefix
 default: Rapid7Labs.

sources:
 - query: |
 LET X = SELECT artifact_set(prefix=Prefix, definition=Definition) AS Definition
 FROM foreach(row={
 SELECT Content FROM http_client(
 remove_last=TRUE,
 tempfile_extension=".zip", url=Rapid7LabsURL)
 }, query={
 SELECT read_file(accessor="zip", filename=OSPath) AS Definition
 FROM glob(
 globs='/**/*.yaml',
 root=pathspec(
 DelegateAccessor="auto",
 DelegatePath=Content),
 accessor="zip")
 })

 SELECT Definition.name AS Name,
 Definition.description AS Description,
 Definition.author AS Author
 FROM X

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.RegistryHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.registryhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.registryhunter/</guid><description>&lt;p>This artifact will import the latest Registry Hunter artifact.&lt;/p>
&lt;p>To read more about the Registry Hunter, see
&lt;a href="https://registry-hunter.velocidex.com/" target="_blank" >https://registry-hunter.velocidex.com/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.RegistryHunter
description: |
 This artifact will import the latest Registry Hunter artifact.

 To read more about the Registry Hunter, see
 https://registry-hunter.velocidex.com/

type: SERVER

required_permissions:
- SERVER_ADMIN

sources:
 - query: |
 SELECT * FROM Artifact.Server.Import.ArtifactExchange(
 ExchangeURL="https://registry-hunter.velocidex.com/Windows.Registry.Hunter.zip",
 Prefix="")

&lt;/code>&lt;/pre></description></item><item><title>Server.Import.UpdatedBuiltin</title><link>https://docs.velociraptor.app/artifact_references/pages/server.import.updatedbuiltin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.import.updatedbuiltin/</guid><description>&lt;p>This artifact allows importing updated versions of some common built
in artifacts. If you do not want to wait for the next full release
you can use this artifact to import a more recent version of some
select artifacts which might include later feature.&lt;/p>
&lt;p>NOTE: There is no guarantees that the updated artifact will work on
an older version. Make sure to test properly.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Import.UpdatedBuiltin
description: |
 This artifact allows importing updated versions of some common built
 in artifacts. If you do not want to wait for the next full release
 you can use this artifact to import a more recent version of some
 select artifacts which might include later feature.

 NOTE: There is no guarantees that the updated artifact will work on
 an older version. Make sure to test properly.

type: SERVER

required_permissions:
- SERVER_ADMIN

parameters:
 - name: PackageName
 type: choices
 default: Windows.KapeFiles.Targets
 choices:
 - Windows.KapeFiles.Targets
 - Generic.Forensic.SQLiteHunter

 - name: Prefix
 description: Add artifacts with this prefix
 default: Updated.

sources:
 - query: |
 LET URLlookup = dict(
 `Windows.KapeFiles.Targets`="https://raw.githubusercontent.com/Velocidex/velociraptor/master/artifacts/definitions/Windows/KapeFiles/Targets.yaml",
 `Generic.Forensic.SQLiteHunter`="https://raw.githubusercontent.com/Velocidex/SQLiteHunter/main/output/SQLiteHunter.yaml"
 )

 SELECT artifact_set(definition=Content, prefix="Updated.") AS Artifact
 FROM http_client(url=get(item=URLlookup, field=PackageName))
 WHERE Response = 200

&lt;/code>&lt;/pre></description></item><item><title>Server.Information.Clients</title><link>https://docs.velociraptor.app/artifact_references/pages/server.information.clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.information.clients/</guid><description>&lt;p>This artifact returns the total list of clients, their hostnames and
the last times they were seen.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Information.Clients
description: |
 This artifact returns the total list of clients, their hostnames and
 the last times they were seen.

type: SERVER

sources:
 - query: |
 SELECT client_id,
 os_info.fqdn as HostName,
 os_info.system as OS,
 os_info.release as Release,
 timestamp(epoch=last_seen_at/ 1000000).String as LastSeenAt,
 last_ip AS LastIP,
 last_seen_at AS _LastSeenAt
 FROM clients()
 ORDER BY _LastSeenAt DESC

&lt;/code>&lt;/pre></description></item><item><title>Server.Information.Users</title><link>https://docs.velociraptor.app/artifact_references/pages/server.information.users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.information.users/</guid><description>&lt;p>List the user names and SIDs on each machine. We get this
information from the last time we collected Windows.Sys.Users. If we
never collected it for this machine, there will be no results.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Information.Users
description: |
 List the user names and SIDs on each machine. We get this
 information from the last time we collected Windows.Sys.Users. If we
 never collected it for this machine, there will be no results.

type: SERVER

parameters:
 - name: StandardUserAccounts
 description: Well known SIDs to hide from the output.
 default: "(-5..$|S-1-5-18|S-1-5-19|S-1-5-20)"
 type: regex

sources:
 - query: |
 LET clients = SELECT client_id, os_info.fqdn AS Fqdn FROM clients()

 // Get the most recent collection of our user listing.
 LET last_user_listing = SELECT
 session_id AS flow_id,
 active_time, client_id, Fqdn
 FROM flows(client_id=client_id)
 WHERE artifacts_with_results =~'Windows.Sys.Users'
 ORDER BY active_time
 DESC LIMIT 1

 /* For each Windows.Sys.Users collection, extract the user
 names, but hide standard SIDs.
 */
 LET users = SELECT * FROM foreach(
 row=last_user_listing,
 query={
 SELECT Name, UUID, client_id, Fqdn from source(
 flow_id=flow_id,
 artifact='Windows.Sys.Users',
 client_id=client_id)
 WHERE NOT UUID =~ StandardUserAccounts
 })

 SELECT * FROM foreach(row=clients, query=users)

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Alerts</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.alerts/</guid><description>&lt;p>An internal event queue for alerts. All alerts sent from clients are
collected in this event queue.&lt;/p>
&lt;p>Alerts are expected to be low frequency and high value and may be
generated client or server side.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Alerts
description: |
 An internal event queue for alerts. All alerts sent from clients are
 collected in this event queue.

 Alerts are expected to be low frequency and high value and may be
 generated client or server side.

type: SERVER_EVENT

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ArtifactDescription</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.artifactdescription/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.artifactdescription/</guid><description>&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ArtifactDescription

type: INTERNAL

reports:
 - type: INTERNAL
 template: |
 {{ $artifact := Scope "artifact" }}

 ## {{ $artifact.Name }}

 #### Type: {{ $artifact.Type }}

 {{ if $artifact.BuiltIn }}
 {{ else }}
 ##### Custom Artifact
 {{ end }}

 {{ if $artifact.Author }}
 ##### Author: {{ $artifact.Author }}
 {{end}}

 {{ if $artifact.Description }}

 &amp;lt;div class="description-content"&amp;gt;

 {{ $artifact.Description }}

 {{ if $artifact.Reference }}
 ---
 References:
 &amp;lt;ul&amp;gt;
 {{- range $item := $artifact.Reference -}}
 &amp;lt;li&amp;gt;{{ $item }}&amp;lt;/li&amp;gt;
 {{- end -}}
 &amp;lt;/ul&amp;gt;
 {{ end }}
 &amp;lt;/div&amp;gt;

 {{ end }}

 {{ if $artifact.Tools }}
 ### Tools

 {{ range $artifact.Tools -}}
 * &amp;lt;grr-tool-viewer name="{{.Name}}" version="{{.Version}}"&amp;gt;&amp;lt;/grr-tool-viewer&amp;gt;
 {{ end }}

 {{ end }}

 {{ if $artifact.Parameters }}

 ### Parameters

 &amp;lt;table class="table table-striped"&amp;gt;
 &amp;lt;thead&amp;gt;
 &amp;lt;tr&amp;gt;
 &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
 &amp;lt;th&amp;gt;Type&amp;lt;/th&amp;gt;
 &amp;lt;th&amp;gt;Default&amp;lt;/th&amp;gt;
 &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
 {{- range $item := $artifact.Parameters -}}
 {{- if not (eq $item.Type "hidden") -}}
 &amp;lt;tr&amp;gt;
 &amp;lt;td&amp;gt;{{ $item.Name }}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{ $item.Type }}&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;&amp;lt;pre&amp;gt;{{ $item.Default }}&amp;lt;/pre&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;{{ $item.Description }}&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 {{- end -}}
 {{- end -}}
 &amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;

 {{ end }}

 {{ if $artifact.Imports }}

 &amp;lt;table class="table table-striped"&amp;gt;
 &amp;lt;thead&amp;gt;
 &amp;lt;tr&amp;gt;
 &amp;lt;th&amp;gt;Imports&amp;lt;/th&amp;gt;
 &amp;lt;/tr&amp;gt;
 &amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
 {{- range $item := $artifact.Imports -}}
 &amp;lt;tr&amp;gt;
 &amp;lt;td&amp;gt;{{ $item }}&amp;lt;/td&amp;gt;
 &amp;lt;/tr&amp;gt;
 {{- end -}}
 &amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;

 {{ end }}

 {{ if $artifact.Export }}
 ### Exports

 ```vql
 {{ $artifact.Export }}
 ```
 {{ end }}

 {{ range $source := $artifact.Sources }}

 {{ if or $source.Queries $source.Query }}

 ### Source {{ $source.Name }}
 {{ if $source.Query }}

 ```vql
 {{ $source.Query }}
 ```

 {{- else -}}

 ```vql
 {{ range $query := $source.Queries -}}
 {{- $query -}}
 {{ end }}
 ```
 {{ end }}

 {{ end }}

 {{ end }}

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ArtifactModification</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.artifactmodification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.artifactmodification/</guid><description>&lt;p>This event artifact is an internal event stream over which
notifications of artifact modifications are sent. Interested parties
can watch for new artifact modification events and rebuild caches
etc.&lt;/p>
&lt;p>Note: This is an automated system artifact. You do not need to start it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ArtifactModification
description: |
 This event artifact is an internal event stream over which
 notifications of artifact modifications are sent. Interested parties
 can watch for new artifact modification events and rebuild caches
 etc.

 Note: This is an automated system artifact. You do not need to start it.

type: SERVER_EVENT

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientConflict</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientconflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientconflict/</guid><description>&lt;p>This event artifact is an internal event stream receiving events
about client conflict.&lt;/p>
&lt;p>When two clients attempt to connect to the server with the same
client id, the server rejects one of these with a 409 Conflict HTTP
message. The client id will be forwarded on this artifact as well so
the server may take action.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientConflict
description: |
 This event artifact is an internal event stream receiving events
 about client conflict.

 When two clients attempt to connect to the server with the same
 client id, the server rejects one of these with a 409 Conflict HTTP
 message. The client id will be forwarded on this artifact as well so
 the server may take action.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientDelete</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientdelete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientdelete/</guid><description>&lt;p>An internal queue that receives events when a client is deleted.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientDelete
description: |
 An internal queue that receives events when a client is deleted.

type: SERVER_EVENT

column_types:
 - name: ClientId
 description: The client that was deleted.
 - name: Principal
 description: The principal who initiated the deletion.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientInfo</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientinfo/</guid><description>&lt;p>An internal artifact collecting client information. This is used to
update the client info indexes. Client send this automatically at
startup and then every day.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientInfo
type: INTERNAL
description: |
 An internal artifact collecting client information. This is used to
 update the client info indexes. Client send this automatically at
 startup and then every day.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientInfoSnapshot</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientinfosnapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientinfosnapshot/</guid><description>&lt;p>An internal artifact that fires when the master node writes a new
snapshot. Minion use this to trigger a refresh of their client info
snapshots.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientInfoSnapshot
type: INTERNAL
description: |
 An internal artifact that fires when the master node writes a new
 snapshot. Minion use this to trigger a refresh of their client info
 snapshots.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientPing</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientping/</guid><description>&lt;p>An internal event channel for notifying about client pings.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientPing
type: INTERNAL
description: |
 An internal event channel for notifying about client pings.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientScheduled</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientscheduled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clientscheduled/</guid><description>&lt;p>This event will be fired when a client was sent flows to process.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientScheduled
description: |
 This event will be fired when a client was sent flows to process.

type: INTERNAL
column_types:
 - name: ClientId
 - name: InFlightFlows
 description: New flows scheduled for the client
 - name: ClearFlows
 description: If this is set we clear all in flight flows.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ClientTasks</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.clienttasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.clienttasks/</guid><description>&lt;p>This event will be fired when a client has new tasks scheduled.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ClientTasks
description: |
 This event will be fired when a client has new tasks scheduled.

type: INTERNAL
column_types:
 - name: ClientId

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Enrollment</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.enrollment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.enrollment/</guid><description>&lt;p>This event artifact is an internal event stream over which client
enrollments are sent. You can watch this event queue to be notified
on any new clients enrolling for the first time.&lt;/p>
&lt;p>Note: This is an automated system artifact. You do not need to start it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Enrollment
description: |
 This event artifact is an internal event stream over which client
 enrollments are sent. You can watch this event queue to be notified
 on any new clients enrolling for the first time.

 Note: This is an automated system artifact. You do not need to start it.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.FrontendMetrics</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.frontendmetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.frontendmetrics/</guid><description>&lt;p>An internal queue that receives metrics from all frontends. The
master Frontend manager service will aggregate these into a combined
metric stream.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.FrontendMetrics
description: |
 An internal queue that receives metrics from all frontends. The
 master Frontend manager service will aggregate these into a combined
 metric stream.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.HuntModification</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.huntmodification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.huntmodification/</guid><description>&lt;p>An internal queue to watch modifications of hunts. The hunt
dispatcher from all nodes sends this mutation to the hunt manager
which applies it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.HuntModification
description: |
 An internal queue to watch modifications of hunts. The hunt
 dispatcher from all nodes sends this mutation to the hunt manager
 which applies it.

type: INTERNAL

column_types:
 - name: HuntId
 - name: Mutation
 type: json

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.HuntUpdate</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.huntupdate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.huntupdate/</guid><description>&lt;p>An internal queue to notify hunt dispatchers on all minions that a
certain hunt has changed and should be updated from the internal
cache.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.HuntUpdate
description: |
 An internal queue to notify hunt dispatchers on all minions that a
 certain hunt has changed and should be updated from the internal
 cache.

type: INTERNAL

column_types:
 - name: HuntId
 - name: Hunt
 type: json

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Interrogate</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.interrogate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.interrogate/</guid><description>&lt;p>An internal artifact used track new client interrogations by the
Interrogation service.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Interrogate
description: |
 An internal artifact used track new client interrogations by the
 Interrogation service.

type: SERVER_EVENT

sources:
 - query: |
 SELECT * FROM foreach(
 row={
 SELECT ClientId, Flow, FlowId
 FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE Flow.artifacts_with_results =~ 'Generic.Client.Info'
 },
 query={
 SELECT * FROM switch(
 a={
 SELECT ClientId,
 FlowId,
 Architecture,
 BuildTime,
 Fqdn,
 Hostname,
 KernelVersion,
 Labels,
 Name,
 OS,
 Platform,
 PlatformVersion
 FROM source(
 client_id=ClientId,
 flow_id=FlowId,
 source="BasicInformation",
 artifact="Custom.Generic.Client.Info")
 },
 b={
 SELECT ClientId,
 FlowId,
 Architecture,
 BuildTime,
 Fqdn,
 Hostname,
 KernelVersion,
 Labels,
 Name,
 OS,
 Platform,
 PlatformVersion
 FROM source(
 client_id=ClientId,
 flow_id=FlowId,
 source="BasicInformation",
 artifact="Generic.Client.Info")
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Interrogation</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.interrogation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.interrogation/</guid><description>&lt;p>This event artifact is an internal event stream over which client
interrogations are sent. When the interrogation service finishes
updating a client record, it will send an event on this artifact.&lt;/p>
&lt;p>Note: This is an automated system artifact. You do not need to start it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Interrogation
description: |
 This event artifact is an internal event stream over which client
 interrogations are sent. When the interrogation service finishes
 updating a client record, it will send an event on this artifact.

 Note: This is an automated system artifact. You do not need to start it.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Inventory</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.inventory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.inventory/</guid><description>&lt;p>An internal artifact to listen to inventory (tools) changes.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Inventory
description: |
 An internal artifact to listen to inventory (tools) changes.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Label</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.label/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.label/</guid><description>&lt;p>An internal artifact used to track new labeling events.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Label
description: |
 An internal artifact used to track new labeling events.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.MasterRegistrations</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.masterregistrations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.masterregistrations/</guid><description>&lt;p>The master will advertise to the minions the events it is interested
in.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.MasterRegistrations
description: |
 The master will advertise to the minions the events it is interested
 in.

type: INTERNAL
column_types:
 - name: Events
 type: json_array

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.MetadataModifications</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.metadatamodifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.metadatamodifications/</guid><description>&lt;p>This event artifact is an internal event stream over which
notifications of server metadata modifications are sent.&lt;/p>
&lt;p>Note: This is an automated system artifact. You do not need to start it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.MetadataModifications
description: |
 This event artifact is an internal event stream over which
 notifications of server metadata modifications are sent.

 Note: This is an automated system artifact. You do not need to start it.

type: SERVER_EVENT

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Notifications</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.notifications/</guid><description>&lt;p>This event artifact is an internal event stream over which client
notifications are sent. A frontend will watch for events over this
stream and if a client is actively connected to this frontend, the
client will be notified that new work is available to it.&lt;/p>
&lt;p>Note: This is an automated system artifact. You do not need to start it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Notifications
description: |
 This event artifact is an internal event stream over which client
 notifications are sent. A frontend will watch for events over this
 stream and if a client is actively connected to this frontend, the
 client will be notified that new work is available to it.

 Note: This is an automated system artifact. You do not need to start it.

type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Ping</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.ping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.ping/</guid><description>&lt;p>An internal queue for Ping requests. The queue is watched by the
replication service on the slave nodes which will notify the target
specified.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Ping
description: |
 An internal queue for Ping requests. The queue is watched by the
 replication service on the slave nodes which will notify the target
 specified.

type: INTERNAL

column_types:
 - name: ClientId
 - name: NotifyTarget

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Pong</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.pong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.pong/</guid><description>&lt;p>An internal queue for Ping replies&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Pong
description: |
 An internal queue for Ping replies

type: INTERNAL

column_types:
 - name: ClientId
 - name: Connected

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.TimelineAdd</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.timelineadd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.timelineadd/</guid><description>&lt;p>This artifact will fire whenever a timeline is added to a super
timeline. You can use this to monitor for users adding timelines and
forward them to an external timeline system (e.g. TimeSketch)&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.TimelineAdd
type: SERVER_EVENT
description: |
 This artifact will fire whenever a timeline is added to a super
 timeline. You can use this to monitor for users adding timelines and
 forward them to an external timeline system (e.g. TimeSketch)

column_types:
 - name: NotebookId
 - name: SuperTimelineName
 - name: Timeline

 # What type of event this is: can be Delete, AddTimeline
 - name: Action

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.ToolDependencies</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.tooldependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.tooldependencies/</guid><description>&lt;p>An internal artifact that defines some tool
dependencies. Velociraptor releases for offline collector&lt;/p>
&lt;p>NOTE: Do not modify - this artifact is generated during build in magefile.go&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.ToolDependencies
description: |
 An internal artifact that defines some tool
 dependencies. Velociraptor releases for offline collector

 NOTE: Do not modify - this artifact is generated during build in magefile.go

tools:
 - name: VelociraptorWindows
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-v0.73.3-windows-amd64.exe
 serve_locally: true
 version: 0.73.3

 - name: VelociraptorWindows_x86
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-v0.73.3-windows-386.exe
 serve_locally: true
 version: 0.73.3

 - name: VelociraptorLinux
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-v0.73.3-linux-amd64-musl
 serve_locally: true
 version: 0.73.3

 # On MacOS we can not embed the config in the binary so we use a
 # shell script stub instead. See
 # https://github.com/Velocidex/velociraptor/issues/2898

 # A Generic collector to be used with the --embedded_config flag.
 - name: VelociraptorCollector
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-collector
 serve_locally: true

 - name: VelociraptorWindowsMSI
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-v0.73.3-windows-amd64.msi
 serve_locally: true
 version: 0.73.3

 - name: VelociraptorWindows_x86MSI
 url: https://github.com/Velocidex/velociraptor/releases/download/v0.73/velociraptor-v0.73.3-windows-386.msi
 serve_locally: true
 version: 0.73.3

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.UserManager</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.usermanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.usermanager/</guid><description>&lt;p>An internal artifact notifying when user accounts are modified.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.UserManager
type: INTERNAL
description: |
 An internal artifact notifying when user accounts are modified.

&lt;/code>&lt;/pre></description></item><item><title>Server.Internal.Welcome</title><link>https://docs.velociraptor.app/artifact_references/pages/server.internal.welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.internal.welcome/</guid><description>&lt;p>This is the welcome screen in the Velociraptor GUI. You can
customize this screen by editing this artifact.&lt;/p>
&lt;p>When editing the artifact in the main &lt;code>View Artifacts&lt;/code> screen you
will see some markdown in the reports section of the YAML
file. Simply edit this markdown and your server will display your
customized report.&lt;/p>
&lt;p>You can use this to add important information to your specific
deployment.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Internal.Welcome
description: |
 This is the welcome screen in the Velociraptor GUI. You can
 customize this screen by editing this artifact.

 When editing the artifact in the main `View Artifacts` screen you
 will see some markdown in the reports section of the YAML
 file. Simply edit this markdown and your server will display your
 customized report.

 You can use this to add important information to your specific
 deployment.

type: SERVER

reports:
 - type: CLIENT
 template: |
 &amp;lt;div class="row dashboard "&amp;gt;
 &amp;lt;div class="card col-10"&amp;gt;
 &amp;lt;img src="https://docs.velociraptor.app/artifact_references/pages/server.internal.welcome/./velo.svg" height="150"&amp;gt;
 &amp;lt;div class="card-body"&amp;gt;

 # Welcome to Velociraptor!

 ## Common tasks:

 * &amp;lt;a href="#/dashboard"&amp;gt;Inspect the server's state&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/collected/server"&amp;gt;Build an Offline Collector&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/notebooks"&amp;gt;Write VQL notebooks&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/host/server"&amp;gt;View Server Configuration&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/events/server/Server.Audit.Logs"&amp;gt;Inspect Server Audit Log&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/secrets"&amp;gt;Manage Server Secrets&amp;lt;/a&amp;gt;
 * &amp;lt;a href="#/artifacts/Server.Internal.Welcome"&amp;gt;Customize this welcome screen&amp;lt;/a&amp;gt;

 Or simply search for a client in the search bar above.

 You can always get back to this welcome screen by clicking the
 little green reptile above!

 ## Tips

 1. Press `Ctrl-/` to view keyboard hotkeys.

 &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitor.ClientConflict</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitor.clientconflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitor.clientconflict/</guid><description>&lt;p>Sometimes the Velociraptor client is installed into a VM template
image with an existing write back file. In this case each VM
instance will start the client with the same client id.&lt;/p>
&lt;p>When clients connect to the server multiple times, the server will
reject one with the HTTP 409 Conflict response.&lt;/p>
&lt;p>This artifact will also force conflicting clients to rekey
themselves. Clients will generate a new client id and reconnect with
the server, saving their new keys into their write back files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitor.ClientConflict
type: SERVER_EVENT
description: |
 Sometimes the Velociraptor client is installed into a VM template
 image with an existing write back file. In this case each VM
 instance will start the client with the same client id.

 When clients connect to the server multiple times, the server will
 reject one with the HTTP 409 Conflict response.

 This artifact will also force conflicting clients to rekey
 themselves. Clients will generate a new client id and reconnect with
 the server, saving their new keys into their write back files.

sources:
 - query: |
 SELECT
 collect_client(client_id=ClientId,
 artifacts="Generic.Client.Rekey", env=dict())
 AS NewCollection
 FROM watch_monitoring(artifact="Server.Internal.ClientConflict")

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitor.Health</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitor.health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitor.health/</guid><description>&lt;p>This is the main server health dashboard. It is shown on the
homescreen and enabled by default on all new installs.&lt;/p>
&lt;p>You may edit this artifact to customize your server dashboard.&lt;/p>
&lt;p>Alternatively, edit the Welcome screen at the
&lt;code>Server.Internal.Welcome&lt;/code> artifact.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitor.Health
description: |
 This is the main server health dashboard. It is shown on the
 homescreen and enabled by default on all new installs.

 You may edit this artifact to customize your server dashboard.

 Alternatively, edit the Welcome screen at the
 `Server.Internal.Welcome` artifact.

type: SERVER_EVENT

sources:
 - name: Prometheus
 query: SELECT sleep(time=10000000) FROM scope()

reports:
 - type: SERVER_EVENT
 # Only allow the report to run for 10 seconds - this is plenty for
 # the GUI.
 timeout: 10
 parameters:
 - name: Sample
 default: "6"

 template: |
 {{ define "CPU" }}
 LET SampledData &amp;lt;= SELECT * FROM sample(
 n=atoi(string=Sample),
 query={
 SELECT _ts as Timestamp,
 CPUPercent,
 int(int=MemoryUse / 1048576) AS MemoryUse_Mb,
 TotalFrontends
 FROM source(source="Prometheus",
 start_time=StartTime, end_time=EndTime,
 artifact="Server.Monitor.Health")
 })

 LET Stats &amp;lt;= SELECT count() AS Count,
 timestamp(epoch=min(item=Timestamp)) AS MinTime,
 timestamp(epoch=max(item=Timestamp)) AS MaxTime,
 timestamp(epoch=StartTime) AS StartTime
 FROM SampledData
 GROUP BY 1

 // Include a log for verification. Last data should always be
 // very recent and sample should be passed properly.
 LET _ &amp;lt;= log(message="Graphs cover times from %v (%v). Actual data available from %v (%v) to %v (%v) with %v rows. Data is sampled every %v samples.", args=[
 Stats[0].StartTime.String, humanize(time=Stats[0].StartTime),
 Stats[0].MinTime.String, humanize(time=Stats[0].MinTime),
 Stats[0].MaxTime.String, humanize(time=Stats[0].MaxTime),
 Stats[0].Count, Sample])

 SELECT * FROM SampledData
 {{ end }}

 {{ define "CurrentConnections" }}
 SELECT * FROM sample(
 n=atoi(string=Sample),
 query={
 SELECT _ts as Timestamp,
 client_comms_current_connections
 FROM source(source="Prometheus",
 start_time=StartTime, end_time=EndTime,
 artifact="Server.Monitor.Health")
 })
 {{ end }}

 {{ $time_rows := Query "SELECT timestamp(epoch=now()) AS Now FROM scope()" | Expand }}
 ## Server status @ {{ Render ( Get $time_rows "0.Now" ) }}

 &amp;lt;p&amp;gt;The following are total across all frontends.&amp;lt;/p&amp;gt;
 &amp;lt;span class="container"&amp;gt;
 &amp;lt;span class="row"&amp;gt;
 &amp;lt;span class="col-sm panel"&amp;gt;
 CPU and Memory Utilization
 {{- Query "CPU" | TimeChart "RSS.yaxis" 2 -}}
 &amp;lt;/span&amp;gt;
 &amp;lt;span class="col-sm panel"&amp;gt;
 Currently Connected Clients
 {{- Query "CurrentConnections" | TimeChart "RSS.yaxis" 2 -}}
 &amp;lt;/span&amp;gt;
 &amp;lt;/span&amp;gt;
 &amp;lt;/span&amp;gt;

 ## Current Orgs
 {{ define "OrgsTable" }}
 LET ColumnTypes &amp;lt;= dict(ClientConfig='url')
 LET OrgsTable = SELECT Name, OrgId,
 upload(accessor='data', file=_client_config,
 name='client.'+OrgId+'.config.yaml') AS _Upload
 FROM orgs()

 SELECT Name, OrgId, link_to(upload=_Upload) AS ClientConfig
 FROM OrgsTable
 {{ end }}

 {{ Query "OrgsTable" | Table }}

 ## Disk Space

 {{ Query "SELECT * FROM Artifact.Generic.Client.DiskSpace()" | Table }}

 ## Users

 {{ define "UserPermissions" }}
 SELECT name, effective_policy AS _EffectivePolicy,
 join(array=roles, sep=", ") AS Roles
 FROM gui_users()
 {{ end }}

 {{ Query "UserPermissions" | Table }}

 ## Server version

 {{ Query "SELECT server_version FROM config" | Table }}

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitor.Profile</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitor.profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitor.profile/</guid><description>&lt;p>This artifact collects profiling information from the running
server. This is useful when you notice a high CPU load in the server
and want to know why.&lt;/p>
&lt;p>The following options are most useful:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Goroutines: This shows the backtraces of all currently running
goroutines. It will generally show most of the code working in the
current running set of queries.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Heap: This shows all allocations currently in use and where they
are allocated from. This is useful if the server is taking too
much memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Profile: This takes a CPU profile of the running process for the
number of seconds specified in the Duration parameter. You can
read profiles using:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>go tool pprof -callgrind -output=profile.grind profile.bin
kcachegrind profile.grind
&lt;/code>&lt;/pre>
&lt;p>NOTE: As of 0.7.0 release, this artifact will also collect
goroutines and heap profiles as distinct sources in a more readable
way.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitor.Profile
description: |
 This artifact collects profiling information from the running
 server. This is useful when you notice a high CPU load in the server
 and want to know why.

 The following options are most useful:

 1. Goroutines: This shows the backtraces of all currently running
 goroutines. It will generally show most of the code working in the
 current running set of queries.

 2. Heap: This shows all allocations currently in use and where they
 are allocated from. This is useful if the server is taking too
 much memory.

 3. Profile: This takes a CPU profile of the running process for the
 number of seconds specified in the Duration parameter. You can
 read profiles using:

 ```
 go tool pprof -callgrind -output=profile.grind profile.bin
 kcachegrind profile.grind
 ```

 NOTE: As of 0.7.0 release, this artifact will also collect
 goroutines and heap profiles as distinct sources in a more readable
 way.

type: SERVER

parameters:
 - name: Allocs
 description: A sampling of all past memory allocations
 type: bool
 default: Y
 - name: Block
 description: Stack traces that led to blocking on synchronization primitives
 type: bool
 - name: Goroutine
 description: Stack traces of all current goroutines
 type: bool
 default: Y
 - name: Heap
 description: A sampling of memory allocations of live objects
 type: bool
 - name: Mutex
 description: Stack traces of holders of contended mutexes
 type: bool
 - name: Profile
 description: CPU profile
 type: bool
 - name: Trace
 description: CPU trace
 type: bool
 - name: Logs
 description: Get logs
 type: bool
 - name: QueryLogs
 description: Get recent queries logs
 type: bool
 - name: Metrics
 description: Get server metrics
 type: bool
 - name: Verbose
 description: Print more detail
 type: bool
 - name: Duration
 description: Duration of sampling for Profile and Trace.
 default: "30"

export: |
 LET CleanUp(Name) = regex_replace(
 re="www.velocidex.com/golang/velociraptor/",
 replace="", source=Name)

sources:
 - query: |
 SELECT Type,
 if(condition=get(field="OSPath"),
 then=upload(name=Type + ".bin", file=OSPath)) AS File,
 get(member="Line") AS Line
 FROM profile(allocs=Allocs, block=Block, goroutine=Goroutine,
 heap=Heap, mutex=Mutex, profile=Profile, trace=Trace,
 logs=Logs, queries=QueryLogs, metrics=Metrics,
 debug=if(condition=Verbose, then=2, else=1),
 duration=atoi(string=Duration))

 - name: Goroutines
 query: |
 SELECT *, {
 SELECT format(format="%v (%v:%v)",
 args=[CleanUp(Name=Name), basename(path=File), Line])
 FROM CallStack
 WHERE File =~ 'velociraptor|vfilter|go-ntfs'
 LIMIT 10
 } AS CallStack
 FROM profile_goroutines()
 WHERE CallStack

 - name: Memory
 query: |
 SELECT InUseBytes, InUseObjects, {
 SELECT format(format="%v (%v:%v)",
 args=[CleanUp(Name=Name), basename(path=File), Line])
 FROM CallStack
 WHERE File =~ 'velociraptor|vfilter|go-ntfs'
 LIMIT 10
 } AS CallStack
 FROM profile_memory()
 ORDER BY InUseBytes DESC

 - name: Logs
 query: |
 SELECT * FROM profile(logs=TRUE)

 - name: RunningQueries
 query: |
 SELECT Line.Start AS Timestamp, Line.Query AS Query
 FROM profile(queries=TRUE)
 WHERE NOT Line.Duration

 - name: AllQueries
 query: |
 SELECT Line.Start AS Timestamp, int(int = Line.Duration / 1000000) AS DurationSec, Line.Query AS Query
 FROM profile(queries=TRUE)

 - name: Metrics
 query: |
 SELECT Line.name AS Name, Line.value as value
 FROM profile(metrics=TRUE)


column_types:
 - name: InUseBytes
 type: mb

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitor.Shell</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitor.shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitor.shell/</guid><description>&lt;p>Velociraptor can get an interactive shell on the endpoint by using
the shell command. In order to use it, the user must be directly
logged on the server.&lt;/p>
&lt;p>Obviously being able to run arbitrary commands on the end point is
a powerful feature and should be used sparingly. There is an audit
trail for shell commands executed and their output available by
streaming all shell commands to the &amp;ldquo;Shell&amp;rdquo; client evnt monitoring
artifact.&lt;/p>
&lt;p>This server event artifact centralizes all shell access from all
clients into the same log file.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitor.Shell
description: |
 Velociraptor can get an interactive shell on the endpoint by using
 the shell command. In order to use it, the user must be directly
 logged on the server.

 Obviously being able to run arbitrary commands on the end point is
 a powerful feature and should be used sparingly. There is an audit
 trail for shell commands executed and their output available by
 streaming all shell commands to the "Shell" client evnt monitoring
 artifact.

 This server event artifact centralizes all shell access from all
 clients into the same log file.

# Can be CLIENT, EVENT, SERVER, SERVER_EVENT
type: SERVER_EVENT

sources:
 - query: |
 -- Watch for shell flow completions.
 LET collections = SELECT Flow
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ "Windows.System.PowerShell|Windows.System.CmdShell"

 -- Dump the command and the results.
 SELECT * FROM foreach(row=collections,
 query={
 SELECT Flow.session_id AS FlowId,
 Flow.client_id AS ClientId,
 client_info(client_id=Flow.client_id).os_info.fqdn AS Hostname,
 timestamp(epoch=Flow.create_time / 1000000) AS Created,
 timestamp(epoch=Flow.active_time / 1000000) AS LastActive,
 get_flow(flow_id=FlowId,
 client_id=ClientId).request.parameters.env[0].value AS Command,
 Stdout, Stderr FROM source(
 client_id=Flow.client_id,
 flow_id=Flow.session_id,
 artifact=Flow.artifacts_with_results[0])
 })


# Reports can be MONITORING_DAILY, CLIENT
reports:
 - type: SERVER_EVENT
 template: |
 {{ .Description }}

 {{ $rows := Query "SELECT ClientId, Hostname, \
 timestamp(epoch=LastActive) AS Timestamp, Command, Stdout FROM source()" }}

 {{ range $row := $rows }}

 * On {{ Get $row "Timestamp" }} we ran {{ Get $row "Command" }} on {{ Get $row "Hostname" }}

 ```text
 {{ Get $row "Stdout" }}
 ```

 {{end}}

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitor.VeloMetrics</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitor.velometrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitor.velometrics/</guid><description>&lt;p>Get Velociraptor server metrics.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitor.VeloMetrics
description: |
 Get Velociraptor server metrics.

type: SERVER

parameters:
 - name: MetricsURL
 default: http://localhost:8003/metrics

sources:
 - query: |
 LET stats = SELECT parse_string_with_regex(string=Content,
 regex=[
 'client_comms_concurrency (?P&amp;lt;client_comms_concurrency&amp;gt;[^\\s]+)',
 'client_comms_current_connections (?P&amp;lt;client_comms_current_connections&amp;gt;[^\\s]+)',
 'flow_completion (?P&amp;lt;flow_completion&amp;gt;[^\\s]+)',
 'process_open_fds (?P&amp;lt;process_open_fds&amp;gt;[^\\s]+)',
 'uploaded_bytes (?P&amp;lt;uploaded_bytes&amp;gt;[^\\s]+)',
 'uploaded_files (?P&amp;lt;uploaded_files&amp;gt;[^\\s]+)',
 'stats_client_one_day_actives{version="[^"]+"} (?P&amp;lt;one_day_active&amp;gt;[^\\s]+)',
 'stats_client_seven_day_actives{version="[^"]+"} (?P&amp;lt;seven_day_active&amp;gt;[^\\s]+)'
 ]) AS Stat, {
 // On Windows Prometheus does not provide these so we get our own.
 SELECT Times.user + Times.system as CPU,
 MemoryInfo.RSS as RSS
 FROM pslist(pid=getpid())
 } AS PslistStats
 FROM http_client(url=MetricsURL, chunk_size=50000)

 SELECT now() AS Timestamp,
 PslistStats.RSS AS process_resident_memory_bytes,
 parse_float(string=Stat.client_comms_concurrency)
 AS client_comms_concurrency,
 parse_float(string=Stat.client_comms_current_connections)
 AS client_comms_current_connections,
 parse_float(string=Stat.flow_completion) AS flow_completion,
 parse_float(string=Stat.uploaded_bytes) AS uploaded_bytes,
 parse_float(string=Stat.uploaded_files) AS uploaded_files,
 parse_float(string=Stat.process_open_fds)
 AS process_open_fds,
 PslistStats.CPU AS process_cpu_seconds_total,
 parse_float(string=Stat.one_day_active)
 AS one_day_active,
 parse_float(string=Stat.seven_day_active)
 AS seven_day_active
 FROM stats

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitoring.ClientCount</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.clientcount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.clientcount/</guid><description>&lt;p>An artifact that sends an email every hour of the current state of
the deployment.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitoring.ClientCount

description: |
 An artifact that sends an email every hour of the current state of
 the deployment.

type: SERVER_EVENT

parameters:
 - name: EmailAddress
 default: admin@example.com
 - name: SkipVerify
 type: bool
 description: If set we skip TLS verification.
 - name: CCAddress
 default:
 - name: Subject
 default: "Deployment statistics for Velociraptor"
 - name: Period
 default: "3600"

sources:
 - query: |
 LET metrics = SELECT * FROM Artifact.Server.Monitor.VeloMetrics()

 SELECT * FROM foreach(
 row={
 SELECT * FROM clock(period=atoi(string=Period))
 },
 query={
 SELECT * FROM mail(
 to=EmailAddress,
 cc=CCAddress,
 subject=Subject,
 period=60,
 skip_verify=SkipVerify,
 body=format(format='Total clients currently connected %v',
 args=[metrics.client_comms_current_connections])
 )
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitoring.ScheduleHunt</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.schedulehunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.schedulehunt/</guid><description>&lt;p>Run client interrogation periodically. This is a sample event
artifact to schedule a hunt periodically. You can change it to
launch other artifacts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitoring.ScheduleHunt
description: |
 Run client interrogation periodically. This is a sample event
 artifact to schedule a hunt periodically. You can change it to
 launch other artifacts.

type: SERVER_EVENT

parameters:
 - name: ScheduleDayRegex
 default: Tuesday
 type: regex
 - name: ScheduleTimeRegex
 default: "01:28:"
 type: regex
 - name: HuntDescription
 default: "Periodic info hunt"

sources:
 - query: |
 LET schedule = SELECT
 UTC.String AS Now,
 Weekday.String AS Today
 FROM clock(period=60)
 WHERE Now =~ ScheduleTimeRegex
 AND Today =~ ScheduleDayRegex
 AND log(message="Launching at time " + Now)

 SELECT hunt(artifacts=["Generic.Client.Info"],
 spec=dict(`Generic.Client.Info`=dict()),
 description=HuntDescription)
 FROM schedule

&lt;/code>&lt;/pre></description></item><item><title>Server.Monitoring.TimesketchUpload</title><link>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.timesketchupload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.monitoring.timesketchupload/</guid><description>&lt;p>This artifact will automatically upload any Velociraptor timelines to Timesketch.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Monitoring.TimesketchUpload
description: |
 This artifact will automatically upload any Velociraptor timelines to Timesketch.


type: SERVER_EVENT

parameters:
 - name: SketchRegex
 description: |
 Only upload Super timelines matching this regex to their
 corresponding Sketches.
 default: .

 - name: TimelineRegex
 default: .
 description: |
 Only upload Timelines with a name matching this regex to
 Timesketch.

 - name: TimesketchCLICommand
 default: "timesketch"
 description: |
 The path to the timesketch cli binary. If you installed in a
 virtual environment this will be inside that environment.

required_permissions:
 - EXECVE

imports:
 - Server.Utils.TimesketchUpload

sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT NotebookId, SuperTimelineName, Timeline
 FROM watch_monitoring(artifact="Server.Internal.TimelineAdd")
 WHERE Action = "AddTimeline"
 AND SuperTimelineName =~ SketchRegex
 AND Timeline =~ TimelineRegex
 }, query={
 SELECT * FROM ImportToTS(
 SuperTimelineName=SuperTimelineName,
 NotebookId=NotebookId,
 TimelineName=Timeline,
 SketchName=SuperTimelineName)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Orgs.ListOrgs</title><link>https://docs.velociraptor.app/artifact_references/pages/server.orgs.listorgs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.orgs.listorgs/</guid><description>&lt;p>This server artifact will list all currently configured orgs on the
server.&lt;/p>
&lt;p>NOTE: This artifact is only available to users with the ORG_ADMIN
permission, normally only given to users with the administrator role
while using the root org (You might need to switch to the root org
in the GUI before collecting this artifact).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Orgs.ListOrgs
description: |
 This server artifact will list all currently configured orgs on the
 server.

 NOTE: This artifact is only available to users with the ORG_ADMIN
 permission, normally only given to users with the administrator role
 while using the root org (You might need to switch to the root org
 in the GUI before collecting this artifact).

type: SERVER

parameters:
- name: AlsoDownloadClientConfigs
 type: bool
 description: When set also downloads client configs from each org

sources:
- query: |
 SELECT * FROM if(condition=AlsoDownloadClientConfigs,
 then={
 SELECT *, upload(file=_client_config,
 accessor="data",
 name=format(format="client.%s.config.yaml", args=OrgId || "RootOrg")) AS ClientConfig
 FROM orgs()
 }, else={
 SELECT * FROM orgs()
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Orgs.NewOrg</title><link>https://docs.velociraptor.app/artifact_references/pages/server.orgs.neworg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.orgs.neworg/</guid><description>&lt;p>This server artifact will create a new org and assign the current
user as an admin to it.&lt;/p>
&lt;p>NOTE: This artifact is only available to users with the ORG_ADMIN
permission, normally only given to users with the administrator role
while using the root org (You might need to switch to the root org
in the GUI before collecting this artifact).&lt;/p>
&lt;p>After collecting this artifact, collect the &lt;code>Server.Orgs.ListOrgs&lt;/code>
artifact and select to upload client config files. Use this org&amp;rsquo;s
config to create new client MSIs for deployment.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Orgs.NewOrg
description: |
 This server artifact will create a new org and assign the current
 user as an admin to it.

 NOTE: This artifact is only available to users with the ORG_ADMIN
 permission, normally only given to users with the administrator role
 while using the root org (You might need to switch to the root org
 in the GUI before collecting this artifact).

 After collecting this artifact, collect the `Server.Orgs.ListOrgs`
 artifact and select to upload client config files. Use this org's
 config to create new client MSIs for deployment.

type: SERVER

parameters:
- name: OrgName

sources:
- query: |
 LET org_record &amp;lt;= org_create(name=OrgName)

 SELECT org_record.name as Name, org_record.id AS OrgId,
 user_create(orgs=org_record.id,
 roles=["administrator", "org_admin"],
 user=whoami()) AS AdminUser
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Powershell.EncodedCommand</title><link>https://docs.velociraptor.app/artifact_references/pages/server.powershell.encodedcommand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.powershell.encodedcommand/</guid><description>&lt;p>It is possible to pass powershell an encoded script. This artifact
decodes the scripts.&lt;/p>
&lt;p>NOTE: The client must be running the Windows.Events.ProcessCreation
event artifact to retrieve process execution logs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Powershell.EncodedCommand
description: |
 It is possible to pass powershell an encoded script. This artifact
 decodes the scripts.

 NOTE: The client must be running the Windows.Events.ProcessCreation
 event artifact to retrieve process execution logs.

type: SERVER_EVENT

sources:
 - query: |
 SELECT ClientId, ParentInfo, CommandLine, Timestamp, utf16(
 string=base64decode(
 string=parse_string_with_regex(
 string=CommandLine,
 regex='-((?i)(en|enc|encode|encodedCommand)) (?P&amp;lt;Encoded&amp;gt;[^ ]+)'
 ).Encoded)) AS Script
 FROM watch_monitoring(artifact='Windows.Events.ProcessCreation')
 WHERE CommandLine =~ '-(en|enc|encode|encodedCommand)'

reports:
 - type: SERVER_EVENT
 template: |

 Encoded Powershell
 ==================

 {{ .Description }}

 ## Decoded Powershell commands.

 {{ Query "SELECT ClientId, { SELECT os_info.fqdn from clients(client_id=ClientId) } AS FQDN, Script FROM source()" | Table }}

&lt;/code>&lt;/pre></description></item><item><title>Server.Slack.Clients.Online</title><link>https://docs.velociraptor.app/artifact_references/pages/server.slack.clients.online/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.slack.clients.online/</guid><description>&lt;p>Send a message to slack when clients come online.&lt;/p>
&lt;p>This artifact searches for all clients that carry the label &amp;ldquo;Slack&amp;rdquo;
by default, and if they have appeared online in the last 5 minutes,
sends a message to Slack and removed the label from the client.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Slack.Clients.Online
description: |
 Send a message to slack when clients come online.

 This artifact searches for all clients that carry the label "Slack"
 by default, and if they have appeared online in the last 5 minutes,
 sends a message to Slack and removed the label from the client.

type: SERVER_EVENT

parameters:
 - name: LabelGroup
 default: Slack
 - name: SlackToken
 description: The token URL obtained from Slack. Leave blank to use server metadata. e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ

sources:
 - query: |
 LET token_url = if(
 condition=SlackToken,
 then=SlackToken,
 else=server_metadata().SlackToken)

 LET hits = SELECT client_id,
 os_info.fqdn as Hostname ,
 now() - last_seen_at / 1000000 AS LastSeen,
 label(client_id=client_id, labels=LabelGroup, op="remove")
 FROM clients(search="label:" + LabelGroup)
 WHERE LastSeen &amp;lt; 300

 LET send_message = SELECT * FROM foreach(row=hits,
 query={
 SELECT client_id, Hostname, LastSeen, Content, Response
 FROM http_client(
 data=serialize(item=dict(
 text=format(format="Client %v (%v) has appeared online %v seconds ago",
 args=[Hostname, client_id, LastSeen])),
 format="json"),
 headers=dict(`Content-Type`="application/json"),
 method="POST",
 url=token_url)
 })

 // Check every minute
 SELECT * FROM foreach(
 row={SELECT * FROM clock(period=60)},
 query=send_message)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.AddTimeline</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.addtimeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.addtimeline/</guid><description>&lt;p>Adds a new timeline to a super timeline.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.AddTimeline
description: |
 Adds a new timeline to a super timeline.

type: SERVER

parameters:
 - name: NotebookId
 - name: Timeline
 description: SuperTimeline name
 - name: ChildName
 description: Name of child timeline
 - name: Query
 description: A query that will be parsed and run.
 - name: Key
 description: Sort column for time
 - name: MessageColumn
 description: The name of the column to appear as the message
 - name: RemoveLimit
 description: If specified, we remove the limit clause before adding to the timeline.
 type: bool
 - name: Env
 type: json

sources:
 - query: |
 SELECT timeline_add(
 notebook_id=NotebookId,
 timeline=Timeline,
 name=ChildName,
 message_column=MessageColumn,
 query={
 SELECT * FROM query(query=if(condition=RemoveLimit,
 then=regex_replace(re="(?i)LIMIT [0-9]+", replace="", source=Query),
 else=Query), env=Env)
 },
 key=Key), RemoveLimit
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.AddUser</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.adduser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.adduser/</guid><description>&lt;p>This server artifact is used to add new user to the Velociraptor
GUI.&lt;/p>
&lt;p>A new random password is generated for the user and stored in the
server metadata object (to ensure it can not be seen in the output
of the artifact itself). The Administrator can share this password
with the user later.&lt;/p>
&lt;p>When using SSO (e.g. oauth) this password is not used and can be
ignored (Becuase the SSO provider will do the authentication).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.AddUser
description: |
 This server artifact is used to add new user to the Velociraptor
 GUI.

 A new random password is generated for the user and stored in the
 server metadata object (to ensure it can not be seen in the output
 of the artifact itself). The Administrator can share this password
 with the user later.

 When using SSO (e.g. oauth) this password is not used and can be
 ignored (Becuase the SSO provider will do the authentication).

type: SERVER

parameters:
 - name: UserName
 description: The new username to add

 - name: ResetPassword
 type: bool
 default: "Y"
 description: |
 Reset the user's password. This must be set when
 creating the user in the first place.

 - name: Role
 description: The role to grant the new user.
 type: choices
 default: reader
 choices:
 - reader
 - analyst
 - investigator
 - administrator

sources:
 - query: |
 LET Password &amp;lt;= format(format="%02x", args=rand(range=0xffffffffffff))
 LET ServerMetadataKey &amp;lt;= "User Password " + UserName

 LET DoIt = SELECT * FROM if(condition=ResetPassword,
 then={
 SELECT
 server_set_metadata(metadata=set(
 item=server_metadata(),
 field=ServerMetadataKey, value=Password)),
 user_create(roles=Role, user=UserName, password=Password)
 FROM scope()
 WHERE log(message="New password for user is stored in server metadata under key " + ServerMetadataKey)
 }, else={
 -- Just grant the user the specified role
 SELECT user_create(roles=Role, user=UserName)
 FROM scope()
 })

 SELECT * FROM if(condition=UserName,
 then={
 SELECT * FROM foreach(row=DoIt,
 query={
 SELECT * FROM gui_users()
 WHERE name =~ UserName
 })
 }, else={
 SELECT * FROM scope()
 WHERE log(message="A Username must be set") AND FALSE
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.BackupDirectory</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.backupdirectory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.backupdirectory/</guid><description>&lt;p>This server monitoring artifact will automatically export and
backup selected collected artifacts to a directory on the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.BackupDirectory
description: |
 This server monitoring artifact will automatically export and
 backup selected collected artifacts to a directory on the server.

type: SERVER_EVENT

parameters:
 - name: ArtifactNameRegex
 default: "."
 description: A regular expression to select which artifacts to upload
 type: regex

 - name: BackupDirectoryPath
 description: A directory on the server to receive the uploaded files.

 - name: RemoveDownloads
 type: bool
 description: If set, remove the flow export files after upload

required_permissions:
 - SERVER_ADMIN

sources:
 - query: |
 LET completions = SELECT *,
 client_info(client_id=ClientId).os_info.fqdn AS Fqdn,
 create_flow_download(client_id=ClientId,
 flow_id=FlowId, wait=TRUE) AS FlowDownload
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex

 SELECT upload_directory(
 output=BackupDirectoryPath,
 name=format(format="Host %v %v %v.zip",
 args=[Fqdn, FlowId, timestamp(epoch=now())]),
 accessor="fs",
 file=FlowDownload) AS Upload
 FROM completions
 WHERE Upload OR
 if(condition=RemoveDownloads,
 then=rm(filename=file_store(path=FlowDownload)))

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.BackupGCS</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.backupgcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.backupgcs/</guid><description>&lt;p>This server monitoring artifact will automatically zip and backup
any collected artifacts to GCS.&lt;/p>
&lt;p>You will need to provide credentials to upload to the bucket. The
credentials can be given as parameters or they will be taken from
the server metadata (as DefaultBucket, DefaultGCSProject,
DefaultGCSKey)&lt;/p>
&lt;p>Thanks to @shortxstack and @Recon_InfoSec&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.BackupGCS
description: |
 This server monitoring artifact will automatically zip and backup
 any collected artifacts to GCS.

 You will need to provide credentials to upload to the bucket. The
 credentials can be given as parameters or they will be taken from
 the server metadata (as DefaultBucket, DefaultGCSProject,
 DefaultGCSKey)

 Thanks to @shortxstack and @Recon_InfoSec

type: SERVER_EVENT

parameters:
 - name: ArtifactNameRegex
 default: "."
 description: A regular expression to select which artifacts to upload
 type: regex

 - name: Bucket
 description: The bucket to upload to (blank to use server metadata)
 - name: Project
 - name: GCSKey

 - name: RemoveDownloads
 type: bool
 description: If set, remove the flow export files after upload

sources:
 - query: |
 -- Allow these settings to be set by the artifact parameter or the server metadata.
 LET bucket &amp;lt;= if(condition=Bucket, then=Bucket,
 else=server_metadata().DefaultBucket)
 LET project &amp;lt;= if(condition=Project, then=Project,
 else=server_metadata().DefaultGCSProject)
 LET gcskey &amp;lt;= if(condition=GCSKey, then=GCSKey,
 else=server_metadata().DefaultGCSKey)

 LET completions = SELECT *,
 client_info(client_id=ClientId).os_info.fqdn AS Fqdn,
 create_flow_download(client_id=ClientId,
 flow_id=FlowId, wait=TRUE) AS FlowDownload
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex

 SELECT upload_gcs(
 bucket=bucket,
 project=project,
 credentials=gcskey,
 file=FlowDownload,
 accessor="fs",
 name=format(format="Host %v %v %v.zip",
 args=[Fqdn, FlowId, timestamp(epoch=now())])) AS Upload
 FROM completions
 WHERE Upload OR
 if(condition=RemoveDownloads,
 then=rm(filename=file_store(path=FlowDownload)))

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.BackupS3</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.backups3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.backups3/</guid><description>&lt;p>This server monitoring artifact will automatically zip and backup
any collected artifacts to s3.&lt;/p>
&lt;p>You will need to provide credentials to upload to the bucket. The
credentials can be given as parameters or they will be taken from
the server metadata (as DefaultBucket, DefaultRegion,
S3AccessKeyId, S3AccessSecret, S3AccessToken)&lt;/p>
&lt;p>Thanks to @shortxstack and @Recon_InfoSec&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.BackupS3
description: |
 This server monitoring artifact will automatically zip and backup
 any collected artifacts to s3.

 You will need to provide credentials to upload to the bucket. The
 credentials can be given as parameters or they will be taken from
 the server metadata (as DefaultBucket, DefaultRegion,
 S3AccessKeyId, S3AccessSecret, S3AccessToken)

 Thanks to @shortxstack and @Recon_InfoSec

type: SERVER_EVENT

parameters:
 - name: ArtifactNameRegex
 default: "."
 description: A regular expression to select which artifacts to upload
 type: regex

 - name: Bucket
 description: The bucket to upload to (blank to use server metadata)
 - name: Region
 - name: CredentialsKey
 - name: CredentialsSecret
 - name: CredentialsToken
 - name: Secret
 description: A Secret name to use for uploading.
 - name: RemoveDownloads
 type: bool
 description: If set, remove the flow export files after upload

sources:
 - query: |
 -- Allow these settings to be set by the artifact parameter or
 -- the server metadata.
 LET completions = SELECT *,
 client_info(client_id=ClientId).os_info.fqdn AS Fqdn,
 create_flow_download(client_id=ClientId,
 flow_id=FlowId, wait=TRUE) AS FlowDownload
 FROM watch_monitoring(artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex

 SELECT upload_s3(
 bucket=Bucket,
 credentials_key=CredentialsKey,
 credentials_secret=CredentialsSecret,
 credentials_token=CredentialsToken,
 secret=Secret,
 region=Region,
 file=FlowDownload,
 accessor="fs",
 name=format(format="Host %v %v %v.zip",
 args=[Fqdn, FlowId, timestamp(epoch=now())])) AS Upload
 FROM completions
 WHERE Upload OR
 if(condition=RemoveDownloads,
 then=rm(filename=file_store(path=FlowDownload)))

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.CancelHunt</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.cancelhunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.cancelhunt/</guid><description>&lt;p>Sometimes a hunt is issued which is no longer useful. While stopping
the hunt from the GUI prevents new clients from receiving the hunt,
it does not actively cancel collections currently in flight.&lt;/p>
&lt;p>This artifact enumerates all flows in the hunt and actively cancels
them.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.CancelHunt
description: |
 Sometimes a hunt is issued which is no longer useful. While stopping
 the hunt from the GUI prevents new clients from receiving the hunt,
 it does not actively cancel collections currently in flight.

 This artifact enumerates all flows in the hunt and actively cancels
 them.

type: SERVER

parameters:
 - name: HuntId

sources:
 - query: |
 LET all_flows = SELECT Flow.client_id AS client_id, Flow.session_id AS flow_id
 FROM hunt_flows(hunt_id=HuntId)
 WHERE Flow.state = "RUNNING"

 LET cancellations = SELECT client_id, flow_id,
 cancel_flow(client_id=client_id, flow_id=flow_id) AS Cancellation
 FROM all_flows

 SELECT * FROM if(condition=HuntId, then=cancellations,
 else={
 SELECT * FROM scope()
 WHERE log(message="Hunt ID must be specified.") AND NULL
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.CollectClient</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.collectclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.collectclient/</guid><description>&lt;p>This artifact simplifies collecting from a specific client by
performing all steps automatically:&lt;/p>
&lt;ol>
&lt;li>The collection will be scheduled.&lt;/li>
&lt;li>The artifact will wait for the collection to complete&lt;/li>
&lt;li>The results from the collection will be displayed.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.CollectClient
description: |
 This artifact simplifies collecting from a specific client by
 performing all steps automatically:

 1. The collection will be scheduled.
 2. The artifact will wait for the collection to complete
 3. The results from the collection will be displayed.

type: SERVER

parameters:
 - name: ArtifactName
 default: Generic.Client.Info
 - name: Client
 description: A client ID or a Hostname
 default: C.1234
 - name: Parameters
 default: "{}"
 description: A key/value JSON object specifying parameters for the artifact
 type: json

sources:
 - query: |
 -- Find a client to collect from by applying the search
 -- critertia and picking the first hit
 LET clients = SELECT client_id FROM clients(search=Client) LIMIT 1
 LET client_id &amp;lt;= clients[0].client_id

 -- If we found something then schedule the collection.
 LET collection &amp;lt;= if(condition=client_id,
 then=collect_client(client_id=client_id,
 artifacts=ArtifactName, env=Parameters),
 else=log(message="No clients found to match search " + Client) AND FALSE)

 -- Wait for the collection to finish - if the client is
 -- currently connected this wont take long
 LET flow_results &amp;lt;= SELECT * FROM if(condition=collection,
 then={
 SELECT * FROM watch_monitoring(artifact='System.Flow.Completion')
 WHERE FlowId = collection.flow_id
 LIMIT 1
 })

 -- Collect the results
 SELECT * FROM foreach(row=flow_results[0].Flow.artifacts_with_results,
 query={
 SELECT *, _value AS Source, client_id
 FROM source(client_id=client_id, flow_id=collection.flow_id, artifact=_value)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.CreateCollector</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.createcollector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.createcollector/</guid><description>&lt;p>A utility artifact to create a stand alone collector.&lt;/p>
&lt;p>This artifact is actually invoked by the Offline collector GUI and
that is the recommended way to launch it. You can find the Offline
collector builder in the &lt;code>Server Artifacts&lt;/code> section of the GUI.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.CreateCollector
description: |
 A utility artifact to create a stand alone collector.

 This artifact is actually invoked by the Offline collector GUI and
 that is the recommended way to launch it. You can find the Offline
 collector builder in the `Server Artifacts` section of the GUI.

type: SERVER

parameters:
 - name: OS
 default: Windows
 type: choices
 choices:
 - Windows
 - Windows_x86
 - Linux
 - MacOS
 - MacOSArm
 - Generic

 - name: artifacts
 description: A list of artifacts to collect
 type: json_array
 default: |
 ["Generic.Client.Info"]

 - name: encryption_scheme
 description: |
 Encryption scheme to use. Currently supported are Password, X509 or PGP

 - name: encryption_args
 description: |
 Encryption arguments
 type: json
 default: |
 {}

 - name: parameters
 description: A dict containing the parameters to set.
 type: json
 default: |
 {}

 - name: target
 description: Output type
 type: choices
 default: ZIP
 choices:
 - ZIP
 - GCS
 - S3
 - SFTP
 - Azure
 - SMBShare

 - name: target_args
 description: Type Dependent args
 type: json
 default: "{}"

 - name: opt_verbose
 default: Y
 type: bool
 description: Show verbose progress.

 - name: opt_banner
 default: Y
 type: bool
 description: Show Velociraptor banner.

 - name: opt_prompt
 default: N
 type: bool
 description: Wait for a prompt before closing.

 - name: opt_admin
 default: Y
 type: bool
 description: Require administrator privilege when running.

 - name: opt_tempdir
 default:
 description: A directory to write tempfiles in

 - name: opt_level
 default: "4"
 type: int
 description: Compression level (0=no compression).

 - name: opt_concurrency
 default: "2"
 type: int
 description: Number of concurrency queries

 - name: opt_format
 default: "jsonl"
 description: Output format (jsonl or csv)

 - name: opt_output_directory
 default: ""
 description: Where we actually write the collection to. You can specify this as a mapped drive to write over the network.

 - name: opt_filename_template
 default: "Collection-%FQDN%-%TIMESTAMP%"
 description: |
 The filename to use. You can expand environment variables as
 well as the following %FQDN% and %TIMESTAMP%.

 - name: opt_collector_filename
 type: string
 description: |
 If used, this option overrides the default filename of the collector being built.

 - name: opt_cpu_limit
 default: "0"
 type: int
 description: |
 A number between 0 to 100 representing the target maximum CPU
 utilization during running of this artifact.

 - name: opt_progress_timeout
 default: "1800"
 type: int
 description: |
 If specified the collector is terminated if it made no progress
 in this long. Note: Execution time may be a lot longer since
 each time any result is produced this counter is reset.

 - name: opt_timeout
 default: "0"
 type: int
 description: |
 If specified the collection must complete in the given time. It
 will be cancelled if the collection exceeds this time.

 - name: opt_version
 default: ""
 type: string
 description: |
 If specified the collection will be packed with the specified
 version of the binary. NOTE: This is rarely what you want
 because the packed builtin artifacts are only compatible with
 the current release version.

 - name: StandardCollection
 type: hidden
 default: |
 LET _ &amp;lt;= log(message="Will collect package %v", args=zip_filename)

 SELECT * FROM collect(artifacts=Artifacts,
 args=Parameters, output=zip_filename,
 cpu_limit=CpuLimit,
 progress_timeout=ProgressTimeout,
 timeout=Timeout,
 password=pass[0].Pass,
 level=Level,
 concurrency=Concurrency,
 format=Format,
 metadata=ContainerMetadata)

 - name: S3Collection
 type: hidden
 default: |
 // A utility function to upload the file.
 LET upload_file(filename, name, accessor) = upload_s3(
 file=filename,
 accessor=accessor,
 bucket=TargetArgs.bucket,
 name=name,
 credentials_key=TargetArgs.credentialsKey,
 credentials_secret=TargetArgs.credentialsSecret,
 credentials_token=TargetArgs.credentialsToken,
 region=TargetArgs.region,
 endpoint=TargetArgs.endpoint,
 serverside_encryption=TargetArgs.serverSideEncryption,
 kms_encryption_key=TargetArgs.kmsEncryptionKey,
 s3upload_root=TargetArgs.s3UploadRoot,
 skip_verify=TargetArgs.noverifycert)

 - name: GCSCollection
 type: hidden
 default: |
 LET GCSBlob &amp;lt;= parse_json(data=target_args.GCSKey)

 // A utility function to upload the file.
 LET upload_file(filename, name, accessor) = upload_gcs(
 file=filename,
 accessor=accessor,
 bucket=target_args.bucket,
 project=GCSBlob.project_id,
 name=name,
 credentials=target_args.GCSKey)

 - name: AzureSASURL
 type: hidden
 default: |
 // A utility function to upload the file.
 LET upload_file(filename, name, accessor) = upload_azure(
 file=filename,
 accessor=accessor,
 sas_url=TargetArgs.sas_url,
 name=name)

 - name: SMBCollection
 type: hidden
 default: |
 // A utility function to upload the file.
 LET upload_file(filename, name, accessor) = upload_smb(
 file=filename,
 accessor=accessor,
 username=TargetArgs.username,
 password=TargetArgs.password,
 server_address=TargetArgs.server_address,
 name=name)

 - name: SFTPCollection
 type: hidden
 default : |
 LET upload_file(filename, name, accessor) = upload_sftp(
 file=filename,
 accessor=accessor,
 name=name,
 user=TargetArgs.user,
 path=TargetArgs.path,
 privatekey=TargetArgs.privatekey,
 endpoint=TargetArgs.endpoint,
 hostkey = TargetArgs.hostkey)

 - name: CommonCollections
 type: hidden
 default: |
 LET S = scope()

 // Add all the tools we are going to use to the inventory.
 LET _ &amp;lt;= SELECT inventory_add(tool=ToolName, hash=ExpectedHash, version=S.Version)
 FROM parse_csv(filename="/uploads/inventory.csv", accessor="me")
 WHERE log(message="Adding tool " + ToolName +
 " version " + (S.Version || "Unknown"))

 LET baseline &amp;lt;= SELECT Fqdn, dirname(path=Exe) AS ExePath, Exe,
 scope().CWD AS CWD FROM info()

 LET OutputPrefix &amp;lt;= if(condition= OutputPrefix,
 then=pathspec(parse=OutputPrefix),
 else= if(condition= baseline[0].CWD,
 then=pathspec(parse= baseline[0].CWD),
 else=pathspec(parse= baseline[0].ExePath)))

 LET _ &amp;lt;= log(message="Output Prefix : %v", args= OutputPrefix)

 LET FormatMessage(Message) = regex_transform(
 map=dict(`%FQDN%`=baseline[0].Fqdn,
 `%Timestamp%`=timestamp(epoch=now()).MarshalText),
 source=Message)

 // Format the filename safely according to the filename
 // template. This will be the name uploaded to the bucket.
 LET formatted_zip_name &amp;lt;= regex_replace(
 source=expand(path=FormatMessage(Message=FilenameTemplate)),
 re="[^0-9A-Za-z\\-]", replace="_") + ".zip"

 // This is where we write the files on the endpoint.
 LET zip_filename &amp;lt;= OutputPrefix + formatted_zip_name

 // The log is always written to the executable path
 LET log_filename &amp;lt;= pathspec(parse= baseline[0].Exe + ".log")

 -- Make a random hex string as a random password
 LET RandomPassword &amp;lt;= SELECT format(format="%02x",
 args=rand(range=255)) AS A
 FROM range(end=25)

 LET pass = SELECT * FROM switch(a={

 -- For X509 encryption we use a random session password.
 SELECT join(array=RandomPassword.A) as Pass From scope()
 WHERE encryption_scheme =~ "pgp|x509"
 AND log(message="I will generate a container password using the %v scheme",
 args=encryption_scheme)

 }, b={

 -- Otherwise the user specified the password.
 SELECT encryption_args.password as Pass FROM scope()
 WHERE encryption_scheme =~ "password"

 }, c={

 -- No password specified.
 SELECT Null as Pass FROM scope()
 })

 -- For X509 encryption_scheme, store the encrypted
 -- password in the metadata file for later retrieval.
 LET ContainerMetadata = if(
 condition=encryption_args.public_key,
 then=dict(
 EncryptedPass=pk_encrypt(data=pass[0].Pass,
 public_key=encryption_args.public_key,
 scheme=encryption_scheme),
 Scheme=encryption_scheme,
 PublicKey=encryption_args.public_key))

 - name: CloudCollection
 type: hidden
 default: |
 LET TargetArgs &amp;lt;= target_args

 // When uploading to the cloud it is allowed to use directory //
 // separators and we trust the filename template to be a valid
 // filename.
 LET upload_name &amp;lt;= regex_replace(
 source=expand(path=FormatMessage(Message=FilenameTemplate)),
 re="[^0-9A-Za-z\\-/]", replace="_")

 LET _ &amp;lt;= log(message="Will collect package %v and upload to cloud bucket %v",
 args=[zip_filename, TargetArgs.bucket])

 LET Result &amp;lt;= SELECT
 upload_file(filename=Container,
 name= upload_name + ".zip",
 accessor="file") AS Upload,
 upload_file(filename=log_filename,
 name= upload_name + ".log",
 accessor="file") AS LogUpload

 FROM collect(artifacts=Artifacts,
 args=Parameters,
 format=Format,
 output=zip_filename,
 cpu_limit=CpuLimit,
 progress_timeout=ProgressTimeout,
 timeout=Timeout,
 password=pass[0].Pass,
 level=Level,
 concurrency=Concurrency,
 metadata=ContainerMetadata)

 LET _ &amp;lt;= if(condition=NOT Result[0].Upload.Path,
 then=log(message="&amp;lt;red&amp;gt;Failed to upload to cloud bucket!&amp;lt;/&amp;gt; Leaving the collection behind for manual upload!"),
 else=log(message="&amp;lt;green&amp;gt;Collection Complete!&amp;lt;/&amp;gt; Please remove %v when you are sure it was properly transferred", args=zip_filename))

 SELECT * FROM Result


 - name: FetchBinaryOverride
 type: hidden
 description: |
 A replacement for Generic.Utils.FetchBinary which
 grabs files from the local archive.

 default: |
 LET RequiredTool &amp;lt;= ToolName
 LET S = scope()

 LET matching_tools &amp;lt;= SELECT ToolName, Filename
 FROM parse_csv(filename="/uploads/inventory.csv", accessor="me")
 WHERE RequiredTool = ToolName

 LET get_ext(filename) = parse_string_with_regex(
 regex="(\\.[a-z0-9]+)$", string=filename).g1

 LET FullPath &amp;lt;= if(condition=matching_tools,
 then=copy(filename=matching_tools[0].Filename,
 accessor="me", dest=tempfile(
 extension=get_ext(filename=matching_tools[0].Filename),
 remove_last=TRUE,
 permissions=if(condition=IsExecutable, then="x"))))

 SELECT FullPath, FullPath AS OSPath,
 Filename AS Name
 FROM matching_tools

sources:
 - query: |
 LET Binaries &amp;lt;= SELECT * FROM foreach(
 row={
 SELECT tools FROM artifact_definitions(deps=TRUE, names=artifacts)
 }, query={
 SELECT * FROM foreach(row=tools,
 query={
 SELECT name AS Binary FROM scope()
 })
 }) GROUP BY Binary

 // Choose the right target binary depending on the target OS
 LET tool_name = SELECT * FROM switch(
 a={ SELECT "VelociraptorWindows" AS Type FROM scope() WHERE OS = "Windows"},
 b={ SELECT "VelociraptorWindows_x86" AS Type FROM scope() WHERE OS = "Windows_x86"},
 c={ SELECT "VelociraptorLinux" AS Type FROM scope() WHERE OS = "Linux"},
 d={ SELECT "VelociraptorCollector" AS Type FROM scope() WHERE OS = "MacOS"},
 e={ SELECT "VelociraptorCollector" AS Type FROM scope() WHERE OS = "MacOSArm"},
 f={ SELECT "VelociraptorCollector" AS Type FROM scope() WHERE OS = "Generic"},
 g={ SELECT "" AS Type FROM scope()
 WHERE NOT log(message="Unknown target type " + OS) }
 )

 LET Target &amp;lt;= tool_name[0].Type

 // This is what we will call it.
 LET CollectorName &amp;lt;= opt_collector_filename ||
 format(format='Collector_%v', args=inventory_get(tool=Target).Definition.filename)

 LET CollectionArtifact &amp;lt;= SELECT Value FROM switch(
 a = { SELECT CommonCollections + StandardCollection AS Value
 FROM scope()
 WHERE target = "ZIP" },
 b = { SELECT S3Collection + CommonCollections + CloudCollection AS Value
 FROM scope()
 WHERE target = "S3" },
 c = { SELECT GCSCollection + CommonCollections + CloudCollection AS Value
 FROM scope()
 WHERE target = "GCS" },
 d = { SELECT SFTPCollection + CommonCollections + CloudCollection AS Value
 FROM scope()
 WHERE target = "SFTP" },
 e = { SELECT AzureSASURL + CommonCollections + CloudCollection AS Value
 FROM scope()
 WHERE target = "Azure" },
 f = { SELECT SMBCollection + CommonCollections + CloudCollection AS Value
 FROM scope()
 WHERE target = "SMBShare" },
 z = { SELECT "" AS Value FROM scope()
 WHERE log(message="Unknown collection type " + target) }
 )

 LET use_server_cert = encryption_scheme =~ "x509"
 AND NOT encryption_args.public_key =~ "-----BEGIN CERTIFICATE-----"
 AND log(message="Pubkey encryption specified, but no cert/key provided. Defaulting to server frontend cert")

 -- For x509, if no public key cert is specified, we use the
 -- server's own key. This makes it easy for the server to import
 -- the file again.
 LET updated_encryption_args &amp;lt;= if(
 condition=use_server_cert,
 then=dict(public_key=server_frontend_cert(),
 scheme="x509"),
 else=encryption_args
 )

 -- Add custom definition if needed. Built in definitions are not added
 LET definitions &amp;lt;= SELECT * FROM chain(
 a = { SELECT name, description, tools, export, parameters, sources
 FROM artifact_definitions(deps=TRUE, names=artifacts)
 WHERE NOT compiled_in AND
 log(message="Adding artifact_definition for " + name) },

 // Create the definition of the Collector artifact.
 b = { SELECT "Collector" AS name, (
 dict(name="Artifacts",
 default=serialize(format='json', item=artifacts),
 type="json_array"),
 dict(name="Parameters",
 default=serialize(format='json', item=parameters),
 type="json"),
 dict(name="encryption_scheme", default=encryption_scheme),
 dict(name="encryption_args",
 default=serialize(format='json', item=updated_encryption_args),
 type="json"
 ),
 dict(name="Level", default=opt_level, type="int"),
 dict(name="Concurrency", default=opt_concurrency, type="int"),
 dict(name="Format", default=opt_format),
 dict(name="OutputPrefix", default=opt_output_directory),
 dict(name="FilenameTemplate", default=opt_filename_template),
 dict(name="CpuLimit", type="int",
 default=opt_cpu_limit),
 dict(name="ProgressTimeout", type="int",
 default=opt_progress_timeout),
 dict(name="Timeout", default=opt_timeout, type="int"),
 dict(name="target_args",
 default=serialize(format='json', item=target_args),
 type="json"),
 ) AS parameters,
 (
 dict(query=CollectionArtifact[0].Value),
 ) AS sources
 FROM scope() },

 // Override FetchBinary to get files from the executable.
 c = { SELECT "Generic.Utils.FetchBinary" AS name,
 (
 dict(name="SleepDuration", type="int", default="0"),
 dict(name="ToolName"),
 dict(name="ToolInfo"),
 dict(name="TemporaryOnly", type="bool"),
 dict(name="Version"),
 dict(name="IsExecutable", type="bool", default="Y"),
 ) AS parameters,
 (
 dict(query=FetchBinaryOverride),
 ) AS sources FROM scope() }
 )

 LET optional_cmdline = SELECT * FROM chain(
 a={ SELECT "-v" AS Opt FROM scope() WHERE opt_verbose},
 b={ SELECT "--nobanner" AS Opt FROM scope() WHERE NOT opt_banner},
 c={ SELECT "--require_admin" AS Opt FROM scope() WHERE opt_admin},
 d={ SELECT "--prompt" AS Opt FROM scope() WHERE opt_prompt},
 e={ SELECT "--tempdir" AS Opt FROM scope() WHERE opt_tempdir},
 f={ SELECT opt_tempdir AS Opt FROM scope() WHERE opt_tempdir}
 )

 // Build the autoexec config file depending on the user's
 // collection type choices.
 LET autoexec &amp;lt;= dict(autoexec=dict(
 argv=("artifacts", "collect", "Collector",
 "--logfile", CollectorName + ".log") + optional_cmdline.Opt,
 artifact_definitions=definitions)
 )

 // Do the actual repacking.
 SELECT repack(
 upload_name=CollectorName,
 target=tool_name[0].Type,
 binaries=Binaries.Binary,
 version=opt_version,
 config=serialize(format='json', item=autoexec)) AS Repacked
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.CreateMSI</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.createmsi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.createmsi/</guid><description>&lt;p>Build an MSI ready for deployment in the current org.&lt;/p>
&lt;p>This artifact depends on the following tools:&lt;/p>
&lt;ul>
&lt;li>
&lt;velo-tool-viewer name="VelociraptorWindowsMSI" />
&lt;/li>
&lt;li>
&lt;velo-tool-viewer name="VelociraptorWindows_x86MSI" />
&lt;/li>
&lt;/ul>
&lt;p>You can replace those with suitable MSI builds.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.CreateMSI
description: |
 Build an MSI ready for deployment in the current org.

 This artifact depends on the following tools:

 * &amp;lt;velo-tool-viewer name="VelociraptorWindowsMSI" /&amp;gt;
 * &amp;lt;velo-tool-viewer name="VelociraptorWindows_x86MSI" /&amp;gt;

 You can replace those with suitable MSI builds.

type: SERVER

parameters:
 - name: CustomConfig
 description: Supply a custom client config instead of using the one from the current org
 type: yaml
 - name: AlsoBuild_x86
 description: Also build 32 bit MSI for deployment.
 type: bool

sources:
- query: |
 LET ValidateConfig(Config) = Config.Client.server_urls
 AND Config.Client.ca_certificate =~ "(?ms)-----BEGIN CERTIFICATE-----.+-----END CERTIFICATE-----"
 AND Config.Client.nonce

 LET client_config &amp;lt;= if(condition=ValidateConfig(Config=CustomConfig),
 then=CustomConfig,
 else=org()._client_config)

 LET Build(Target) = repack(
 upload_name=format(
 format='Org_%v_%v',
 args=[org().name, inventory_get(tool=Target).Definition.filename]),
 target=Target,
 config=serialize(format='yaml', item=client_config))

 SELECT * FROM chain(a={
 SELECT Build(Target="VelociraptorWindowsMSI") FROM scope()
 }, b={
 SELECT Build(Target="VelociraptorWindows_x86MSI") FROM scope()
 WHERE AlsoBuild_x86
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteClient</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteclient/</guid><description>&lt;p>This artifact completely removes a client from the data store.&lt;/p>
&lt;p>Be careful with this one: there is no way to recover old
data. However, if the client still exists, it will just
automatically re-enrol when it next connects. You will still be able
to talk to it, it is just that old collected data is deleted.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteClient
description: |
 This artifact completely removes a client from the data store.

 Be careful with this one: there is no way to recover old
 data. However, if the client still exists, it will just
 automatically re-enrol when it next connects. You will still be able
 to talk to it, it is just that old collected data is deleted.

type: SERVER

parameters:
 - name: ClientIdList
 description: A list of client ids to delete.
 default:

 - name: ReallyDoIt
 description: If you really want to delete the client, check this.
 type: bool

sources:
 - query: |
 let clients_list = SELECT ClientId
 FROM parse_records_with_regex(
 accessor="data", file=ClientIdList,
 regex="(?P&amp;lt;ClientId&amp;gt;C\\.[0-9a-z-]+)")
 WHERE log(message="Deleting client " + ClientId)

 SELECT * FROM foreach(row=clients_list,
 query={
 SELECT * FROM client_delete(client_id=ClientId,
 really_do_it=ReallyDoIt)
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteEvents</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteevents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteevents/</guid><description>&lt;p>This artifact permanently deletes Event files for client or
monitoring events.&lt;/p>
&lt;p>NOTE: This action can not be undone! The event files are deleted
permanently. Since this is a sensitive operation, typically only
users with the administrator role can run it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteEvents
description: |
 This artifact permanently deletes Event files for client or
 monitoring events.

 NOTE: This action can not be undone! The event files are deleted
 permanently. Since this is a sensitive operation, typically only
 users with the administrator role can run it.

type: SERVER

required_permissions:
 - MACHINE_STATE

parameters:
 - name: Artifact
 description: The artifact name to delete
 default:
 - name: ClientId
 description: The client id that the collection was done on
 default:
 - name: StartTime
 type: timestamp
 description: The begining time range to delete
 - name: EndTime
 type: timestamp
 description: The ending time range to delete
 - name: ReallyDoIt
 description: If you really want to delete the collection, check this.
 type: bool

sources:
 - query: |
 SELECT Type, Data.VFSPath AS VFSPath, Error
 FROM delete_events(
 artifact=Artifact, client_id=ClientId,
 start_time=StartTime, end_time=EndTime,
 really_do_it=ReallyDoIt)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteFavoriteFlow</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletefavoriteflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletefavoriteflow/</guid><description>&lt;p>This artifact allows the user to delete a previously saved
favorite. It will only addect the current user.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteFavoriteFlow
description: |
 This artifact allows the user to delete a previously saved
 favorite. It will only addect the current user.

parameters:
 - name: Name
 description: A name for this collection template
 - name: Type
 description: The type of favorites to delete.
 type: choices
 default: CLIENT
 choices:
 - CLIENT
 - SERVER
 - CLIENT_EVENT
 - SERVER_EVENT

sources:
 - query: |
 SELECT favorites_delete(name=Name, type=Type)
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteFlow</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deleteflow/</guid><description>&lt;p>This artifact permanently deletes a flow including it&amp;rsquo;s metadata and
uploaded files.&lt;/p>
&lt;p>NOTE: This action can not be undone! The collection is deleted
permanently. Since this is a sensitive operation, typically only
users with the administrator role can run it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteFlow
description: |
 This artifact permanently deletes a flow including it's metadata and
 uploaded files.

 NOTE: This action can not be undone! The collection is deleted
 permanently. Since this is a sensitive operation, typically only
 users with the administrator role can run it.

type: SERVER

required_permissions:
 - MACHINE_STATE

parameters:
 - name: FlowId
 description: The flow ID to delete
 default:
 - name: ClientId
 description: The client id that the collection was done on
 default:
 - name: ReallyDoIt
 description: If you really want to delete the collection, check this.
 type: bool

sources:
 - query: |
 SELECT Type, Data.VFSPath AS VFSPath, Error
 FROM delete_flow(flow_id=FlowId, client_id=ClientId, really_do_it=ReallyDoIt)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteManyFlows</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletemanyflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletemanyflows/</guid><description>&lt;p>Sometimes the Velociraptor server accumulates a lot of data that is
no longer needed.&lt;/p>
&lt;p>This artifact will enumerate all flows from all clients and matches
them against some criteria. Flows that match are then removed.&lt;/p>
&lt;p>&lt;strong>NOTE&lt;/strong> This artifact will destroy all data irrevocably. Take
care! You should always do a dry run first to see which flows
will match before using the ReallyDoIt option.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteManyFlows
description: |
 Sometimes the Velociraptor server accumulates a lot of data that is
 no longer needed.

 This artifact will enumerate all flows from all clients and matches
 them against some criteria. Flows that match are then removed.

 **NOTE** This artifact will destroy all data irrevocably. Take
 care! You should always do a dry run first to see which flows
 will match before using the ReallyDoIt option.

type: SERVER

parameters:
 - name: ArtifactRegex
 default: Generic.Client.Info
 type: regex
 - name: HostnameRegex
 description: If specified only target these hosts
 type: regex
 - name: DateBefore
 description: Only select flows created before this date. If not set we choose all flows.
 type: timestamp
 - name: CreatorRegex
 default: "."
 type: regex
 description: |
 Match flows created by this user.
 - name: ReallyDoIt
 type: bool
 description: Does not delete until you press the ReallyDoIt button!

sources:
 - query: |
 LET DateBefore &amp;lt;= DateBefore || timestamp(epoch=now())
 LET hits = SELECT * FROM foreach(row={
 SELECT client_id,
 os_info.hostname AS hostname
 FROM clients()
 WHERE hostname =~ HostnameRegex
 },
 query={
 SELECT client_id, hostname,
 session_id, request.creator AS creator,
 request.artifacts as artifacts,
 timestamp(epoch=create_time) AS created
 FROM flows(client_id=client_id)
 WHERE creator =~ CreatorRegex
 AND artifacts =~ ArtifactRegex
 AND created &amp;lt; DateBefore
 }, workers=10)

 SELECT * FROM if(condition=ReallyDoIt,
 then={
 SELECT * FROM foreach(row=hits,
 query={
 SELECT client_id, hostname, creator,
 session_id, artifacts, created, Type, Data, Error
 FROM delete_flow(client_id=client_id,
 flow_id=session_id, really_do_it=ReallyDoIt)
 WHERE log(message=format(format="Deleting flow %v from %v",
 args=[session_id, hostname]))
 }, workers=10)
 }, else={
 SELECT * FROM hits
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteMonitoringData</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletemonitoringdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletemonitoringdata/</guid><description>&lt;p>Velociraptor collects monitoring data from endpoints all the time.&lt;/p>
&lt;p>Sometimes this data is no longer needed and we might want to free
up disk space.&lt;/p>
&lt;p>This artifact searches the monitoring data for each client and
optionally removes data older than the specified timestamp.&lt;/p>
&lt;p>&lt;strong>NOTE&lt;/strong> This artifact will destroy all data irrevocably. Take
care! You should always do a dry run first to see which flows
will match before using the ReallyDoIt option.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteMonitoringData
description: |
 Velociraptor collects monitoring data from endpoints all the time.

 Sometimes this data is no longer needed and we might want to free
 up disk space.

 This artifact searches the monitoring data for each client and
 optionally removes data older than the specified timestamp.

 **NOTE** This artifact will destroy all data irrevocably. Take
 care! You should always do a dry run first to see which flows
 will match before using the ReallyDoIt option.

type: SERVER

parameters:
 - name: DateBefore
 default: 2022-01-01
 type: timestamp
 - name: ArtifactRegex
 type: regex
 default: Generic.Client.Stats
 - name: HostnameRegex
 description: If specified only target these hosts
 type: regex
 - name: ReallyDoIt
 type: bool
 description: Do not actually delete until this is set!

sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT client_id,
 os_info.hostname AS hostname
 FROM clients()
 WHERE hostname =~ HostnameRegex
 },
 query={
 SELECT OSPath,
 OSPath.Dirname.Basename AS ArtifactName, Size,
 timestamp(epoch=
 split(string=OSPath.Basename, sep="\\.")[0]) AS Timestamp,
 if(condition=ReallyDoIt, then=file_store_delete(path=OSPath)) AS ReallyDoIt
 FROM glob(
 globs="/**.json*", accessor="fs",
 root="/clients/"+ client_id + "/monitoring")
 WHERE ArtifactName =~ ArtifactRegex
 AND Timestamp &amp;lt; DateBefore
 }, workers=10)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.DeleteNotebook</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletenotebook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.deletenotebook/</guid><description>&lt;p>Completely removes a notebook from the server including all its cells, attachments etc.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.DeleteNotebook
description: |
 Completely removes a notebook from the server including all its cells, attachments etc.

type: SERVER

parameters:
 - name: NotebookId
 description: The ID of the notebook to remove.
 - name: ReallyDoIt
 type: bool
 description: Set to really remove the notebook - otherwise it is a dry run.

sources:
 - query: |
 SELECT * FROM notebook_delete(
 notebook_id=NotebookId, really_do_it=ReallyDoIt)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.ImportCollection</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.importcollection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.importcollection/</guid><description>&lt;p>The Velociraptor offline collector is an automated, preconfigured
collection tool. Users can use the collector to automatically
collect any artifacts on endpoints that do not have the Velociraptor
client (offline endpoints).&lt;/p>
&lt;p>The collector creates a ZIP archive with the results of the
collection in JSON files (and any uploaded files).&lt;/p>
&lt;p>This artifact allows for these offline collections to be imported
back into the Velociraptor GUI. The collected data can then treated
exactly the same as if it was collected by the regular Velociraptor
client (i.e. post processed through the notebook interface), except
it was collected via the Sneakernet.&lt;/p>
&lt;p>NOTE: This artifact reads the collection ZIP from the server&amp;rsquo;s
filesystem. It is up to you to arrange for the file to be stored on
the server (e.g. scp it over).&lt;/p>
&lt;p>NOTE: This artifact is still experimental - please provide feedback
on our issue board.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.ImportCollection
description: |
 The Velociraptor offline collector is an automated, preconfigured
 collection tool. Users can use the collector to automatically
 collect any artifacts on endpoints that do not have the Velociraptor
 client (offline endpoints).

 The collector creates a ZIP archive with the results of the
 collection in JSON files (and any uploaded files).

 This artifact allows for these offline collections to be imported
 back into the Velociraptor GUI. The collected data can then treated
 exactly the same as if it was collected by the regular Velociraptor
 client (i.e. post processed through the notebook interface), except
 it was collected via the Sneakernet.

 NOTE: This artifact reads the collection ZIP from the server's
 filesystem. It is up to you to arrange for the file to be stored on
 the server (e.g. scp it over).

 NOTE: This artifact is still experimental - please provide feedback
 on our issue board.

type: SERVER

parameters:
 - name: ClientId
 default: auto
 description: |
 The client id to upload this collection into. The
 default is "auto" which will create a new client id.
 - name: Hostname
 description: If creating a new client, this must contain the hostname.
 - name: Path
 description: A path on the server containing the zip file to upload.

sources:
 - query: |
 LET result &amp;lt;= SELECT import_collection(
 client_id=ClientId, hostname=Hostname,
 filename=Path) AS Import
 FROM scope()

 SELECT * FROM switch(a={
 SELECT Import.client_id AS ClientId, Import.session_id AS FlowId,
 Import.total_collected_rows AS TotalRows,
 Import.total_uploaded_files AS UploadedFiles,
 Import.total_uploaded_bytes AS UploadedBytes,
 Import.artifacts_with_results AS Artifacts
 FROM result
 WHERE FlowId

 -- Hunt import
 }, b={
 SELECT Import.hunt_id AS HuntId,
 timestamp(epoch=Import.create_time) AS CreateTime,
 Import.stats.total_clients_scheduled AS TotalClients,
 Import.artifacts AS Artifacts,
 Import.creator AS Creator,
 Import AS _Hunt
 FROM result
 WHERE HuntId
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.KillClient</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.killclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.killclient/</guid><description>&lt;p>This artifact agressively kills a client.&lt;/p>
&lt;p>If the client runs as a service, it will restart by the service manager.&lt;/p>
&lt;p>NOTE: If the client is not running as a service (i.e. interactively)
it may not restart and further communication will be lost!&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.KillClient
description: |
 This artifact agressively kills a client.

 If the client runs as a service, it will restart by the service manager.

 NOTE: If the client is not running as a service (i.e. interactively)
 it may not restart and further communication will be lost!

type: SERVER


parameters:
 - name: ClientIdList
 description: A list of client ids to kill.
 default:

sources:
 - query: |
 let clients_list = SELECT ClientId
 FROM parse_records_with_regex(
 accessor="data", file=ClientIdList,
 regex="(?P&amp;lt;ClientId&amp;gt;C\\.[0-9a-z-]+)")
 WHERE log(message="Killing client " + ClientId)

 SELECT * FROM foreach(row=clients_list,
 query={
 SELECT killkillkill(client_id=ClientId) FROM scope()
 })

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.ListUsers</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.listusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.listusers/</guid><description>&lt;p>This server artifact is used to list all current users and their
permissions and org access.&lt;/p>
&lt;p>NOTE: When collected in an org context only users belonging to the
current org are visible. When collected in the context of the root
org, all users in all orgs are visible.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.ListUsers
description: |
 This server artifact is used to list all current users and their
 permissions and org access.

 NOTE: When collected in an org context only users belonging to the
 current org are visible. When collected in the context of the root
 org, all users in all orgs are visible.

type: SERVER

sources:
 - query: |
 SELECT * FROM gui_users(all_orgs=TRUE)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.ReIndex</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.reindex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.reindex/</guid><description>&lt;p>This utility artifact replays all collected Generic.Client.Info
collections to the interrogation service forcing a reindex.&lt;/p>
&lt;p>It should normally not be needed.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.ReIndex
description: |
 This utility artifact replays all collected Generic.Client.Info
 collections to the interrogation service forcing a reindex.

 It should normally not be needed.

sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT Name AS ClientId
 FROM glob(globs="/clients/*", accessor="fs")
 WHERE Name =~ "^C."
 }, query={
 SELECT session_id,
 send_event(artifact="System.Flow.Completion",
 row=dict(
 Flow=dict(artifacts_with_results=artifacts_with_results),
 ClientId=ClientId,
 FlowId=session_id)) AS Event
 FROM flows(client_id=ClientId)
 WHERE request.artifacts =~ "Generic.Client.Info"
 LIMIT 1
 }, workers=10)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.RemoveTimeline</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.removetimeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.removetimeline/</guid><description>&lt;p>Remove a child timeline from a super timeline.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.RemoveTimeline
description: |
 Remove a child timeline from a super timeline.

type: SERVER

parameters:
 - name: NotebookId
 - name: Timeline
 description: SuperTimeline name
 - name: ChildName
 description: Name of child timeline

sources:
 - query: |
 SELECT if(condition=ChildName AND Timeline AND NotebookId,
 then=timeline_delete(
 timeline=Timeline,
 notebook_id=NotebookId,
 name=ChildName)) AS Removed
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.SaveFavoriteFlow</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.savefavoriteflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.savefavoriteflow/</guid><description>&lt;p>Users may collect various artifacts from hosts. Sometimes it might
take a bit of effort to setup and configure just the perfect
combination of parameters and artifacts to collect.&lt;/p>
&lt;p>This artifact allows the user to save the collection into a
Favorites section, which may be used in future.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.SaveFavoriteFlow
description: |
 Users may collect various artifacts from hosts. Sometimes it might
 take a bit of effort to setup and configure just the perfect
 combination of parameters and artifacts to collect.

 This artifact allows the user to save the collection into a
 Favorites section, which may be used in future.

parameters:
 - name: Specs
 type: json_array
 description: The collection request that will be recreated.
 - name: Name
 description: A name for this collection template
 - name: Description
 description: A description for the template.
 - name: Type
 description: The type of favorites to save.
 type: choices
 default: CLIENT
 choices:
 - CLIENT
 - SERVER
 - CLIENT_EVENT
 - SERVER_EVENT

sources:
 - query: |
 SELECT favorites_save(
 name=Name,
 description=Description,
 specs=Specs,
 type=Type)
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.StartHuntExample</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.starthuntexample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.starthuntexample/</guid><description>&lt;p>This example artifact shows how to create a utility artifact to
provide low privileged users with a controlled ability to perform
high privileged operations.&lt;/p>
&lt;p>This server artifact launches a new &lt;code>Generic.Client.Info&lt;/code> hunt, but
the parameters for the hunt are not determined by the initiating
user. This makes is safe for unprivileged users to schedule this
hunt whenever they want.&lt;/p>
&lt;p>Usually to start a hunt, the user must have the &lt;code>START_HUNT&lt;/code>
permission - usually granted by the &lt;code>administrator&lt;/code> or
&lt;code>investigator&lt;/code> roles. Additionally, in order to collect this
artifact, a user must have the &lt;code>COLLECT_SERVER&lt;/code> permission - usually
only granted by the &lt;code>administrator&lt;/code> role.&lt;/p>
&lt;p>So by default this artifact does not give any additional permissions
and usually has to be collected by an &lt;code>administrator&lt;/code> (which would
be able to schedule hunts anyway).&lt;/p>
&lt;p>However, it is possible to mark the artifact as basic using the VQL&lt;/p>
&lt;pre>&lt;code class="language-vql">SELECT artifact_set_metadata(
 artifact=&amp;quot;Server.Utils.StartHuntExample&amp;quot;, basic=TRUE)
FROM scope()
&lt;/code>&lt;/pre>
&lt;p>This will allow users with the &lt;code>COLLECT_BASIC&lt;/code> permission to also
collect it. Once collected the artifact specifies the impersonate
field to &lt;code>admin&lt;/code> which will cause it to run under the &lt;code>admin&lt;/code> user&amp;rsquo;s
permissions.&lt;/p>
&lt;p>This combination allows us to now grant the &lt;code>COLLECT_BASIC&lt;/code>
permission to any user and they will be able to start the hunt via
this artifact, but have no additional permissions to start arbitrary
hunts or collections.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.StartHuntExample
description: |
 This example artifact shows how to create a utility artifact to
 provide low privileged users with a controlled ability to perform
 high privileged operations.

 This server artifact launches a new `Generic.Client.Info` hunt, but
 the parameters for the hunt are not determined by the initiating
 user. This makes is safe for unprivileged users to schedule this
 hunt whenever they want.

 Usually to start a hunt, the user must have the `START_HUNT`
 permission - usually granted by the `administrator` or
 `investigator` roles. Additionally, in order to collect this
 artifact, a user must have the `COLLECT_SERVER` permission - usually
 only granted by the `administrator` role.

 So by default this artifact does not give any additional permissions
 and usually has to be collected by an `administrator` (which would
 be able to schedule hunts anyway).

 However, it is possible to mark the artifact as basic using the VQL

 ```vql
 SELECT artifact_set_metadata(
 artifact="Server.Utils.StartHuntExample", basic=TRUE)
 FROM scope()
 ```

 This will allow users with the `COLLECT_BASIC` permission to also
 collect it. Once collected the artifact specifies the impersonate
 field to `admin` which will cause it to run under the `admin` user's
 permissions.

 This combination allows us to now grant the `COLLECT_BASIC`
 permission to any user and they will be able to start the hunt via
 this artifact, but have no additional permissions to start arbitrary
 hunts or collections.

type: SERVER

# Collect this artifact under the admin user permissions.
impersonate: admin

sources:
 - query: |
 -- This query will run with admin ACLs.
 SELECT hunt(
 description="A general hunt",
 artifacts='Generic.Client.Info')
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.TimesketchUpload</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.timesketchupload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.timesketchupload/</guid><description>&lt;p>Timesketch is an interactive collaborative timeline analysis tool
that can be found at &lt;a href="https://timesketch.org/" target="_blank" >https://timesketch.org/&lt;/a>
&lt;/p>
&lt;p>This artifact uploads Velociraptor&amp;rsquo;s timelines to Timesketch using
the Timesketch client library. The artifact assumes the client
library is installed and configured on the server.&lt;/p>
&lt;p>To install the Timesketch client library:&lt;/p>
&lt;pre>&lt;code>pip install timesketch-import-client timesketch-cli-client
&lt;/code>&lt;/pre>
&lt;p>To configure the client library to access your Timesketch instance
see instructions &lt;a href="https://timesketch.org/guides/user/cli-client/" target="_blank" >https://timesketch.org/guides/user/cli-client/&lt;/a>
 and
&lt;a href="https://timesketch.org/guides/user/upload-data/" target="_blank" >https://timesketch.org/guides/user/upload-data/&lt;/a>
&lt;/p>
&lt;p>This artifact assumes that the timesketch CLI is preconfigured with
the correct credentials in the &lt;code>.timesketchrc&lt;/code> file.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.TimesketchUpload
description: |
 Timesketch is an interactive collaborative timeline analysis tool
 that can be found at https://timesketch.org/

 This artifact uploads Velociraptor's timelines to Timesketch using
 the Timesketch client library. The artifact assumes the client
 library is installed and configured on the server.

 To install the Timesketch client library:
 ```
 pip install timesketch-import-client timesketch-cli-client
 ```

 To configure the client library to access your Timesketch instance
 see instructions https://timesketch.org/guides/user/cli-client/ and
 https://timesketch.org/guides/user/upload-data/

 This artifact assumes that the timesketch CLI is preconfigured with
 the correct credentials in the `.timesketchrc` file.

required_permissions:
 - EXECVE

parameters:
 - name: NotebookId
 description: The notebook ID that contains the super timeline
 - name: SuperTimeline
 description: The name of the super timeline
 - name: Timeline
 description: The name of the timeline within the super timeline.
 - name: TimesketchCLICommand
 default: "timesketch"
 description: |
 The path to the timesketch cli binary. If you installed in a
 virtual environment this will be inside that environment.

type: SERVER

export: |
 LET timesketch_import_command = TimesketchCLICommand + "_importer"

 -- The uploader tool can create a new "Sketch" but if we want to
 -- just add a timeline to an existing sketch we need to specify the
 -- ID. This function finds the ID for the specified Sketch if it
 -- exists. NOTE that you can have multiple Sketches with the same
 -- name! We pick the first.
 LET GetIdToSketch(Sketch) = SELECT * FROM foreach(row={
 SELECT Stdout
 FROM execve(
 argv=[TimesketchCLICommand, "--output-format",
 "json", "sketch", "list"], length=10000)
 }, query={
 SELECT * FROM parse_json_array(data=Stdout)
 })
 WHERE name = Sketch

 -- Enumerate all the timelines in a super timeline
 LET _GetAllTimelines(SuperTimelineName, NotebookId) = SELECT *
 FROM foreach(row={
 SELECT *
 FROM timelines(notebook_id=NotebookId)
 WHERE name = SuperTimelineName
 }, query={ SELECT * FROM timelines })

 LET _GetTimelineMetdata(SuperTimelineName, NotebookId, TimelineName) =
 SELECT * FROM _GetAllTimelines(
 SuperTimelineName=SuperTimelineName, NotebookId=NotebookId)
 WHERE Id = TimelineName

 -- Gets the metadata of a named timeline
 LET GetTimelineMetdata(SuperTimelineName, NotebookId, TimelineName) =
 _GetTimelineMetdata(SuperTimelineName= SuperTimelineName,
 NotebookId = NotebookId,
 TimelineName=TimelineName)[0]

 -- Timesketch insists the file have the .csv extension.
 LET tmp &amp;lt;= tempfile(extension=".csv")

 -- We copy the timeline to a temp csv file then upload that. This
 -- might seem inefficient but timesketch is written in python so it
 -- is already very slow. The extra tempfile does not make much
 -- difference in practice.
 LET WriteTmpFile(NotebookId, SuperTimelineName, TimelineName) =
 SELECT count() AS Count
 FROM write_csv(filename=tmp, query={
 SELECT Timestamp as timestamp, Message as message, *
 FROM timeline(notebook_id=NotebookId, timeline=SuperTimelineName,
 components=TimelineName)
 })
 GROUP BY 1

 LET ImportToTS(SuperTimelineName, NotebookId, TimelineName, SketchName) =
 SELECT * FROM chain(a={
 SELECT format(format="Exporting %v rows to %v", args=[WriteTmpFile(
 NotebookId=NotebookId, SuperTimelineName=SuperTimelineName,
 TimelineName=TimelineName)[0].Count, tmp]) AS Stdout
 FROM scope()
 }, c={
 SELECT * FROM foreach(row={

 -- This is unfortunately slow and unnecessary but Timesketch
 -- does not have a flag that just says - add timeline to
 -- existing sketch. So we have to type to find the sketch ID
 -- first.
 SELECT GetIdToSketch(Sketch=SketchName)[0].id || 0 AS SketchID
 FROM scope()

 }, query={

 -- Launch the import library and display the output.
 SELECT Stdout, Stderr, SketchID,
 SketchName, TimelineName
 FROM execve(argv=[timesketch_import_command, "--sketch_name",
 SketchName, "--sketch_id", SketchID,
 "--timeline_name", TimelineName,
 tmp], sep="\n")
 })
 })

sources:
 - query: |
 SELECT * FROM ImportToTS(
 SuperTimelineName=SuperTimelineName,
 NotebookId=NotebookId,
 TimelineName=TimelineName,
 SketchName=SketchName)

&lt;/code>&lt;/pre></description></item><item><title>Server.Utils.UploadTools</title><link>https://docs.velociraptor.app/artifact_references/pages/server.utils.uploadtools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/server.utils.uploadtools/</guid><description>&lt;p>Velociraptor can use external tools to deploy binaries on the
endpoint for some artifacts that require it. Usually these binaries
are automatically downloaded by the server when required. However,
sometimes a server is deployed on an air gapped network, or has
egress filtering implemented such that the server is unable to
download binaries on demand.&lt;/p>
&lt;p>In these cases it is useful to automatically pre-populate tools into
a server manually. This artifact simplies the process.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The artifact produces a curl based script that helps to download
required binaries on an internet connect system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When binaries are placed on a directory in the server&amp;rsquo;s
filesystem, the artifact can then be used to automatically upload
the binaries as tools to the server.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>NOTE that in Velociraptor each org is completely separated, so you
will need to re-upload the binaries when you create each org.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Server.Utils.UploadTools
description: |
 Velociraptor can use external tools to deploy binaries on the
 endpoint for some artifacts that require it. Usually these binaries
 are automatically downloaded by the server when required. However,
 sometimes a server is deployed on an air gapped network, or has
 egress filtering implemented such that the server is unable to
 download binaries on demand.

 In these cases it is useful to automatically pre-populate tools into
 a server manually. This artifact simplies the process.

 1. The artifact produces a curl based script that helps to download
 required binaries on an internet connect system.

 2. When binaries are placed on a directory in the server's
 filesystem, the artifact can then be used to automatically upload
 the binaries as tools to the server.

 NOTE that in Velociraptor each org is completely separated, so you
 will need to re-upload the binaries when you create each org.

type: SERVER

parameters:
 - name: BasePath
 description: |
 The directory on the server that contains all the binaries that
 are to be synced.

sources:
 - name: DownloaderScript
 query: |
 LET AllCurlCommands =
 SELECT format(format="curl -O -L -C - %v", args=url) AS Curl
 FROM inventory()
 WHERE url
 AND NOT admin_override

 LET Script &amp;lt;= join(sep="\r\n", array=AllCurlCommands.Curl)

 SELECT upload(accessor="scope", file="Script", name="Script.bat") AS Script
 FROM scope()

 - name:
 query: |
 LET BasePath &amp;lt;= pathspec(parse=BasePath)

 SELECT name,
 filename,
 BasePath + filename AS UploadedFile,
 inventory_add(file=BasePath + filename, tool=name, serve_locally=TRUE).hash AS UpdatedHash
 FROM inventory()
 WHERE url
 AND NOT admin_override
 AND stat(filename=BasePath + filename).Size &amp;gt; 100

column_types:
 - name: Script
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Splunk.Flows.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/splunk.flows.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/splunk.flows.upload/</guid><description>&lt;p>This server side event monitoring artifact waits for new artifacts
to be collected from endpoints and automatically uploads those to a
Splunk server.
To configure the event collector properly a couple steps need to be
completed prior to setting up this event:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Configure an index to ingest the data.&lt;/p>
&lt;ul>
&lt;li>Go to Settings &amp;gt; Index.&lt;/li>
&lt;li>New Index.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Configure the collector.&lt;/p>
&lt;ul>
&lt;li>Go to Settings &amp;gt; Data Inputs &amp;gt; HTTP Event Collector.&lt;/li>
&lt;li>Add New.&lt;/li>
&lt;li>Name does not matter, but ensure indexer acknowledgement is OFF.&lt;/li>
&lt;li>Set &lt;code>Selected Indexes&lt;/code> to the index configured in step 1.&lt;/li>
&lt;li>Save API key for this event.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Set Global settings.&lt;/p>
&lt;ul>
&lt;li>Go to Settings &amp;gt; Data Inputs &amp;gt; HTTP Event Collector &amp;gt; Global Settings&lt;/li>
&lt;li>Ensure &lt;code>All Tokens&lt;/code> is set to ENABLED&lt;/li>
&lt;li>Copy the HTTP Port Number for this event&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Configure your Splunk props.conf and tranforms.conf&lt;/p>
&lt;ul>
&lt;li>Add the following to props.conf
[vql]
INDEXED_EXTRACTIONS = json
DATETIME_CONFIG = CURRENT
TZ = GMT
category = Custom
pulldown_type = 1
TRANSFORMS-vql-sourcetype = vql-sourcetype,vql-timestamp
TRUNCATE = 512000&lt;/li>
&lt;li>Add the following to transforms.conf
[vql-sourcetype]
INGEST_EVAL = sourcetype=lower(src_artifact)
[vql-timestamp]
INGEST_EVAL = _time=case( &lt;br>
src_artifact=&amp;ldquo;artifact_Linux_Search_FileFinder&amp;rdquo;,strptime(CTime,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_System_VFS_ListDirectory&amp;rdquo;,strptime(ctime,&amp;quot;%Y-%m-%dT%H:%M:%S.%NZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Timeline_MFT&amp;rdquo;,strptime(event_time,&amp;quot;%Y-%m-%dT%H:%M:%S.%NZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_NTFS_MFT&amp;rdquo;,strptime(Created0x10,&amp;quot;%Y-%m-%dT%H:%M:%S.%NZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_EventLogs_Evtx&amp;rdquo;,strptime(TimeCreated,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Custom_Windows_EventLogs_System_7045&amp;rdquo;,strptime(TimeCreated,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_EventLogs_RDPAuth&amp;rdquo;,strptime(EventTime,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Analysis_EvidenceOfExecution_UserAssist&amp;rdquo;,strptime(LastExecution,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Analysis_EvidenceOfExecution_Amcache&amp;rdquo;,strptime(KeyMTime,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_System_Amcache_InventoryApplicationFile&amp;rdquo;,strptime(LastModified,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Search_FileFinder&amp;rdquo;,strptime(CTime,&amp;quot;%Y-%m-%dT%H:%M:%S.%NZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Applications_NirsoftBrowserViewer&amp;rdquo;,strptime(Visited,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Registry_RecentDocs&amp;rdquo;,strptime(LastWriteTime,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Forensics_UserAccessLogs_Clients&amp;rdquo;,strptime(InsertDate,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Forensics_UserAccessLogs_DNS&amp;rdquo;,strptime(LastSeen,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Forensics_UserAccessLogs_SystemIdentity&amp;rdquo;,strptime(CreationTime,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Custom_Windows_Application_IIS_IISLogs&amp;rdquo;,strptime(event_time,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_MacOS_Applications_Chrome_History&amp;rdquo;,strptime(last_visit_time,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;), &lt;br>
src_artifact=&amp;ldquo;artifact_Windows_Registry_UserAssist&amp;rdquo;,strptime(LastExecution,&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;) &lt;br>
)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: &lt;code>Enable SSL&lt;/code> only works if SSL is properly configured on your
Splunk server &amp;ndash; meaning you have proper certificates and DNS. If you are
accessing your Splunk instance by IP, &lt;code>Enable SSL&lt;/code> should be set to OFF.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Splunk.Flows.Upload

description: |
 This server side event monitoring artifact waits for new artifacts
 to be collected from endpoints and automatically uploads those to a
 Splunk server.
 To configure the event collector properly a couple steps need to be
 completed prior to setting up this event:
 1. Configure an index to ingest the data.
 * Go to Settings &amp;gt; Index.
 * New Index.
 2. Configure the collector.
 * Go to Settings &amp;gt; Data Inputs &amp;gt; HTTP Event Collector.
 * Add New.
 * Name does not matter, but ensure indexer acknowledgement is OFF.
 * Set `Selected Indexes` to the index configured in step 1.
 * Save API key for this event.
 3. Set Global settings.
 * Go to Settings &amp;gt; Data Inputs &amp;gt; HTTP Event Collector &amp;gt; Global Settings
 * Ensure `All Tokens` is set to ENABLED
 * Copy the HTTP Port Number for this event
 4. Configure your Splunk props.conf and tranforms.conf
 * Add the following to props.conf
 [vql]
 INDEXED_EXTRACTIONS = json
 DATETIME_CONFIG = CURRENT
 TZ = GMT
 category = Custom
 pulldown_type = 1
 TRANSFORMS-vql-sourcetype = vql-sourcetype,vql-timestamp
 TRUNCATE = 512000
 * Add the following to transforms.conf
 [vql-sourcetype]
 INGEST_EVAL = sourcetype=lower(src_artifact)
 [vql-timestamp]
 INGEST_EVAL = _time=case( \
 src_artifact="artifact_Linux_Search_FileFinder",strptime(CTime,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_System_VFS_ListDirectory",strptime(ctime,"%Y-%m-%dT%H:%M:%S.%NZ"), \
 src_artifact="artifact_Windows_Timeline_MFT",strptime(event_time,"%Y-%m-%dT%H:%M:%S.%NZ"), \
 src_artifact="artifact_Windows_NTFS_MFT",strptime(Created0x10,"%Y-%m-%dT%H:%M:%S.%NZ"), \
 src_artifact="artifact_Windows_EventLogs_Evtx",strptime(TimeCreated,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Custom_Windows_EventLogs_System_7045",strptime(TimeCreated,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_EventLogs_RDPAuth",strptime(EventTime,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Analysis_EvidenceOfExecution_UserAssist",strptime(LastExecution,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Analysis_EvidenceOfExecution_Amcache",strptime(KeyMTime,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_System_Amcache_InventoryApplicationFile",strptime(LastModified,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Search_FileFinder",strptime(CTime,"%Y-%m-%dT%H:%M:%S.%NZ"), \
 src_artifact="artifact_Windows_Applications_NirsoftBrowserViewer",strptime(Visited,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Registry_RecentDocs",strptime(LastWriteTime,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Forensics_UserAccessLogs_Clients",strptime(InsertDate,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Forensics_UserAccessLogs_DNS",strptime(LastSeen,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Forensics_UserAccessLogs_SystemIdentity",strptime(CreationTime,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Custom_Windows_Application_IIS_IISLogs",strptime(event_time,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_MacOS_Applications_Chrome_History",strptime(last_visit_time,"%Y-%m-%dT%H:%M:%SZ"), \
 src_artifact="artifact_Windows_Registry_UserAssist",strptime(LastExecution,"%Y-%m-%dT%H:%M:%SZ") \
 )


 &amp;gt; Note: `Enable SSL` only works if SSL is properly configured on your
 Splunk server -- meaning you have proper certificates and DNS. If you are
 accessing your Splunk instance by IP, `Enable SSL` should be set to OFF.
type: SERVER_EVENT

parameters:
 - name: ArtifactNameRegex
 default: "."
 type: regex
 description: Names of artifacts to upload to Splunk
 - name: url
 default: http://127.0.0.1:8088/services/collector
 description: |
 The Splunk collector url, this is typically the url of the Splunk
 server followed by :8088/services/collector.
 - name: token
 description: |
 API token given when the event collector is configured on Splunk.
 - name: index
 default: velociraptor
 description: |
 Index to ingest the data. This should be set up when configuring
 the event collector.
 - name: SkipVerify
 default: false
 type: bool
 description: |
 SSL configured with the event collector. This is false by default.
 - name: RootCerts
 description: |
 As a better alternative to skip_verify, allows root ca certs to
 be added here.

 - name: HostnameField
 description: Field to extract hostname from
 default: ClientId

 - name: TimestampField
 description: Field to extract timestamp from
 default: timestamp

sources:
 - query: |
 LET completions = SELECT * FROM watch_monitoring(
 artifact="System.Flow.Completion")
 WHERE Flow.artifacts_with_results =~ ArtifactNameRegex
 AND log(message=Flow.artifacts_with_results)

 LET organization &amp;lt;= org().name

 LET documents = SELECT * FROM foreach(row=completions,
 query={
 SELECT * FROM foreach(
 row=Flow.artifacts_with_results,
 query={
 SELECT *, _value AS Artifact,
 timestamp(epoch=now()) AS timestamp,
 ClientId, Flow.session_id AS FlowId,
 "artifact_" + regex_replace(source=_value,
 re='[/.]', replace='_') as src_artifact,
 organization as org_name
 FROM source(
 client_id=ClientId,
 flow_id=Flow.session_id,
 artifact=_value)
 })
 })

 SELECT * FROM splunk_upload(
 query = documents,
 url = url,
 token = token,
 index = index,
 skip_verify = SkipVerify,
 root_ca = RootCerts,
 hostname_field=HostnameField,
 timestamp_field=TimestampField
 )

&lt;/code>&lt;/pre></description></item><item><title>System.Flow.Archive</title><link>https://docs.velociraptor.app/artifact_references/pages/system.flow.archive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.flow.archive/</guid><description>&lt;p>An internal artifact that produces events for every flow completion
in the system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Flow.Archive
description: |
 An internal artifact that produces events for every flow completion
 in the system.

type: CLIENT_EVENT

&lt;/code>&lt;/pre></description></item><item><title>System.Flow.Completion</title><link>https://docs.velociraptor.app/artifact_references/pages/system.flow.completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.flow.completion/</guid><description>&lt;p>An internal artifact that produces events for every flow completion
in the system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Flow.Completion
description: |
 An internal artifact that produces events for every flow completion
 in the system.

type: CLIENT_EVENT

&lt;/code>&lt;/pre></description></item><item><title>System.Hunt.Archive</title><link>https://docs.velociraptor.app/artifact_references/pages/system.hunt.archive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.hunt.archive/</guid><description>&lt;p>An internal artifact that receives events when a hunt is archived.&lt;/p>
&lt;p>You can write a server event artifact to do something about the
hunts (like remove flows, generate zip file etc).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Hunt.Archive
description: |
 An internal artifact that receives events when a hunt is archived.

 You can write a server event artifact to do something about the
 hunts (like remove flows, generate zip file etc).

type: CLIENT_EVENT

&lt;/code>&lt;/pre></description></item><item><title>System.Hunt.Creation</title><link>https://docs.velociraptor.app/artifact_references/pages/system.hunt.creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.hunt.creation/</guid><description>&lt;p>An event artifact that fires when a user schedules a new hunt.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Hunt.Creation
description: |
 An event artifact that fires when a user schedules a new hunt.

type: SERVER_EVENT

&lt;/code>&lt;/pre></description></item><item><title>System.Hunt.Participation</title><link>https://docs.velociraptor.app/artifact_references/pages/system.hunt.participation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.hunt.participation/</guid><description>&lt;p>Endpoints may participate in hunts. This artifact collects which
hunt each system participated in.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Hunt.Participation
description: |
 Endpoints may participate in hunts. This artifact collects which
 hunt each system participated in.

# Will not be written but will be relayed between minions and server.
type: INTERNAL

&lt;/code>&lt;/pre></description></item><item><title>System.Upload.Completion</title><link>https://docs.velociraptor.app/artifact_references/pages/system.upload.completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.upload.completion/</guid><description>&lt;p>An internal artifact that produces events for every file that is
uploaded to the system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.Upload.Completion
description: |
 An internal artifact that produces events for every file that is
 uploaded to the system.

type: CLIENT_EVENT

&lt;/code>&lt;/pre></description></item><item><title>System.VFS.DownloadFile</title><link>https://docs.velociraptor.app/artifact_references/pages/system.vfs.downloadfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.vfs.downloadfile/</guid><description>&lt;p>This is an internal artifact used by the GUI to populate the
VFS. You may run it manually if you like, but typically it is
launched by the GUI when the user clicks the &amp;ldquo;Collect from client&amp;rdquo;
button at the file &amp;ldquo;Stats&amp;rdquo; tab.&lt;/p>
&lt;p>If you run it yourself (or via the API) the results will also be
shown in the VFS view.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.VFS.DownloadFile
description: |
 This is an internal artifact used by the GUI to populate the
 VFS. You may run it manually if you like, but typically it is
 launched by the GUI when the user clicks the "Collect from client"
 button at the file "Stats" tab.

 If you run it yourself (or via the API) the results will also be
 shown in the VFS view.

parameters:
 - name: Path
 description: The path of the file to download.
 default: /
 - name: Components
 type: json_array
 description: Alternatively, this is an explicit list of components.
 - name: Accessor
 default: file
 - name: Recursively
 type: bool
 description: |
 If specified, Path is interpreted as a directory and
 we download all files below it.

sources:
 - query: |
 LET download_one_file = if(
 condition=version(plugin="stat") &amp;gt; 1,
 then= {
 SELECT OSPath AS Path, Accessor,
 Size, upload(file=OSPath, accessor=Accessor) AS Upload
 FROM stat(filename=Components, accessor=Accessor)
 },
 else= {
 SELECT OSPath AS Path, Accessor,
 Size, upload(file=OSPath, accessor=Accessor) AS Upload
 FROM stat(filename=Path, accessor=Accessor)
 })

 LET download_recursive = if(
 condition=version(plugin="stat") &amp;gt; 1,
 then= {
 SELECT OSPath AS Path, Accessor,
 Size, upload(file=OSPath, accessor=Accessor) AS Upload
 FROM glob(globs="**", root=Components,
 accessor=Accessor, nosymlink=TRUE)
 WHERE Mode.IsRegular
 },
 else={
 SELECT OSPath AS Path, Accessor,
 Size, upload(file=OSPath, accessor=Accessor) AS Upload
 FROM glob(globs="**", root=Path, accessor=Accessor)
 WHERE Mode.IsRegular
 })

 SELECT Path, Accessor,
 Upload.Size AS Size,
 Upload.StoredSize AS StoredSize,
 Upload.Sha256 AS Sha256,
 Upload.Md5 AS Md5,
 Upload.Error AS Error,
 Path.Components AS _Components
 FROM if(condition=Recursively,
 then={ SELECT * FROM download_recursive},
 else={ SELECT * FROM download_one_file})

&lt;/code>&lt;/pre></description></item><item><title>System.VFS.Export</title><link>https://docs.velociraptor.app/artifact_references/pages/system.vfs.export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.vfs.export/</guid><description>&lt;p>Exports parts of the VFS in a server side collection.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.VFS.Export
description: |
 Exports parts of the VFS in a server side collection.

type: SERVER

parameters:
 - name: Path
 description: |
 A vfs path under which to search for file (NOTE: VFS paths start
 with the accessor name).
 - name: Components
 type: json_array
 default: '[]'
 description: |
 The top level to recurse from. NOTE: The first element in the
 list must be the accessor name.
 - name: ClientId
 description: The client id to apply the artifact on
 - name: FileGlob
 default: '**'
 description: |
 Only match the following files (default all of them) under the
 Path

sources:
 - query: |
 LET components &amp;lt;= Components || pathspec(parse=Path).Components
 SELECT Name, OSPath, Size, IsDir,
 Data.DownloadInfo.flow_id AS FlowId,
 if(condition=Data.DownloadInfo.flow_id,
 then=upload(accessor="vfs", file=OSPath)) AS Upload
 FROM glob(globs=FileGlob, root=components, accessor="vfs")
 WHERE NOT IsDir

&lt;/code>&lt;/pre></description></item><item><title>System.VFS.ListDirectory</title><link>https://docs.velociraptor.app/artifact_references/pages/system.vfs.listdirectory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/system.vfs.listdirectory/</guid><description>&lt;p>This is an internal artifact used by the GUI to populate the
VFS. You may run it manually if you like, but typically it is
launched by the GUI when a user clicks the &amp;ldquo;Refresh this directory&amp;rdquo;
button.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: System.VFS.ListDirectory
description: |
 This is an internal artifact used by the GUI to populate the
 VFS. You may run it manually if you like, but typically it is
 launched by the GUI when a user clicks the "Refresh this directory"
 button.

parameters:
 - name: Path
 description: The path of the file to download.
 default: "/"

 - name: Components
 type: json_array
 description: Alternatively, this is an explicit list of components.

 - name: Accessor
 default: file

 - name: Depth
 type: int
 default: 0

export: |
 -- Make the generator unique with the session id - so it can
 -- only be shared by the two sources in this collection.
 LET VFSGenerator = generate(name="vfs-" + _SessionId, query={
 SELECT * FROM vfs_ls(
 path="/", components=Components,
 accessor=Accessor, depth=Depth)
 }, delay=500) -- wait a while for both sources to connect.

sources:
 - precondition: SELECT * FROM info() WHERE version(plugin="vfs_ls") = 1
 name: Listing
 description: File listing of multiple directories in a single table.
 query: |
 SELECT OSPath AS _OSPath,
 Components AS _Components,
 Accessor AS _Accessor,
 Data AS _Data,
 Name, Size, Mode,
 Mtime as mtime,
 Atime as atime,
 Ctime as ctime,
 Btime as btime,
 Idx AS _Idx
 FROM VFSGenerator
 WHERE Stats = NULL

 - precondition: SELECT * FROM info() WHERE version(plugin="vfs_ls") = 1
 name: Stats
 description: |
 A list of summary objects dividing the Listing source into
 distinct directories.
 query: |
 SELECT Components,
 Accessor,
 Stats
 FROM VFSGenerator
 WHERE Stats != NULL

 - precondition: SELECT * FROM info() WHERE NOT version(plugin="vfs_ls")
 query: |
 // Glob &amp;gt; v2 accepts a component list for the root parameter.
 LET Path &amp;lt;= if(condition=version(plugin="glob") &amp;gt; 2 AND Components,
 then=Components, else=Path)

 // Old versions do not have the root parameter to glob()
 // Fixes https://github.com/Velocidex/velociraptor/issues/322
 LET LegacyQuery = SELECT OSPath as _OSPath,
 Accessor as _Accessor,
 Data as _Data,
 Name, Size, Mode.String AS Mode,
 Mtime as mtime,
 Atime as atime,
 Ctime as ctime
 FROM glob(globs=Path + if(condition=Depth,
 then=format(format='/**%v', args=Depth), else='/*'),
 accessor=Accessor)

 LET NewQuery = SELECT OSPath as _OSPath,
 Accessor as _Accessor,
 Data as _Data,
 Name, Size, Mode.String AS Mode,
 Mtime as mtime,
 Atime as atime,
 Ctime as ctime,
 Btime AS btime
 FROM glob(
 globs=if(condition=Depth,
 then=format(format='/**%v', args=Depth),
 else='/*'),
 root=Path,
 accessor=Accessor)

 SELECT * FROM if(
 condition=version(plugin="glob") &amp;gt;= 1,
 then=NewQuery,
 else=LegacyQuery)

&lt;/code>&lt;/pre></description></item><item><title>Triage.Collection.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/triage.collection.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/triage.collection.upload/</guid><description>&lt;p>A Generic uploader used by triaging artifacts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Triage.Collection.Upload
description: |
 A Generic uploader used by triaging artifacts.

parameters:
 - name: path
 description: This is the glob of the files we use.
 - name: type
 description: The type of files these are.
 - name: accessor
 default: file

sources:
 - query: |
 LET results = SELECT OSPath, Size,
 Mtime As Modifed,
 type AS Type,
 upload(file=OSPath,
 accessor=accessor,
 ctime=Ctime,
 mtime=Mtime) AS FileDetails
 FROM glob(globs=path, accessor=accessor)
 WHERE NOT IsDir

 SELECT OSPath, Size, Modifed, Type,
 FileDetails.Path AS ZipPath,
 FileDetails.Md5 as Md5,
 FileDetails.Sha256 as SHA256
 FROM results

&lt;/code>&lt;/pre></description></item><item><title>Triage.Collection.UploadTable</title><link>https://docs.velociraptor.app/artifact_references/pages/triage.collection.uploadtable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/triage.collection.uploadtable/</guid><description>&lt;p>A Generic uploader used by triaging artifacts. This is similar to
&lt;code>Triage.Collection.Upload&lt;/code> but uses a CSV table to drive it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Triage.Collection.UploadTable
description: |
 A Generic uploader used by triaging artifacts. This is similar to
 `Triage.Collection.Upload` but uses a CSV table to drive it.

parameters:
 - name: triageTable
 description: "A CSV table controlling upload. Must have the headers: Type, Accessor, Glob."
 type: csv
 default: |
 Type,Accessor,Glob

sources:
 - query: |
 LET results = SELECT OSPath, Size,
 Mtime As Modifed,
 Type,
 upload(file=OSPath,
 mtime=Mtime,
 ctime=Ctime,
 accessor=Accessor) AS FileDetails
 FROM glob(globs=split(string=Glob, sep=","), accessor=Accessor)
 WHERE NOT IsDir

 SELECT * FROM foreach(
 row=triageTable,
 query={
 SELECT OSPath, Size, Modifed, Type,
 FileDetails.Path AS ZipPath,
 FileDetails.Md5 as Md5,
 FileDetails.Sha256 as SHA256
 FROM results
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.ActiveDirectory.BloodHound</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.activedirectory.bloodhound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.activedirectory.bloodhound/</guid><description>&lt;p>This artifact allows deployment of the BloodHound collection tool Sharphound.&lt;/p>
&lt;p>BloodHound is a popular Active Directory Assessment tool that uses graph
theory to reveal the hidden and often unintended relationships. It can also be
used to identify and eliminate potentially risky domain configuration.&lt;/p>
&lt;p>The Sharphound collection is in json format and upload to the server for
additional processing.&lt;/p>
&lt;p>NOTE: Do not run this artifact as an unrestricted hunt. General recommendation
is to run this artifact on only a handful of machines in a typical domain,
then deduplicate output.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ActiveDirectory.BloodHound
description: |
 This artifact allows deployment of the BloodHound collection tool Sharphound.

 BloodHound is a popular Active Directory Assessment tool that uses graph
 theory to reveal the hidden and often unintended relationships. It can also be
 used to identify and eliminate potentially risky domain configuration.

 The Sharphound collection is in json format and upload to the server for
 additional processing.

 NOTE: Do not run this artifact as an unrestricted hunt. General recommendation
 is to run this artifact on only a handful of machines in a typical domain,
 then deduplicate output.


author: Matt Green - @mgreen27

reference:
 - https://github.com/BloodHoundAD/BloodHound
 - https://github.com/chryzsh/awesome-bloodhound

required_permissions:
 - EXECVE

tools:
 - name: SharpHound
 url: https://github.com/BloodHoundAD/BloodHound/raw/master/Collectors/SharpHound.exe

type: CLIENT

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- obtain hostname for output prefix
 LET hostname &amp;lt;= SELECT Fqdn FROM info()

 -- get context on target binary
 LET payload &amp;lt;= SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="SharpHound")

 -- build tempfolder for output
 LET tempfolder &amp;lt;= tempdir()

 -- execute payload
 LET deploy = SELECT * FROM execve(argv=[payload.OSPath[0],'--outputdirectory',
 tempfolder,'--nozip','--outputprefix',hostname.Fqdn[0] ])

 -- output rows
 SELECT * FROM if(condition= deploy.ReturnCode[0]= 0,
 then={
 SELECT Name, upload(file=OSPath,name=Name)
 FROM glob(globs="/*.json", root=tempfolder)
 },
 else=deploy)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Analysis.EvidenceOfDownload</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.analysis.evidenceofdownload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.analysis.evidenceofdownload/</guid><description>&lt;p>Simple artifact to find evidence of user download activity.&lt;/p>
&lt;p>Based on the Zone.Identifier alternate data stream that is created
alongside with the file downloaded from the internet or
intranet. Zone.Identifier is generated by applications when user
saves files to the local file system from differnet security zone.&lt;/p>
&lt;p>This artifact searches the directory provided for any file with
alternate data stream named Zone.Identifier and then lists all
files with zoneId = 3 or 4 and calculate the hash value of the file
and prints the content of Zone.Identifier alternate stream as it
could contain useful info in some cases.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Analysis.EvidenceOfDownload
description: |
 Simple artifact to find evidence of user download activity.

 Based on the Zone.Identifier alternate data stream that is created
 alongside with the file downloaded from the internet or
 intranet. Zone.Identifier is generated by applications when user
 saves files to the local file system from differnet security zone.

 This artifact searches the directory provided for any file with
 alternate data stream named Zone.Identifier and then lists all
 files with zoneId = 3 or 4 and calculate the hash value of the file
 and prints the content of Zone.Identifier alternate stream as it
 could contain useful info in some cases.


reference:
 - https://cyberforensicator.com/2018/06/26/where-did-it-come-from-forensic-analysis-of-zone-identifier/
 - https://www.sans.org/security-resources/posters/windows-forensic-analysis/170/download
 - https://www.csee.umbc.edu/courses/undergraduate/FYS102D/Recycle.Bin.Forensics.for.Windows7.and.Windows.Vista.pdf

author: M.Soheem @msoheem | Antonio Blescia (TheThMando)

type: CLIENT

parameters:
 - name: DirectoryPathGlob
 type: csv
 default: |
 Path
 C:/Users/*/Downloads/**/*
 C:/$Recycle.Bin/*/**/$R*

 - name: ZoneIdRegex
 description: A Regular expression to match the required zone (default Internet and Restricted Zones).
 default: "ZoneId=[34]"

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET glob_patterns = SELECT Path + ':Zone.Identifier' AS Glob FROM DirectoryPathGlob
 LET X = SELECT
 split(string=OSPath, sep=":Zone.Identifier")[0] AS DownloadedFilePath,
 Mtime,
 read_file(filename=OSPath, accessor="ntfs") AS _ZoneIdentifierContent
 FROM glob(globs=glob_patterns.Glob, accessor="ntfs")
 WHERE NOT IsDir

 SELECT *,
 if(condition=DownloadedFilePath, then=hash(path=DownloadedFilePath)) AS FileHash,
 parse_string_with_regex(regex="ZoneId=([^\\r\\n]+)", string=_ZoneIdentifierContent).g1 AS ZoneId,
 parse_string_with_regex(regex="HostUrl=([^\\r\\n]+)", string=_ZoneIdentifierContent).g1 AS HostUrl,
 parse_string_with_regex(regex="ReferrerUrl=([^\\r\\n]+)", string=_ZoneIdentifierContent).g1 AS ReferrerUrl
 FROM X

&lt;/code>&lt;/pre></description></item><item><title>Windows.Analysis.EvidenceOfExecution</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.analysis.evidenceofexecution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.analysis.evidenceofexecution/</guid><description>&lt;p>In many investigations it is useful to find evidence of program execution.&lt;/p>
&lt;p>This artifact combines the findings of several other collectors into
an overview of all program execution artifacts. The associated
report walks the user through the analysis of the findings.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Analysis.EvidenceOfExecution
description: |
 In many investigations it is useful to find evidence of program execution.

 This artifact combines the findings of several other collectors into
 an overview of all program execution artifacts. The associated
 report walks the user through the analysis of the findings.

sources:
 - name: UserAssist
 query: |
 SELECT * FROM Artifact.Windows.Registry.UserAssist()

 - name: Amcache
 query: |
 SELECT * FROM Artifact.Windows.Detection.Amcache()

 - name: Timeline
 query: |
 SELECT * FROM Artifact.Windows.Forensics.Timeline()

 - name: ShimCache
 query: |
 SELECT * FROM Artifact.Windows.Registry.AppCompatCache()

 - name: Prefetch
 query: |
 SELECT * FROM Artifact.Windows.Forensics.Prefetch()

 - name: Recent Apps
 query: |
 SELECT * FROM Artifact.Windows.Forensics.RecentApps()

&lt;/code>&lt;/pre></description></item><item><title>Windows.Application.Firefox.Downloads</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.application.firefox.downloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.application.firefox.downloads/</guid><description>&lt;p>Enumerate the users Firefox downloads.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Application.Firefox.Downloads
description: |
 Enumerate the users Firefox downloads.
author: Angry-Bender @angry-bender, based on Custom.Windows.Application.Firefox.History by Zach Stanford @svch0st
parameters:
 - name: placesGlobs
 default: \AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite
 - name: urlSQLQuery
 default: |
 SELECT * FROM moz_annos,moz_anno_attributes,moz_places WHERE moz_annos.place_id=moz_places.id AND moz_annos.anno_attribute_id=moz_anno_attributes.id
 - name: userRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET places_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(root=HomeDirectory, globs=placesGlobs)
 })

 LET metadata = SELECT * FROM foreach(row=places_files,
 query={
 SELECT parse_json(data=content)
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 WHERE name = 'downloads/metaData'
 })

 SELECT * FROM foreach(row=places_files,
 query={
 SELECT User,
 timestamp(epoch=dateAdded) as startTime,
 if(condition=name=~'metaData',
 then=timestamp(epoch=parse_json(data=content).endTime)
 ) AS endTime,
 timestamp(epoch=lastModified) as last_modified,
 id,
 name,
 url,
 place_id,
 if(condition=name=~'metaData',
 then=parse_json(data=content).fileSize
 ) AS fileSize,
 if(condition=name=~'metaData',
 then=parse_json(data=content).state
 ) AS state,
 if(condition=name=~'destinationFileURI',
 then=content
 ) AS localDirectory,
 flags,
 expiration,
 type
 FROM sqlite(
 file=FullPath,
 query=urlSQLQuery)
 ORDER BY last_modified DESC
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.ChocolateyPackages</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chocolateypackages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chocolateypackages/</guid><description>&lt;p>Chocolatey packages installed in a system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.ChocolateyPackages
description: Chocolatey packages installed in a system.
parameters:
 - name: ChocolateyInstall
 default: ""

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET SearchGlob = if(
 condition=ChocolateyInstall,
 then=ChocolateyInstall,

 -- Otherwise just use the environment.
 else=environ(var='ChocolateyInstall')) + '/lib/*/*.nuspec'

 LET files = SELECT OSPath,
 parse_xml(file=OSPath) AS Metadata
 -- Use the ChocolateyInstall parameter if it is set.

 FROM glob(globs=SearchGlob)

 SELECT * FROM if(
 condition=if(condition=ChocolateyInstall,
 then=ChocolateyInstall,
 else=environ(var="ChocolateyInstall")),
 then={
 SELECT OSPath,
 Metadata.package.metadata.id as Name,
 Metadata.package.metadata.version as Version,
 Metadata.package.metadata.summary as Summary,
 Metadata.package.metadata.authors as Authors,
 Metadata.package.metadata.licenseUrl as License
 FROM files
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Chrome.Cookies</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.cookies/</guid><description>&lt;p>Enumerate the users chrome cookies.&lt;/p>
&lt;p>The cookies are typically encrypted by the DPAPI using the user&amp;rsquo;s
credentials. Since Velociraptor is typically not running in the user
context we can not decrypt these. It may be possible to decrypt the
cookies off line.&lt;/p>
&lt;p>The pertinant information from a forensic point of view is the
user&amp;rsquo;s Created and LastAccess timestamp and the fact that the user
has actually visited the site and obtained a cookie.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Chrome.Cookies
description: |
 Enumerate the users chrome cookies.

 The cookies are typically encrypted by the DPAPI using the user's
 credentials. Since Velociraptor is typically not running in the user
 context we can not decrypt these. It may be possible to decrypt the
 cookies off line.

 The pertinant information from a forensic point of view is the
 user's Created and LastAccess timestamp and the fact that the user
 has actually visited the site and obtained a cookie.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future

parameters:
 - name: cookieGlobs
 default: \AppData\Local\Google\Chrome\User Data\*\Cookies
 - name: cookieSQLQuery
 default: |
 SELECT creation_utc, host_key, name, value, path, expires_utc,
 last_access_utc, encrypted_value
 FROM cookies
 - name: userRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET cookie_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(root=HomeDirectory, globs=cookieGlobs)
 })

 SELECT * FROM foreach(row=cookie_files,
 query={
 SELECT timestamp(winfiletime=creation_utc * 10) as Created,
 timestamp(winfiletime=last_access_utc * 10) as LastAccess,
 timestamp(winfiletime=expires_utc * 10) as Expires,
 host_key, name, path, value,
 base64encode(string=encrypted_value) as EncryptedValue
 FROM sqlite(
 file=OSPath,
 query=cookieSQLQuery)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Chrome.Extensions</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.extensions/</guid><description>&lt;p>Fetch Chrome extensions.&lt;/p>
&lt;p>Chrome extensions are installed into the user&amp;rsquo;s home directory. We
search for manifest.json files in a known path within each system
user&amp;rsquo;s home directory. We then parse the manifest file as JSON.&lt;/p>
&lt;p>Many extensions use locale packs to resolve strings like name and
description. In this case we detect the default locale and load
those locale files. We then resolve the extension&amp;rsquo;s name and
description from there.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Chrome.Extensions
description: |
 Fetch Chrome extensions.

 Chrome extensions are installed into the user's home directory. We
 search for manifest.json files in a known path within each system
 user's home directory. We then parse the manifest file as JSON.

 Many extensions use locale packs to resolve strings like name and
 description. In this case we detect the default locale and load
 those locale files. We then resolve the extension's name and
 description from there.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future


parameters:
 - name: extensionGlobs
 default: \AppData\Local\Google\Chrome\User Data\*\Extensions\*\*\manifest.json
 - name: userRegex
 default: .
 type: regex

sources:
 - precondition: |
 SELECT OS From info() where OS = 'windows'
 query: |
 /* For each user on the system, search for extension manifests
 in their home directory. */
 LET extension_manifests = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) as Directory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT OSPath, Mtime, Ctime, User, Uid
 FROM glob(root=Directory, globs=extensionGlobs)
 })

 /* If the Manifest declares a default_locale then we
 load and parse the messages file. In this case the
 messages are actually stored in the locale file
 instead of the main manifest.json file.
 */
 LET maybe_read_locale_file =
 SELECT * from if(
 condition={
 select * from scope() where Manifest.default_locale
 },
 then={
 SELECT Manifest,
 Uid, User,
 Filename as LocaleFilename,
 ManifestFilename,
 parse_json(data=Data) AS LocaleManifest
 FROM read_file(
 -- Munge the filename to get the messages.json path.
 filenames=regex_replace(
 source=ManifestFilename,
 replace="\\_locales\\" + Manifest.default_locale +
 "\\messages.json",
 re="\\\\manifest.json$"))
 },
 else={
 -- Just fill in empty Locale results.
 SELECT Manifest,
 Uid, User,
 "" AS LocaleFilename,
 "" AS ManifestFilename,
 "" AS LocaleManifest
 FROM scope()
 })

 LET parse_json_files = SELECT * from foreach(
 row={
 SELECT Filename as ManifestFilename,
 Uid, User,
 parse_json(data=Data) as Manifest
 FROM read_file(filenames=OSPath)
 },
 query=maybe_read_locale_file)

 LET parsed_manifest_files = SELECT * from foreach(
 row=extension_manifests,
 query=parse_json_files)

 SELECT Uid, User,

 /* If the manifest name contains __MSG_ then the real
 name is stored in the locale manifest. This condition
 resolves the Name column either to the main manifest or
 the locale manifest.
 */
 if(condition="__MSG_" in Manifest.name,
 then=get(item=LocaleManifest,
 member=regex_replace(
 source=Manifest.name,
 replace="$1",
 re="(?:__MSG_(.+)__)")).message,
 else=Manifest.name) as Name,

 if(condition="__MSG_" in Manifest.description,
 then=get(item=LocaleManifest,
 member=regex_replace(
 source=Manifest.description,
 replace="$1",
 re="(?:__MSG_(.+)__)")).message,
 else=Manifest.description) as Description,

 /* Get the Identifier and Version from the manifest filename */
 regex_replace(
 source=ManifestFilename,
 replace="$1",
 re="(?:.+Extensions\\\\([^\\\\]+)\\\\([^\\\\]+)\\\\manifest.json)$") AS Identifier,
 regex_replace(
 source=ManifestFilename,
 replace="$2",
 re="(?:.+Extensions\\\\([^\\\\]+)\\\\([^\\\\]+)\\\\manifest.json)$") AS Version,

 Manifest.author as Author,
 Manifest.background.persistent AS Persistent,
 regex_replace(
 source=ManifestFilename,
 replace="$1",
 re="(.+Extensions\\\\.+\\\\)manifest.json$") AS Path,

 Manifest.oauth2.scopes as Scopes,
 Manifest.permissions as Permissions,
 Manifest.key as Key

 FROM parsed_manifest_files

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Chrome.History</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.chrome.history/</guid><description>&lt;p>Enumerates a targets chrome history. Source based on Hindsight and
code review of
&lt;a href="https://source.chromium.org/chromium/chromium/src/&amp;#43;/master:components/history/core/browser/history_types.h" target="_blank" >https://source.chromium.org/chromium/chromium/src/+/master:components/history/core/browser/history_types.h&lt;/a>
.&lt;/p>
&lt;p>NOTE: Some research has shown that older browsers may not have this
table, then you should be treating it as you would in a traditional
investigation, this changes is aimed at taking advantage of the
newer tables to reduce false postitives.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Chrome.History
description: |
 Enumerates a targets chrome history. Source based on Hindsight and
 code review of
 https://source.chromium.org/chromium/chromium/src/+/master:components/history/core/browser/history_types.h.

 NOTE: Some research has shown that older browsers may not have this
 table, then you should be treating it as you would in a traditional
 investigation, this changes is aimed at taking advantage of the
 newer tables to reduce false postitives.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future


author: Angry-Bender @angry-bender
parameters:
 - name: historyGlobs
 default: \AppData\{Local,Roaming}\{Google\Chrome\User Data,Microsoft\Edge\User Data,BraveSoftware\Brave-Browser\User Data,Vivaldi\User Data,Opera Software\Opera*Stable}\*\History
 - name: urlSQLQuery
 default: |
 SELECT U.id AS id,
 U.url AS url,
 V.visit_time as visit_time,
 U.title AS title,
 U.visit_count,
 U.typed_count,
 U.last_visit_time, U.hidden,
 CASE VS.source
 WHEN 0 THEN 'Synced'
 WHEN 1 THEN 'Local'
 WHEN 2 THEN 'Extension'
 WHEN 3 THEN 'ImportFromFirefox'
 WHEN 4 THEN 'ImportFromSafari'
 WHEN 6 THEN 'ImportFromChrome/Edge'
 WHEN 7 THEN 'ImportFromEdgeHTML'
 ELSE 'Local'
 END Source,
 V.from_visit,
 strftime('%H:%M:%f',V.visit_duration/1000000.0, 'unixepoch') as visit_duration,
 V.transition
 FROM urls AS U
 JOIN visits AS V ON U.id = V.url
 LEFT JOIN visit_source AS VS on V.id = VS.id
 - name: userRegex
 default: .
 type: regex
 - name: URLRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET history_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(globs=historyGlobs, root=HomeDirectory)
 })

 SELECT * FROM foreach(row=history_files,
 query={
 SELECT User,
 id AS url_id,
 timestamp(winfiletime=visit_time * 10) AS visit_time,
 url as visited_url,
 title,visit_count,typed_count,
 timestamp(winfiletime=last_visit_time * 10) AS last_visit_time,
 hidden,
 from_visit AS from_url_id,
 Source,
 visit_duration,transition,
 timestamp(winfiletime=last_visit_time * 10) as _SourceLastModificationTimestamp,
 OSPath
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 })
 WHERE visited_url =~ URLRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Edge.Favicons</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.edge.favicons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.edge.favicons/</guid><description>&lt;p>Enumerate the users Microsoft Edge favicons.&lt;/p>
&lt;p>Tested against Chrome as well, replace Microsoft Edge with Google Chrome in the faviconsGlob&lt;/p>
&lt;p>Chrome Favicons are stored in the &amp;lsquo;Favicons&amp;rsquo; SQLite database, within
the &amp;lsquo;favicons&amp;rsquo;, &amp;lsquo;favicon_bitmaps&amp;rsquo; and &amp;lsquo;icon_mapping&amp;rsquo; tables. Older
versions of Chrome stored Favicons in a &amp;lsquo;Thumbnails&amp;rsquo; SQLite
database, within the &amp;lsquo;favicons&amp;rsquo; table.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Edge.Favicons
description: |
 Enumerate the users Microsoft Edge favicons.

 Tested against Chrome as well, replace Microsoft Edge with Google Chrome in the faviconsGlob

 Chrome Favicons are stored in the 'Favicons' SQLite database, within
 the 'favicons', 'favicon_bitmaps' and 'icon_mapping' tables. Older
 versions of Chrome stored Favicons in a 'Thumbnails' SQLite
 database, within the 'favicons' table.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future

references:
 - https://www.foxtonforensics.com/browser-history-examiner/chrome-history-location

author: Phill Moore, @phillmoore

parameters:
 - name: faviconsGlob
 default: /AppData/Local/Microsoft/Edge/User Data/*/Favicons

 - name: faviconsQuery
 default: |
 SELECT favicons.id AS ID,
 favicon_bitmaps.icon_id AS IconID,
 favicon_bitmaps.image_data as _image,
 HEX(favicon_bitmaps.image_data) as _image_hex,
 datetime( favicon_bitmaps.last_updated / 1000000 + ( strftime( '%s', '1601-01-01' ) ), 'unixepoch', 'localtime' ) AS LastUpdated,
 icon_mapping.page_url AS PageURL,
 favicons.url AS FaviconURL
 FROM favicons
 INNER JOIN icon_mapping
 INNER JOIN favicon_bitmaps
 ON icon_mapping.icon_id = favicon_bitmaps.icon_id
 AND favicons.id = favicon_bitmaps.icon_id
 ORDER BY favicons.id ASC
 - name: userRegex
 default: .
 type: regex

precondition: |
 SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET favicons_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(globs=faviconsGlob, root=HomeDirectory)
 })

 SELECT * FROM foreach(row=favicons_files,
 query={
 SELECT ID, IconID, LastUpdated, PageURL, FaviconURL,
 upload(accessor="data",
 file=_image,
 name=format(format="Image%v.png", args=ID)) AS Image, _image_hex, OSPath as _OSPath
 FROM sqlite(
 file=OSPath,
 query=faviconsQuery)
 })

column_types:
- name: Image
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Edge.History</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.edge.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.edge.history/</guid><description>&lt;p>Enumerate the users chrome history.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Edge.History
description: |
 Enumerate the users chrome history.

parameters:
 - name: historyGlobs
 default: \AppData\Local\Microsoft\Edge\User Data\*\History
 - name: urlSQLQuery
 default: |
 SELECT U.id AS id, U.url AS url, V.visit_time as visit_time,
 U.title AS title, U.visit_count, U.typed_count,
 U.last_visit_time, U.hidden, V.from_visit, strftime('%H:%M:%f',
 V.visit_duration/1000000.0, 'unixepoch') as visit_duration,
 V.transition FROM urls AS U JOIN visits AS V ON U.id = V.url
 - name: userRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 SELECT * FROM Artifact.Windows.Applications.Chrome.History(
 historyGlobs=historyGlobs, urlSQLQuery=urlSQLQuery,
 userRegex=userRegex)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Firefox.Downloads</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.firefox.downloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.firefox.downloads/</guid><description>&lt;p>Enumerate the users Firefox downloads.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Firefox.Downloads
description: |
 Enumerate the users Firefox downloads.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future

author: |
 Angry-Bender @angry-bender, based on
 Custom.Windows.Application.Firefox.History by Zach Stanford @svch0st

parameters:
 - name: placesGlobs
 default: \AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite
 - name: urlSQLQuery
 default: |
 SELECT * FROM moz_annos,moz_anno_attributes,moz_places WHERE moz_annos.place_id=moz_places.id AND moz_annos.anno_attribute_id=moz_anno_attributes.id
 - name: userRegex
 default: .
 type: regex
 - name: URLRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET places_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(root=HomeDirectory, globs=placesGlobs)
 })

 LET metadata = SELECT * FROM foreach(row=places_files,
 query={
 SELECT parse_json(data=content)
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 WHERE name = 'downloads/metaData'
 })

 SELECT * FROM foreach(row=places_files,
 query={
 SELECT User,
 timestamp(epoch=dateAdded) as startTime,
 if(condition=name=~'metaData',
 then=timestamp(epoch=parse_json(data=content).endTime)
 ) AS endTime,
 timestamp(epoch=lastModified) as last_modified,
 id,
 name,
 url,
 place_id,
 if(condition=name=~'metaData',
 then=parse_json(data=content).fileSize
 ) AS fileSize,
 if(condition=name=~'metaData',
 then=parse_json(data=content).state
 ) AS state,
 if(condition=name=~'destinationFileURI',
 then=content
 ) AS localDirectory,
 flags,
 expiration,
 type
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 ORDER BY last_modified DESC
 })
 WHERE url =~ URLRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.Firefox.History</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.firefox.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.firefox.history/</guid><description>&lt;p>Enumerate the users Firefox history.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.Firefox.History
description: |
 Enumerate the users Firefox history.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future


author: Zach Stanford @svch0st, Modified by @angry-bender
parameters:
 - name: placesGlobs
 default: \AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite
 - name: urlSQLQuery
 default: |
 SELECT *,url as url_visited FROM moz_historyvisits, moz_places WHERE moz_historyvisits.place_id=moz_places.id
 - name: userRegex
 default: .
 type: regex
 - name: URLRegex
 default: .
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET places_files = SELECT * from foreach(
 row={
 SELECT Uid, Name AS User,
 expand(path=Directory) AS HomeDirectory
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex
 },
 query={
 SELECT User, OSPath, Mtime
 FROM glob(root=HomeDirectory, globs=placesGlobs)
 })

 SELECT * FROM foreach(row=places_files,
 query={
 SELECT User, OSPath,
 timestamp(epoch=visit_date/1000000) as visit_time,
 place_id,url_visited,title,rev_host,visit_count,hidden,typed,description
 FROM sqlite(
 file=OSPath,
 query=urlSQLQuery)
 })
 WHERE url_visited =~ URLRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.IISLogs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.iislogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.iislogs/</guid><description>&lt;p>This artifact enables grep of IISLogs.
Parameters include SearchRegex and WhitelistRegex as regex terms.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.IISLogs
description: |
 This artifact enables grep of IISLogs.
 Parameters include SearchRegex and WhitelistRegex as regex terms.

author: "Matt Green - @mgreen27"

parameters:
 - name: IISLogFiles
 default: '*:/inetpub/logs/**3/*.log'
 - name: SearchRegex
 description: "Regex of strings to search in line."
 default: ' POST '
 type: regex
 - name: WhitelistRegex
 description: "Regex of strings to leave out of output."
 default:
 type: regex

sources:
 - precondition: SELECT OS From info() where OS = 'windows'

 query: |
 LET files = SELECT OSPath FROM glob(globs=IISLogFiles)

 SELECT * FROM foreach(row=files,
 query={
 SELECT Line, OSPath FROM parse_lines(filename=OSPath)
 WHERE
 Line =~ SearchRegex
 AND NOT if(condition= WhitelistRegex,
 then= Line =~ WhitelistRegex,
 else= FALSE)
 })

 notebook:
 - type: vql_suggestion
 name: IIS Groks
 template: |
 /*
 ### IIS grok

 Note: IIS doesnt have a standard logging format so Ive added some
 suggestions. Comment in preffered or add your modify your own.
 */

 LET target_grok = "%{TIMESTAMP_ISO8601:LogTimeStamp} %{IPORHOST:Site} %{WORD:Method} %{URIPATH:UriPath} %{NOTSPACE:QueryString} %{NUMBER:Port} %{NOTSPACE:Username} %{IPORHOST:Clienthost} %{NOTSPACE:Useragent} %{NOTSPACE:Referrer} %{NUMBER:Response} %{NUMBER:Subresponse} %{NUMBER:Win32status} %{NUMBER:Timetaken:int}"
 --LET target_grok = "%{TIMESTAMP_ISO8601:log_timestamp} %{IPORHOST:site} %{WORD:method} %{URIPATH:page} %{NOTSPACE:querystring} %{NUMBER:port} %{NOTSPACE:username} %{IPORHOST:clienthost} %{NOTSPACE:useragent} %{NOTSPACE:referer} %{NUMBER:response} %{NUMBER:subresponse} %{NUMBER:scstatus} %{NUMBER:timetaken:int}"
 --LET target_grok = "%{TIMESTAMP_ISO8601:log_timestamp} %{WORD:iisSite} %{NOTSPACE:computername} %{IPORHOST:site} %{WORD:method} %{URIPATH:page} %{NOTSPACE:querystring} %{NUMBER:port} %{NOTSPACE:username} %{IPORHOST:clienthost} %{NOTSPACE:protocol} %{NOTSPACE:useragent} %{NOTSPACE:referer} %{IPORHOST:cshost} %{NUMBER:response} %{NUMBER:subresponse} %{NUMBER:scstatus} %{NUMBER:bytessent:int} %{NUMBER:bytesrecvd:int} %{NUMBER:timetaken:int}"


 LET parsed = SELECT Fqdn, ClientId as _ClientId, Line as _Raw,
 grok(data=Line,grok=target_grok) as GrokParsed
 FROM source()

 SELECT * FROM foreach(row=parsed,
 query={ SELECT *, Fqdn, _Raw FROM GrokParsed })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.MegaSync</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.megasync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.megasync/</guid><description>&lt;p>This artifact will parse MEGASync logs and enables using regex to search for
entries of interest.&lt;/p>
&lt;p>With UploadLogs selected a copy of the logs are uploaded to the server.
SearchVSS enables search over VSS and dedup support.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.MegaSync
description: |
 This artifact will parse MEGASync logs and enables using regex to search for
 entries of interest.

 With UploadLogs selected a copy of the logs are uploaded to the server.
 SearchVSS enables search over VSS and dedup support.

author: "Matt Green - @mgreen27"

reference:
 - https://attack.mitre.org/techniques/T1567/002/

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: LogFiles
 default: 'C:\Users\*\AppData\Local\Mega Limited\MEGAsync\logs\*.log'
 - name: SearchRegex
 description: "Regex of strings to search in line."
 default: 'Transfer\s\(UPLOAD\)|upload\squeue|local\sfile\saddition\sdetected|Sync\s-\ssending\sfile|\"user\"'
 type: regex
 - name: WhitelistRegex
 description: "Regex of strings to leave out of output."
 default:
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

 - name: UploadLogs
 description: "Upload MEGASync logs."
 type: bool

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- Find target files
 LET files = SELECT *, OSPath as Source
 FROM glob(globs=LogFiles, accessor=Accessor)

 -- Collect all Lines in scope of regex search
 LET output = SELECT * FROM foreach(row=files,
 query={
 SELECT Line, OSPath,
 Mtime,
 Atime,
 Ctime,
 Size
 FROM parse_lines(filename=OSPath,accessor='file')
 WHERE TRUE
 AND Line =~ SearchRegex
 AND NOT if(condition= WhitelistRegex,
 then= Line=~WhitelistRegex,
 else = false)
 })
 GROUP BY Line

 SELECT
 Line as RawLine,
 OSPath
 FROM output


 - name: LogFiles
 query: |
 SELECT
 OSPath,
 if(condition=UploadLogs,
 then= upload(file=OSPath, accessor=Accessor)
 ) as Upload,
 'MEGAsync logfile' as Description,
 Mtime,
 Atime,
 Ctime,
 Size
 FROM output
 GROUP BY OSPath

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.NirsoftBrowserViewer</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.nirsoftbrowserviewer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.nirsoftbrowserviewer/</guid><description>&lt;p>This artifact wraps the Nirsoft BrowsingHistoryView tool - a tool
for parsing browser history from a variety of browsers.&lt;/p>
&lt;p>More information about the tool can be found here
&lt;a href="https://www.nirsoft.net/utils/browsing_history_view.html" target="_blank" >https://www.nirsoft.net/utils/browsing_history_view.html&lt;/a>
&lt;/p>
&lt;p>NOTE: This binary is treated as malware by many detection engines
since it is capable of dumping user passwords and search history!!!
Running it on the endpoint may (hopefully) trigger endpoint defences.&lt;/p>
&lt;p>BrowsingHistoryView v2.55 - View browsing history of your Web browsers
Copyright (c) 2012 - 2023 Nir Sofer&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.NirsoftBrowserViewer
description: |
 This artifact wraps the Nirsoft BrowsingHistoryView tool - a tool
 for parsing browser history from a variety of browsers.

 More information about the tool can be found here
 https://www.nirsoft.net/utils/browsing_history_view.html

 NOTE: This binary is treated as malware by many detection engines
 since it is capable of dumping user passwords and search history!!!
 Running it on the endpoint may (hopefully) trigger endpoint defences.

 BrowsingHistoryView v2.55 - View browsing history of your Web browsers
 Copyright (c) 2012 - 2023 Nir Sofer

tools:
 - name: NirsoftBrowsingHistoryView64
 url: https://github.com/Velocidex/Tools/raw/main/BrowsingHistoryView/BrowsingHistoryView-amd64.exe
 expected_hash: c50d3f139bc7ed05fb0f5e25671ec0268b577d5930f27964291cc8747970f2c3
 serve_locally: true

parameters:
 - name: HistorySource
 default: 1
 description: Source of history data (1=All users).
 - name: URLRegex
 default: .
 description: Filter URLs by this regex
 type: regex
 - name: DateAfter
 type: timestamp
 - name: DateBefore
 type: timestamp
 - name: AlsoUpload
 type: bool
 description: Also upload BrowsingHistoryView produced CSV file.
 - name: PARSE_TZ
 default: LOCAL
 description: Default timezone for parsing timestamps

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 LET CSVFile &amp;lt;= tempfile(extension='.csv')

 -- Download the binary and create a csv file to write on.
 LET tmp_exe = SELECT OSPath AS BinPath
 FROM Artifact.Generic.Utils.FetchBinary(ToolName="NirsoftBrowsingHistoryView64")

 LET results = SELECT CSVFile
 FROM foreach(row=tmp_exe,
 query={
 SELECT CSVFile,
 if(condition=AlsoUpload,
 then=upload(file=CSVFile,
 name="NirsoftBrowsingHistoryView.csv")) AS Upload
 FROM execve(argv=[
 BinPath,
 "/VisitTimeFilterType", "1",
 "/HistorySource", HistorySource, "/LoadIE", "1",
 "/LoadFirefox", "1", "/LoadChrome", "1",
 "/LoadSafari", "1",
 "/scomma", CSVFile, "/SaveDirect"])
 })
 WHERE Upload OR TRUE

 -- Filter the results by the user specs
 SELECT * FROM foreach(row=results,
 query={
 -- This timestamp is in US style time and local time... boo :-(
 SELECT *, timestamp(string=`Visit Time`,
 format="1/2/2006 3:04:05 PM") AS Visited
 FROM parse_csv(filename=CSVFile)
 })
 WHERE URL =~ URLRegex AND
 Visited &amp;gt; DateAfterTime AND
 Visited &amp;lt; DateBeforeTime

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.OfficeMacros</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.officemacros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.officemacros/</guid><description>&lt;p>Office macros are a favourite initial infection vector. Many users
click through the warning dialogs.&lt;/p>
&lt;p>This artifact scans through the given directory glob for common
office files. We then try to extract any embedded macros by parsing
the OLE file structure.&lt;/p>
&lt;p>If a macro calls an external program (e.g. Powershell) this is very
suspicious!&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.OfficeMacros
description: |
 Office macros are a favourite initial infection vector. Many users
 click through the warning dialogs.

 This artifact scans through the given directory glob for common
 office files. We then try to extract any embedded macros by parsing
 the OLE file structure.

 If a macro calls an external program (e.g. Powershell) this is very
 suspicious!

parameters:
 - name: officeExtensions
 default: "*.{xls,xlsm,doc,docx,ppt,pptm}"
 - name: officeFileSearchGlob
 default: C:\Users\**\
 description: The directory to search for office documents.

sources:
 - query: |
 SELECT * FROM foreach(
 row={
 SELECT OSPath FROM glob(globs=officeFileSearchGlob + officeExtensions)
 },
 query={
 SELECT * from olevba(file=OSPath)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.SBECmd</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.sbecmd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.sbecmd/</guid><description>&lt;p>Execute Eric Zimmerman&amp;rsquo;s SBECmd and return output for analysis.&lt;/p>
&lt;p>SBECmd is a CLI for analyzing shellbags data.&lt;/p>
&lt;p>Objective:&lt;/p>
&lt;ul>
&lt;li>Find which folders were accessed on the local machine, the
network, and/or removable devices. Evidence of previously
existing folders after deletion/overwrite. When certain folders
were accessed.&lt;/li>
&lt;/ul>
&lt;p>Interpretation:&lt;/p>
&lt;ul>
&lt;li>Stores information about which folders were most recently
browsed by the user.&lt;/li>
&lt;/ul>
&lt;p>NOTE: Velociraptor can now parse Shellbags natively with the
Windows.Forensics.Shellbags artifact.&lt;/p>
&lt;p>MITRE ATT&amp;amp;CK ID: TA0009 - Collection&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.SBECmd
description: |
 Execute Eric Zimmerman's SBECmd and return output for analysis.

 SBECmd is a CLI for analyzing shellbags data.

 Objective:

 - Find which folders were accessed on the local machine, the
 network, and/or removable devices. Evidence of previously
 existing folders after deletion/overwrite. When certain folders
 were accessed.

 Interpretation:

 - Stores information about which folders were most recently
 browsed by the user.

 NOTE: Velociraptor can now parse Shellbags natively with the
 Windows.Forensics.Shellbags artifact.

 MITRE ATT&amp;amp;CK ID: TA0009 - Collection

author: Eduardo Mattos - @eduardfir

reference:
 - https://github.com/EricZimmerman

type: CLIENT

tools:
 - name: SBECmd
 url: https://github.com/Velocidex/Tools/raw/main/SBECmd/ShellBagsExplorer/SBECmd.exe

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: userRegex
 default: .
 type: regex

 - name: UploadFiles
 description: "Select to Upload SBECmd Output files."
 type: bool

 - name: RemovePayload
 description: "Select to Remove Payload after execution."
 type: bool


sources:
 - query: |
 -- get context on target binary
 LET payload &amp;lt;= SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="SBECmd", IsExecutable=TRUE)

 -- build tempfolder for output
 LET tempfolder &amp;lt;= tempdir(remove_last=TRUE)

 -- get users with profiles
 LET UserProfiles = SELECT
 Uid, Name,
 expand(path=Directory) AS HomeDirectory, UUID, Mtime
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex and HomeDirectory =~ "Users"

 -- execute payload
 LET deploy &amp;lt;= SELECT * FROM foreach(row=UserProfiles,
 query={
 SELECT *, Name
 FROM execve(argv=[
 payload.OSPath[0],
 "-d", HomeDirectory,
 "--csv", tempfolder + "\\" + Name,
 "--dedupe"])
 })

 -- parse csvs
 SELECT * FROM foreach(row=deploy,
 query={
 SELECT *, Name as UserName
 FROM parse_csv(filename=tempfolder + "\\" + Name + "\\Deduplicated.csv")
 })

 - name: Uploads
 query: |
 SELECT * FROM chain(
 a={
 SELECT * FROM if(
 condition=UploadFiles,
 then={
 SELECT Name, upload(file=OSPath,
 name=relpath(base=tempfile, path=OSPath)) as FileDetails
 FROM glob(globs="/**", root=tempfolder)
 })
 },
 b={
 SELECT * FROM if(
 condition=RemovePayload,
 then={
 SELECT * FROM execve(argv=['powershell','Remove-Item',
 payload.OSPath[0],'-Force' ])
 })
 })
 WHERE Stdout =~ "SBECmd"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Applications.TeamViewer.Incoming</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.applications.teamviewer.incoming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.applications.teamviewer.incoming/</guid><description>&lt;p>Parses the TeamViewer Connections_incoming.txt log file.&lt;/p>
&lt;p>When inbound logging enabled, this file will show all inbound TeamViewer
connections.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Applications.TeamViewer.Incoming
description: |
 Parses the TeamViewer Connections_incoming.txt log file.

 When inbound logging enabled, this file will show all inbound TeamViewer
 connections.

author: Matt Green - @mgreen27

reference:
 - https://attack.mitre.org/techniques/T1219/
 - https://www.systoolsgroup.com/forensics/teamviewer/


type: CLIENT
parameters:
 - name: FileGlob
 default: C:\Program Files (x86)\TeamViewer\Connections_incoming.txt
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: TeamViewerIDRegex
 description: "Regex of TeamViewer ID"
 default: .
 type: regex
 - name: SourceHostRegex
 description: "Regex of source host"
 default: .
 type: regex
 - name: UserRegex
 description: "Regex of user"
 default: .
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- Build time bounds
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else="1600-01-01")
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else="2200-01-01")

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths &amp;lt;= SELECT OSPath FROM glob(
 globs=expand(path=FileGlob), accessor=Accessor)

 LET parse_log(OSPath, Accessor) = SELECT OSPath,
 parse_string_with_regex(
 string=Line,
 regex="^(?P&amp;lt;TeamViewerID&amp;gt;^\\d+)\\s+"+
 "(?P&amp;lt;SourceHost&amp;gt;.+)\\s" +
 "(?P&amp;lt;StartTime&amp;gt;\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}:\\d{2})\\s" +
 "(?P&amp;lt;EndTime&amp;gt;\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}:\\d{2})\\s" +
 "(?P&amp;lt;User&amp;gt;.+)\\s+" +
 "(?P&amp;lt;ConnectionType&amp;gt;[^\\s]+)\\s+" +
 "(?P&amp;lt;ConnectionID&amp;gt;.+)$") as Record
 FROM parse_lines(filename=OSPath, accessor=Accessor)
 WHERE Line
 AND Record.TeamViewerID =~ TeamViewerIDRegex
 AND Record.SourceHost =~ SourceHostRegex
 AND Record.User =~ UserRegex

 -- function returning IOC hits
 LET logsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT *, timestamp(epoch=Record.StartTime,
 format="02-01-2006 15:04:05") AS StartTime,
 timestamp(epoch=Record.EndTime,
 format="02-01-2006 15:04:05") AS EndTime
 FROM parse_log(OSPath=OSPath, Accessor=Accessor)
 WHERE StartTime &amp;lt; DateBeforeTime
 AND StartTime &amp;gt; DateAfterTime
 AND EndTime &amp;lt; DateBeforeTime
 AND EndTime &amp;gt; DateAfterTime
 })

 SELECT
 Record.TeamViewerID as TeamViewerID,
 Record.SourceHost as SourceHost,
 StartTime,
 EndTime,
 Record.User as User,
 Record.ConnectionType as ConnectionType,
 Record.ConnectionID as ConnectionID,
 OSPath
 FROM logsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Attack.ParentProcess</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.attack.parentprocess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.attack.parentprocess/</guid><description>&lt;p>Maps the Mitre Att&amp;amp;ck framework process executions into artifacts.&lt;/p>
&lt;p>NOTE: This artifact uses the process tracker. If you also enable the
Windows.Events.TrackProcesses or Windows.Events.TrackProcessesBasic
artifacts, this will be able to retrieve information about exited
processes.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Attack.ParentProcess
description: |
 Maps the Mitre Att&amp;amp;ck framework process executions into artifacts.

 NOTE: This artifact uses the process tracker. If you also enable the
 Windows.Events.TrackProcesses or Windows.Events.TrackProcessesBasic
 artifacts, this will be able to retrieve information about exited
 processes.

reference:
 - https://www.sans.org/security-resources/posters/hunt-evil/165/download
 - https://github.com/teoseller/osquery-attck/blob/master/windows-incorrect_parent_process.conf

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: lookupTable
 type: csv
 description: |
 A table mapping a process name to its expected parents. Both
 columns are regular expressions. The ProcessName must appear
 only once - you can specify multiple possible parents using
 regular expressions patterns.

 default: |
 ProcessName,ParentRegex
 smss.exe,System
 runtimebroker.exe,svchost.exe
 taskhostw.exe,svchost.exe
 services.exe,wininit.exe
 lsass.exe,wininit.exe
 svchost.exe,services.exe
 cmd.exe,explorer.exe
 powershell.exe,explorer.exe
 iexplore.exe,explorer.exe
 firefox.exe,(firefox|explorer).exe
 chrome.exe,(chrome|explorer).exe

sources:
 - query: |
 SELECT * FROM foreach(row=lookupTable,
 query={
 SELECT Name AS ActualProcessName,
 process_tracker_get(id=Ppid).Data.Name AS ActualParentName,
 Pid, Ppid,
 CommandLine,
 StartTime,
 EndTime,
 Exe,
 ParentRegex as ExpectedParentName,
 Username,
 join(array=process_tracker_callchain(id=Pid).Data.Name,
 sep=" -&amp;gt; ") AS CallChain
 FROM process_tracker_pslist()
 WHERE ActualProcessName =~ ProcessName
 AND ActualParentName
 AND NOT ActualParentName =~ ParentRegex
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Attack.Prefetch</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.attack.prefetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.attack.prefetch/</guid><description>&lt;p>Maps the Mitre Att&amp;amp;ck framework process executions into
artifacts. This pack was generated from
&lt;a href="https://github.com/teoseller/osquery-attck" target="_blank" >https://github.com/teoseller/osquery-attck&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Attack.Prefetch
description: |
 Maps the Mitre Att&amp;amp;ck framework process executions into
 artifacts. This pack was generated from
 https://github.com/teoseller/osquery-attck

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 SELECT Name, ModTime, Mtime AS modified
 FROM glob(globs="C:/Windows/Prefetch/*")

# Reports can be MONITORING_DAILY, CLIENT, SERVER_EVENT
reports:
 - type: CLIENT
 parameters:
 - name: lookupTable
 type: csv
 default: |
 signature,description
 attrib,Attrib Execute is usually used to modify file attributes - ATT&amp;amp;CK T1158
 schtasks.exe,Schtasks Execute: usaullay used to create a scheduled task - ATT&amp;amp;CK T1053:S0111
 taskeng.exe,taskeng Execute: usaullay used to create a scheduled task - ATT&amp;amp;CK T1053
 tscon.exe,tscon.exe Execute: usaullay used to Terminal Services Console - ATT&amp;amp;CK T1076
 mstsc.exe,mstsc.exe Execute: usaullay used to perform a RDP Session - ATT&amp;amp;CK T1076
 at.exe,Schtasks Execute: usaullay used to create a scheduled task - ATT&amp;amp;CK T1053:S0110
 tasklist.exe,Tasklist Execute: usaullay used to list task - ATT&amp;amp;CK T1057:T1063:T1007:S0057
 taskkill.exe,Taskkill Execute: usaullay used to kill task
 mshta.exe,Mshta Execute: is a utility that executes Microsoft HTML Applications (HTA) - ATT&amp;amp;CK T1170
 whoami.exe,Whoami Execute: used to prints the effective username of the current user
 xcopy.exe,Xcopy Execute: is used for copying multiple files or entire directory trees from one directory to another and for copying files across a network.
 esentutl.exe,Esentutl Execute: is a legitimate built-in command-line program it could be used to create a exe from dump raw source.
 net.exe,Net Execute: is used in command-line operations for control of users: groups: services: and network connections - ATT&amp;amp;CK T1126:T1087:T1201:T1069:S0039:T1018:T1007:T1124
 vssadmin.exe,Vssadmin Execute: usaullay used to execute activity on Volume Shadow copy
 InstallUtil.exe,InstallUtil Execute: InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries - ATT&amp;amp;CK T1118
 cmstp.exe,CMSTP Execute: The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. - ATT&amp;amp;CK T1191
 cmd.exe,Command-Line Interface Execute: CMD execution - ATT&amp;amp;CK T1059
 cscript.exe,Command-Line Interface Execute: Cscript execution starts a script so that it runs in a command-line environment. - ATT&amp;amp;CK T1216
 powershell.exe,POWERSHELL Execute: is a powerful interactive command-line interface and scripting environment included in the Windows operating system - ATT&amp;amp;CK T1086
 regsvr32.exe,POWERSHELL Execute: is a powerful interactive command-line interface and scripting environment included in the Windows operating system - ATT&amp;amp;CK T1117
 PsExec.exe,PsExec Execute: is a free Microsoft tool that can be used to execute a program on another computer. - ATT&amp;amp;CK T1035:S0029
 runas.exe,Runas Execute: Allows a user to run specific tools and programs with different permissions than the user's current logon provides. - ATT&amp;amp;CK T1134
 bitsadmin.exe,Bitsadmin Execute: Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth: asynchronous file transfer mechanism exposed through Component Object Model (COM) - ATT&amp;amp;CK T1197:S0190
 certutil.exe,Certutil Execute: Certutil.exe is a legitimate built-in command-line program to manage certificates in Windows - ATT&amp;amp;CK T1105:T1140:T1130:S0160
 netsh.exe,Netsh Execute: Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system - ATT&amp;amp;CK T1128:T1063:S0108
 netstat.exe,Netstat Execute: is an operating system utility that displays active TCP connections: listening ports: and network statistics. - ATT&amp;amp;CK T1049:S0104
 reg.exe,Reg Execute: Reg is a Windows utility used to interact with the Windows Registry. - ATT&amp;amp;CK T1214:T1012:T1063:S0075
 regedit.exe,Regedit Execute: is a Windows utility used to interact with the Windows Registry. - ATT&amp;amp;CK T1214
 systeminfo.exe,Systeminfo Execute: Systeminfo is a Windows utility that can be used to gather detailed information about a computer. - ATT&amp;amp;CK T1082:S0096
 sc.exe,SC.exe Execute: Service Control - Create: Start: Stop: Query or Delete any Windows SERVICE. . - ATT&amp;amp;CK T1007


 template: |
 {{ .Description }}

 The below shows any prefetch files of interest and what they
 could potentially mean.

 {{ define "query" }}
 LET lookup &amp;lt;= SELECT * FROM lookupTable
 {{ end }}

 {{ define "data"}}
 LET data &amp;lt;= SELECT * FROM source()
 {{ end }}

 {{ range (Query "data" "query" "SELECT * FROM lookup") }}
 {{ $rows := Query (printf "SELECT * FROM source() WHERE Name =~ '%v'" (Get . "signature") ) }}
 {{ if $rows }}

 ## {{ Get $rows "0.Name" }}
 Modified on {{ Get $rows "0.ModTime" }}.

 {{ Get . "description" }}

 {{ end }}
 {{ end }}

 # Timeline

 {{ Query "SELECT modified * 1000, Name FROM foreach(row=lookup, query={ SELECT * FROM data WHERE Name =~ signature})" | Timeline }}

&lt;/code>&lt;/pre></description></item><item><title>Windows.Attack.UnexpectedImagePath</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.attack.unexpectedimagepath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.attack.unexpectedimagepath/</guid><description>&lt;p>Some malware are hiding in plain text by masqurading a legitimate
executable name.&lt;/p>
&lt;p>This artifact looks for processes with known names that are being
loaded from unexpected locations.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Attack.UnexpectedImagePath

description: |
 Some malware are hiding in plain text by masqurading a legitimate
 executable name.

 This artifact looks for processes with known names that are being
 loaded from unexpected locations.

reference:
 - https://www.sans.org/posters/hunt-evil/
 - https://github.com/teoseller/osquery-attck/blob/master/windows-incorrect_path_process.conf

author: Amged Wageh

parameters:
 - name: expected_paths
 type: csv
 default: |
 ProcName,ExpectedPath
 csrss.exe,c:\windows\system32\csrss.exe
 smss.exe,c:\windows\system32\smss.exe
 services.exe,c:\windows\system32\services.exe
 wininit.exe,c:\windows\system32\wininit.exe
 svchost.exe,c:\windows\system32\svchost.exe
 svchost.exe,c:\windows\syswow64\svchost.exe
 runtimebroker.exe,c:\windows\system32\runtimebroker.exe
 lsaiso.exe,c:\windows\system32\lsaiso.exe
 taskhostw.exe,c:\windows\system32\taskhostw.exe
 lsass.exe,c:\windows\system32\lsass.exe
 winlogon.exe,c:\windows\system32\winlogon.exe
 explorer.exe,c:\windows\explorer.exe
 explorer.exe,c:\windows\syswow64\explorer.exe
 conhost.exe,c:\windows\system32\conhost.exe
 dllhost.exe,c:\windows\system32\dllhost.exe
 dllhost.exe,c:\windows\syswow64\dllhost.exe
 wmiprvse.exe,c:\windows\system32\wbem\wmiprvse.exe
 wmiprvse.exe,c:\windows\syswow64\wbem\wmiprvse.exe

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET expected_paths_lookup &amp;lt;= memoize(key="ProcName", query={
 SELECT ProcName, enumerate(items=ExpectedPath) AS Path
 FROM expected_paths
 GROUP BY ProcName
 })

 LET suspicious_processes = SELECT Pid AS PID, Name AS ProcessName, Ppid AS PPID,
 Exe AS ImagePath, CommandLine, Username, StartTime,
 if(condition=EndTime&amp;lt;StartTime, then="", else=EndTime) AS EndTime,
 get(item=expected_paths_lookup, field=Name).Path AS ExpectedPaths,
 process_tracker_callchain(id=Pid) AS CallChain,
 process_tracker_get(id=Ppid) AS Parent
 FROM process_tracker_pslist()
 WHERE ImagePath != "" AND ExpectedPaths AND
 NOT lowcase(string=ImagePath) IN ExpectedPaths

 SELECT PID, ProcessName, ImagePath, CommandLine, Username, StartTime, EndTime,
 PPID, Parent.Data.Name As ParentProcessName,
 Parent.Data.Exe As ParentImagePath,
 Parent.Data.CommandLine As ParentCommandLine,
 Parent.Data.Username As ParentUsername,
 Parent.StartTime As ParentStartTime,
 if(condition=Parent.EndTime&amp;lt;Parent.StartTime, then=NULL, else=EndTime) AS ParentEndTime,
 CallChain.Data AS _CallChain,
 { SELECT Pid, Name, Ppid, Exe,
 CommandLine, Username, StartTime, EndTime
 FROM
 foreach(row=process_tracker_children(id=PID).Data)
 } AS SubProcesses
 FROM suspicious_processes

&lt;/code>&lt;/pre></description></item><item><title>Windows.Carving.CobaltStrike</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.carving.cobaltstrike/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.carving.cobaltstrike/</guid><description>&lt;p>This artifact extracts cobalt strike configuration from a byte stream, process
or file on disk such as a process dump. Best used as a triage step against a
detection of a cobalt strike beacon via a yara process scan.&lt;/p>
&lt;p>The User can define bytes, file glob, process name or pid regex as a target. The
content will search for a configuration pattern, extract a defined byte size,
xor with discovered key, then attempt configuration extraction.&lt;/p>
&lt;ul>
&lt;li>Cobalt Strike beacon configuration is typically XORed with 0x69 or 0x2e
(depending on version) but trivial to change.&lt;/li>
&lt;li>Configuration is built in a typical index / type / length / value structure
with either big endian values or zero terminated strings.&lt;/li>
&lt;li>If no beacon is found, parser will fallback to CobaltStrike Shellcode analysis.&lt;/li>
&lt;/ul>
&lt;p>This content simply carves the configuration and does not unpack files on
disk. That means pointing this artifact as a packed or obfuscated file may not
obtain the expected results.&lt;/p>
&lt;p>Unpacking later version.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Carving.CobaltStrike
author: Matt Green - @mgreen27
description: |
 This artifact extracts cobalt strike configuration from a byte stream, process
 or file on disk such as a process dump. Best used as a triage step against a
 detection of a cobalt strike beacon via a yara process scan.

 The User can define bytes, file glob, process name or pid regex as a target. The
 content will search for a configuration pattern, extract a defined byte size,
 xor with discovered key, then attempt configuration extraction.

 - Cobalt Strike beacon configuration is typically XORed with 0x69 or 0x2e
 (depending on version) but trivial to change.
 - Configuration is built in a typical index / type / length / value structure
 with either big endian values or zero terminated strings.
 - If no beacon is found, parser will fallback to CobaltStrike Shellcode analysis.

 This content simply carves the configuration and does not unpack files on
 disk. That means pointing this artifact as a packed or obfuscated file may not
 obtain the expected results.

 Unpacking later version.

reference:
 - https://attack.mitre.org/software/S0154/
 - https://blog.didierstevens.com/2020/11/07/1768-k/

parameters:
 - name: TargetBytes
 default:
 - name: TargetFileGlob
 default:
 - name: PidRegex
 default: .
 type: regex
 - name: ProcessRegex
 default: .
 type: regex
 - name: ExtractBytes
 type: int
 default: 10000
 - name: BruteXor
 type: bool
 description: Select to attempt brute forcing Xor byte in config. Default is 0x2e or 0x69.
 - name: IncludeDecodedData
 type: bool
 description: Select to include decoded data in output.
 - name: FindConfigTemplate
 type: hidden
 default: |
 rule cobalt_strike_beacon {
 strings:
 $REPLACEME

 condition:
 any of them
 }
 - name: FindShellcode
 type: hidden
 default: |
 rule cobalt_strike_shellcode {
 strings:
 $header = { FC }
 $s1 = "hwini"
 $s2 = "hws2_"
 $s3 = "wininet"

 condition:
 ( $header at 0 and filesize &amp;lt; 4096 )
 or any of ($s*) // we enact offset limits in VQL ( 0..4096 )
 }
 - name: FindSleepFunction
 type: hidden
 default: |
 rule cobalt_strike_sleepfunction {
 strings:
 $x64 = { 4C 8B 53 08 45 8B 0A 45 8B 5A 04 4D 8D 52 08 45 85 C9 75 05 45 85 DB 74 33 45 3B CB 73 E6 49 8B F9 4C 8B 03 }
 $x86 = { 8B 46 04 8B 08 8B 50 04 83 C0 08 89 55 08 89 45 0C 85 C9 75 04 85 D2 74 23 3B CA 73 E6 8B 06 8D 3C 08 33 D2 }

 condition:
 any of them
 }

export: |
 LET PROFILE = '''[
 [CobaltConfig, 0, [
 # 0x0001:BeaconType, 0x0001:Type, 0x0002:Length
 ["BeaconType", 6, "Enumeration", {
 "type": "uint16b",
 "choices": {
 "0": "windows-beacon_http-reverse_http",
 "1": "windows-beacon_dns-reverse_http",
 "2": "windows-beacon_smb-bind_pipe",
 "8": "windows-beacon_https-reverse_https",
 "16": "windows-beacon_tcp-bind_tcp"
 }
 }],

 # 0x0002:Port, 0x0001:Type, 0x0002:Length
 ["__port_prefix", 0, "String",{"term_hex": "000200010002", length: 10000, max_length: 10000}],
 ["Port", "x=&amp;gt;len(list=x.__port_prefix) + 6", "uint16b"],

 # 0x0003:Sleeptime,0x0002:Type, 0x0004:Length
 ["__sleeptime_prefix", 0, "String", {"term_hex": "000300020004", length: 10000, max_length: 10000}],
 ["Sleeptime", "x=&amp;gt;len(list=x.__sleeptime_prefix) + 6", "uint32b"],

 # 0x0004:Maxgetsize, 0x0002:Type, 0x0004:Length
 ["__maxgetsize_prefix", 0, "String",{"term_hex": "000400020004", length: 10000, max_length: 10000}],
 ["Maxgetsize", "x=&amp;gt;len(list=x.__maxgetsize_prefix) + 6", "uint32b"],

 # 0x0005:Jitter, 0x0001:Type, 0x0002:Length
 ["__jitter_prefix", 0, "String",{"term_hex": "000500010002", length: 10000, max_length: 10000}],
 ["Jitter", "x=&amp;gt;len(list=x.__jitter_prefix) + 6", "uint16b"],

 # 0x0006:MaxDns, 0x0001:Type, 0x0002:Length
 ["__maxdns_prefix", 0, "String",{"term_hex": "000600010002", length: 10000, max_length: 10000}],
 ["MaxDns", "x=&amp;gt;len(list=x.__maxdns_prefix) + 6", "uint16b"],

 # 0x0007:Publickey,0x0003:Type,
 ["__publickey_prefix", 0, "String",{"term_hex": "000700030100", length: 10000, max_length: 10000}],
 ["__publickey_raw", "x=&amp;gt;len(list=x.__publickey_prefix) + 6", "String",{"term_hex":"00000008"}],
 ["PublicKey", "x=&amp;gt;len(list=x.__publickey_prefix) + 6", "Value",{"value":"x=&amp;gt;format(format='% x',args=x.__publickey_raw)"}],

 # 0x0008:server/get-uri,0x0003:Type,
 ["__c2server_prefix", 0, "String",{"term_hex": "00080003", length: 10000, max_length: 10000}],
 ["C2Server", "x=&amp;gt;len(list=x.__c2server_prefix) + 6", "String"],

 # 0x0009:useragent,0x0003:Type,
 ["__useragent_prefix", 0, "String",{"term_hex": "00090003", length: 10000, max_length: 10000}],
 ["UserAgent", "x=&amp;gt;len(list=x.__useragent_prefix) + 6", "String"],

 # 0x000a:PostUri,0x0003:Type,
 ["__PostUri_prefix", 0, "String", {"term_hex": "000a0003", length: 10000, max_length: 10000}],
 ["PostURI", "x=&amp;gt;len(list=x.__PostUri_prefix) + 6", "String"],

 # 0x000b:Malleable_C2_Instructions,0x0003:Type, adding length check as not sure if we can rely on termination
 ["__Malleable_C2_Instructions_prefix", 0, "String",{"term_hex": "000b0003", length: 10000, max_length: 10000}],
 ["__Malleable_C2_Instructions_length","x=&amp;gt;len(list=x.__Malleable_C2_Instructions_prefix) + 4","uint16b"],
 ["__Malleable_C2_Instructions", "x=&amp;gt;len(list=x.__Malleable_C2_Instructions_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__Malleable_C2_Instructions_length"}],
 ["MalleableC2Instructions",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__Malleable_C2_Instructions, re='[^ -~\\r\\n]', replace='')])" }],
 #["Malleable_C2_Instructions",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__Malleable_C2_Instructions)" }], #uncomment to return base64 encoded raw Malleable_C2_Instructions

 # 0x000c:HttpGetHeader,0x0003:Type, adding length check as we can not rely on termination
 ["__HttpGetHeader_prefix", 0, "String",{"term_hex": "000c0003", length: 10000, max_length: 10000}],
 ["__HttpGetHeader_length","x=&amp;gt;len(list=x.__HttpGetHeader_prefix) + 4","uint16b"],
 ["__HttpGetHeader","x=&amp;gt;len(list=x.__HttpGetHeader_prefix) + 6","String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__HttpGetHeader_length"}],
 ["HttpGetHeader",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__HttpGetHeader, re='[^ -~\\r\\n]', replace='')])" }],
 #["HttpGetHeader",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__HttpGetHeader)" }], #uncomment to return base64 encoded raw HttpGetHeader

 # 0x000d:HttpPostHeader,0x0003:Type, adding length check as we can not rely on termination
 ["__http_post_header_prefix", 0, "String",{"term_hex": "000d0003", length: 10000, max_length: 10000}],
 ["__HttpPostHeader_length","x=&amp;gt;len(list=x.__http_post_header_prefix) + 4","uint16b"],
 ["__HttpPostHeader","x=&amp;gt;len(list=x.__http_post_header_prefix) + 6","String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__HttpPostHeader_length"}],
 ["HttpPostHeader",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__HttpPostHeader, re='[^ -~\\r\\n]', replace='')])" }],
 #["HttpPostHeader",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__HttpPostHeader)" }], #uncomment to return base64 encoded raw HttpPostHeader

 # 0x000e:SpawnTo,0x0003:Type # Adding length check as we can not rely on termination
 ["__SpawnTo_header_prefix", 0, "String",{"term_hex": "000e0003", length: 10000, max_length: 10000}],
 ["__SpawnTo_header_length","x=&amp;gt;len(list=x.__SpawnTo_header_prefix) + 4","uint16b"],
 ["__SpawnTo", "x=&amp;gt;len(list=x.__SpawnTo_header_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__SpawnTo_header_length"}],
 ["SpawnTo",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__SpawnTo, re='[^ -~\\r\\n]', replace='')])" }],
 #["SpawnTo",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__SpawnTo)" }], #uncomment to return base64 encoded raw SpawnTo

 # 0x000f:PipeName,0x0003:Type
 ["__pipename_prefix", 0, "String",{"term_hex": "000f0003", length: 10000, max_length: 10000}],
 ["Pipename", "x=&amp;gt;len(list=x.__pipename_prefix) + 6", "String",{"term_hex":"0000"}],

 # 0x0010:KillDateYear, 0x0001:Type, 0x0002:Length
 ["__KillDateYear_prefix", 0, "String",{"term_hex": "001000010002", length: 10000, max_length: 10000}],
 ["KillDateYear", "x=&amp;gt;len(list=x.__KillDateYear_prefix) + 6", "uint16b"],

 # 0x0011:KillDateMonth, 0x0001:Type, 0x0002:Length
 ["__KillDateMonth_prefix", 0, "String",{"term_hex": "001200010002", length: 10000, max_length: 10000}],
 ["KillDateMonth", "x=&amp;gt;len(list=x.__KillDateMonth_prefix) + 6", "uint16b"],

 # 0x0012:KillDateDay, 0x0001:Type, 0x0002:Length
 ["__KillDateDay_prefix", 0, "String",{"term_hex": "001200010002", length: 10000, max_length: 10000}],
 ["KillDateDay", "x=&amp;gt;len(list=x.__KillDateDay_prefix) + 6", "uint16b"],

 # 0x0013:DNSIdle, 0x0002:Type, 0x0004:Length
 ["__DNSIdle_prefix", 0, "String",{"term_hex": "001300020004", length: 10000, max_length: 10000}],
 ["__DNSIdle1", "x=&amp;gt;len(list=x.__DNSIdle_prefix) + 6", "uint8"],
 ["__DNSIdle2", "x=&amp;gt;len(list=x.__DNSIdle_prefix) + 7", "uint8"],
 ["__DNSIdle3", "x=&amp;gt;len(list=x.__DNSIdle_prefix) + 8", "uint8"],
 ["__DNSIdle4", "x=&amp;gt;len(list=x.__DNSIdle_prefix) + 9", "uint8"],
 ["DNSIdle", 0, "Value", {
 "value": "x=&amp;gt; str(str=x.__DNSIdle1) + '.' + str(str=x.__DNSIdle2) + '.' + str(str=x.__DNSIdle3) + '.' + str(str=x.__DNSIdle4)"
 }],

 # 0x0014:DNSSleep', 0x0002:Type, 0x0004:Length
 ["__DNSSleep_prefix", 0, "String",{"term_hex": "001400020004", length: 10000, max_length: 10000}],
 ["DNSSleep", "x=&amp;gt;len(list=x.__DNSSleep_prefix) + 6", "uint32b"],

 # 0x0015:SSH_1, to complete - didnt find any examples assuming zero terminated
 ["__SSH_1_prefix", 0, "String",{"term_hex": "00150003", length: 10000, max_length: 10000}],
 ["SSH_1", "x=&amp;gt;len(list=x.__SSH_1_prefix) + 6", "String"],

 # 0x0016:SSH_2, to complete - didnt find any examples assuming zero terminated
 ["__SSH_2_prefix", 0, "String",{"term_hex": "00160003", length: 10000, max_length: 10000}],
 ["SSH_2", "x=&amp;gt;len(list=x.__SSH_2_prefix) + 6", "String"],

 # 0x0017:SSH_3, to complete - didnt find any examples assuming zero terminated
 ["__SSH_3_prefix", 0, "String",{"term_hex": "00170003", length: 10000, max_length: 10000}],
 ["SSH_3", "x=&amp;gt;len(list=x.__SSH_3_prefix) + 6", "String"],

 # 0x0018:SSH_4, to complete - didnt find any examples assuming zero terminated
 ["__SSH_4_prefix", 0, "String",{"term_hex": "00180003", length: 10000, max_length: 10000}],
 ["SSH_4", "x=&amp;gt;len(list=x.__SSH_4_prefix) + 6", "String"],

 # 0x0019:SSH_5, to complete - didnt find any examples assuming zero terminated
 ["__SSH_5_prefix", 0, "String",{"term_hex": "00190003", length: 10000, max_length: 10000}],
 ["SSH_5", "x=&amp;gt;len(list=x.__SSH_5_prefix) + 6", "String"],

 # 0x001a:GetVerb,0x0003:Type
 ["__GetVerb_prefix", 0, "String",{"term_hex": "001a0003"}],
 ["GetVerb", "x=&amp;gt;len(list=x.__GetVerb_prefix) + 6", "String",{"term_hex":"0000"}],

 # 0x001b: PostVerb, 0x0003:Type
 ["__PostVerb_prefix", 0, "String",{"term_hex": "001b0003"}],
 ["PostVerb", "x=&amp;gt;len(list=x.__PostVerb_prefix) + 6", "String",{"term_hex":"0000"}],

 # 0x001c:HttpPostChunk,0x0002:Type, 0x0004:Length
 ["__HttpPostChunk_prefix", 0, "String", {"term_hex": "001c00020004"}],
 ["HttpPostChunk", "x=&amp;gt;len(list=x.__HttpPostChunk_prefix) + 6", "uint32b"],

 # 0x001d:spawnto_x86,0x0003:Type
 ["__spawnx86_prefix", 0, "String",{"term_hex": "001d0003", length: 10000, max_length: 10000}],
 ["SpawnTox86", "x=&amp;gt;len(list=x.__spawnx86_prefix) + 6", "String",{"term_hex":"0000"}],

 # 0x001e:spawn_to_x64,0x0003:Type
 ["__spawnx64_prefix", 0, "String",{"term_hex": "001e0003", length: 10000, max_length: 10000}],
 ["SpawnTox64", "x=&amp;gt;len(list=x.__spawnx64_prefix) + 6", "String",{"term_hex":"0000"}],

 # 0x001f:CryptoScheme, 0x0001:Type, 0x0002:Length
 ["__CryptoScheme_prefix", 0, "String",{"term_hex": "001f00010002", length: 10000, max_length: 10000}],
 ["CryptoScheme", "x=&amp;gt;len(list=x.__CryptoScheme_prefix) + 6", "uint16b"],

 # 0x0020:Proxy, 0x0003:Type
 ["__Proxy_prefix", 0, "String",{"term_hex": "000e0003", length: 10000, max_length: 10000}],
 #["__Proxy_length","x=&amp;gt;len(list=x.__Proxy_prefix) + 4","uint16b"],
 ["Proxy", "x=&amp;gt;len(list=x.__Proxy_prefix) + 6", "String"],

 # 0x0021:ProxyUsername, 0x0003:Type
 ["__ProxyUsername_prefix", 0, "String",{"term_hex": "000e0003", length: 10000, max_length: 10000}],
 ["__ProxyUsername_length","x=&amp;gt;len(list=x.__ProxyUsername_prefix) + 4","uint16b"],
 ["ProxyUsername", "x=&amp;gt;len(list=x.__ProxyUsername_prefix) + 6", "String"],

 # 0x0022:ProxyPassword, 0x0003:Type
 ["__ProxyPassword_prefix", 0, "String",{"term_hex": "000e0003", length: 10000, max_length: 10000}],
 ["__ProxyPassword_length","x=&amp;gt;len(list=x.__ProxyPassword_prefix) + 4","uint16b"],
 ["ProxyPassword", "x=&amp;gt;len(list=x.__ProxyPassword_prefix) + 6", "String"],

 # 0x0023:ProxyType, 0x0001:Type, 0x0002:Length
 ["__ProxyType", 0, "String",{"term_hex": "002300010002", length: 10000, max_length: 10000}],
 ["ProxyType", "x=&amp;gt;len(list=x.__ProxyType) + 6", "Enumeration", {
 "type": "uint16b",
 "choices": {
 "1": "No proxy",
 "2": "IE settings",
 "4": "Hardcoded proxy"}
 }],

 # 0x0024:Deprecated, 0x0001:Type, 0x0002:Length
 ["__Deprecated_prefix", 0, "String",{"term_hex": "002400010002", length: 10000, max_length: 10000}],
 ["Deprecated", "x=&amp;gt;len(list=x.__Deprecated_prefix) + 6", "uint16b"],

 # 0x0025:LicenseId,0x0002:Type, 0x0004:Length
 ["__LicenseId_prefix", 0, "String", {"term_hex": "002500020004", length: 10000, max_length: 10000}],
 ["LicenseId", "x=&amp;gt;len(list=x.__LicenseId_prefix) + 6", "uint32b"],

 # 0x0026:bStageCleanup, 0x0001:Type, 0x0002:Length
 ["__bStageCleanup_prefix", 0, "String",{"term_hex": "002600010002", length: 10000, max_length: 10000}],
 ["bStageCleanup", "x=&amp;gt;len(list=x.__bStageCleanup_prefix) + 6", "uint16b"],

 # 0x0027:bCFGCaution, 0x0001:Type, 0x0002:Length
 ["__bCFGCaution_prefix", 0, "String",{"term_hex": "002700010002", length: 10000, max_length: 10000}],
 ["bCFGCaution", "x=&amp;gt;len(list=x.__bCFGCaution_prefix) + 6", "uint16b"],

 # 0x0028:KillDate,0x0002:Type, 0x0004:Length
 ["__KillDate_prefix", 0, "String", {"term_hex": "002800020004", length: 10000, max_length: 10000}],
 ["KillDate", "x=&amp;gt;len(list=x.__KillDate_prefix) + 6", "uint32b"],

 # 0x0029:TextSectionEnd,0x0002:Type, 0x0004:Length
 ["__TextSectionEnd_prefix", 0, "String", {"term_hex": "002900020004", length: 10000, max_length: 10000}],
 ["TextSectionEnd", "x=&amp;gt;len(list=x.__TextSectionEnd_prefix) + 6", "uint32b"],

 # 0x002a:ObfuscateSectionsInfo,0x0003:Type # Adding length check as we can not rely on termination
 ["__ObfuscateSectionsInfo_prefix", 0, "String",{"term_hex": "002a0003", length: 10000, max_length: 10000}],
 ["__ObfuscateSectionsInfo_length","x=&amp;gt;len(list=x.__ObfuscateSectionsInfo_prefix) + 4","uint16b"],
 ["__ObfuscateSectionsInfo", "x=&amp;gt;len(list=x.__ObfuscateSectionsInfo_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__ObfuscateSectionsInfo_length"}],
 ["ObfuscateSectionsInfo",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__ObfuscateSectionsInfo, re='[^ -~\\r\\n]', replace='')])" }],
 #["ObfuscateSectionsInfo",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__ObfuscateSectionsInfo)" }], #uncomment to return base64 encoded raw ObfuscateSectionsInfo

 #0x002b:ProcessInjectStartRWX, 0x0001:Type, 0x0002:Length
 ["__ProcessInjectStartRWX", 0, "String",{"term_hex": "002b00010002", length: 10000, max_length: 10000}],
 ["ProcessInjectStartRWX", "x=&amp;gt;len(list=x.__ProcessInjectStartRWX) + 6", "Enumeration", {
 "type": "uint16b",
 "choices": {
 "0x1": "PAGE_NOACCESS",
 "0x2": "PAGE_READONLY",
 "0x4": "PAGE_READWRITE",
 "0x8": "PAGE_WRITECOPY",
 "0x10": "PAGE_EXECUTE",
 "0x20": "PAGE_EXECUTE_READ",
 "0x40": "PAGE_EXECUTE_READWRITE",
 "0x80": "PAGE_EXECUTE_WRITECOPY"}
 }],

 #0x002c:ProcessInjectUseRWX, 0x0001:Type, 0x0002:Length
 ["__ProcessInjectUseRWX", 0, "String",{"term_hex": "002c00010002", length: 10000, max_length: 10000}],
 ["ProcessInjectUseRWX", "x=&amp;gt;len(list=x.__ProcessInjectUseRWX) + 6", "Enumeration", {
 "type": "uint16b",
 "choices": {
 "0x1": "PAGE_NOACCESS",
 "0x2": "PAGE_READONLY",
 "0x4": "PAGE_READWRITE",
 "0x8": "PAGE_WRITECOPY",
 "0x10": "PAGE_EXECUTE",
 "0x20": "PAGE_EXECUTE_READ",
 "0x40": "PAGE_EXECUTE_READWRITE",
 "0x80": "PAGE_EXECUTE_WRITECOPY"}
 }],

 # 0x002d:ProcessInjectMinAlloc,0x0002:Type, 0x0004:Length
 ["__ProcessInjectMinAlloc_prefix", 0, "String", {"term_hex": "002d00020004", length: 10000, max_length: 10000}],
 ["ProcessInjectMinAlloc", "x=&amp;gt;len(list=x.__ProcessInjectMinAlloc_prefix) + 6", "uint32b"],

 # 0x002e:ProcessInjectTransformx86, 0x0003:Type, # Adding length check as we can not rely on termination
 ["__ProcessInjectTransformx86_prefix", 0, "String",{"term_hex": "002e0003", length: 10000, max_length: 10000}],
 ["__ProcessInjectTransformx86_length","x=&amp;gt;len(list=x.__ProcessInjectTransformx86_prefix) + 4","uint16b"],
 ["__ProcessInjectTransformx86", "x=&amp;gt;len(list=x.__ProcessInjectTransformx86_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__ProcessInjectTransformx86_length"}],
 ["ProcessInjectTransformx86",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__ProcessInjectTransformx86, re='[^ -~\\r\\n]', replace='')])" }],
 #["ProcessInjectTransformx86",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__ProcessInjectTransformx86)" }],#uncomment to return base64 encoded raw ProcessInjectTransformx86


 # 0x002f:ProcessInjectTransformx64, 0x0003:Type, # Adding length check as we can not rely on termination
 ["__ProcessInjectTransformx64_prefix", 0, "String",{"term_hex": "002f0003", length: 10000, max_length: 10000}],
 ["__ProcessInjectTransformx64_length","x=&amp;gt;len(list=x.__ProcessInjectTransformx64_prefix) + 4","uint16b"],
 ["__ProcessInjectTransformx64", "x=&amp;gt;len(list=x.__ProcessInjectTransformx64_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__ProcessInjectTransformx64_length"}],
 ["ProcessInjectTransformx64",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__ProcessInjectTransformx64, re='[^ -~\\r\\n]', replace='')])" }],
 #["ProcessInjectTransformx64",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__ProcessInjectTransformx64)" }],#uncomment to return base64 encoded raw ProcessInjectTransformx64

 # 0x0032:UsesCookies, 0x0001:Type, 0x0002:Length
 ["__UsesCookies_prefix", 0, "String",{"term_hex": "003200010002", length: 10000, max_length: 10000}],
 ["UsesCookies", "x=&amp;gt;len(list=x.__UsesCookies_prefix) + 6", "uint16b"],

 # 0x0033:ProcessInjectExecute, 0x0003:Type # Adding length check as we can not rely on termination
 ["__ProcessInjectExecute_prefix", 0, "String",{"term_hex": "00330003", length: 10000, max_length: 10000}],
 ["__ProcessInjectExecute_length","x=&amp;gt;len(list=x.__ProcessInjectExecute_prefix) + 4","uint16b"],
 ["__ProcessInjectExecute", "x=&amp;gt;len(list=x.__ProcessInjectExecute_prefix) + 6", "String",{"term":"***NOTERM***", "length": "x=&amp;gt; x.__ProcessInjectExecute_length"}],
 ["ProcessInjectExecute",0,"Value",{ "value": "x=&amp;gt;format(format='%s', args=[regex_replace(source=x.__ProcessInjectExecute, re='[^ -~\\r\\n]', replace='')])" }],
 #["ProcessInjectExecute",0,"Value",{ "value": "x=&amp;gt;'base64:' + base64encode(string=x.__ProcessInjectExecute)" }], #uncomment to return base64 encoded raw ProcessInjectExecute

 # 0x0034:ProcessInjectAllocationMethod, 0x0001:Type, 0x0002:Length
 ["__ProcessInjectAllocationMethod_prefix", 0, "String",{"term_hex": "003400010002", length: 10000, max_length: 10000}],
 ["ProcessInjectAllocationMethod", "x=&amp;gt;len(list=x.__ProcessInjectAllocationMethod_prefix) + 6", "uint16b"],

 # 0x0035:ProcessInjectStub, 0x0003:Type # Adding length check as we can not rely on termination
 ["__ProcessInjectStub_prefix", 0, "String",{"term_hex": "00350003", length: 10000, max_length: 10000}],
 ["__ProcessInjectStub_length","x=&amp;gt;len(list=x.__ProcessInjectStub_prefix) + 4","uint16b"],
 ["__ProcessInjectStub", "x=&amp;gt;len(list=x.__ProcessInjectStub_prefix) + 6", "String",{"term_hex":"00000000", "length": "x=&amp;gt; x.__ProcessInjectStub_length"}],
 ["ProcessInjectStub",0,"Value",{ "value": "x=&amp;gt;format(format='% x', args=x.__ProcessInjectStub)" }],

 # 0x0036:HostHeader, 0x0003:Type # Adding length check as we can not rely on termination
 ["__HostHeader_prefix", 0, "String",{"term_hex": "00360003", length: 10000, max_length: 10000}],
 ["__HostHeader_length","x=&amp;gt;len(list=x.__HostHeader_prefix) + 4","uint16b"],
 ["HostHeader", "x=&amp;gt;len(list=x.__HostHeader_prefix) + 6", "String",{"term_hex":"00000000", "length": "x=&amp;gt; x.__HostHeader_length"}],

 ]],
 [Shellcode, 0, [
 ["__Position", 0, "Value",{"value":"x=&amp;gt;unhex(string=position(data=_Data))"}],
 ["Server", 0, "Value",{"value":"x=&amp;gt;regex_replace(source=regex_replace(source=x.__Position,re='\\x{00}.{4}[^$]*$',replace=''),re='\u0000',replace='')"}],
 ["TargetUri", 0, "Value",{"value":"x=&amp;gt;find_strings(data=_Data,length=5,filter='^/').Strings[0]"}],
 ["__LicenseBytes", 0, "Value",{"value":"x=&amp;gt;read_file(accessor='data',filename=x.__Position || '', offset=len(list=x.Server) + 1 ,length=4)"}],
 ["License", 0, "Value",{"value":"x=&amp;gt;parse_binary(accessor='data', filename=x.__LicenseBytes,struct='uint32b')"}],
 ["Strings", 0, "Value",{"value":"x=&amp;gt;find_strings(data=_Data,length=5,filter='.').Strings"}],
 ]],

 ["EmbeddedPE", 0, [
 ["__PayloadType", 0, "uint32"],
 ["PayloadType", 0, "Value",{"value":"x=&amp;gt;format(format='0x%08x',args=x.__PayloadType)"}],
 ["__PayloadSize", 4, "uint32"],
 #["PayloadSize", 4, "Value",{"value":"x=&amp;gt;format(format='0x%08x',args=x.__PayloadSize)"}],
 ["__XorKey", 8, "uint32b"],
 ["XorKey", 8, "Value",{"value":"x=&amp;gt;format(format='0x%08x',args=x.__XorKey)"}],
 ["__Id2", 12, "uint32"],
 ["Id2", 12, "Value",{"value":"x=&amp;gt;format(format='0x%08x',args=x.__Id2)"}],
 ["__Payload", 16, "Value",{"value":"x=&amp;gt;read_file(accessor='data',filename=embedded_section(path=TargetBytes || OSPath,
 type=if(condition=TargetBytes,then='data',else='auto'))[0].Data || '', offset=16,length=x.__PayloadSize)"}],
 #["__Payload", 16, "String",{"term_hex":"",length=x.__PayloadSize)"}],
 ["DecodedPayload", 16, "Value",{"value":"x=&amp;gt;xor(string=x.__Payload,key=unhex(string=x.XorKey))"}],
 ["PayloadHash", 16, "Value",{"value":"x=&amp;gt;hash(path=xor(string=x.__Payload,key=unhex(string=x.XorKey)),accessor='data')"}],
 ["OriginalFileHash", 16, "Value",{"value":"x=&amp;gt;hash(path=OSPath)"}],
 ]]]'''


sources:
 - query: |
 -- unique function to groupby value for enumerate
 LET unique(values) = SELECT _value as value FROM foreach(row=values) GROUP BY _value

 -- section to dynamically generate Xor configuration yara hunt strings
 LET a &amp;lt;= unhex(string='01')
 LET b &amp;lt;= unhex(string='02')
 LET c &amp;lt;= unhex(string='03')

 LET XorChars &amp;lt;=
 SELECT format(format="%#02x", args=_value) AS H,
 unhex(string=format(format="%02x", args=_value)) as X
 FROM range(start=0, end=256, step=1)
 WHERE if(condition=BruteXor,
 then=True,
 else= H=~ '0x2e|0x69')

 Let XorCharsStep2 =
 SELECT H, X,
 xor(string=a, key=X) as aXor,
 xor(string=b, key=X) as bXor,
 xor(string=c, key=X) as cXor,
 len(list=X)
 FROM XorChars

 LET YaraStrings =
 SELECT -- { 00 01 00 01 00 02 ?? ?? 00 02 00 01 00 02 ?? ?? 00 03 }
 X,H,
 H + ' = { ' + format(format='% x', args=X + aXor + X + aXor + X + bXor) +
 ' ?? ?? ' + format(format='% x', args=X + bXor + X + aXor + X + bXor) +
 ' ?? ?? ' + format(format='% x', args=X + cXor) + ' }' as Line
 FROM XorCharsStep2

 LET FindConfig =
 regex_replace(
 source=FindConfigTemplate,
 re='REPLACEME',
 replace=join(array=YaraStrings.Line, sep=" $$"))


 -- function to extract potential additional encoded PE in data section
 LET embedded_section(path,type) = SELECT
 path as OriginalFileName,
 _value.Name as Name,
 _value.Size as Size,
 _value.FileOffset as FileOffset,
 _value.VMA as VMA,
 _value.RVA as RVA,
 _value.Perm as Perm,
 read_file(filename=path,
 accessor=type,
 offset=_value.FileOffset,
 length=_value.Size) as Data
 FROM foreach(row= parse_pe(file=path,accessor=type).Sections)
 WHERE Name = '.data' AND Size &amp;gt; 15


 -- scan DataBytes for CobaltStrike config
 LET ByteConfiguration = SELECT Rule,
 len(list=TargetBytes) as Size,
 hash(path=TargetBytes,accessor='data') as Hash,
 format(format="%v_%v.bin", args=[Rule,String.Offset]) as _DecodedDataName,
 Xor,_Data,
 Rule as _Group
 FROM switch( -- switchcase will find beacon as priority, then search for shellcode
 beacon = {
 SELECT *,
 substr(start=0, end=1, str=String.Data) as Xor,
 read_file(accessor='data',
 filename=TargetBytes,
 offset= String.Offset,
 length=ExtractBytes) as _Data
 FROM yara(accessor='data',files=TargetBytes || "",
 rules=FindConfig, number=99)
 },
 shellcode = {
 SELECT *, '' as Xor,
 read_file(accessor='data',
 filename=TargetBytes,
 offset=String.Offset,length=4096) as _Data
 FROM yara(accessor='data',
 files=TargetBytes,
 rules=FindShellcode, number=99)
 },
 section_encoded_pe = {
 SELECT *,
 'Embedded data section: ' + Rule as Rule,
 substr(start=0,end=1,str=String.Data) as Xor,
 read_file(accessor='data',
 filename=File.OSPath,
 offset=String.Offset,
 length=ExtractBytes) as _Data
 FROM yara(files=parse_binary(
 accessor='data',
 filename= embedded_section(
 path=TargetBytes, type='data')[0].Data || "",
 profile=PROFILE,
 struct="EmbeddedPE").DecodedPayload,
 accessor='data', rules=FindConfig, number=99)
 },
 section_encoded_stager = {
 SELECT *,
 '' as Xor,
 'Embedded data section: ' + Rule as Rule,
 read_file(accessor='data',
 filename=File.OSPath) as _Data
 FROM yara(files=parse_binary(
 accessor='data',
 filename= embedded_section(
 path=TargetBytes,type='data')[0].Data || "",
 profile=PROFILE,
 struct="EmbeddedPE").DecodedPayload,
 accessor='data', rules=FindShellcode, number=99)
 },
 sleepfunction = {
 SELECT *, '' as Xor,
 if(condition= String.Name= '$x86',
 then= 'Sleep mask 32-bit 4.2 deobfuscation routine found.',
 else= 'Sleep mask 64-bit 4.2 deobfuscation routine found.') as _Data
 FROM yara(accessor='data',files=TargetBytes, rules=FindSleepFunction, number=1)
 })

 -- find target files
 LET TargetFiles = SELECT OSPath AS OSPath,Size
 FROM glob(globs=TargetFileGlob) WHERE NOT IsDir


 -- scan files in scope with our rule
 LET FileConfiguration = SELECT * FROM foreach(row=TargetFiles,
 query={
 SELECT
 Rule,
 OSPath, Size,
 hash(path=OSPath) as Hash,
 Xor,_Data,
 Rule + '|' + OSPath.String as _Group,
 format(format="%v_%v_%v.bin", args=[Rule,OSPath,String.Offset]) as _DecodedDataName
 FROM switch( -- switchcase will find beacon as priority, then search for shellcode
 beacon = {
 SELECT *,
 substr(start=0,end=1,str=String.Data) as Xor,
 read_file(
 filename=OSPath,
 offset= String.Offset,
 length=ExtractBytes) as _Data
 FROM yara(files=OSPath, rules=FindConfig, number=99)
 },

 shellcode = {
 SELECT *, '' as Xor,
 read_file(filename=OSPath,length=4096) as _Data
 FROM yara(files=OSPath, rules=FindShellcode, number=99)
 },

 section_encoded_pe = {
 SELECT *,
 'Embedded data section: ' + Rule as Rule,
 substr(start=0,end=1,str=String.Data) as Xor,
 read_file(accessor='data',filename=File.OSPath,
 offset=String.Offset,length=ExtractBytes) as _Data
 FROM yara(files=parse_binary(
 accessor='data',
 filename= embedded_section(path=OSPath,type='auto')[0].Data || "",
 profile=PROFILE,
 struct="EmbeddedPE").DecodedPayload,
 accessor='data', rules=FindConfig, number=99)
 },
 section_encoded_stager = {
 SELECT *,
 '' as Xor,
 'Embedded data section: ' + Rule as Rule,
 read_file(accessor='data',
 filename=File.OSPath,
 length=ExtractBytes) as _Data
 FROM yara(files=parse_binary(
 accessor='data',
 filename= embedded_section(path=OSPath,type='auto')[0].Data || "",
 profile=PROFILE,
 struct="EmbeddedPE").DecodedPayload,
 accessor='data', rules=FindShellcode, number=99)
 },
 sleepfunction = {
 SELECT *, '' as Xor,
 if(condition= String.Name= '$x86',
 then= 'Sleep mask 32-bit 4.2 deobfuscation routine found.',
 else= 'Sleep mask 64-bit 4.2 deobfuscation routine found.') as _Data
 FROM yara(files=OSPath, rules=FindSleepFunction, number=1)
 })
 })


 -- find velociraptor process
 LET me &amp;lt;= SELECT * FROM if(condition= NOT ( TargetFileGlob OR TargetBytes ),
 then = { SELECT Pid FROM pslist(pid=getpid()) })


 -- find all processes and add filters
 LET processes = SELECT Name as ProcessName, CommandLine, Pid
 FROM pslist()
 WHERE
 Name =~ ProcessRegex
 AND format(format="%d", args=Pid) =~ PidRegex
 AND NOT Pid in me.Pid

 -- scan processes in scope with our rule
 LET ProcessConfiguration = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT Rule,
 Pid, ProcessName, CommandLine,
 format(format="%v_%v_%v_%v.bin", args=[Rule,ProcessName,Pid,String.Offset]) as _DecodedDataName,
 Xor,_Data,_Group
 FROM switch( -- switchcase will find beacon as priority, then search for shellcode
 beacon = {
 SELECT *,
 substr(start=0,end=1,str=String.Data) as Xor,
 read_file(accessor='process',
 filename=str(str=Pid),
 offset= String.Offset,
 length=ExtractBytes) as _Data,
 Rule +'|'+ str(str=Pid) +'|'+ ProcessName +'|'+ CommandLine as _Group
 FROM yara(accessor='process',files=str(str=Pid), rules=FindConfig, number=99)
 },
 shellcode = {
 SELECT *, '' as Xor,
 read_file(accessor='process',
 filename=str(str=Pid),
 offset=String.Offset,length=4096) as _Data,
 Rule +'|'+ str(str=Pid) +'|'+ ProcessName +'|'+ CommandLine as _Group
 FROM yara(accessor='process',files=str(str=Pid), rules=FindShellcode, number=99)
 },
 sleepfunction = {
 SELECT *, '' as Xor,
 if(condition= String.Name= '$x86',
 then= 'Sleep mask 32-bit 4.2 deobfuscation routine found.',
 else= 'Sleep mask 64-bit 4.2 deobfuscation routine found.') as _Data,
 '' as _Group
 FROM yara(accessor='process',files=str(str=Pid), rules=FindSleepFunction, number=1)
 })
 })


 -- Add dynamic functions for shellcode parsing
 LET position(data) = if(condition= len(list=split(string=format(format='%x',args=data),sep='ffff')) &amp;gt; 1,
 then= split(string=format(format='%x',args=data),sep='ffff')[-1],
 else= False )
 LET find_strings(data,length,filter) = SELECT Strings
 FROM parse_records_with_regex(file=data,accessor='data',regex='(?P&amp;lt;Strings&amp;gt;[ -~]+)')
 WHERE len(list=Strings) &amp;gt; length - 1
 AND Strings =~ filter
 AND NOT Strings =~ '^\\s+$'
 LIMIT 150


 -- generate results remove any FPs
 LET results &amp;lt;= SELECT *,
 if(condition= Rule=~'cobalt_strike_beacon$',
 then= format(format='0x%x',args=Xor),else='0x00') as Xor,
 if(condition= Rule=~'cobalt_strike_beacon',
 then= parse_binary(accessor='data',
 filename= xor(string=_Data || "" ,key=Xor),
 profile = PROFILE,struct = "CobaltConfig"),
 else= if(condition= Rule=~'cobalt_strike_shellcode',
 then= parse_binary(accessor='data',
 filename= _Data || "",
 profile = PROFILE,struct="Shellcode"),
 else= _Data )) AS DecodedConfig
 FROM if(condition=TargetBytes,
 then=ByteConfiguration,
 else= if(condition=TargetFileGlob,
 then= FileConfiguration,
 else= ProcessConfiguration))
 WHERE _Data
 AND
 (( DecodedConfig.C2Server =~ '^[ -~]+$' AND DecodedConfig.BeaconType )
 OR ( DecodedConfig.Pipename =~ '^[ -~]+$' AND DecodedConfig.BeaconType )
 OR DecodedConfig.Server =~ '^[ -~]+' -- AND DecodedConfig.TargetUri )
 OR Rule='cobalt_strike_sleepfunction' )

 -- add decoded data seperate to keep pretty output
 LET output_decoded_data = SELECT *,
 upload(accessor = 'data',
 file = if(condition = Rule='cobalt_strike_beacon',
 then = xor(string=_Data,key=unhex(string=Xor)),
 else = _Data),
 name = _DecodedDataName) as DecodedData
 FROM results

 LET cleanup(config) = to_dict(item=
 {
 SELECT _key, _value
 FROM items(item=config)
 WHERE NOT _key =~ '^__' AND ( _value OR _key =~ '^license' )
 })

 -- output rows, standard config priority, exclude _Data
 SELECT *,
 if(condition= format(format='%T',args=DecodedConfig)='string',
 then= DecodedConfig,
 else= cleanup(config=DecodedConfig)) as DecodedConfig
 FROM column_filter(
 query={
 SELECT * ,
 -- NOTE: some junk strings for shellcode _Group are removed in GROUP BY
 if(condition= Rule='cobalt_strike_beacon',
 then= _Group +'|'+ str(str=DecodedConfig),
 else= _Group +'|'+ str(str=DecodedConfig.Server) +'|'+ str(str=DecodedConfig.TargetUri) +'|'+ str(str=DecodedConfig.Licence) ) as _Group
 FROM if(condition=IncludeDecodedData,
 then= output_decoded_data,
 else= results)
 GROUP BY _Group
 }, exclude=["_Data","_Group"])

column_types:
 - name: DecodedData
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Carving.USN</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.carving.usn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.carving.usn/</guid><description>&lt;p>Carve URN Journal records from the disk.&lt;/p>
&lt;p>The USN journal is a very important source of information about when
and how files were manipulated on the filesystem. However, typically
the journal is rotated within a few days.&lt;/p>
&lt;p>This artifact carves out USN journal entries from the raw disk. This
might recover older entries which have since been rotated from the
journal file.&lt;/p>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Like all carving, USN carving is not very reliable. You
would tend to use it to corroborate an existing theory or to
discover new leads.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This artifact takes a long time to complete - you should
probably increase the collection timeout past 10 minutes (usually
more than an hour).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The reassembled OSPath is derived from the MFTId referenced in
the USN record. Bear in mind that this might be out of date and
inaccurate.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you need to carve from a standalone file (e.g. collection from
&lt;code>Windows.KapeFiles.Targets&lt;/code>) you should use the
Windows.Carving.USNFiles artifact instead.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Carving.USN
description: |
 Carve URN Journal records from the disk.

 The USN journal is a very important source of information about when
 and how files were manipulated on the filesystem. However, typically
 the journal is rotated within a few days.

 This artifact carves out USN journal entries from the raw disk. This
 might recover older entries which have since been rotated from the
 journal file.

 ## Notes

 1. Like all carving, USN carving is not very reliable. You
 would tend to use it to corroborate an existing theory or to
 discover new leads.

 2. This artifact takes a long time to complete - you should
 probably increase the collection timeout past 10 minutes (usually
 more than an hour).

 3. The reassembled OSPath is derived from the MFTId referenced in
 the USN record. Bear in mind that this might be out of date and
 inaccurate.

 4. If you need to carve from a standalone file (e.g. collection from
 `Windows.KapeFiles.Targets`) you should use the
 Windows.Carving.USNFiles artifact instead.

parameters:
 - name: Device
 default: "C:"
 description: The NTFS drive to carve
 - name: MFTFile
 description: Alternatively provide an MFTFile to use for resolving paths.
 - name: USNFile
 description: Alternatively provide a previously extracted USN file to carve or an image file.
 - name: Accessor
 description: The accessor to use.
 - name: FileNameRegex
 description: "Regex search over File Name"
 default: "."
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else="1600-01-01")
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else="2200-01-01")

 -- If the user specified an MFTFile then ignore the device
 LET Device &amp;lt;= if(condition=MFTFile OR USNFile, then=NULL,
 else=if(condition=Device,
 then=pathspec(parse=Device, path_type="ntfs")))

 LET Parse(MFT, USN, Accessor) = SELECT *
 FROM carve_usn(accessor=Accessor,
 mft_filename=MFT, usn_filename=USN)
 WHERE Filename =~ FileNameRegex
 AND Timestamp &amp;lt; DateBeforeTime
 AND Timestamp &amp;gt; DateAfterTime

 SELECT *
 FROM if(condition=Device, then={
 SELECT Timestamp,
 Filename,
 Device + OSPath AS OSPath,
 _Links,
 Reason,
 _FileMFTID as MFTId,
 _FileMFTSequence as Sequence,
 _ParentMFTID as ParentMFTId,
 _ParentMFTSequence as ParentSequence,
 FileAttributes,
 SourceInfo,
 Usn
 FROM Parse(Accessor="ntfs",
 MFT=Device + "$MFT",
 USN=Device)
 }, else={
 SELECT Timestamp,
 Filename,
 OSPath,
 _Links,
 Reason,
 _FileMFTID as MFTId,
 _FileMFTSequence as Sequence,
 _ParentMFTID as ParentMFTId,
 _ParentMFTSequence as ParentSequence,
 FileAttributes,
 SourceInfo,
 Usn
 FROM Parse(Accessor=Accessor,
 MFT=MFTFile, USN=USNFile)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Carving.USNFiles</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.carving.usnfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.carving.usnfiles/</guid><description>&lt;p>The USN journal is an important source of information about when
files were manipulated on a system.&lt;/p>
&lt;p>Ideally you can parse the journal directly using the
&lt;code>Windows.Forensics.Usn&lt;/code> artifact on the endpoint itself. However,
sometimes all you have is a copy of the USN file itself (for example
after collection with the &lt;code>Windows.KapeFiles.Targets&lt;/code>). If you only
have the file, you can use this artifact to parse the USN records
out of it by essentially carving the records out.&lt;/p>
&lt;p>NOTE: This artifact is not as good as the &lt;code>Windows.Forensics.Usn&lt;/code>
artifact because it can not resolve the full path of the files from
the MFT itself! In practice you should always prefer to collect
&lt;code>Windows.Forensics.Usn&lt;/code> rather than just the $J file.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Carving.USNFiles
description: |
 The USN journal is an important source of information about when
 files were manipulated on a system.

 Ideally you can parse the journal directly using the
 `Windows.Forensics.Usn` artifact on the endpoint itself. However,
 sometimes all you have is a copy of the USN file itself (for example
 after collection with the `Windows.KapeFiles.Targets`). If you only
 have the file, you can use this artifact to parse the USN records
 out of it by essentially carving the records out.

 NOTE: This artifact is not as good as the `Windows.Forensics.Usn`
 artifact because it can not resolve the full path of the files from
 the MFT itself! In practice you should always prefer to collect
 `Windows.Forensics.Usn` rather than just the $J file.

imports:
 - Windows.Carving.USN

parameters:
 - name: USNFile
 default: \\.\C:\$Extend\$UsnJrnl:$J
 - name: Accessor
 default: ntfs
 type: choices
 choices:
 - ntfs
 - file
 - name: FileRegex
 description: "Regex search over File Name"
 default: "."
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

sources:
 - query: |
 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else="1600-01-01")
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else="2200-01-01")

 -- This rule performs an initial reduction for speed, then we
 -- reduce further using other conditions.
 LET USNYaraRule = '''rule X {
 strings:
 // First byte is the record length &amp;lt; 255 second byte should be 0-1 (0-512 bytes per record)
 // Version Major and Minor must be 2 and 0
 // D7 01 is the ending of a reasonable WinFileTime
 // Name Offset and Name Length are short ints but should be &amp;lt; 255
 $a = { ?? (00 | 01) 00 00 02 00 00 00 [24] ?? ?? ?? ?? ?? ?? D? 01 [16] ?? 00 3c 00 }
 condition:
 any of them
 }
 '''

 -- Find all the records in the drive.
 LET Hits = SELECT String.Offset AS Offset, parse_binary(
 filename=USNFile, accessor=Accessor, struct="USN_RECORD_V2",
 profile=USNProfile, offset=String.Offset) AS _Parsed
 FROM yara(files=USNFile, accessor=Accessor,
 rules=USNYaraRule, number=200000000)
 WHERE _Parsed.RecordLength &amp;gt; 60 AND // Record must be at least 60 bytes
 _Parsed.FileNameLength &amp;gt; 3 AND _Parsed.FileNameLength &amp;lt; 100

 SELECT Offset, _Parsed.TimeStamp AS TimeStamp,
 _Parsed.Filename AS Name,
 _Parsed.FileReferenceNumberID AS MFTId,
 _Parsed.ParentFileReferenceNumberID AS ParentMFTId,
 _Parsed.Reason AS Reason
 FROM Hits
 WHERE Name =~ FileRegex AND
 TimeStamp &amp;lt; DateBeforeTime AND
 TimeStamp &amp;gt; DateAfterTime

&lt;/code>&lt;/pre></description></item><item><title>Windows.Collectors.File</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.collectors.file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.collectors.file/</guid><description>&lt;p>Using Windows.Collectors.File is deprecated. Please use
Generic.Collectors.File instead.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Collectors.File
description: |
 Using Windows.Collectors.File is deprecated. Please use
 Generic.Collectors.File instead.
parameters:
 - name: collectionSpec
 description: |
 A CSV file with a Glob column with all the globs to collect.
 NOTE: Globs must not have a leading device.
 type: csv
 default: |
 Glob
 Users\*\NTUser.dat
 - name: Root
 description: |
 On Windows, this is the device to apply all the glob on. On *NIX,
 this should be a path to a subdirectory but must not be a real
 device from /dev.
 default: &amp;quot;C:&amp;quot;
 - name: Accessor
 default: lazy_ntfs
 description: |
 On Windows, this can be left on `lazy_ntfs'. For *NIX, this value
 must be set to `file' since the ntfs accessors are not available.
 - name: Separator
 description: |
 The path separator used to construct the final globs from the root
 and the partial globs in `collectionSpec'.
 default: &amp;quot;\\&amp;quot;

sources:
 - name: Forward query to new Artifact
 queries:
 - SELECT * FROM Artifact.Generic.Collectors.File(Accessor=Accessor,
 collectionSpec=collectionSpec, Root=Root, Separator=Separator)
 WHERE log(message=&amp;quot;Using Windows.Collectors.File is deprecated. Use Generic.Collectors.File instead.&amp;quot;)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Collectors.VSS</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.collectors.vss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.collectors.vss/</guid><description>&lt;p>Collects files with VSS deduplication.&lt;/p>
&lt;p>Volume shadow copies is a windows feature where file system
snapshots can be made at various times. When collecting files it is
useful to go back through the VSS to see older versions of critical
files.&lt;/p>
&lt;p>At the same time we dont want to collect multiple copies of the
same data.&lt;/p>
&lt;p>This artifact runs the provided globs over all the VSS and collects
the unique modified time + path combinations.&lt;/p>
&lt;p>If a file was modified in a previous VSS copy, this artifact will
retrieve it at multiple shadow copies.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Collectors.VSS
description: |
 Collects files with VSS deduplication.

 Volume shadow copies is a windows feature where file system
 snapshots can be made at various times. When collecting files it is
 useful to go back through the VSS to see older versions of critical
 files.

 At the same time we dont want to collect multiple copies of the
 same data.

 This artifact runs the provided globs over all the VSS and collects
 the unique modified time + path combinations.

 If a file was modified in a previous VSS copy, this artifact will
 retrieve it at multiple shadow copies.

parameters:
 - name: collectionSpec
 description: |
 A CSV file with a Glob column with all the globs to collect.
 NOTE: Globs must not have a leading device since the device
 will depend on the VSS.
 type: csv
 default: |
 Glob
 Users\*\NTUser.dat
 - name: RootDevice
 description: The device to apply all the glob on.
 default: &amp;quot;C:&amp;quot;
 - name: Accessor
 default: lazy_ntfs
 - name: VSSDateRegex
 default: .
 type: regex

sources:
 - name: All Matches Metadata
 query: |
 LET originating_machine &amp;lt;= SELECT Data.SystemName AS System
 FROM glob(globs=&amp;quot;/*&amp;quot;, accessor=Accessor)
 WHERE Name = &amp;quot;\\\\.\\&amp;quot; + RootDevice

 // Generate the collection globs for each device
 LET specs = SELECT Device + Glob AS Glob
 FROM collectionSpec
 WHERE log(message=&amp;quot;Processing Device &amp;quot; + Device + &amp;quot; With &amp;quot; + Accessor)

 // Join all the collection rules into a single Glob plugin. This ensure we
 // only make one pass over the filesystem. We only want LFNs.
 LET hits = SELECT FullPath AS SourceFile, Size,
 Ctime AS Created,
 Mtime AS Modified,
 Atime AS LastAccessed,
 Device, strip(string=FullPath, prefix=Device) AS Path,
 Data.mft AS MFT, Data.name_type AS NameType
 FROM glob(globs=specs.Glob, accessor=Accessor)
 WHERE Mode.IsRegular

 // Get all volume shadows on this system.
 LET volume_shadows = SELECT Data.InstallDate AS InstallDate,
 Data.DeviceObject + &amp;quot;\\&amp;quot; AS Device
 FROM glob(globs='/*', accessor=Accessor)
 WHERE Device =~ 'VolumeShadowCopy' AND
 Data.OriginatingMachine =~ originating_machine.System[0] AND
 InstallDate =~ VSSDateRegex

 // The target devices are the root device and all the VSS
 LET target_devices = SELECT * FROM chain(
 a={SELECT &amp;quot;\\\\.\\&amp;quot; + RootDevice + &amp;quot;\\&amp;quot; AS Device from scope()},
 b=volume_shadows)

 // Get all the paths matching the collection globs.
 LET all_matching = SELECT * FROM foreach(row=target_devices, query=hits)

 // Create a unique key to group by - modification time and path name.
 // Order by device name so we get C:\ above the VSS device.
 LET all_results &amp;lt;= SELECT Created, LastAccessed, Path, MFT, NameType,
 Modified, Size, SourceFile, Device,
 format(format=&amp;quot;%s:%v&amp;quot;, args=[Modified, MFT]) AS Key
 FROM all_matching ORDER BY Device DESC

 SELECT * FROM all_results

 - name: Uploads
 query: |
 // Get all the unique versions of the sort key - that is unique instances of
 // mod time + path. If a path has several mod time (i.e. different times in each VSS
 // we will get them all). But if the same path has the same mod time in all VSS we only
 // take the first one which due to the sorting above will be the root device usually.
 LET unique_mtimes = SELECT * FROM all_results GROUP BY Key

 // Upload the files using the MFT accessor.
 LET uploaded_files = SELECT * FROM foreach(row=unique_mtimes,
 workers=30,
 query={
 SELECT Created, LastAccessed, Modified, MFT, SourceFile, Size,
 upload(file=Device+MFT,
 name=pathspec(Path=SourceFile),
 accessor=&amp;quot;mft&amp;quot;) AS Upload
 FROM scope()
 })

 // Seperate the hashes into their own column.
 SELECT now() AS CopiedOnTimestamp, SourceFile, Upload.Path AS DestinationFile,
 Size AS FileSize, Upload.sha256 AS SourceFileSha256,
 Created, Modified, LastAccessed, MFT
 FROM uploaded_files

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Amcache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.amcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.amcache/</guid><description>&lt;p>This artifact collects AMCache entries with a SHA1 hash to enable threat
detection.&lt;/p>
&lt;p>AmCache is an artifact which stores metadata related to PE execution and
program installation on Windows 7 and Server 2008 R2 and above. This artifact
includes EntryName, EntryPath and SHA1 as great data points for IOC collection.
Secondary datapoints include publisher/company, BinaryType and OriginalFileName.&lt;/p>
&lt;p>Available filters include:&lt;/p>
&lt;ul>
&lt;li>SHA1regex - regex entries to filter by SHA1.&lt;/li>
&lt;li>PathRegex - filter on path if available.&lt;/li>
&lt;li>NameRegex - filter on EntryName OR OriginalFileName.&lt;/li>
&lt;/ul>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>Secondary fields are not consistent across AMCache types and some legacy
versions do not return these fields.&lt;/li>
&lt;li>Some enrichment has occured but any secondary fields should be treated as
guidance only.&lt;/li>
&lt;li>This artifact collects only entries with a SHA1, for complete AMCache
analysis please download raw artifact sets.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Amcache
author: Matt Green - @mgreen27
description: |
 This artifact collects AMCache entries with a SHA1 hash to enable threat
 detection.

 AmCache is an artifact which stores metadata related to PE execution and
 program installation on Windows 7 and Server 2008 R2 and above. This artifact
 includes EntryName, EntryPath and SHA1 as great data points for IOC collection.
 Secondary datapoints include publisher/company, BinaryType and OriginalFileName.

 Available filters include:

 - SHA1regex - regex entries to filter by SHA1.
 - PathRegex - filter on path if available.
 - NameRegex - filter on EntryName OR OriginalFileName.

 NOTE:

 - Secondary fields are not consistent across AMCache types and some legacy
 versions do not return these fields.
 - Some enrichment has occured but any secondary fields should be treated as
 guidance only.
 - This artifact collects only entries with a SHA1, for complete AMCache
 analysis please download raw artifact sets.

reference:
 - https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf

parameters:
 - name: AMCacheGlob
 default: "%SYSTEMROOT%/appcompat/Programs/Amcache.hve"
 description: AMCache hive path
 - name: KeyPathGlob
 default: /Root/{Inventory, File}*/**
 type: hidden
 description: Registry key path glob
 - name: SHA1Regex
 default: .
 description: Regex of SHA1s to filter
 type: regex
 - name: PathRegex
 description: Regex of recorded path.
 type: regex
 - name: NameRegex
 description: Regex of entry / binary name
 type: regex

sources:
 - query: |
 LET files &amp;lt;= SELECT OSPath
 FROM glob(globs=expand(path=AMCacheGlob))

 SELECT * FROM foreach(row=files,
 query={
 SELECT
 Key.OSPath.DelegatePath As HivePath,
 Key.OSPath.Path as EntryKey,
 Key.ModTime as KeyMTime,

 -- Key is like \Root\InventoryDriverBinary\"c:/windows/system32/drivers/1394ohci.sys"
 Key.OSPath.Components[1] as EntryType,

 if(condition=get(member="FileId"),
 then=strip(string=FileId, prefix='0000'),
 else=if(condition=get(member="101"),
 then=strip(string=`101`, prefix='0000'),
 else=if(condition=get(member="DriverId"),
 then=strip(string=DriverId, prefix='0000')))) as SHA1,

 if(condition=get(member="Name"),
 then=Name,
 else=if(condition=get(member="FriendlyName"),
 then=FriendlyName,
 else=if(condition=get(member="15"),
 then=split(string=str(str=`15`), sep='\\\\')[-1],
 else=if(condition=get(member="DriverName"),
 then=DriverName)))) as EntryName,

 if(condition=get(member="LowerCaseLongPath"),
 then=LowerCaseLongPath,
 else=if(condition=get(member="15"),
 then=`15`,
 else=if(condition=get(member="AddinCLSID"),
 then=AddinCLSID))) as EntryPath,

 if(condition=get(member="Publisher"),
 then=Publisher,
 else=if(condition=get(member="Provider"),
 then=Provider,
 else=if(condition=get(member="DriverCompany"),
 then=DriverCompany))) as Publisher,

 get(member="OriginalFileName") AS OriginalFileName,

 if(condition=get(member="BinaryType"),
 then=BinaryType,
 else=if(condition=get(member="AddInType"),
 then=AddinType + ' ' + OfficeArchitecture,
 else=if(condition=Key.OSPath.Path =~ 'InventoryDevicePnp',
 then='DevicePnp',
 else=if(condition=Key.OSPath.Path =~ 'InventoryDriverBinary',
 then='DriverBinary')))) as BinaryType

 FROM read_reg_key(
 globs=KeyPathGlob,
 root=pathspec(DelegatePath=OSPath),
 accessor='raw_reg')
 WHERE SHA1
 AND SHA1 =~ SHA1Regex
 AND if(condition= NameRegex,
 then= EntryName =~ NameRegex OR OriginalFileName =~ NameRegex,
 else= True)
 AND if(condition= PathRegex,
 then= EntryPath =~ PathRegex,
 else= True)
 })
&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.BinaryHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.binaryhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.binaryhunter/</guid><description>&lt;p>This artifact enables hunting for binary attributes.&lt;/p>
&lt;p>The artifact takes a glob targetting input, then checks each file in scope for an MZ header.
The artifact also queries Authenticode details and parses out PE attributes.&lt;/p>
&lt;p>Both PE and Authenticode output can be queried for relevant strings using a regex filter and whitelist to hunt with.
This enables unique capability to hunt for specific things such as PE imports, exports or other attributes.&lt;/p>
&lt;p>Note: this artifacts filters are cumulative so a hash based hit will return
no results if the file is filtered out by other filters.
For most performant searches leverage path, size and and date filters. By default
the artifact leverages the &amp;lsquo;auto&amp;rsquo; data accessor but can also be changed as desired.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.BinaryHunter
author: "Matt Green - @mgreen27"
description: |
 This artifact enables hunting for binary attributes.

 The artifact takes a glob targetting input, then checks each file in scope for an MZ header.
 The artifact also queries Authenticode details and parses out PE attributes.

 Both PE and Authenticode output can be queried for relevant strings using a regex filter and whitelist to hunt with.
 This enables unique capability to hunt for specific things such as PE imports, exports or other attributes.

 Note: this artifacts filters are cumulative so a hash based hit will return
 no results if the file is filtered out by other filters.
 For most performant searches leverage path, size and and date filters. By default
 the artifact leverages the 'auto' data accessor but can also be changed as desired.

parameters:
 - name: TargetGlob
 description: Glob to target.
 default: "C:/Users/**/*"
 - name: Accessor
 description: Velociraptor accessor to use. Changing to ntfs will increase scan time.
 default: auto
 - name: UnexpectedExtension
 description: "Exclude binaries with expected extension: com|cpl|dll|drv|exe|mui|scr|sfx|sys|winmd"
 type: bool
 - name: ExcludeTrusted
 description: Exclude binaries with Trusted Authenticode certificates.
 type: bool
 - name: AuthenticodeRegex
 description: Regex to search through all authenrticode data.
 default: .
 type: regex
 - name: AuthenticodeWhitelistRegex
 description: Regex to whitelist in all Authenticode data.
 default:
 type: regex
 - name: PEInformationRegex
 description: Regex to filter for PE information. e.g VersionInformation, exports etc
 default: .
 type: regex
 - name: PEInformationWhitelistRegex
 description: Regex to whitelist for PE information. e.g VersionInformation, exports etc
 default:
 type: regex
 - name: DateAfter
 description: Search for binaries with timestamps after this date. YYYY-MM-DDTmm:hh:ssZ
 type: timestamp
 - name: DateBefore
 description: Search for binaries with timestamps before this date. YYYY-MM-DDTmm:hh:ssZ
 type: timestamp
 - name: SizeMax
 description: Return binaries only under this size in bytes.
 type: int64
 default: 4294967296
 - name: SizeMin
 description: Return binaries only over this size in bytes.
 type: int64
 default: 0
 - name: MD5List
 description: MD5 hash list to hunt for. New MD5 hash on each line
 default:
 - name: SHA1List
 description: SHA1 hash list to hunt for. New SHA1 hash on each line
 default:
 - name: SHA256List
 description: SHA256 hash list to hunt for. New SHA256 hash on each line
 default:
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - query: |
 -- setup hash lists if needed
 LET MD5Array &amp;lt;= split(sep='\\s+',string=MD5List)
 LET SHA1Array &amp;lt;= split(sep='\\s+',string=SHA1List)
 LET SHA256Array &amp;lt;= split(sep='\\s+',string=SHA256List)

 -- firstly find files in scope with performance
 LET find_files = SELECT *,
 read_file(filename=OSPath,accessor=Accessor,offset=0,length=2) as _Header
 FROM if(condition=DateBefore AND DateAfter,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;lt; DateBefore OR Ctime &amp;lt; DateBefore OR Btime &amp;lt; DateBefore )
 AND ( Mtime &amp;gt; DateAfter OR Ctime &amp;gt; DateAfter OR Btime &amp;gt; DateAfter )
 },
 else={ SELECT * FROM if(condition=DateBefore,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=OSPath,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;lt; DateBefore OR Ctime &amp;lt; DateBefore OR Btime &amp;lt; DateBefore )
 },
 else={ SELECT * FROM if(condition=DateAfter,
 then={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 AND ( Mtime &amp;gt; DateAfter OR Ctime &amp;gt; DateAfter OR Btime &amp;gt; DateAfter )
 },
 else={
 SELECT OSPath, Name, Size,Mtime,Atime,Ctime,Btime
 FROM glob(globs=TargetGlob,accessor=Accessor)
 WHERE NOT IsDir AND NOT IsLink
 AND Size &amp;gt; SizeMin AND Size &amp;lt; SizeMax
 })})})
 WHERE _Header = 'MZ'
 AND if(condition= UnexpectedExtension,
 then= NOT Name =~ '\.(com|cpl|dll|drv|exe|mui|scr|sfx|sys|winmd)$',
 else= True)


 -- parse PE attributes and run final filters
 SELECT
 dict(OSPath=OSPath,Name=Name,Size=Size,
 Timestamps=dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime)
 ) as File,
 authenticode(filename=OSPath) as Authenticode,
 parse_pe(file=OSPath) as PE,
 hash(path=OSPath) as Hash
 FROM find_files
 WHERE
 serialize(item=Authenticode) =~ AuthenticodeRegex
 AND NOT if(condition=WhitelistRegex,
 then= serialize(item=Authenticode) =~ AuthenticodeWhitelistRegex,
 else= False)
 AND serialize(item=PE) =~ PEInformationRegex
 AND NOT if(condition=PEInformationWhitelistRegex,
 then= serialize(item=PE) =~ PEInformationWhitelistRegex,
 else= False)
 AND if(condition= ExcludeTrusted,
 then= NOT Authenticode.Trusted = "trusted",
 else= True)
 AND if(condition= MD5List OR SHA1List OR SHA256List,
 then=(
 if(condition= MD5List,
 then= Hash.MD5 in MD5Array)
 OR if(condition= SHA1List,
 then= Hash.SHA1 in SHA1Array)
 OR if(condition= SHA256List,
 then= Hash.SHA256 in SHA256Array)
 ), else = True )

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.BinaryRename</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.binaryrename/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.binaryrename/</guid><description>&lt;p>This artifact will detect renamed binaries commonly abused by adversaries.&lt;/p>
&lt;p>Binary rename is a defence evasion technique used to bypass brittle process
name and path based detections. Observed in use across
all stages of the attack lifecycle it is a technique used by a large
selection of actors from commodity malware crews through to Nation States.&lt;/p>
&lt;p>Add additional entries to the VersionInfoTable parameter. For straight
detection on an Internal or Original name, the Filename entry can be set to
an unlikely value - e.g ANY or left blank.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.BinaryRename
author: "Matt Green - @mgreen27"
description: |
 This artifact will detect renamed binaries commonly abused by adversaries.

 Binary rename is a defence evasion technique used to bypass brittle process
 name and path based detections. Observed in use across
 all stages of the attack lifecycle it is a technique used by a large
 selection of actors from commodity malware crews through to Nation States.

 Add additional entries to the VersionInfoTable parameter. For straight
 detection on an Internal or Original name, the Filename entry can be set to
 an unlikely value - e.g ANY or left blank.


reference:
 - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html
 - https://attack.mitre.org/techniques/T1036/003/

type: CLIENT

parameters:
 - name: TargetGlob
 default: /**/*.exe
 - name: VersionInfoTable
 type: csv
 default: |
 Filename,Internal,Original,Description,Note
 cmd.exe,cmd,Cmd.Exe,Windows Command Processor,cmd.exe
 7z.exe,7z,7z.exe,7-Zip Console,7z.exe
 certutil.exe,CertUtil.exe,CertUtil.exe,CertUtil,certutil.exe
 cmstp.exe,CMSTP,CMSTP.EXE,Microsoft Connection Manager Profile Installer,cmstp.exe
 cscript.exe,cscript.exe,cscript.exe,Microsoft ® Console Based Script Host,cscript.exe
 mshta.exe,MSHTA.EXE,MSHTA.EXE,Microsoft ® HTML Application host,mshta.exe
 msiexec.exe,msiexec,msiexec.exe,Windows® installer,msiexec.exe
 powershell.exe,POWERSHELL,PowerShell.EXE,Windows PowerShell,powershell.exe
 psexec.exe,PsExec,psexec.c,Sysinternals PSExec,psexec.exe
 psexec64.exe,PsExec,psexec.exe,Sysinternals PSExec,psexec64.exe
 regsvr32.exe,REGSVR32,REGSVR32.EXE,Microsoft© Register Server,regsvr32.exe
 rundll32.exe,rundll,RUNDLL32.EXE,Windows host process (Rundll32),rundll32.exe
 winrar.exe,WinRAR,WinRAR.exe,WinRAR archiver,winrar.exe
 wmic.exe,wmic.exe,wmic.exe,WMI Commandline Utility,wmic.exe
 wscript.exe,wscript.exe,wscript.exe,Microsoft ® Windows Based Script Host,wscript.exe
 wevtutil.exe,wevtutil.exe,wevtutil.exe,,wevtutil.exe
 net.exe,net.exe,net.exe,,net.exe
 net1.exe,net1.exe,net1.exe,,net1.exe
 netsh.exe,netsh.exe,netsh.exe,,netsh.exe
 powershell_ise.exe,powershell_ise.exe,powershell_ise.exe,,powershell_ise.exe
 dsquery.exe,dsquery.exe,dsquery.exe,Microsoft AD DS/LDS query command line utility,dsquery.exe
 nbtstat.exe,nbtinfo.exe,nbtinfo.exe,Microsoft TCP/IP NetBios Information,nbtstat.exe
 nltest.exe,nltestrk.exe,nltestrk.exe,Microsoft® Logon Server Test Utility,nltest.exe
 qprocess.exe,qprocess,qprocess.exe,Query Process Utility,qprocess.exe
 qwinsta.exe,qwinsta,qwinsta.exe,Query Session Utility,qwinsta.exe
 ANY,nc,nc.exe,NetCat for Windows - https://github.com/diegocr/netcat,nc.exe
 ANY,AdFind.exe,AdFind.exe,Joeware ADFind,AdFind.exe
 ANY,rclone,rclone.exe,Rsync for cloud storage,rclone.exe
 ANY,MEGAsync.exe,MEGAsync.exe,MEGAsync,MEGAsync.exe
 ANY,MEGAcmdShell.exe,MEGAcmdShell,MEGAcmdShell,MEGAcmdShell
 ANY,pCloud.exe,pCloud.exe,pCloud cloud storage,pCloud.exe
 ANY,,pCloud Drive.exe,pCloud setup,pCloud Drive.exe
 ANY,mimikatz,mimikatz.exe,mimikatz for Windows,mimikatz.exe
 ANY,ProcDump,procdump,Sysinternals process dump utility,procdump.exe
 ANY,ProcDump,procdump,Sysinternals process dump utility,procdump64.exe
 ANY,Ammyy Admin,,Ammyy Admin,AA_v3.exe
 ANY,,,AnyDesk,AnyDesk.exe
 ANY,PDQDeploySetup.exe,PDQDeploySetup.exe,PDQ Deploy Install,Deploy_19.3.298.0.exe
 ANY,PDQInventory.exe,PDQInventory.exe,PDQ Inventory Installer,Inventory_19.3.298.0.exe
 ANY,,,UltraVNC Setup,UltraVNC_1_3_81_X64_Setup.exe
 ANY,,,File Shredder by PowTools,file_shredder_setup.exe
 ANY,,pCloud Drive.exe,pCloud Drive,pCloud_Windows_3.11.12_x64.exe
 plink.exe,Plink,Plink,"Command-line SSH, Telnet, and Rlogin client",plink.exe
 pscp.exe,PSCP,PSCP,Command-line SCP/SFTP client,pscp.exe
 psftp.exe,PSFTP,PSFTP,Command-line interactive SFTP client,psftp.exe
 ANY,,,Total Commander Installer,tcmd1000x32.exe
 ANY,BulletsPassView,BulletsPassView.exe,BulletsPassView,BulletsPassView.exe
 ANY,WinLister,WinLister.exe,WinLister,winlister.exe
 ANY,HRSword,HRSword.exe,Huorong Sword GUI Frontend,HRSword v5.0.47.bin
 ANY,,,Email Password-Recovery,mailpv.exe
 ANY,Process Hacker,ProcessHacker.exe,Process Hacker,ProcessHacker.exe
 ANY,peview,peview.exe,PE Viewer,peview.exe
 ANY,ChromePass,ChromePass,Chrome Password Recovery,ChromePass.exe
 ANY,,,Application for scanning networks,netscan.exe
 ANY,WKV,,Extracts wireless keys stored by Windows,WirelessKeyView.exe
 ANY,Remote Desktop PassView,rdpv.exe,Password Recovery for Remote Desktop,rdpv.exe
 ANY,RouterPassView,RouterPassView.exe,Decrypts Router files.,RouterPassView.exe
 ANY,RemCom,RemCom.exe,Remote Command Executor,RemCom.exe
 ANY,,,Remote Utilities,host7.1.2.0.exe
 ANY,,viewer.7.1.2.0.exe,Remote Utilities - Viewer,viewer7.1.2.0.exe
 ANY,Web Browser Pass View,,Web Browser Password Viewer,WebBrowserPassView.exe
 ANY,PowerTool.exe,PowerTool.exe,Anti-virus/rootkit/bootkit Tool,PowerTool64.exe
 ANY,,winscp.com,Console interface for WinSCP,WinSCP.com
 ANY,winscp,winscp.exe,"WinSCP: SFTP, FTP, WebDAV, S3 and SCP client",WinSCP.exe
 ANY,iepv,iepv.exe,IE Passwords Viewer,iepv.exe
 ANY,VNCPassView,VNCPassView.exe,VNCPassView,VNCPassView.exe
 ANY,PCHunter,PCHunter.exe,Epoolsoft Windows Information View Tools,PCHunter32.exe
 ANY,Massscan_GUI.exe,Massscan_GUI.exe,Masscan_GUI,Massscan_GUI.exe
 ANY,ProxyLite.Windows.Console.exe,ProxyLite.Windows.Console.exe,ProxyLite Console Client,ProxyLite
 ANY,action1_agent.exe,action1_agent.exe,Endpoint Agent,Action1 agent
 ANY,action1_remote.exe,action1_remote.exe,Endpoint Agent,Action1 agent
 ANY,Defender Control,Defender Control,Windows Defender Control,Windows Defender Control
 ANY,NirCmd,NirCmd.exe,Nir Sofer,nircmd.exe
 ANY,NSudo,NSudo.exe,NSudo for Windows,Nsudo
 ANY,Python Application,pythonw.exe,Python,Python 3.10.0 packaged with DWAgent - possibly noisy.


sources:
 - query: |
 LET bins &amp;lt;= SELECT
 if(condition=Filename='',then='ANY',
 else=lowcase(string=Filename)) AS Filename,
 if(condition=Internal='',then='ANY',
 else=lowcase(string=Internal)) AS Internal,
 if(condition=Original='',then='ANY',
 else=lowcase(string=Original)) AS Original
 FROM VersionInfoTable

 SELECT
 OSPath, Name, Size,
 parse_pe(file=OSPath).VersionInformation as VersionInformation,
 hash(path=OSPath) as Hash,
 Mtime, Atime, Ctime, Btime
 FROM glob(globs=TargetGlob)
 WHERE
 NOT IsDir AND NOT IsLink
 AND (
 (( lowcase(string=VersionInformation.OriginalFilename) in bins.Original
 OR lowcase(string=VersionInformation.InternalName) in bins.Internal )
 AND NOT lowcase(string=Name) in bins.Filename )
 OR OSPath =~ 'C:\\\\Windows\\\\System32\\\\(osk|Magnify|Narrator|DisplaySwitch).exe$'
 AND NOT VersionInformation.OriginalFilename =~ '^(osk|SR|Narrator|ScreenMagnifier|DisplaySwitch)\.exe$'
 )

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.CryptnetUrlCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.cryptneturlcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.cryptneturlcache/</guid><description>&lt;p>This artifact will hunt for evidence of Certutil use as a download cradle.&lt;/p>
&lt;p>The CryptnetUrlCache contains both content and metadata of files downloaded by
CertUtil and other Windows Crypto components. The artifact will first look for
content larger than a specified size, then check headers against a whitelist
of common content types. Additional options include a UrlWhitelist and search
of VSS.&lt;/p>
&lt;p>NOTE: Expect some false positives and build a whitelist of Urls to add for
regular hunts. Alternatively target specific headers such as PE files by
adding &amp;lsquo;^MZ&amp;rsquo; to the HeaderRegex field.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Detection.CryptnetUrlCache
description: |
 This artifact will hunt for evidence of Certutil use as a download cradle.

 The CryptnetUrlCache contains both content and metadata of files downloaded by
 CertUtil and other Windows Crypto components. The artifact will first look for
 content larger than a specified size, then check headers against a whitelist
 of common content types. Additional options include a UrlWhitelist and search
 of VSS.

 NOTE: Expect some false positives and build a whitelist of Urls to add for
 regular hunts. Alternatively target specific headers such as PE files by
 adding '^MZ' to the HeaderRegex field.

author: &amp;quot;@mgreen27 - Matt Green&amp;quot;

reference:
 - https://thinkdfir.com/2020/07/30/certutil-download-artefacts/
 - https://lolbas-project.github.io/lolbas/Binaries/Certutil/


parameters:
 - name: GlobLookup
 default: |
 FileGlob
 C:\Windows\*\config\systemprofile\AppData\LocalLow\Microsoft\CryptnetUrlCache\**
 C:\Users\*\AppData\LocalLow\Microsoft\CryptnetUrlCache\**
 - name: SusSize
 description: &amp;quot;Size in bytes for CryptnetUrlCache content to be suspicious&amp;quot;
 default: '10000'
 type: int
 - name: HeaderRegex
 description: 'Regex of content headers.'
 default: '.'
 type: regex
 - name: HeaderWhitelist
 description: 'Whitelist regex of content headers.'
 default: '^(MSCF|0|&amp;lt;|.&amp;lt;|----)'
 type: regex
 - name: UrlWhitelist
 description: 'Regex to whitelist Url field'
 type: regex
 - name: SearchVSS
 description: &amp;quot;Add VSS into query.&amp;quot;
 type: bool


sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- file target globs
 LET CryptnetUrlCache &amp;lt;= SELECT FileGlob
 FROM parse_csv(filename=GlobLookup, accessor='data')


 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths(path) = SELECT * FROM glob(globs=path) WHERE NOT IsDir


 -- function returning list of VSS paths corresponding to path
 LET vsspaths(path) = SELECT *
 FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)
 WHERE NOT IsDir


 -- determine files in scope from globs
 LET files &amp;lt;= SELECT * FROM foreach(row=CryptnetUrlCache,
 query={
 SELECT * FROM if(condition=SearchVSS,
 then= {
 SELECT * FROM vsspaths(path=FileGlob)
 },
 else= {
 SELECT * FROM fspaths(path=FileGlob)
 })
 })


 -- extract metadata lines
 LET metadata = SELECT * FROM foreach(row=files,
 query={
 SELECT
 FullPath as MetaPath,
 Mtime as MetaMtime,
 Ctime as MetaCtime,
 Atime as MetaAtime,
 parse_string_with_regex(
 string=utf16(string=Line),
 regex=['[\\s\\S]*(?P&amp;lt;Url&amp;gt;(http[s]?:|\\\\\\\\|ftp:)[\\s\\S]+)']
 ).Url as Url
 FROM parse_lines(filename=FullPath)
 WHERE MetaPath =~ '\\\\Microsoft\\\\CryptnetUrlCache\\\\metadata\\\\'
 GROUP BY MetaPath
 })


 -- find suspicious content files and extract headers
 LET hits = SELECT
 FullPath,Name,Size,
 Mtime, Atime, Ctime,
 hash(path=FullPath) as Hash,
 read_file(length=4,filename=FullPath) as Header
 FROM files
 WHERE
 FullPath =~ '\\\\Microsoft\\\\CryptnetUrlCache\\\\Content\\\\'
 AND Size &amp;gt; int(int=SusSize)


 -- output rows
 SELECT * FROM foreach(row=hits,
 query={
 SELECT
 FullPath,Name,Size,Header,
 Mtime, Atime, Ctime,
 Url, Hash,
 if(condition= Header=~ 'MZ',
 then= parse_pe(file=FullPath).VersionInformation,
 else= 'N/A' ) as VersionInformation,
 if(condition= Header=~ 'MZ',
 then= authenticode(filename=FullPath),
 else= 'N/A' ) as Authenticode,
 MetaPath,
 MetaMtime,MetaAtime,MetaCtime
 FROM metadata
 WHERE
 MetaPath =~ Name
 AND Header =~ HeaderRegex
 AND NOT if(condition= HeaderWhitelist,
 then= Header =~ HeaderWhitelist,
 else= FALSE)
 AND NOT if(condition=UrlWhitelist,
 then= Url =~ UrlWhitelist,
 else= FALSE)
 AND split(
 string=FullPath,
 sep='CryptnetUrlCache')[0] = split(string=MetaPath,
 sep='CryptnetUrlCache')[0]
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.EnvironmentVariables</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.environmentvariables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.environmentvariables/</guid><description>&lt;p>Find processes with the specified environment variables.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.EnvironmentVariables
description: |
 Find processes with the specified environment variables.

parameters:
 - name: ProcessNameRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: EnvironmentVariableRegex
 default: COMSPEC|COR_PROFILER
 type: regex
 - name: FilterValueRegex
 default: .
 type: regex
 - name: WhitelistValueRegex
 description: Ignore these values
 default: ^C:\\Windows\\.+cmd.exe$
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 SELECT * FROM foreach(
 row={
 SELECT * FROM Artifact.Windows.Memory.ProcessInfo(
 ProcessNameRegex=ProcessNameRegex, PidRegex=PidRegex)
 },
 query={
 SELECT Pid, Name, ImagePathName, CommandLine,
 _key AS Var, _value AS Value
 FROM items(item=Env)
 })
 WHERE Var =~ EnvironmentVariableRegex
 AND Value =~ FilterValueRegex
 AND NOT Value =~ WhitelistValueRegex

 notebook:
 - type: Markdown
 template: |-
 # Process Environment Variables

 Environment variables control the way subprocesses work. In
 this artifact we look for processes with unusual sets of
 environment variables.

 {{ $unusual := Query "SELECT * FROM source() WHERE \
 Var =~ 'COR_PROFILER|COMPlus_ETWEnabled'" | Expand }}

 {{ if $unusual }}
 ## Some unusual environment variables.

 There have been some unusual environment variables
 detected. These normally indicate malicious activity.

 {{ Table $unusual }}

 {{ end }}

 {{ $unusual = Query "SELECT * FROM source() WHERE \
 Var =~ 'COMSPEC' AND NOT Value =~ 'cmd.exe$'" | Expand }}
 {{ if $unusual }}

 ## Unusual COMSPEC setting.

 The `COMSPEC` environment variable is usually used to launch
 the command prompt (cmd.exe) but Velociraptor found some
 hits where this is not the case. It could indicate malicious
 activity.

 {{ Table $unusual }}

 {{ end }}

 - type: VQL
 template: |

 /* Markdown
 ## All collected results.

 */

 SELECT * FROM source()
 LIMIT 50

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.ForwardedImports</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.forwardedimports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.forwardedimports/</guid><description>&lt;p>In Windows a common DLL hooking technique is to replace a dll with a
forwarder dll - i.e. one that forwards all imports to the real
dll. If the forwarder DLL is placed earlier in the import order, the
malicous DLL will be seamlessly loaded and injected into another
process.&lt;/p>
&lt;p>This artifact searches for dlls which are named the same as the DLL
they are forwarding to.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.ForwardedImports
description: |
 In Windows a common DLL hooking technique is to replace a dll with a
 forwarder dll - i.e. one that forwards all imports to the real
 dll. If the forwarder DLL is placed earlier in the import order, the
 malicous DLL will be seamlessly loaded and injected into another
 process.

 This artifact searches for dlls which are named the same as the DLL
 they are forwarding to.

reference:
 - https://github.com/monoxgas/Koppeling
 - https://silentbreaksecurity.com/adaptive-dll-hijacking/
 - https://www.mdsec.co.uk/2020/10/i-live-to-move-it-windows-lateral-movement-part-3-dll-hijacking/

parameters:
 - name: DLLGlob
 default: C:\windows\**\*.dll
 - name: ExcludeRegex
 default: WinSXS|Servicing
 type: regex
 - name: LogPeriod
 type: int
 description: How often to log progress in seconds (Default every 1 sec)
 default: 1

sources:
 - query: |
 LET DLLs = SELECT OSPath, Name,

 -- Remove the .dll extension if present to get the bare dll filename.
 lowcase(string=parse_string_with_regex(
 regex="^(?P&amp;lt;BareName&amp;gt;[^.]+)", string=Name).BareName) AS DLLBareName,
 count() AS Total
 FROM glob(globs=DLLGlob)
 WHERE NOT OSPath =~ ExcludeRegex

 LET ParsedDLLs = SELECT *,
 log(message="Examining %v after checking %v DLLs",
 args=[OSPath, Total], dedup= LogPeriod ) AS Log
 FROM foreach(
 row=DLLs, workers=20,
 query={
 SELECT OSPath, Name,
 parse_pe(file=OSPath).Forwards AS Forwards,
 DLLBareName, Total
 FROM scope()
 })

 -- Speed up analysis a bit by using more workers.
 SELECT * FROM foreach(row=ParsedDLLs,
 query={
 SELECT OSPath AS DllPath, ForwardedImport,

 -- The Bare DLL Name from the forwarded name
 Parse.DllPath AS DllImportPath,

 -- The export this is forwarding to.
 Parse.Export AS DLLExportFunc,
 DLLBareName,

 -- The bare dll name the export is referring to.
 basename(path=lowcase(string=Parse.DllPath)) AS ExportDLLName
 FROM foreach(row=Forwards,
 query={
 SELECT parse_string_with_regex(
 regex="(?P&amp;lt;DllPath&amp;gt;.+)\\.(?P&amp;lt;Export&amp;gt;[^.]+$)",
 string=_value) AS Parse,
 _value AS ForwardedImport
 FROM scope()
 })

 -- Only flag imports for forwarder dll name the same as its own dll.
 WHERE ExportDLLName = DLLBareName
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Impersonation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.impersonation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.impersonation/</guid><description>&lt;p>An access token is an object that describes the security context of
a process or thread. The information in a token includes the
identity and privileges of the user account associated with the
process or thread. When a user logs on, the system verifies the
user&amp;rsquo;s password by comparing it with information stored in a
security database.&lt;/p>
&lt;p>Every process has a primary token that describes the security
context of the user account associated with the process. By default,
the system uses the primary token when a thread of the process
interacts with a securable object. Moreover, a thread can
impersonate a client account. Impersonation allows the thread to
interact with securable objects using the client&amp;rsquo;s security
context. A thread that is impersonating a client has both a primary
token and an impersonation token.&lt;/p>
&lt;p>This artfiact enumerates all threads on the system which have an
impersonation token. I.e. they are operating with a different token
then the token the entire process has. For example mimikatz has a
command called &lt;code>token::elevate&lt;/code> to do just such a thing:&lt;/p>
&lt;pre>&lt;code>mimikatz # privilege::debug
Privilege '20' OK

mimikatz # token::elevate
Token Id : 0
User name :
SID name : NT AUTHORITY\SYSTEM

688 {0;000003e7} 1 D 42171 NT AUTHORITY\SYSTEM S-1-5-18 (04g,21p) Primary
-&amp;gt; Impersonated !
* Process Token : {0;000195ad} 1 F 757658339 DESKTOP-NHNHT65\mic S-1-5-21-2310288903-2791442386-3035081252-1001 (15g,24p) Primary
* Thread Token : {0;000003e7} 1 D 759094260 NT AUTHORITY\SYSTEM S-1-5-18 (04g,21p) Impersonation (Delegation)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Impersonation
description: |
 An access token is an object that describes the security context of
 a process or thread. The information in a token includes the
 identity and privileges of the user account associated with the
 process or thread. When a user logs on, the system verifies the
 user's password by comparing it with information stored in a
 security database.

 Every process has a primary token that describes the security
 context of the user account associated with the process. By default,
 the system uses the primary token when a thread of the process
 interacts with a securable object. Moreover, a thread can
 impersonate a client account. Impersonation allows the thread to
 interact with securable objects using the client's security
 context. A thread that is impersonating a client has both a primary
 token and an impersonation token.

 This artfiact enumerates all threads on the system which have an
 impersonation token. I.e. they are operating with a different token
 then the token the entire process has. For example mimikatz has a
 command called `token::elevate` to do just such a thing:

 ```
 mimikatz # privilege::debug
 Privilege '20' OK

 mimikatz # token::elevate
 Token Id : 0
 User name :
 SID name : NT AUTHORITY\SYSTEM

 688 {0;000003e7} 1 D 42171 NT AUTHORITY\SYSTEM S-1-5-18 (04g,21p) Primary
 -&amp;gt; Impersonated !
 * Process Token : {0;000195ad} 1 F 757658339 DESKTOP-NHNHT65\mic S-1-5-21-2310288903-2791442386-3035081252-1001 (15g,24p) Primary
 * Thread Token : {0;000003e7} 1 D 759094260 NT AUTHORITY\SYSTEM S-1-5-18 (04g,21p) Impersonation (Delegation)
 ```
reference:
 - https://github.com/kslgroup/TokenImp-Token_Impersonation_Detection/blob/master/TokenImp%20documentation.pdf


precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET processes = SELECT Pid AS ProcPid, Name AS ProcName,
 Username, OwnerSid, TokenIsElevated,
 CommandLine, Exe
 FROM pslist()
 WHERE log(message=format(format="Inspecting %s (%v)", args=[ProcName, Pid]))

 SELECT * FROM foreach(row=processes,
 query={
 // List all the threads and check that their tokens are the
 // same as the process token.
 SELECT ProcPid, ProcName, Username, OwnerSid, TokenIsElevated,
 CommandLine, Exe, ThreadInfo.TokenInfo AS ImpersonationToken
 FROM handles(pid=ProcPid, types='Thread')
 WHERE ImpersonationToken.User AND ImpersonationToken.User != OwnerSid
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Mutants</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.mutants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.mutants/</guid><description>&lt;p>Enumerate the mutants from selected processes.&lt;/p>
&lt;p>Mutants are often used by malware to prevent re-infection.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Mutants
description: |
 Enumerate the mutants from selected processes.

 Mutants are often used by malware to prevent re-infection.

parameters:
 - name: processRegex
 description: A regex applied to process names.
 default: .
 type: regex
 - name: MutantNameRegex
 default: .+
 type: regex
 - name: MutantWhitelistRegex
 default:
 type: regex

sources:
 - name: Handles
 description: Open handles to mutants. This shows processes owning a handle open to the mutant.
 query: |
 LET processes = SELECT Pid AS ProcPid, Name AS ProcName, Exe
 FROM pslist()
 WHERE ProcName =~ processRegex AND ProcPid &amp;gt; 0

 SELECT * FROM foreach(
 row=processes,
 query={
 SELECT ProcPid, ProcName, Exe, Type, Name, Handle
 FROM handles(pid=ProcPid, types="Mutant")
 })
 WHERE Name =~ MutantNameRegex
 AND if(condition= MutantWhitelistRegex,
 then= NOT Name =~ MutantWhitelistRegex,
 else= True )

 - name: ObjectTree
 description: Reveals all Mutant objects in the Windows Object Manager namespace.
 query: |
 SELECT Name, Type FROM winobj()
 WHERE Type = 'Mutant' AND Name =~ MutantNameRegex
 AND if(condition= MutantWhitelistRegex,
 then= NOT Name =~ MutantWhitelistRegex,
 else= True )

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.ProcessCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.processcreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.processcreation/</guid><description>&lt;p>This artifact logs specific process creation events to
Velociraptor. It auto-installs Sysmon and it watches the Sysmon ETW
provider for new events.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.ProcessCreation
description: |
 This artifact logs specific process creation events to
 Velociraptor. It auto-installs Sysmon and it watches the Sysmon ETW
 provider for new events.

author: Jos Clephas - @DfirJos

type: CLIENT_EVENT

tools:
 - name: SysmonBinary
 url: https://live.sysinternals.com/tools/sysmon64.exe
 serve_locally: true

 - name: SysmonConfig
 url: https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml
 serve_locally: true

parameters:
 - name: ImageRegex
 default: .
 - name: CommandLineRegex
 default: .
 - name: ParentImageRegex
 default: .
 - name: OriginalFileNameRegex
 default: .
 - name: ParentUserRegex
 default: .
 - name: UserRegex
 default: .
 - name: HashesRegex
 default: .
 - name: ParentCommandLineRegex
 default: .
 - name: IntegrityLevelRegex
 default: .
 - name: ProductRegex
 default: .
 - name: CompanyRegex
 default: .
 - name: DescriptionRegex
 default: .
 - name: FileVersionRegex
 default: .
 - name: SysmonFileLocation
 description: If set, we check this location first for sysmon installed.
 default: C:/Windows/sysmon64.exe

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 // Make sure sysmon is installed.
 LET _ &amp;lt;= SELECT * FROM Artifact.Windows.Sysinternals.SysmonInstall(
 SysmonFileLocation=SysmonFileLocation)

 SELECT *, { SELECT Hostname FROM info() } as Hostname FROM Artifact.Windows.Sysinternals.SysmonLogForward()
 WHERE ID = 1 AND
 EventData.Image =~ ImageRegex AND
 EventData.CommandLine =~ CommandLineRegex AND
 EventData.ParentImage =~ ParentImageRegex AND
 EventData.OriginalFileName =~ OriginalFileNameRegex AND
 EventData.ParentUser =~ ParentUserRegex AND
 EventData.User =~ UserRegex AND
 EventData.Hashes =~ HashesRegex AND
 EventData.ParentCommandLine =~ ParentCommandLineRegex AND
 EventData.IntegrityLevel =~ IntegrityLevelRegex AND
 EventData.Product =~ ProductRegex AND
 EventData.Company =~ CompanyRegex AND
 EventData.Description =~ DescriptionRegex AND
 EventData.FileVersion =~ FileVersionRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.PsexecService</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.psexecservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.psexecservice/</guid><description>&lt;p>PSExec works by installing a new service in the system. The service
can be renamed using the -r flag and therefore it is not enough to
just watch for a new service called psexecsvc.exe. This artifact
improves on this by scanning the service binary to detect the
original psexec binary.&lt;/p>
&lt;p>NOTE that if the service is very quick we are unable to examine
the service binary in time and will miss it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.PsexecService
description: |
 PSExec works by installing a new service in the system. The service
 can be renamed using the -r flag and therefore it is not enough to
 just watch for a new service called psexecsvc.exe. This artifact
 improves on this by scanning the service binary to detect the
 original psexec binary.

 NOTE that if the service is very quick we are unable to examine
 the service binary in time and will miss it.

type: CLIENT_EVENT

parameters:
 - name: yaraRule
 type: yara
 default: |
 rule Hit {
 strings:
 $a = "psexec" nocase wide ascii
 condition:
 any of them
 }

sources:
 - query: |
 LET file_scan = SELECT Name AS ServiceName,
 PathName, File.ModTime AS Modified,
 File.Size AS FileSize,
 String.Offset AS StringOffset,
 String.HexData AS StringContext,
 now() AS Timestamp,
 ServiceType, PID,
 {
 SELECT Name, Exe, CommandLine
 FROM pslist() WHERE Ppid = PID
 LIMIT 2
 } AS ChildProcess
 FROM yara(rules=yaraRule, files=PathName)
 WHERE Rule

 LET service_creation = SELECT Parse,
 Parse.TargetInstance.Name AS Name,
 Parse.TargetInstance.PathName As PathName,
 Parse.TargetInstance.ServiceType As ServiceType,
 Parse.TargetInstance.ProcessId AS PID
 FROM wmi_events(
 query="SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Service'",
 wait=5000000,
 namespace="ROOT/CIMV2")

 SELECT * FROM foreach(
 row=service_creation,
 query=file_scan)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.PsexecService.Kill</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.psexecservice.kill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.psexecservice.kill/</guid><description>&lt;p>Psexec can launch a service remotely. This artifact implements a
client side response plan whereby all the child processes of the
service are killed.&lt;/p>
&lt;p>NOTE: There is an inherent race between detection and response. If
the psexec is very quick we will miss it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.PsexecService.Kill
description: |
 Psexec can launch a service remotely. This artifact implements a
 client side response plan whereby all the child processes of the
 service are killed.

 NOTE: There is an inherent race between detection and response. If
 the psexec is very quick we will miss it.

type: CLIENT_EVENT

parameters:
 - name: yaraRule
 type: yara
 default: |
 rule Hit {
 strings:
 $a = "psexec" nocase wide ascii
 condition:
 any of them
 }

sources:
 - query: |
 SELECT * FROM foreach(
 row={ SELECT * FROM Artifact.Windows.Detection.PsexecService() },
 query={
 SELECT ServiceName, PathName, Modified, FileSize, Timestamp,
 ServiceType, ChildProcess, Stdout, Stderr FROM execve(
 argv=["taskkill", "/PID", PID, "/T", "/F"])
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Registry</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.registry/</guid><description>&lt;p>This artifact detects registry changes and triggers an alert.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Registry
description: |
 This artifact detects registry changes and triggers an alert.

author: Jos Clephas - @DfirJos

type: CLIENT_EVENT

precondition:
 SELECT * FROM info() WHERE OS =~ "windows"

parameters:
 - name: Period
 type: int
 default: 120
 - name: RegistryPath
 default: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\*
 - name: RegistryData
 type: regex
 default: .
 - name: AlertName
 default: "T1112 - Suspicious registry key modification"
 - name: diff
 default: added
 - name: CertificateInfo
 default: N
 type: bool
 - name: regex_IssuerName
 default: .
 - name: UntrustedAuthenticode
 description: Show only Executables that are not trusted by Authenticode.
 type: bool
 default: N
 - name: Calculate_hashes
 default: N
 type: bool
 - name: regex_sha256
 default: .
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - query: |

 LET query_registry = SELECT *, OSPath.String + Data.value AS FullPath,
 expand(path=Data.value) AS Datavalue
 FROM glob(globs=RegistryPath, accessor="registry") WHERE Data.value =~ RegistryData

 LET query_diff = SELECT *, commandline_split(command=Datavalue) as AbsolutePath
 FROM diff(query=query_registry, period=Period, key="FullPath")
 WHERE Diff = diff

 SELECT *,
 alert(name=AlertName, Key=OSPath, Value=Datavalue, RegistryValue=Diff) as AlertSent,
 if(condition=Calculate_hashes,
 then=hash(path=AbsolutePath[0], accessor="auto")) AS Hash,
 if(condition=CertificateInfo,
 then=authenticode(filename=AbsolutePath[0])) AS Certinfo
 FROM query_diff
 WHERE Diff = diff
 AND Hash.SHA256 =~ regex_sha256
 AND Certinfo.IssuerName=~regex_IssuerName
 AND NOT if(condition= UntrustedAuthenticode,
 then= Certinfo.Trusted = 'trusted',
 else= False )

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Service.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.service.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.service.upload/</guid><description>&lt;p>When a new service is installed, upload the service binary to the server&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Service.Upload
description: |
 When a new service is installed, upload the service binary to the server

type: CLIENT_EVENT

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 // Sometimes the image path contains the full command line - we
 // try to extract the first parameter as the binary itself. Deal
 // with two options - either quoted or not.
 SELECT ServiceName, upload(file=regex_replace(
 source=ImagePath,
 replace="$2",
 re='^("([^"]+)" .+|([^ ]+) .+)')) AS Upload,
 Timestamp, _EventData, _System
 FROM Artifact.Windows.Events.ServiceCreation()

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.TemplateInjection</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.templateinjection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.templateinjection/</guid><description>&lt;p>This content will detect injected templates in Office and RTF documents.&lt;/p>
&lt;p>Template injection is a form of defence evasion.
For office documents a malicious macro is loaded into an OOXML document
via a resource file masquerading as an office template. The OOXML artifact structure
will also detect MSHTML RCE Vulnerability #CVE-2021-40444 which has a similar payload technique.
For RTF documents a malicious payload can be delivered by modifying document
formatting control via the &amp;ldquo;\*\template&amp;rdquo; structure.&lt;/p>
&lt;p>This artifact can be modified to search for other suspicious rels files:&lt;/p>
&lt;ul>
&lt;li>document.xml.rels = macros, ole objects, images.&lt;/li>
&lt;li>settings.xml.rels = templates.&lt;/li>
&lt;li>websettings.xml.rels = frames.&lt;/li>
&lt;li>header#.xml.rels and footer#.xml.rels and others has also been observed
hosting image files for canary files or abused for NetNTLM hash collection.&lt;/li>
&lt;/ul>
&lt;p>Change TemplateFileRegex to &amp;lsquo;\.xml\.rels$&amp;rsquo; for looser file selection.
Change TemplateTargetRegex to &amp;lsquo;^(https?|smb|\\|//|mhtml|file)&amp;rsquo; for looser
Target selection.&lt;/p>
&lt;p>This artifact can also be modified to quickly deploy yara based detections on
other documents. Simply replace RtfYara with yara of interest and modify glob
for targeting.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.TemplateInjection
author: Matt Green - @mgreen27
description: |
 This content will detect injected templates in Office and RTF documents.

 Template injection is a form of defence evasion.
 For office documents a malicious macro is loaded into an OOXML document
 via a resource file masquerading as an office template. The OOXML artifact structure
 will also detect MSHTML RCE Vulnerability #CVE-2021-40444 which has a similar payload technique.
 For RTF documents a malicious payload can be delivered by modifying document
 formatting control via the "\\\*\template" structure.


 This artifact can be modified to search for other suspicious rels files:

 - document.xml.rels = macros, ole objects, images.
 - settings.xml.rels = templates.
 - websettings.xml.rels = frames.
 - header#.xml.rels and footer#.xml.rels and others has also been observed
 hosting image files for canary files or abused for NetNTLM hash collection.

 Change TemplateFileRegex to '\\.xml\\.rels$' for looser file selection.
 Change TemplateTargetRegex to '^(https?|smb|\\\\|//|mhtml|file)' for looser
 Target selection.

 This artifact can also be modified to quickly deploy yara based detections on
 other documents. Simply replace RtfYara with yara of interest and modify glob
 for targeting.



reference:
 - https://attack.mitre.org/techniques/T1221/
 - https://www.sans.org/reading-room/whitepapers/testing/template-injection-attacks-bypassing-security-controls-living-land-38780

type: CLIENT

parameters:
 - name: SearchGlob
 description: Glob to search
 default: C:\Users\**\*.{rtf,doc,dot,docx,docm,dotx,dotm,docb,xls,xlt,xlm,xlsx,xlsm,xltx,xltm,xlsb,ppt,pptx,pptm,potx,potm}
 - name: TemplateFileRegex
 description: Regex to search inside resource section.
 default: '(document|settings)\.xml\.rels$'
 type: regex
 - name: TemplateTargetRegex
 description: Regex to search inside resource section.
 default: '^(https?|smb|\\\\|//|mhtml)'
 type: regex
 - name: UploadDocument
 type: bool
 description: Select to upload document on detection.
 - name: RtfYara
 type: yara
 default: |
 rule RTF_TemplateInjection {
 meta:
 author = "Matt Green - @mgreen27"
 description = "Yara for RTF template injection. Using regex match to extract template information"

 strings:
 $regex1 = /\{\\\*\\template\s+http[^\}]+\}/ nocase
 $regex2 = /\{\\\*\\templates\s+\\u-[^\}]+\}/ nocase
 $regex3 = /\{\\\*\\template\s+file[^\}]+\}/ nocase

 condition:
 // header is {\rt only to also flag on malformed rtf heders
 uint32be(0) == 0x7B5C7274 and 1 of them
 }

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- Find target docs
 LET office_docs = SELECT OSPath, Mtime, Size
 FROM glob(globs=SearchGlob)
 WHERE NOT IsDir and Size &amp;gt; 0

 LET rtf_injection &amp;lt;= SELECT * FROM foreach(
 row=office_docs,
 query={
 SELECT
 OSPath AS DocumentPath,
 hash(path=OSPath) as DocumentHash,
 Mtime,
 Size,
 'YaraHit: ' + Rule as Section,
 regex_replace(
 source=String.Data,
 re='\{...template\s*|\}',replace='') as TemplateTarget
 FROM yara(files=OSPath, rules=RtfYara)
 WHERE NOT TemplateTarget =~ '^http(s|)://schemas\.microsoft\.com/'

 })

 -- select zip members inside the doc that have some content.
 LET document_parts = SELECT * FROM foreach(
 row={
 SELECT
 OSPath AS OfficePath,
 Mtime as OfficeMtime,
 Size as OfficeSize
 FROM office_docs
 WHERE NOT OSPath in rtf_injection.OSPath
 },
 query= {
 SELECT
 Mtime, Atime, Ctime,
 OSPath,
 OSPath.Path AS ZipMemberPath,
 OfficePath
 FROM glob(
 globs="/**",
 root=pathspec(DelegatePath=OfficePath),
 accessor='zip')
 WHERE not IsDir
 AND Size &amp;gt; 0
 AND ZipMemberPath =~ TemplateFileRegex
 })

 -- parse settings file by line and extract config
 LET template = SELECT * FROM foreach(row=document_parts,
 query={
 SELECT
 OSPath as SectionPath,
 OSPath.DelegatePath as Document,
 OSPath.Path as Section,
 parse_string_with_regex(
 string=Line,
 regex=['\\s+Target="(?P&amp;lt;Target&amp;gt;[^"]+)"\\s+TargetMode='
 ]).Target as TemplateTarget,
 Mtime as SectionMtime,
 Atime as SectionAtime,
 Ctime as SectionCtime
 FROM parse_lines(filename=OSPath, accessor='zip')
 WHERE TemplateTarget
 })

 -- search settings for remote or file templates, format mshtml entries
 LET hits = SELECT * FROM chain(
 rtf = { SELECT * FROM rtf_injection },
 office = {
 SELECT * FROM foreach(row=template,
 query={
 SELECT
 OSPath AS DocumentPath,
 hash(path=OSPath) as DocumentHash,
 Mtime,
 Size,
 Section,
 regex_replace(source=TemplateTarget,
 re='.*Target="(mhtml)',
 replace='mhtml') as TemplateTarget,
 SectionMtime,
 hash(path=SectionPath,accessor='zip') as SectionHash
 FROM stat(filename=Document)
 WHERE
 TemplateTarget =~ TemplateTargetRegex
 AND (( Section=~'/document.xml.rels$' AND TemplateTarget=~'^mhtml:' )
 OR NOT Section=~'/document.xml.rels$' )
 })
 })

 -- upload hits to server
 LET upload_hits = SELECT *, upload(file=DocumentPath) as Upload
 FROM hits

 -- output rows
 SELECT * FROM if(condition= UploadDocument,
 then= { SELECT * FROM upload_hits},
 else= { SELECT * FROM hits})

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Thumbdrives.List</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.list/</guid><description>&lt;p>Users inserting Thumb drives or other Removable drive pose a
constant security risk. The external drive may contain malware or
other undesirable content. Additionally thumb drives are an easy way
for users to exfiltrate documents.&lt;/p>
&lt;p>This artifact watches for any removable drives and provides a
complete file listing to the server for any new drive inserted. It
also provides information about any addition to the thumb drive
(e.g. a new file copied onto the drive).&lt;/p>
&lt;p>We exclude very large removable drives since they might have too
many files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Thumbdrives.List
description: |
 Users inserting Thumb drives or other Removable drive pose a
 constant security risk. The external drive may contain malware or
 other undesirable content. Additionally thumb drives are an easy way
 for users to exfiltrate documents.

 This artifact watches for any removable drives and provides a
 complete file listing to the server for any new drive inserted. It
 also provides information about any addition to the thumb drive
 (e.g. a new file copied onto the drive).

 We exclude very large removable drives since they might have too
 many files.

type: CLIENT_EVENT

parameters:
 - name: maxDriveSize
 type: int
 description: We ignore removable drives larger than this size in bytes.
 default: "32000000000"


sources:
 - query: |
 LET removable_disks = SELECT Name AS Drive,
 atoi(string=Data.Size) AS Size
 FROM glob(globs="/*", accessor="file")
 WHERE Data.Description =~ "Removable" AND Size &amp;lt; atoi(string=maxDriveSize)

 LET file_listing = SELECT OSPath,
 Mtime As Modified,
 Size
 FROM glob(globs=Drive+"\\**", accessor="file")
 LIMIT 1000

 SELECT * FROM diff(
 query={
 SELECT * FROM foreach(
 row=removable_disks,
 query=file_listing)
 },
 key="OSPath",
 period=10)
 WHERE Diff = "added"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Thumbdrives.OfficeKeywords</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.officekeywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.officekeywords/</guid><description>&lt;p>Users inserting Thumb drives or other Removable drive pose a
constant security risk. The external drive may contain malware or
other undesirable content. Additionally thumb drives are an easy way
for users to exfiltrate documents.&lt;/p>
&lt;p>This artifact automatically scans any office files copied to a
removable drive for keywords. This could be useful to detect
exfiltration attempts of restricted documents.&lt;/p>
&lt;p>We exclude very large removable drives since they might have too
many files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Thumbdrives.OfficeKeywords
description: |
 Users inserting Thumb drives or other Removable drive pose a
 constant security risk. The external drive may contain malware or
 other undesirable content. Additionally thumb drives are an easy way
 for users to exfiltrate documents.

 This artifact automatically scans any office files copied to a
 removable drive for keywords. This could be useful to detect
 exfiltration attempts of restricted documents.

 We exclude very large removable drives since they might have too
 many files.

type: CLIENT_EVENT

parameters:
 - name: officeExtensions
 default: "\\.(xls|xlsm|doc|docx|ppt|pptm)$"
 type: regex

 - name: yaraRule
 description: This yara rule will be run on document contents.
 type: yara
 default: |
 rule Hit {
 strings:
 $a = "this is my secret" wide nocase
 $b = "this is my secret" nocase

 condition:
 any of them
 }

sources:
 - query: |
 SELECT * FROM foreach(
 row = {
 SELECT * FROM Artifact.Windows.Detection.Thumbdrives.List()
 WHERE OSPath =~ officeExtensions
 },
 query = {
 SELECT * FROM Artifact.Generic.Applications.Office.Keywords(
 yaraRule=yaraRule, searchGlob=OSPath, documentGlobs="")
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Thumbdrives.OfficeMacros</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.officemacros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.thumbdrives.officemacros/</guid><description>&lt;p>Users inserting Thumb drives or other Removable drive pose a
constant security risk. The external drive may contain malware or
other undesirable content. Additionally thumb drives are an easy way
for users to exfiltrate documents.&lt;/p>
&lt;p>This artifact watches for any removable drives and scans any added
office documents for VBA macros.&lt;/p>
&lt;p>We exclude very large removable drives since they might have too
many files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Thumbdrives.OfficeMacros
description: |
 Users inserting Thumb drives or other Removable drive pose a
 constant security risk. The external drive may contain malware or
 other undesirable content. Additionally thumb drives are an easy way
 for users to exfiltrate documents.

 This artifact watches for any removable drives and scans any added
 office documents for VBA macros.

 We exclude very large removable drives since they might have too
 many files.

type: CLIENT_EVENT

parameters:
 - name: officeExtensions
 default: "\\.(xls|xlsm|doc|docx|ppt|pptm)$"
 type: regex

sources:
 - query: |
 SELECT * FROM foreach(
 row = {
 SELECT * FROM Artifact.Windows.Detection.Thumbdrives.List()
 WHERE OSPath =~ officeExtensions
 },
 query = {
 SELECT * from olevba(file=OSPath)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Usn</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.usn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.usn/</guid><description>&lt;p>NTFS is a journal filesystem. This means that it maintains a journal
file where intended filesystem changes are written first, then the
filesystem is changed. This journal is called the USN journal in NTFS.&lt;/p>
&lt;p>Velociraptor can watch the USN journal for new filesystem
events. This allows Velociraptor to detect when new files are
created or modified.&lt;/p>
&lt;p>A common use case is to determine when a new prefetch file is
modified (this indicates a binary was executed). Note: It seems
prefetch files are not updated immediately - there could be a small
delay between the execution and the prefetch being modified.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Usn
description: |
 NTFS is a journal filesystem. This means that it maintains a journal
 file where intended filesystem changes are written first, then the
 filesystem is changed. This journal is called the USN journal in NTFS.

 Velociraptor can watch the USN journal for new filesystem
 events. This allows Velociraptor to detect when new files are
 created or modified.

 A common use case is to determine when a new prefetch file is
 modified (this indicates a binary was executed). Note: It seems
 prefetch files are not updated immediately - there could be a small
 delay between the execution and the prefetch being modified.

type: CLIENT_EVENT

parameters:
 - name: PathRegex
 description: A regex to match the entire path (you can watch a directory or a file type).
 default: \.pf$
 type: regex
 - name: Device
 description: The NTFS drive to watch
 default: C:\\
 - name: USN_FREQUENCY
 type: int
 description: How many seconds before rechecking the USN journal.
 default: "30"
 - name: NTFS_CACHE_TIME
 type: int
 description: How often to flush the NTFS cache.
 default: "30"

precondition: SELECT OS from info() where OS = "windows"

sources:
 - query: |
 SELECT * FROM watch_usn(device=Device)
 WHERE OSPath =~ PathRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.WMIProcessCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.wmiprocesscreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.wmiprocesscreation/</guid><description>&lt;p>WMI Process creation is a common lateral movement technique. The
attacker simply uses WMI to call the Create() method on the
Win32_Process WMI object.&lt;/p>
&lt;p>This can be easily done via the wmic.exe command or via powershell:&lt;/p>
&lt;pre>&lt;code class="language-bash">wmic process call create cmd.exe
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.WMIProcessCreation
description: |
 WMI Process creation is a common lateral movement technique. The
 attacker simply uses WMI to call the Create() method on the
 Win32_Process WMI object.

 This can be easily done via the wmic.exe command or via powershell:

 ```bash
 wmic process call create cmd.exe
 ```

type: CLIENT_EVENT

sources:
 - query: |
 SELECT Parse from wmi_events(
 query="SELECT * FROM MSFT_WmiProvider_ExecMethodAsyncEvent_Pre WHERE ObjectPath=\"Win32_Process\" AND MethodName=\"Create\"",
 namespace="ROOT/CIMV2",
 wait=50000000)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Yara.Device</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.device/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.device/</guid><description>&lt;p>This artifact enables running Yara over a Physical device and offset
specific targeting.&lt;/p>
&lt;p>There are 2 kinds of Yara rules that can be deployed:&lt;/p>
&lt;ol>
&lt;li>Url link to a yara rule.&lt;/li>
&lt;li>or a Standard Yara rule attached as a parameter.&lt;/li>
&lt;/ol>
&lt;p>Only one method of Yara will be applied and search order is as above. The
default is targeting the Master Boot Record (MBR).&lt;/p>
&lt;p>Note: by default the Yara scan will stop after one hit. Multi-string rules will also only
show one string in returned rows.&lt;/p>
&lt;p>Due to scanning raw devices and size being potentially very large I have included
an example on how to upload the MBR as the default yara rule.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Yara.Device
author: Matt Green - @mgreen27
description: |
 This artifact enables running Yara over a Physical device and offset
 specific targeting.

 There are 2 kinds of Yara rules that can be deployed:

 1. Url link to a yara rule. 
 2. or a Standard Yara rule attached as a parameter. 

 Only one method of Yara will be applied and search order is as above. The
 default is targeting the Master Boot Record (MBR).

 Note: by default the Yara scan will stop after one hit. Multi-string rules will also only
 show one string in returned rows.

 Due to scanning raw devices and size being potentially very large I have included
 an example on how to upload the MBR as the default yara rule.

parameters:
 - name: DevicePath
 default: \\.\PHYSICALDRIVE0
 description: Raw Device for main disk to target.
 - name: StartOffest
 type: int
 default: 0
 - name: ScanLength
 type: int
 default: 512
 - name: YaraUrl
 description: If configured will attempt to download Yara rules from Url
 type: upload
 - name: YaraRule
 type: yara
 default: |
 rule MBR {
 meta:
 author = "Matt Green - @mgreen27"
 description = "Checks MBR header at offset 510 and collects MBR in HitContext"
 strings:
 $mbr = /^.{512}$/ //first entry covering bytes we want to upload.
 $mbrheader = { 55 AA }
 condition:
 $mbr and $mbrheader at 510
 }
 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int64

sources:
 - query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule

 -- target yara with raw_file pachspec
 SELECT
 DevicePath,
 StartOffest,
 ScanLength,
 Namespace,
 Rule,
 Meta,
 Tags,
 String.Name as YaraString,
 String.Offset AS HitOffset,
 upload(
 accessor='data',
 file=String.Data,
 name=format(format='%s_%s',
 args=[basename(path=DevicePath),str(str=String.Offset)])
 ) AS HitContext
 FROM yara(files=pathspec(
 DelegateAccessor="raw_file",
 DelegatePath=DevicePath,
 Path=StartOffest),
 accessor='offset',
 start=0,
 end=ScanLength,
 rules=yara_rules,
 context=ContextBytes,
 number=NumberOfHits )

column_types:
 - name: HitContext
 type: upload_preview

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Yara.NTFS</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.ntfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.ntfs/</guid><description>&lt;p>This artifact searches the MFT, returns a list of target files then runs Yara
over the target list.&lt;/p>
&lt;p>There are 3 kinds of Yara rules that can be deployed:&lt;/p>
&lt;ol>
&lt;li>Url link to a yara rule.&lt;/li>
&lt;li>Shorthand yara in the format &lt;code>wide nocase ascii:string1,string2,string3&lt;/code>.&lt;/li>
&lt;li>or a Standard Yara rule attached as a parameter.&lt;/li>
&lt;/ol>
&lt;p>Only one method of Yara will be applied and search order is as above.&lt;/p>
&lt;p>The artifact leverages Windows.NTFS.MFT so similar regex filters can be applied
including Path, Size and date. The artifact also has an option to search across
all attached drives and upload any files with Yara hits.&lt;/p>
&lt;p>Some examples of path regex may include:&lt;/p>
&lt;ul>
&lt;li>Extension at a path: &lt;code>C:\\Windows\\System32\\.+\.dll$&lt;/code>&lt;/li>
&lt;li>More wildcards: &lt;code>Windows\\.+\\.+\.dll$&lt;/code>&lt;/li>
&lt;li>Specific file: &lt;code>Windows\\System32\\kernel32\.dll$&lt;/code>&lt;/li>
&lt;li>Multiple extentions: &lt;code>\.(php|aspx|resx|asmx)$&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Note: no drive and forward slashes - these expressions are for paths
relative to the root of the filesystem.
If upload is selected NumberOfHits is redundant and not advised as hits are
grouped by path to ensure files only downloaded once.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Yara.NTFS
author: Matt Green - @mgreen27
description: |
 This artifact searches the MFT, returns a list of target files then runs Yara
 over the target list.

 There are 3 kinds of Yara rules that can be deployed:

 1. Url link to a yara rule.
 2. Shorthand yara in the format `wide nocase ascii:string1,string2,string3`.
 3. or a Standard Yara rule attached as a parameter.

 Only one method of Yara will be applied and search order is as above.

 The artifact leverages Windows.NTFS.MFT so similar regex filters can be applied
 including Path, Size and date. The artifact also has an option to search across
 all attached drives and upload any files with Yara hits.

 Some examples of path regex may include:

 * Extension at a path: `C:\\Windows\\System32\\.+\.dll$`
 * More wildcards: `Windows\\.+\\.+\.dll$`
 * Specific file: `Windows\\System32\\kernel32\.dll$`
 * Multiple extentions: `\.(php|aspx|resx|asmx)$`

 Note: no drive and forward slashes - these expressions are for paths
 relative to the root of the filesystem.
 If upload is selected NumberOfHits is redundant and not advised as hits are
 grouped by path to ensure files only downloaded once.

type: CLIENT
parameters:
 - name: FileNameRegex
 description: Only file names that match this regular expression will be scanned.
 default: ^kernel32\.dll$
 - name: PathRegex
 description: Only paths that match this regular expression will be scanned.
 default: C:\\Windows\\System32\\
 - name: DriveLetter
 description: "Target drive. Default is a C:"
 default: "C:"
 - name: SizeMax
 type: int
 - name: SizeMin
 type: int
 - name: AllDrives
 type: bool
 - name: UploadHits
 type: bool
 - name: EarliestSILastChanged
 type: timestamp
 - name: LatestSILastChanged
 type: timestamp
 - name: EarliestFNCreation
 type: timestamp
 - name: LatestFNCreation
 type: timestamp
 - name: YaraUrl
 description: If configured will attempt to download Yara rules form Url
 default:
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule IsPE:TestRule {
 meta:
 author = "the internet"
 date = "2021-03-04"
 description = "A simple PE rule to test yara features"
 condition:
 uint16(0) == 0x5A4D and
 uint32(uint32(0x3C)) == 0x00004550
 }
 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int64
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int


sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- check which Yara to use
 LET yara_rules = YaraUrl || YaraRule

 -- first find all matching files mft
 LET files = SELECT
 OSPath, IsDir
 FROM Artifact.Windows.NTFS.MFT(
 MFTDrive=DriveLetter, AllDrives=AllDrives,
 FileRegex=FileNameRegex,PathRegex=PathRegex,
 SizeMax=SizeMax, SizeMin=SizeMin)
 WHERE NOT IsDir
 AND NOT OSPath =~ '''\\\\.\\.:\\&amp;lt;Err&amp;gt;\\'''
 AND if(condition=EarliestSILastChanged,
 then= LastRecordChange0x10 &amp;gt; EarliestSILastChanged,
 else= True)
 AND if(condition=LatestSILastChanged,
 then= LastRecordChange0x10 &amp;lt; LatestSILastChanged,
 else= True)
 AND if(condition=EarliestFNCreated,
 then= Created0x30 &amp;gt; EarliestFNCreation,
 else= True)
 AND if(condition=LatestFNCreated,
 then= Created0x30 &amp;lt; LatestFNCreation,
 else= True)

 -- scan files and only report a single hit.
 LET hits = SELECT * FROM foreach(row=files,
 query={
 SELECT
 FileName, OSPath,
 File.Size AS Size,
 File.ModTime AS ModTime,
 Rule, Tags, Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 if(condition=String.Data,
 then=upload(
 accessor='scope',
 file='String.Data',
 name=format(format="%v-%v-%v",
 args=[
 OSPath,
 if(condition= String.Offset - ContextBytes &amp;lt; 0,
 then= 0,
 else= String.Offset - ContextBytes),
 if(condition= String.Offset + ContextBytes &amp;gt; File.Size,
 then= File.Size,
 else= String.Offset + ContextBytes) ]
 ))) as HitContext
 FROM yara(rules=yara_rules,
 files=OSPath, context=ContextBytes, number=NumberOfHits)
 })

 -- upload files that have hit
 LET upload_hits=SELECT *,
 upload(file=OSPath) AS Upload
 FROM hits
 GROUP BY OSPath

 -- return rows
 SELECT * FROM if(condition=UploadHits,
 then={ SELECT * FROM upload_hits},
 else={ SELECT * FROM hits})

column_types:
 - name: HitContext
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Yara.PhysicalMemory</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.physicalmemory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.physicalmemory/</guid><description>&lt;p>This artifact enables running Yara over physical memory.&lt;/p>
&lt;p>There are 2 kinds of Yara rules that can be deployed:
 1. Url link to a yara rule.
 2. A Standard Yara rule attached as a parameter.&lt;/p>
&lt;p>Only one method of Yara will be applied and search order is as above. The
default is Cobalt Strike opcodes.&lt;/p>
&lt;p>The artifact will load the winpmem driver, then yara scan the
physical memory and remove the driver.&lt;/p>
&lt;p>NOTE: This artifact is experimental and can crash the system!&lt;/p>
&lt;h3 id="handling-signatures-with-fixed-strings">Handling signatures with fixed strings.&lt;/h3>
&lt;p>When the signature specifies fixed strings, the Yara engine will
load it into memory, causing the signature to match memory used by
Velociraptor. To avoid this false positive encode the fixed
string as an alternative string.&lt;/p>
&lt;p>For example instead of:&lt;/p>
&lt;pre>&lt;code>$sequence_5 = { 250000ff00 33d0 8b4db0 c1e908 }
&lt;/code>&lt;/pre>
&lt;p>Write as:&lt;/p>
&lt;pre>&lt;code>$sequence_5 = { 250000ff00 33d0 8b4db0 c1e9 ( 08 | 08 ) }
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Yara.PhysicalMemory
description: |
 This artifact enables running Yara over physical memory.

 There are 2 kinds of Yara rules that can be deployed:
 &amp;amp;nbsp;1. Url link to a yara rule.
 &amp;amp;nbsp;2. A Standard Yara rule attached as a parameter.

 Only one method of Yara will be applied and search order is as above. The
 default is Cobalt Strike opcodes.

 The artifact will load the winpmem driver, then yara scan the
 physical memory and remove the driver.

 NOTE: This artifact is experimental and can crash the system!

 ### Handling signatures with fixed strings.

 When the signature specifies fixed strings, the Yara engine will
 load it into memory, causing the signature to match memory used by
 Velociraptor. To avoid this false positive encode the fixed
 string as an alternative string.

 For example instead of:
 ```
 $sequence_5 = { 250000ff00 33d0 8b4db0 c1e908 }
 ```

 Write as:
 ```
 $sequence_5 = { 250000ff00 33d0 8b4db0 c1e9 ( 08 | 08 ) }
 ```

type: CLIENT
parameters:
 - name: ServiceName
 description: Override the name of the driver service to install.

 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 100
 type: int64
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int
 - name: YaraUrl
 description: If configured will attempt to download Yara rules from Url
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule win_cobalt_strike_auto {
 meta:
 author = "Felix Bilstein - yara-signator at cocacoding dot com"
 date = "2019-11-26"
 version = "1"
 description = "autogenerated rule brought to you by yara-signator"
 tool = "yara-signator 0.2a"
 malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cobalt_strike"
 malpedia_license = "CC BY-SA 4.0"
 malpedia_sharing = "TLP:WHITE"

 strings:
 $sequence_0 = { 3bc7 750d ff15???????? 3d33270000 }
 $sequence_1 = { e9???????? eb0a b801000000 e9???????? }
 $sequence_2 = { 8bd0 e8???????? 85c0 7e0e }
 $sequence_3 = { ffb5f8f9ffff ff15???????? 8b4dfc 33cd e8???????? c9 c3 }
 $sequence_4 = { e8???????? e9???????? 833d?????????? 7505 e8???????? }
 $sequence_5 = { 250000ff00 33d0 8b4db0 c1e9 ( 08 | 08 ) }
 $sequence_6 = { ff75f4 ff7610 ff761c ff75 (fc | fc) }
 $sequence_7 = { 8903 6a06 eb39 33ff 85c0 762b 03 ( f1 | f1 ) }
 $sequence_8 = { 894d ( d4 | d4 ) 8b458c d1f8 894580 8b45f8 c1e818 0fb6c8 }
 $sequence_9 = { 890a 8b45 ( 08 | 08 ) 0fb64804 81e1ff000000 c1e118 8b5508 0fb64205 }
 $sequence_10 = { 33d2 e8???????? 48b873797374656d3332 4c8bc7 488903 49ffc0 }
 $sequence_11 = { 488bd1 498d4b ( d8 | d8 ) 498943e0 498943e8 }
 $sequence_12 = { b904000000 486bc9 ( 0e | 0e ) 488b542430 4c8b442430 418b0c08 8b0402 }
 $sequence_13 = { ba80000000 e8???????? 488d4c2438 e8???????? 488d4c2420 8bd0 e8???????? }
 $sequence_14 = { 488b4c2430 8b0401 ( 89 | 89 ) 442428 b804000000 486bc004 }
 $sequence_15 = { 4883c708 4883c304 49ff ( c3 | c3 ) 48ffcd 0f854fffffff 488d4c2420 }

 condition:
 7 of them
 }

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule

 LET SparsePath = pathspec(
 DelegateAccessor='raw_file',
 DelegatePath='''\\.\pmem''',
 Path={
 SELECT atoi(string=Start) AS Offset,
 atoi(string=Length) AS Length
 FROM Artifact.Windows.Sys.PhysicalMemoryRanges()
 WHERE Type = 3
 })

 -- Load the winpmem binary
 LET _ &amp;lt;= winpmem(service=ServiceName)

 SELECT
 Rule,
 Meta,
 String.Offset as HitOffset,
 String.Name as HitName,
 String.HexData as HitHexData
 FROM yara(files=SparsePath, accessor='winpmem',
 rules=yara_rules, context=ContextBytes, number=NumberOfHits)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Yara.Process</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.process/</guid><description>&lt;p>This artifact enables running Yara over processes in memory.&lt;/p>
&lt;p>There are 2 kinds of Yara rules that can be deployed:&lt;/p>
&lt;ol>
&lt;li>Url link to a yara rule.&lt;/li>
&lt;li>or a Standard Yara rule attached as a parameter.&lt;/li>
&lt;/ol>
&lt;p>Only one method of Yara will be applied and search order is as above. The
default is Cobalt Strike opcodes.&lt;/p>
&lt;p>Regex parameters can be applied for process name and pid for targeting. The
artifact also has an option to upload any process with Yara hits.&lt;/p>
&lt;p>Note: by default the Yara scan will stop after one hit. Multi-string rules will also only
show one string in returned rows.
If upload is selected NumberOfHits is redundant and not advised as hits are
grouped by path to ensure files only downloaded once.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Yara.Process
author: Matt Green - @mgreen27
description: |
 This artifact enables running Yara over processes in memory.

 There are 2 kinds of Yara rules that can be deployed:

 1. Url link to a yara rule.
 3. or a Standard Yara rule attached as a parameter.

 Only one method of Yara will be applied and search order is as above. The
 default is Cobalt Strike opcodes.

 Regex parameters can be applied for process name and pid for targeting. The
 artifact also has an option to upload any process with Yara hits.

 Note: by default the Yara scan will stop after one hit. Multi-string rules will also only
 show one string in returned rows.
 If upload is selected NumberOfHits is redundant and not advised as hits are
 grouped by path to ensure files only downloaded once.


type: CLIENT
parameters:
 - name: ProcessRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: UploadHits
 type: bool
 - name: YaraUrl
 description: If configured will attempt to download Yara rules from Url
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule win_cobalt_strike_auto {
 meta:
 author = "Felix Bilstein - yara-signator at cocacoding dot com"
 date = "2019-11-26"
 version = "1"
 description = "autogenerated rule brought to you by yara-signator"
 tool = "yara-signator 0.2a"
 malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cobalt_strike"
 malpedia_license = "CC BY-SA 4.0"
 malpedia_sharing = "TLP:WHITE"

 strings:
 $sequence_0 = { 3bc7 750d ff15???????? 3d33270000 }
 $sequence_1 = { e9???????? eb0a b801000000 e9???????? }
 $sequence_2 = { 8bd0 e8???????? 85c0 7e0e }
 $sequence_3 = { ffb5f8f9ffff ff15???????? 8b4dfc 33cd e8???????? c9 c3 }
 $sequence_4 = { e8???????? e9???????? 833d?????????? 7505 e8???????? }
 $sequence_5 = { 250000ff00 33d0 8b4db0 c1e908 }
 $sequence_6 = { ff75f4 ff7610 ff761c ff75fc }
 $sequence_7 = { 8903 6a06 eb39 33ff 85c0 762b 03f1 }
 $sequence_8 = { 894dd4 8b458c d1f8 894580 8b45f8 c1e818 0fb6c8 }
 $sequence_9 = { 890a 8b4508 0fb64804 81e1ff000000 c1e118 8b5508 0fb64205 }
 $sequence_10 = { 33d2 e8???????? 48b873797374656d3332 4c8bc7 488903 49ffc0 }
 $sequence_11 = { 488bd1 498d4bd8 498943e0 498943e8 }
 $sequence_12 = { b904000000 486bc90e 488b542430 4c8b442430 418b0c08 8b0402 }
 $sequence_13 = { ba80000000 e8???????? 488d4c2438 e8???????? 488d4c2420 8bd0 e8???????? }
 $sequence_14 = { 488b4c2430 8b0401 89442428 b804000000 486bc004 }
 $sequence_15 = { 4883c708 4883c304 49ffc3 48ffcd 0f854fffffff 488d4c2420 }

 condition:
 7 of them
 }
 - name: NumberOfHits
 description: THis artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int64
 - name: ExePathWhitelist
 description: Regex of ProcessPaths to exclude
 type: regex


sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule
 
 -- find velociraptor process
 LET me = SELECT Pid FROM pslist(pid=getpid())

 -- find all processes and add filters
 LET processes = SELECT Name as ProcessName, Exe as ExePath, CommandLine, Pid, WorkingSetSize
 FROM pslist()
 WHERE
 Name =~ ProcessRegex
 AND format(format="%d", args=Pid) =~ PidRegex
 AND NOT Pid in me.Pid
 AND NOT if(condition=ExePathWhitelist,
 then= Exe=~ExePathWhitelist)

 -- scan processes in scope with our rule, limit 1 hit
 LET hits = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT
 ProcessName,
 ExePath,
 CommandLine,
 Pid,
 Rule,
 Tags,
 Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 upload( accessor='scope',
 file='String.Data',
 name=format(format="%v-%v_%v",
 args=[
 split(string=ProcessName, sep='\\.')[0], Pid,
 String.Offset ]
 )) as HitContext
 
 FROM proc_yara(
 pid=int(int=Pid),
 rules=yara_rules,
 context=ContextBytes,
 number=NumberOfHits
 )
 })

 -- upload hits using proc_dump plugin
 LET upload_hits = SELECT * FROM foreach(
 row=hits,
 query={
 SELECT 
 ProcessName,
 ExePath,
 CommandLine,
 Pid,
 Rule,
 Tags,
 Meta,
 YaraString,
 HitOffset,
 HitContext,
 upload(
 file=OSPath,
 name=format(format='%v-%v.dmp',
 args= [ split(string=ProcessName, sep='\\.')[0], Pid ])
 ) as ProcessDump
 FROM proc_dump(pid=Pid)
 })
 
 -- return rows
 SELECT * FROM if(condition=UploadHits,
 then=upload_hits,
 else=hits)

column_types:
 - name: HitContext
 type: preview_upload
&lt;/code>&lt;/pre></description></item><item><title>Windows.Detection.Yara.UEFI</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.uefi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.detection.yara.uefi/</guid><description>&lt;p>This artifact enables running yara over files in an EFI System Partition (ESP).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Detection.Yara.UEFI
author: Matt Green - @mgreen27
description: |
 This artifact enables running yara over files in an EFI System Partition (ESP).
 

parameters:
 - name: ImagePath
 default: \\.\PhysicalDrive0
 description: Raw Device for main disk containing partition table to parse.
 - name: SectorSize
 type: int
 default: 512
 - name: TargetGlob
 default: "**/*.efi"
 - name: SizeMax
 description: maximum size of target file.
 type: int64
 - name: SizeMin
 description: minimum size of target file.
 type: int64
 - name: UploadHits
 type: bool
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: YaraUrl
 description: If configured will attempt to download Yara rules form Url
 type: upload
 - name: YaraRule
 type: yara
 description: Final Yara option and the default if no other options provided.
 default: |
 rule win_blacklotus_auto {
 meta:
 author = "Felix Bilstein - yara-signator at cocacoding dot com"
 date = "2023-07-11"
 description = "Detects win.blacklotus."
 strings:
 $sequence_0 = { 498bcf e8???????? 448bc0 498bd7 4d03c0 488bce }
 $sequence_1 = { 4c897020 55 488d68c8 4881ec30010000 4c8bd1 }
 $sequence_2 = { 488b0d???????? 4c8d054e140100 488bd7 488bd8 e8???????? 488b05???????? 488bcb }
 $sequence_3 = { 8b0c91 498bd2 4903c9 e8???????? }
 $sequence_4 = { 4585d2 743f 8b05???????? 4103c1 }
 $sequence_5 = { 4883ec20 488d7910 8bea 488b1f 33f6 }
 $sequence_6 = { 488bd9 b10e e8???????? 8a4b02 40b70d }
 $sequence_7 = { 410f47f7 8bc6 488b742460 4883c430 415f }
 $sequence_8 = { 4923d3 4803d1 440fb74a0c 440fb7520e }
 $sequence_9 = { 6642837cc11010 0f859d000000 428b54c114 41bbffffff7f 4923d3 }
 condition:
 7 of them and filesize &amp;lt; 181248
 }
 rule MAL_Rootkit_CosmicStrand
 {
 meta:
 	author = "Natalie Zargarov @ Rapid7"
 description = "CosmicStrand UEFI rootkit detection rule. Detects the compromised .efi driver "
 targeting = "process,efi"
 tags ="Rootkit"
 strings:
 $trait_0 = {89 C6 53 89 D8 BB 3F B8 11 03}
 $trait_1 = {8B 3D 18 10 01 00 33 DB 8D 45 F8 50 53 53 6A 0B}
 $trait_2= {83 EC 4C 53 57 68 A0 10 01 00 8D 45 F8}
 $trait_3= {53 81 C7 FF 0F 00 00 68 54 44 55 00 81 E7 00 F0 FF FF 57 6A 01}
 $trait_4= {50 68 08 08 08 08 68 D0 43 DE DE 68 1F 96 00 00 BF E4 10 01 00}
 $string_0 = "winlogon.exe" 
 condition:
 1 of ($trait_*) and 
 1 of ($string_*)
 }
 - name: NumberOfHits
 description: This artifact will stop by default at one hit. This setting allows additional hits
 default: 1
 type: int
 - name: ContextBytes
 description: Include this amount of bytes around hit as context.
 default: 0
 type: int

sources:
- query: |
 -- check which Yara to use
 LET yara_rules &amp;lt;= YaraUrl || YaraRule

 -- time testing
 LET time_test(stamp) =
 if(condition= DateBefore AND DateAfter,
 then= stamp &amp;lt; DateBefore AND stamp &amp;gt; DateAfter,
 else=
 if(condition=DateBefore,
 then= stamp &amp;lt; DateBefore,
 else=
 if(condition= DateAfter,
 then= stamp &amp;gt; DateAfter,
 else= True
 )))
 
 LET find_efi = SELECT StartOffset,EndOffset,
 Size AS PartitionSize,
 name AS PartitionName
 FROM Artifact.Windows.Forensics.PartitionTable(
 ImagePath=ImagePath, SectorSize=SectorSize)
 WHERE PartitionName =~ "EFI"
 
 LET find_files = SELECT * FROM foreach(row=find_efi, 
 query={
 SELECT *,
 StartOffset,EndOffset,
 PartitionSize,
 PartitionName
 FROM glob(globs=TargetGlob,
 accessor="fat",
 root=pathspec(
 DelegateAccessor="offset",
 DelegatePath=pathspec(
 DelegateAccessor="raw_file",
 DelegatePath=ImagePath,
 Path=format(format="%d", args=StartOffset))))
 })
 
 LET target_files = SELECT 
 StartOffset as PartitionOffset, PartitionSize,
 OSPath,
 Size, Mtime, Atime, Ctime, Btime,
 Data.first_cluster as FirstCluster,
 Data.attr AS Attr,
 Data.deleted as IsDeleted,
 Data.short_name AS ShortName
 FROM find_files
 WHERE NOT IsDir
 AND if(condition=SizeMin,
 then= SizeMin &amp;lt; Size,
 else= True)
 AND if(condition=SizeMax,
 then= SizeMax &amp;gt; Size,
 else= True)
 AND ( time_test(stamp=Mtime)
 OR time_test(stamp=Atime)
 OR time_test(stamp=Ctime)
 OR time_test(stamp=Btime))
 
 -- scan files and prepare hit metadata
 LET hits = SELECT * FROM foreach(row=target_files,
 query={
 SELECT 
 OSPath as _OSPath,
 OSPath.Path as OSPath,
 File.Size as Size,
 Mtime, Atime, Ctime, Btime,
 Rule, Tags, Meta,
 String.Name as YaraString,
 String.Offset as HitOffset,
 upload( accessor='scope',
 file='String.Data',
 name=format(format="%v-%v-%v",
 args=[
 OSPath.Path,
 if(condition= String.Offset - ContextBytes &amp;lt; 0,
 then= 0,
 else= String.Offset - ContextBytes),
 if(condition= String.Offset + ContextBytes &amp;gt; Size,
 then= Size,
 else= String.Offset + ContextBytes) ]
 )) as HitContext
 FROM yara( accessor='fat', rules=yara_rules,files=OSPath,
 context=ContextBytes,number=NumberOfHits )
 })
 
 -- upload files if selected
 LET upload_hits = SELECT *, 
 upload(accessor='fat',file=_OSPath,name=_OSPath.Path) as Upload 
 FROM hits

 -- return rows
 SELECT * FROM if(condition= UploadHits,
 then= upload_hits,
 else= hits )

column_types:
 - name: HitContext
 type: preview_upload
&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.DNS</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dns/</guid><description>&lt;p>This artifact monitors DNS queries using ETW.&lt;/p>
&lt;p>There are several filteres availible to the user to filter out and target with
regex, by default duplicate DNSCache requests are filtered out.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.DNS
author: Matt Green - @mgreen27
description: |
 This artifact monitors DNS queries using ETW.

 There are several filteres availible to the user to filter out and target with
 regex, by default duplicate DNSCache requests are filtered out.

type: CLIENT_EVENT

parameters:
 - name: ImageRegex
 description: "ImagePath regex filter for"
 default: .
 type: regex
 - name: CommandLineRegex
 description: "Commandline to filter for."
 default: .
 type: regex
 - name: QueryRegex
 description: "DNS query request (domain) to filter for."
 default: .
 type: regex
 - name: AnswerRegex
 description: "DNS answer to filter for."
 default: .
 type: regex
 - name: CommandLineExclusion
 description: "Commandline to filter out. Typically we do not want Dnscache events."
 default: 'svchost.exe -k NetworkService -p -s Dnscache$'
 type: regex


sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET TypeLookup &amp;lt;= dict(
 `1` = 'A',
 `2` = 'NS',
 `5` = 'CNAME',
 `6` = 'SOA',
 `12` = 'PTR',
 `13` = 'HINFO',
 `15` = 'MX',
 `16` = 'TXT',
 `17` = 'RP',
 `18` = 'AFSDB',
 `24` = 'SIG',
 `25` = 'KEY',
 `28` = 'AAAA',
 `29` = 'LOC',
 `33` = 'SRV',
 `35` = 'NAPTR',
 `36` = 'KX',
 `37` = 'CERT',
 `39` = 'DNAME',
 `42` = 'APL',
 `43` = 'DS',
 `44` = 'SSHFP',
 `45` = 'IPSECKEY',
 `46` = 'RRSIG',
 `47` = 'NSEC',
 `48` = 'DNSKEY',
 `49` = 'DHCID',
 `50` = 'NSEC3',
 `51` = 'NSEC3PARAM',
 `52` = 'TLSA',
 `53` = 'SMIMEA',
 `55` = 'HIP',
 `59` = 'CDS',
 `60` = 'CDNSKEY',
 `61` = 'OPENPGPKEY',
 `62` = 'CSYNC',
 `63` = 'ZONEMD',
 `64` = 'SVCB',
 `65` = 'HTTPS',
 `108` = 'EUI48',
 `109` = 'EUI64',
 `249` = 'TKEY',
 `250` = 'TSIG',
 `256` = 'URI',
 `257` = 'CAA',
 `32768` = 'TA',
 `32769` = 'DLV')

 SELECT System.TimeStamp AS EventTime,
 EventData.QueryName AS Query,
 get(item=TypeLookup,
 member=str(str=EventData.QueryType)) AS Type,
 EventData.QueryResults AS Answer,
 process_tracker_get(id=System.ProcessID).Data as Process
 FROM watch_etw(
 description="Microsoft-Windows-DNS-Client",
 guid="{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}")
 WHERE System.ID = 3008
 AND Query
 AND NOT Process.CommandLine =~ CommandLineExclusion
 AND Process.Exe =~ ImageRegex
 AND Query =~ QueryRegex
 AND Answer =~ AnswerRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.DNSQueriesServer</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dnsqueriesserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dnsqueriesserver/</guid><description>&lt;p>Logs dns queries on DNS servers. This is handy for identifying the true source system that is initiating malicious dns requests that you observed. Note that this can be resource intensive for the CPU on busy DNS servers - from 5% to 70% CPU load of one core, but memory consumption is very low. This is still a lot less then enabling DNS debug logging.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.DNSQueriesServer
type: CLIENT_EVENT

description: |
 Logs dns queries on DNS servers. This is handy for identifying the true source system that is initiating malicious dns requests that you observed. Note that this can be resource intensive for the CPU on busy DNS servers - from 5% to 70% CPU load of one core, but memory consumption is very low. This is still a lot less then enabling DNS debug logging.

author: "Jos Clephas - jos-ir"

parameters:
 - name: QueryNameRegex
 default: .
 type: regex
 - name: SourceIPRegex
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 SELECT System.TimeStamp as TimeStamp,
 System.ID as ID,
 EventData.BufferSize as BufferSize,
 EventData.Flags as Flags,
 EventData.InterfaceIP as InterfaceIP,
 EventData.Port as Port,
 EventData.QNAME as QNAME,
 EventData.QTYPE as QTYPE,
 EventData.RD as RD,
 EventData.Source as Source,
 EventData.TCP as TCP,
 EventData.XID as XID
 FROM watch_etw(
 description="EventLog-Microsoft-Windows-DNSServer-Analytical",
 guid="{EB79061A-A566-4698-9119-3ED2807060E7}")
 WHERE EventData AND
 QNAME =~ QueryNameRegex AND
 Source =~ SourceIPRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.DotNetRundown</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dotnetrundown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.dotnetrundown/</guid><description>&lt;p>Queries the Microsoft-Windows-DotNETRuntimeRundown provider to
collect a list of DotNet modules loaded into a process. This can be
useful when responding to reflectively loaded DotNet malware.&lt;/p>
&lt;p>NOTE: System.Timestamp represents when the artifact was run, NOT
when the module was loaded.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.DotNetRundown
author: "@bmcder02"
description: |
 Queries the Microsoft-Windows-DotNETRuntimeRundown provider to
 collect a list of DotNet modules loaded into a process. This can be
 useful when responding to reflectively loaded DotNet malware.

 NOTE: System.Timestamp represents when the artifact was run, NOT
 when the module was loaded.


type: CLIENT

parameters:
 - name: ProcessRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: EventIDRegex
 default: .
 type: regex
 - name: Timeout
 default: 20
 type: int

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET EventData = SELECT System.ID AS EventID, System.ProcessID AS ProcessID,
 process_tracker_get(id=System.ProcessID) AS ProcessDetails,
 *
 FROM watch_etw(
 description="CLR Rundown Provider",
 guid="{A669021C-C450-4609-A035-5AF59AF4DF18}",
 any=0x48, timeout=Timeout)

 SELECT EventID, ProcessID, ProcessDetails.Data.Name AS ProcessName,
 ProcessDetails.Data.Exe AS ProcessPath, System, EventData, ProviderGUID,
 ProcessDetails
 FROM EventData
 WHERE EventID =~ EventIDRegex
 AND ProcessID =~ PidRegex
 AND ProcessPath =~ ProcessRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.EdgeURLs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.edgeurls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.edgeurls/</guid><description>&lt;p>This client event artifact collects all URLs accessed by the Edge browser.&lt;/p>
&lt;p>It is an example of an ETW artifact using the provider&lt;/p>
&lt;p>Microsoft-Windows-URLMon {245F975D-909D-49ED-B8F9-9A75691D6B6B}&lt;/p>
&lt;p>NOTE: This artifact can generate a lot of data - you probably want
to filter the URLs a bit and/or target collection to a narrow label
group.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.EdgeURLs
description: |
 This client event artifact collects all URLs accessed by the Edge browser.

 It is an example of an ETW artifact using the provider

 Microsoft-Windows-URLMon {245F975D-909D-49ED-B8F9-9A75691D6B6B}

 NOTE: This artifact can generate a lot of data - you probably want
 to filter the URLs a bit and/or target collection to a narrow label
 group.

type: CLIENT_EVENT

parameters:
 - name: URLFilter
 default: .
 description: A regex that can be used to filter uninteresting URLs
 type: regex

sources:
 - query: |
 LET m &amp;lt;= memoize(key="Pid", period=30, query={
 SELECT Pid, Exe, Username FROM pslist()
 })

 SELECT System.ID AS ID,
 System.TimeStamp AS Timestamp,
 get(item=m, field=System.ProcessID) AS ProcInfo,
 get(member="EventData.URL") AS URL
 FROM watch_etw(
 description="Microsoft-Windows-URLMon",
 guid="{245F975D-909D-49ED-B8F9-9A75691D6B6B}")
 WHERE ID = 805 AND URL =~ URLFilter

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.ETWSessions</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.etwsessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.etwsessions/</guid><description>&lt;p>Windows Event Tracing exposes a lot of low level system information
and events. It is normally employed by security tools to gather
telemetry, however may also be used maliciously.&lt;/p>
&lt;p>This artifact monitors for all new ETW sessions and reports the
tracing process as well as the provider that is being traced.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.ETWSessions
description: |
 Windows Event Tracing exposes a lot of low level system information
 and events. It is normally employed by security tools to gather
 telemetry, however may also be used maliciously.

 This artifact monitors for all new ETW sessions and reports the
 tracing process as well as the provider that is being traced.

type: CLIENT_EVENT

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET PublisherGlob = pathspec(
 Path='''HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Publishers''',
 path_type="registry")

 LET GUIDLookup(GUID) = SELECT Data.value AS Provider
 FROM stat(accessor="registry", filename=PublisherGlob + ("/" + GUID + "/@"))

 SELECT System.TimeStamp AS Timestamp,
 if(condition=System.ID = 14, then="Installed", else="Removed") AS Action, {
 SELECT Name, CommandLine from pslist(pid=System.ProcessID)
 } AS ProcessInfo ,
 GUIDLookup(GUID=EventData.ProviderName)[0].Provider AS Provider,
 EventData.SessionName AS SessionName,
 System AS _System, EventData AS _EventData
 FROM watch_etw(
 description='Microsoft-Windows-Kernel-EventTracing',
 guid="{B675EC37-BDB6-4648-BC92-F3FDC74D3CA2}", all=0x400)
 WHERE System.ID IN (14, 15)

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.FileCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.filecreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.filecreation/</guid><description>&lt;p>This artifact watches the Microsoft-Windows-Kernel-File provider
for new file creation events.&lt;/p>
&lt;p>We also include the process that created the file, and a process
call chain.&lt;/p>
&lt;p>NOTE: This artifact uses the process tracker so it works a lot
better when the process tracker is enabled.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.FileCreation
description: |
 This artifact watches the Microsoft-Windows-Kernel-File provider
 for new file creation events.

 We also include the process that created the file, and a process
 call chain.

 NOTE: This artifact uses the process tracker so it works a lot
 better when the process tracker is enabled.

type: CLIENT_EVENT

parameters:
 - name: FilePathFilter
 type: regex
 default: .
 description: Filter events by filename
 - name: ProcessNameFilter
 type: regex
 default: .
 - name: ProcessExecutableFilter
 type: regex
 default: .

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET Y = SELECT *
 FROM watch_etw(
 description="Microsoft-Windows-Kernel-File/Analytic",
 guid="{EDD08927-9CC4-4E65-B970-C2560FB5C289}", any=4096)
 WHERE EventData.FileName =~ FilePathFilter

 -- Implement a delay to ensure we get the process event stream
 -- from sysmon before we query for it.
 LET X = SELECT timestamp(string=System.TimeStamp) AS Timestamp,
 EventData.FileName AS FileName,
 System.ProcessID AS ProcessID,
 process_tracker_get(id=System.ProcessID).Data AS ProcessInfo
 FROM delay(query=Y, delay=10)

 SELECT Timestamp,
 FileName,
 ProcessID,
 ProcessInfo.Name AS ProcessName,
 ProcessInfo.Username AS Username,
 ProcessInfo.Exe AS ProcessExecutable,
 ProcessInfo.CreateTime AS ProcessCreation
 FROM X
 WHERE ProcessName =~ ProcessNameFilter
 AND ProcessExecutable =~ ProcessExecutableFilter

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.Registry</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.registry/</guid><description>&lt;p>Windows Registry access is a great source of visibility into system
activity.&lt;/p>
&lt;p>There are many ways of gaining visibility into this, the most
reliable being Sysmon. However it is also possible to gain some
visibility using ETW. The Microsoft-Windows-Kernel-Registry provides
ETW events for registry modifications.&lt;/p>
&lt;p>This artifact parses these events and ties them back to the
accessing process. It is recommended to run this artifact with the
process tracker.&lt;/p>
&lt;p>NOTE: Experience shows this ETW provider is not very reliable and
seems to miss a lot of registry events.&lt;/p>
&lt;p>This artifact is experimental.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.Registry
description: |
 Windows Registry access is a great source of visibility into system
 activity.

 There are many ways of gaining visibility into this, the most
 reliable being Sysmon. However it is also possible to gain some
 visibility using ETW. The Microsoft-Windows-Kernel-Registry provides
 ETW events for registry modifications.

 This artifact parses these events and ties them back to the
 accessing process. It is recommended to run this artifact with the
 process tracker.

 NOTE: Experience shows this ETW provider is not very reliable and
 seems to miss a lot of registry events.

 This artifact is experimental.

type: CLIENT_EVENT

precondition: SELECT * FROM info() WHERE OS = "windows"

parameters:
- name: KeyNameRegex
 type: regex
 default: .
- name: ProcessRegex
 type: regex
 default: .

sources:
- query: |
 LET Cache &amp;lt;= lru(size=1000)
 LET EventLookup &amp;lt;= dict(
 `1`="CreateKey",
 `2`="OpenKey",
 `3`="DeleteKey",
 `4`="QueryKey",
 `5`="SetValueKey",
 `6`="DeleteValueKey",
 `7`="QueryValue",
 `8`="EnumerateKey",
 `9`="EnumerateValueKey"
 )

 LET registry_access = SELECT System, EventData,
 get(item=EventLookup, field=str(str=System.ID)) AS EventType,
 get(item=Cache, field=EventData.KeyObject) || EventData.KeyName AS KeyName
 FROM watch_etw(
 description="Microsoft-Windows-Kernel-Registry",
 guid="{70EB4F03-C1DE-4F73-A051-33D13D5413BD}", any=0x7720)
 WHERE System.ProcessID != getpid() -- exclude ourselves
 AND EventType -- we only care about these events
 AND if(condition=System.ID in (1, 2, 4),
 then=set(item=Cache, field=EventData.KeyObject,
 value=EventData.RelativeName),
 else=TRUE) -- set KeyName in the lru

 LET hits = SELECT System.TimeStamp AS Timestamp,
 process_tracker_get(id=System.ProcessID).Data AS Process,
 EventType, KeyName, EventData
 FROM registry_access
 WHERE KeyName =~ KeyNameRegex

 SELECT Timestamp, EventType,
 Process.Name AS ProcessName, Process.Username AS Owner,
 Process.CommandLine AS CommandLine,
 KeyName, EventData.ValueName AS ValueName
 FROM hits
 WHERE ProcessName =~ ProcessRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.ViewSessions</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.viewsessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.viewsessions/</guid><description>&lt;p>This artifact enumerates all ETW sessions and optionally kills dangling ones&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.ViewSessions
description: |
 This artifact enumerates all ETW sessions and optionally kills dangling ones

required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'windows'
parameters:
 - name: SessionRegex
 default: "Velociraptor"
 type: regex
 - name: KillMatching
 type: bool
 description: If set will kill the relevant sessions.


sources:
 - query: |
 SELECT * FROM foreach(row={
 SELECT Stdout, parse_string_with_regex(string=Stdout, regex="(^[^ ]+)").g1 AS SessionName
 from execve(argv=["logman", "query", "-ets"], sep="\n")
 WHERE Stdout =~ "Running" AND SessionName =~ SessionRegex
 }, query={
 SELECT * FROM if(condition=KillMatching,
 then={
 SELECT SessionName, Stdout FROM execve(argv=["logman", "stop", SessionName, "-ets"])
 }, else={
 SELECT SessionName FROM scope()
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.ETW.WMIProcessCreate</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.etw.wmiprocesscreate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.etw.wmiprocesscreate/</guid><description>&lt;p>This artifact the endpoints for process creation through WMI
events. This is a common attacker lateral movement technique.&lt;/p>
&lt;p>The technique works by calling the Create() method on the
win32_process WMI object.&lt;/p>
&lt;p>You can test this with powershell:
Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe&lt;/p>
&lt;p>This artifact uses the EWT provider:
Microsoft-Windows-WMI-Activity {1418EF04-B0B4-4623-BF7E-D74AB47BBDAA}&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.ETW.WMIProcessCreate
description: |
 This artifact the endpoints for process creation through WMI
 events. This is a common attacker lateral movement technique.

 The technique works by calling the Create() method on the
 win32_process WMI object.

 You can test this with powershell:
 Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe

 This artifact uses the EWT provider:
 Microsoft-Windows-WMI-Activity {1418EF04-B0B4-4623-BF7E-D74AB47BBDAA}

type: CLIENT_EVENT

sources:
 - query: |
 LET hits = SELECT
 System.ID AS ID,
 System.TimeStamp AS Timestamp,
 get(member="EventData") AS EventData
 FROM watch_etw(
 description="Microsoft-Windows-WMI-Activity",
 guid="{1418EF04-B0B4-4623-BF7E-D74AB47BBDAA}")
 WHERE ID = 23

 SELECT ID, Timestamp, EventData.ClientMachine AS Hostname,
 {
 SELECT Pid, Name, Exe from pslist(pid=int(int=EventData.ClientProcessId))
 } AS ClientProcessInfo,
 {
 SELECT Pid, Name, Exe from pslist(pid=int(int=EventData.CreatedProcessId))
 } AS CreatedProcessInfo,
 timestamp(winfiletime=int(int=EventData.ClientProcessCreationTime)) AS ClientProcessCreationTime,
 timestamp(winfiletime=int(int=EventData.CreatedProcessCreationTime)) AS CreatedProcessCreationTime,
 EventData.Commandline AS Commandline,
 EventData.User AS User
 FROM hits

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.AlternateLogon</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.alternatelogon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.alternatelogon/</guid><description>&lt;p>Logon specifying alternate credentials - if NLA enabled on
destination Current logged-on User Name Alternate User Name
Destination Host Name/IP Process Name&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.AlternateLogon
description: |
 Logon specifying alternate credentials - if NLA enabled on
 destination Current logged-on User Name Alternate User Name
 Destination Host Name/IP Process Name

reference:
 - https://digital-forensics.sans.org/media/SANS_Poster_2018_Hunt_Evil_FINAL.pdf

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: securityLogFile
 default: C:/Windows/System32/Winevt/Logs/Security.evtx

sources:
 - query: |
 SELECT
 timestamp(epoch=System.TimeCreated.SystemTime) AS EventTime,
 EventData.IpAddress AS IpAddress,
 EventData.IpPort AS Port,
 EventData.ProcessName AS ProcessName,
 EventData.SubjectUserSid AS SubjectUserSid,
 EventData.SubjectUserName AS SubjectUserName,
 EventData.TargetUserName AS TargetUserName,
 EventData.TargetServerName AS TargetServerName,
 System.TimeCreated.SystemTime AS LogonTime
 FROM parse_evtx(filename=securityLogFile)
 WHERE System.EventID.Value = 4648
 AND EventData

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Cleared</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.cleared/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.cleared/</guid><description>&lt;p>Extract Event Logs related to EventLog clearing&lt;/p>
&lt;ul>
&lt;li>Security Log - EventID 1102&lt;/li>
&lt;li>System Log - EventID 104&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Cleared
author: Matt Green - @mgreen27

description: |
 Extract Event Logs related to EventLog clearing
 - Security Log - EventID 1102
 - System Log - EventID 104

reference:
 - https://attack.mitre.org/versions/v6/techniques/T1070/

type: CLIENT

parameters:
 - name: TargetGlob
 default: C:\Windows\System32\Winevt\Logs\{System,Security}.evtx
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 SELECT
 EventTime,
 UserData.LogFileCleared.Channel || Channel as ClearedLog,
 Message,
 UserData.LogFileCleared.SubjectDomainName + "\\" + UserData.LogFileCleared.SubjectUserName as Username,
 UserData.LogFileCleared.SubjectUserSid || UserSID as UserSID,
 dict(
 EventTime=EventTime,
 Computer=Computer,
 Channel=Channel,
 EventID=EventID,
 EventRecordID=EventRecordID,
 OSPath=OSPath,
 UserData=UserData
 ) as EventData
 FROM Artifact.Windows.EventLogs.EvtxHunter(EvtxGlob=TargetGlob,
 ChannelRegex='^(Security|System)$',
 IdRegex='^(1102|104)',
 IocRegex='clear|cleared',
 DateAfter=DateAfter,
 DateBefore=DateBefore,
 VSSAnalysisAge=VSSAnalysisAge)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.DHCP</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.dhcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.dhcp/</guid><description>&lt;p>This artifact parses the windows dhcp event log looking for evidence
of IP address assignments.&lt;/p>
&lt;p>In some investigations it is important to be able to identify the
machine which was assigned a particular IP address at a point in
time. Usually these logs are available from the DHCP server, but in
many cases the server logs are not available (for example, if the
endpoint was visiting a different network or the DHCP server is on a
wireless router with no log retention).&lt;/p>
&lt;p>On windows, there are two types of logs:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The first type is the admin log
(&lt;code>Microsoft-Windows-Dhcp-Client%4Admin.evt&lt;/code>). These only contain
errors such as an endpoint trying to continue its lease, but
the lease is rejected by the server.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The operational log
(&lt;code>Microsoft-Windows-Dhcp-Client%4Operational.evtx&lt;/code>) contains
the full log of each lease. Unfortunately this log is disabled
by default. If it is available we can rely on the information.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.DHCP
description: |

 This artifact parses the windows dhcp event log looking for evidence
 of IP address assignments.

 In some investigations it is important to be able to identify the
 machine which was assigned a particular IP address at a point in
 time. Usually these logs are available from the DHCP server, but in
 many cases the server logs are not available (for example, if the
 endpoint was visiting a different network or the DHCP server is on a
 wireless router with no log retention).

 On windows, there are two types of logs:

 1. The first type is the admin log
 (`Microsoft-Windows-Dhcp-Client%4Admin.evt`). These only contain
 errors such as an endpoint trying to continue its lease, but
 the lease is rejected by the server.

 2. The operational log
 (`Microsoft-Windows-Dhcp-Client%4Operational.evtx`) contains
 the full log of each lease. Unfortunately this log is disabled
 by default. If it is available we can rely on the information.

parameters:
 - name: eventDirGlob
 default: C:\Windows\system32\winevt\logs\

 - name: adminLog
 default: Microsoft-Windows-Dhcp-Client%4Admin.evtx

 - name: operationalLog
 default: Microsoft-Windows-Dhcp-Client%4Operational.evtx

 - name: accessor
 default: file

sources:
 - name: RejectedDHCP
 query: |
 LET files = SELECT *
 FROM glob(
 root=eventDirGlob,
 globs=adminLog,
 accessor=accessor)

 SELECT Time AS _Time,
 timestamp(epoch=Time) As Timestamp,
 Computer, MAC, ClientIP, DHCPServer, Type FROM foreach(
 row=files,
 query={
 SELECT System.TimeCreated.SystemTime as Time,
 System.Computer AS Computer,
 format(format="%x:%x:%x:%x:%x:%x", args=[EventData.HWAddress]) AS MAC,
 ip(netaddr4_le=EventData.Address1) AS ClientIP,
 ip(netaddr4_le=EventData.Address2) AS DHCPServer,
 "Lease Rejected" AS Type
 FROM parse_evtx(filename=OSPath, accessor=accessor)
 WHERE System.EventID.Value = 1002
 })

 - name: AssignedDHCP
 query: |
 SELECT Time AS _Time,
 timestamp(epoch=Time) As Timestamp,
 Computer, MAC, ClientIP, DHCPServer, Type FROM foreach(
 row=files,
 query={
 SELECT System.TimeCreated.SystemTime as Time,
 System.Computer AS Computer,
 EventData.InterfaceGuid AS MAC,
 ip(netaddr4_le=EventData.Address1) AS ClientIP,
 ip(netaddr4_le=EventData.Address2) AS DHCPServer,
 "Lease Assigned" AS Type
 FROM parse_evtx(filename=OSPath, accessor=accessor)
 WHERE System.EventID.Value = 60000
 })


reports:
 - type: CLIENT
 template: |
 Evidence of DHCP assigned IP addresses
 ======================================

 {{ .Description }}

 {{ define "assigned_dhcp" }}
 SELECT Computer, ClientIP,
 count(items=Timestamp) AS Total,
 enumerate(items=Timestamp) AS Times
 FROM source(source='AssignedDHCP')
 GROUP BY ClientIP
 {{ end }}
 {{ define "rejected_dhcp" }}
 SELECT Computer, ClientIP,
 count(items=Timestamp) AS Total,
 enumerate(items=Timestamp) AS Times
 FROM source(source='RejectedDHCP')
 GROUP BY ClientIP
 {{ end }}

 {{ $assigned := Query "assigned_dhcp"}}
 {{ if $assigned }}
 ## Operational logs

 This machine has DHCP operational logging enabled. We therefore
 can see complete references to all granted leases:
 {{ Table $assigned }}

 ## Timeline

 {{ Query "SELECT _Time * 1000, ClientIP FROM source(source='AssignedDHCP')" | Timeline }}

 {{ end }}

 ## Admin logs

 The admin logs show errors with DHCP lease requests. Typically
 rejected leases indicate that the machine held a least on a IP
 address in the past, but this lease is invalid for its current
 environment. For example, the machine has been moved to a
 different network.

 {{ Query "rejected_dhcp" | Table }}

 {{ Query "SELECT _Time * 1000, ClientIP FROM source(source='RejectedDHCP')" | Timeline }}

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Evtx</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtx/</guid><description>&lt;p>Parses and returns events from Windows evtx logs.&lt;/p>
&lt;p>Each event is returned in full, but results can be narrowed using a glob
pattern for evtx files, a timespan, and regexes to match the evtx path, event
channel, and/or event ID:&lt;/p>
&lt;ul>
&lt;li>EvtxGlob: glob of event log files (evtx) to target&lt;/li>
&lt;li>StartDate: earliest event created timestamp to target&lt;/li>
&lt;li>EndDate: latest event created timestamp to target&lt;/li>
&lt;li>PathRegex: a regex to match against paths returned from EvtxGlob&lt;/li>
&lt;li>ChannelRegex: a regex to match against the event channel&lt;/li>
&lt;li>IDRegex: a regex to match against the event ID&lt;/li>
&lt;/ul>
&lt;p>Gathering these logs enables VQL analysis (&lt;em>e.g.&lt;/em>, via notebooks) and bulk
export (&lt;em>e.g.&lt;/em>, to elasticsearch) for additional processing. It can also be
used as the basis for custom artifacts with more in-depth filtering.&lt;/p>
&lt;p>&lt;strong>Note: This artifact can be resource intensive.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Parsing and aggregating may use high amounts of CPU on the client. Consider
reducing the ops/second or narrowing the glob/path regex if necessary.&lt;/li>
&lt;li>Parsing may use significant memory and time when searching VSS volumes and
deduplicating events. This is proportional to the evtx file size and number
of VSS copies. Consider whether the extra events are worth the resources.&lt;/li>
&lt;li>Parsing many event logs may take longer than the default timeout. When
parsing all log files and searching VSS, consider doubling the default or
more (especially with reduced ops/second, or if targets have high-volume
3rd-party log sources such as Sysmon).&lt;/li>
&lt;li>The artifact routinely produces hundreds of thousands of rows per host.
Consider filtering results using path, channel, and ID regexes if necessary.&lt;/li>
&lt;/ul>
&lt;p>Inspired by others in &lt;code>Windows.EventLogs.*&lt;/code>, many by Matt Green (@mgreen27).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Evtx

description: |
 Parses and returns events from Windows evtx logs.

 Each event is returned in full, but results can be narrowed using a glob
 pattern for evtx files, a timespan, and regexes to match the evtx path, event
 channel, and/or event ID:

 - EvtxGlob: glob of event log files (evtx) to target
 - StartDate: earliest event created timestamp to target
 - EndDate: latest event created timestamp to target
 - PathRegex: a regex to match against paths returned from EvtxGlob
 - ChannelRegex: a regex to match against the event channel
 - IDRegex: a regex to match against the event ID

 Gathering these logs enables VQL analysis (_e.g._, via notebooks) and bulk
 export (_e.g._, to elasticsearch) for additional processing. It can also be
 used as the basis for custom artifacts with more in-depth filtering.

 **Note: This artifact can be resource intensive.**

 - Parsing and aggregating may use high amounts of CPU on the client. Consider
 reducing the ops/second or narrowing the glob/path regex if necessary.
 - Parsing may use significant memory and time when searching VSS volumes and
 deduplicating events. This is proportional to the evtx file size and number
 of VSS copies. Consider whether the extra events are worth the resources.
 - Parsing many event logs may take longer than the default timeout. When
 parsing all log files and searching VSS, consider doubling the default or
 more (especially with reduced ops/second, or if targets have high-volume
 3rd-party log sources such as Sysmon).
 - The artifact routinely produces hundreds of thousands of rows per host.
 Consider filtering results using path, channel, and ID regexes if necessary.

 Inspired by others in `Windows.EventLogs.*`, many by Matt Green (@mgreen27).

author: Chris Hendricks (chris@counteractive.net)

precondition: SELECT OS FROM info() WHERE OS = 'windows'

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\winevt\Logs\*.evtx'
 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.
 - name: StartDate
 type: timestamp
 description: "Parse events on or after this date (YYYY-MM-DDTmm:hh:ssZ)"
 - name: EndDate
 type: timestamp
 description: "Parse events on or before this date (YYYY-MM-DDTmm:hh:ssZ)"
 - name: PathRegex
 default: "."
 type: regex
 - name: ChannelRegex
 default: "."
 type: regex
 - name: IDRegex
 default: "."
 type: regex

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 // expand provided glob into a list of paths on the file system (fs)
 LET fspaths =
 SELECT OSPath FROM glob(globs=expand(path=EvtxGlob), accessor=Accessor)
 WHERE OSPath =~ PathRegex

 // function returning parsed evtx from list of paths
 LET evtxsearch(pathList) = SELECT * FROM foreach(
 row=pathList,
 query={
 SELECT *,
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS TimeCreated,
 System.Channel as Channel,
 System.EventRecordID as EventRecordID,
 System.EventID.Value as EventID,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE
 if(condition=StartDate,
 then=TimeCreated &amp;gt;= timestamp(string=StartDate),
 else=true)
 AND if(condition=EndDate,
 then=TimeCreated &amp;lt;= timestamp(string=EndDate),
 else=true)
 AND Channel =~ ChannelRegex
 AND str(str=EventID) =~ IDRegex
 }
 )

 SELECT * FROM evtxsearch(pathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.EvtxHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtxhunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.evtxhunter/</guid><description>&lt;p>This Artifact will hunt the Event Log message field for a regex value.
For example and IP, username or string.&lt;/p>
&lt;p>Searching EventLog files is helpful for triage and scoping an incident.
The idea is a user can search for any IOC or other string of interest and
return all results across the Event Log ecosystem.&lt;/p>
&lt;p>There are several parameter&amp;rsquo;s available for search leveraging regex.&lt;/p>
&lt;ul>
&lt;li>EvtxGlob glob of EventLogs to target. Default to all but can be targeted.&lt;/li>
&lt;li>dateAfter enables search for events after this date.&lt;/li>
&lt;li>dateBefore enables search for events before this date.&lt;/li>
&lt;li>IocRegex enables regex search over the message field.&lt;/li>
&lt;li>WhitelistRegex enables a regex whitelist for the Message field.&lt;/li>
&lt;li>PathRegex enables filtering on evtx path for specific log targetting.&lt;/li>
&lt;li>ChannelRegex allows specific EVTX Channel targets.&lt;/li>
&lt;li>IdRegex enables a regex query to select specific event Ids.&lt;/li>
&lt;li>SearchVSS enables searching over VSS&lt;/li>
&lt;/ul>
&lt;p>Note: this artifact can potentially be heavy on the endpoint.
Please use with caution.
EventIds with an EventData field regex will be aplied and requires double
escape for backslash due to serialisation of this field.
E.g C:\\FOLDER\\binary\.exe
For EventIds with no EventData the Message field is queried and requires
standard velociraptor escape. E.g C:\FOLDER\binary\.exe&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.EvtxHunter
description: |
 This Artifact will hunt the Event Log message field for a regex value.
 For example and IP, username or string.

 Searching EventLog files is helpful for triage and scoping an incident.
 The idea is a user can search for any IOC or other string of interest and
 return all results across the Event Log ecosystem.

 There are several parameter's available for search leveraging regex.
 - EvtxGlob glob of EventLogs to target. Default to all but can be targeted.
 - dateAfter enables search for events after this date.
 - dateBefore enables search for events before this date.
 - IocRegex enables regex search over the message field.
 - WhitelistRegex enables a regex whitelist for the Message field.
 - PathRegex enables filtering on evtx path for specific log targetting.
 - ChannelRegex allows specific EVTX Channel targets.
 - IdRegex enables a regex query to select specific event Ids.
 - SearchVSS enables searching over VSS

 Note: this artifact can potentially be heavy on the endpoint.
 Please use with caution.
 EventIds with an EventData field regex will be aplied and requires double
 escape for backslash due to serialisation of this field.
 E.g C:\\\\FOLDER\\\\binary\\.exe
 For EventIds with no EventData the Message field is queried and requires
 standard velociraptor escape. E.g C:\\FOLDER\\binary\\.exe

author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\Winevt\Logs\*.evtx'
 - name: IocRegex
 type: regex
 description: "IOC Regex"
 default:
 - name: WhitelistRegex
 description: "Regex of string to witelist"
 type: regex
 - name: PathRegex
 description: "Event log Regex to enable filtering on path"
 default: .
 type: regex
 - name: ChannelRegex
 description: "Channel Regex to enable filtering on path"
 default: .
 - name: ProviderRegex
 description: "Provider Regex to enable filtering on provider"
 default: .
 type: regex
 - name: IdRegex
 default: .
 type: regex
 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

imports:
 - Windows.Sys.AllUsers

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=expand(path=EvtxGlob), accessor=Accessor)
 WHERE OSPath =~ PathRegex

 -- function returning IOC hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.Channel as Channel,
 System.Provider.Name as Provider,
 System.EventID.Value as EventID,
 System.EventRecordID as EventRecordID,
 System.Security.UserID as UserSID,
 LookupSIDCache(SID=System.Security.UserID || "") AS Username,
 get(field="EventData") as EventData,
 get(field="UserData") as UserData,
 get(field="Message") as Message,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE ( EventData OR UserData OR Message )
 AND EventTime &amp;lt; DateBeforeTime
 AND EventTime &amp;gt; DateAfterTime
 AND Channel =~ ChannelRegex
 AND Provider =~ ProviderRegex
 AND str(str=EventID) =~ IdRegex
 AND format(format='%v %v %v', args=[
 EventData, UserData, Message]) =~ IocRegex
 AND if(condition=WhitelistRegex,
 then= NOT format(format='%v %v %v', args=[
 EventData, UserData, Message]) =~ WhitelistRegex,
 else= True)
 }
 )

 SELECT * FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.ExplicitLogon</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.explicitlogon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.explicitlogon/</guid><description>&lt;p>This artifact enables querying for explicit logon events. i.e Event ID 4648:
A logon was attempted using explicit credentials.&lt;/p>
&lt;p>If logging is enabled, these events are generated on the source machine when
an authentication attempt occurs under a different user context. Examples
include a user authenticating to another machine using wmic or mapping a
drive using different credentials, or using the RunAs option locally.&lt;/p>
&lt;p>This artifact by default filters all events with localhost as the server and
MACHINE$ as target user. A recommended hunt for lateral movement would be
activity to other machines from commonly abused lolbins or explicit logon
events from unusual processes.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.ExplicitLogon
description: |
 This artifact enables querying for explicit logon events. i.e Event ID 4648:
 A logon was attempted using explicit credentials.

 If logging is enabled, these events are generated on the source machine when
 an authentication attempt occurs under a different user context. Examples
 include a user authenticating to another machine using wmic or mapping a
 drive using different credentials, or using the RunAs option locally.

 This artifact by default filters all events with localhost as the server and
 MACHINE$ as target user. A recommended hunt for lateral movement would be
 activity to other machines from commonly abused lolbins or explicit logon
 events from unusual processes.


author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\Winevt\Logs\Security.evtx'
 - name: UsernameRegex
 description: "Target username Regex"
 default: .
 type: regex
 - name: UsernameWhitelist
 description: "Target username witelist Regex"
 default: '\\$$'
 type: regex
 - name: ServerRegex
 description: "Target server regex"
 default: .
 type: regex
 - name: ServerWhitelist
 description: "Target server whitelist regex"
 default: 'localhost'
 type: regex
 - name: ProcessNameRegex
 description: "Target process Regex"
 default: .
 - name: ProcessNameWhitelist
 description: "Target process whitelist Regex"
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"


sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=expand(path=EvtxGlob), accessor=Accessor)

 -- function returning IOC hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.EventID.Value as EventID,
 System.EventRecordID as EventRecordID,
 EventData.SubjectUserName as SubjectUserName,
 EventData.SubjectDomainName as SubjectDomainName,
 EventData.TargetUserName as TargetUserName,
 EventData.TargetDomainName as TargetDomainName,
 EventData.TargetServerName as TargetServerName,
 EventData.ProcessName as ProcessName,
 EventData,
 Message,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE
 EventID = 4648
 AND EventTime &amp;lt; DateBeforeTime
 AND EventTime &amp;gt; DateAfterTime
 AND TargetUserName =~ UsernameRegex
 AND NOT if(condition=UsernameWhitelist,
 then= TargetUserName =~ UsernameWhitelist,
 else= FALSE)
 AND TargetServerName =~ ServerRegex
 AND NOT if(condition=ServerWhitelist,
 then= TargetServerName =~ ServerWhitelist,
 else= FALSE)
 AND ProcessName =~ ProcessNameRegex
 AND NOT if(condition=ProcessNameWhitelist,
 then= ProcessName =~ ProcessNameWhitelist,
 else= FALSE)
 }
 )

 SELECT * FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Kerbroasting</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.kerbroasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.kerbroasting/</guid><description>&lt;p>This Artifact will return all successful Kerberos TGS Ticket events for
Service Accounts (SPN attribute) implemented with weak encryption. These
tickets are vulnerable to brute force attack and this event is an indicator
of a Kerbroasting attack.&lt;/p>
&lt;p>Typical attacker methodology is to firstly request accounts in the domain
with SPN attributes, then request an insecure TGS ticket for brute forcing.
This attack is particularly effective as any domain credentials can be used
to implement the attack and service accounts often have elevated privileges.
Kerbroasting can be used for privilege escalation or persistence by adding a
SPN attribute to an unexpected account.&lt;/p>
&lt;p>Log Source: Windows Security Event Log (Domain Controllers).
Event ID: 4769
Status: 0x0 (Audit Success)
Ticket Encryption: 0x17 (RC4)
Service Name: NOT krbtgt or NOT a system account (account name ends in $)
TargetUserName: NOT a system account (&lt;em>$@&lt;/em>)&lt;/p>
&lt;p>Monitor and alert on unusual events with these conditions from an unexpected
IP.
Note: There are potential false positives so whitelist normal source IPs and
manage risk of insecure ticket generation.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Kerbroasting
author: Matt Green - @mgreen27

description: |
 This Artifact will return all successful Kerberos TGS Ticket events for
 Service Accounts (SPN attribute) implemented with weak encryption. These
 tickets are vulnerable to brute force attack and this event is an indicator
 of a Kerbroasting attack.

 Typical attacker methodology is to firstly request accounts in the domain
 with SPN attributes, then request an insecure TGS ticket for brute forcing.
 This attack is particularly effective as any domain credentials can be used
 to implement the attack and service accounts often have elevated privileges.
 Kerbroasting can be used for privilege escalation or persistence by adding a
 SPN attribute to an unexpected account.

 Log Source: Windows Security Event Log (Domain Controllers).
 Event ID: 4769
 Status: 0x0 (Audit Success)
 Ticket Encryption: 0x17 (RC4)
 Service Name: NOT krbtgt or NOT a system account (account name ends in $)
 TargetUserName: NOT a system account (*$@*)

 Monitor and alert on unusual events with these conditions from an unexpected
 IP.
 Note: There are potential false positives so whitelist normal source IPs and
 manage risk of insecure ticket generation.

reference:
 - https://attack.mitre.org/techniques/T1208/
 - https://www.trustedsec.com/blog/art_of_kerberoast/

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\winevt\logs\Security.evtx'
 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=expand(path=EvtxGlob))

 -- function returning IOC hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.EventID.Value as EventID,
 System.Computer as Computer,
 EventData.ServiceName as ServiceName,
 EventData.ServiceSid as ServiceSid,
 EventData.TargetUserName as TargetUserName,
 format(format="0x%x", args=EventData.Status) as Status,
 EventData.TargetDomainName as TargetDomainName,
 format(format="0x%x", args=EventData.TicketEncryptionType) as TicketEncryptionType,
 format(format="0x%x", args=EventData.TicketOptions) as TicketOptions,
 EventData.TransmittedServices as TransmittedServices,
 EventData.IpAddress as IpAddress,
 EventData.IpPort as IpPort,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE
 System.EventID.Value = 4769
 AND EventData.TicketEncryptionType = 23
 AND EventData.Status = 0
 AND NOT EventData.ServiceName =~ "krbtgt|\\$$"
 AND NOT EventData.TargetUserName =~ "\\$@"
 })


 SELECT * FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Modifications</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.modifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.modifications/</guid><description>&lt;p>It is possible to disable windows event logs on a per channel or per
provider basis. Attackers may disable ciritcal log sources to
prevent detections.&lt;/p>
&lt;p>This artifact reads the state of the event log system from the
registry and attempts to detect when event logs were disabled.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Modifications
description: |
 It is possible to disable windows event logs on a per channel or per
 provider basis. Attackers may disable ciritcal log sources to
 prevent detections.

 This artifact reads the state of the event log system from the
 registry and attempts to detect when event logs were disabled.

precondition:
 SELECT * FROM info() WHERE OS =~ "windows"

parameters:
 - name: ProviderRegex
 default: .
 type: regex
 - name: DateAfter
 description: "search for modifications after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for modifications before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp

sources:
 - name: Channels
 description: Detects status of log channels (event log files).
 query: |
 -- Build time bounds
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else=timestamp(epoch="2200-01-01"))

 LET Key = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\*"

 SELECT Key.Mtime AS Mtime,
 basename(path=Key.OSPath) AS ChannelName,
 Key.OSPath AS _Key,
 OwningPublisher, Enabled
 FROM read_reg_key(globs=Key)
 WHERE ChannelName =~ ProviderRegex
 AND Mtime &amp;gt; DateAfterTime
 AND Mtime &amp;lt; DateBeforeTime

 - name: Providers
 description: Inspect the state of each provider
 query: |
 LET Key = "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System\\**\\Enabled"
 LET Publishers = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Publishers\\*\\@"

 LET ProviderNames &amp;lt;= memoize(key="GUID", query={
 SELECT OSPath.Components[-2] AS GUID,
 Data.value AS Name
 FROM glob(globs=Publishers, accessor="registry")
 })

 LET X = SELECT Mtime,
 OSPath.Dirname.Basename AS GUID,
 Data.value AS Enabled,
 OSPath.Dirname AS Key,
 to_dict(item={
 SELECT Name AS _key, Data.value AS _value
 FROM glob(root=OSPath.Dirname,
 globs="/*",
 accessor="registry")
 }) AS Content
 FROM glob(globs=Key, accessor="registry")

 SELECT Mtime, GUID, Key AS _RegKey,
 get(item=ProviderNames, member=GUID).Name AS ProviderName,
 Enabled, Content
 FROM X
 WHERE ProviderName =~ ProviderRegex
 AND Mtime &amp;gt; DateAfterTime
 AND Mtime &amp;lt; DateBeforeTime
 ORDER BY ProviderName

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.PowershellModule</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.powershellmodule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.powershellmodule/</guid><description>&lt;p>This Artifact will search and extract Module events (Event ID 4103) from
Powershell-Operational Event Logs.&lt;/p>
&lt;p>Powershell is commonly used by attackers across all stages of the attack
lifecycle. Although quite noisy Module logging can provide valuable insight.&lt;/p>
&lt;p>There are several parameter&amp;rsquo;s available for search leveraging regex.&lt;/p>
&lt;ul>
&lt;li>DateAfter enables search for events after this date.&lt;/li>
&lt;li>DateBefore enables search for events before this date.&lt;/li>
&lt;li>ContextRegex enables regex search over ContextInfo text field.&lt;/li>
&lt;li>PayloadRegex enables a regex search over Payload text field.&lt;/li>
&lt;li>SearchVSS enables VSS search&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.PowershellModule
description: |
 This Artifact will search and extract Module events (Event ID 4103) from
 Powershell-Operational Event Logs.

 Powershell is commonly used by attackers across all stages of the attack
 lifecycle. Although quite noisy Module logging can provide valuable insight.

 There are several parameter's available for search leveraging regex.
 - DateAfter enables search for events after this date.
 - DateBefore enables search for events before this date.
 - ContextRegex enables regex search over ContextInfo text field.
 - PayloadRegex enables a regex search over Payload text field.
 - SearchVSS enables VSS search


author: Matt Green - @mgreen27

reference:
 - https://attack.mitre.org/techniques/T1059/001/
 - https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html

parameters:
 - name: EventLog
 default: C:\Windows\system32\winevt\logs\Microsoft-Windows-PowerShell%4Operational.evtx
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: ContextRegex
 description: "regex search over Payload text field."
 type: regex
 - name: PayloadRegex
 description: "regex search over Payload text field."
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor &amp;lt;= if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- Build time bounds
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 -- Determine target files
 LET files =
 SELECT *, OSPath as Source
 FROM glob(globs=EventLog, accessor=Accessor)

 -- Main query
 LET hits = SELECT * FROM foreach(
 row=files,
 query={
 SELECT
 timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
 System.EventID.Value as EventID,
 System.Computer as Computer,
 System.Security.UserID as SecurityID,
 EventData.ContextInfo as ContextInfo,
 EventData.Payload as Payload,
 Message,
 System.EventRecordID as EventRecordID,
 System.Level as Level,
 System.Opcode as Opcode,
 System.Task as Task,
 Source
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE EventID = 4103
 AND EventTime &amp;gt; DateAfterTime
 AND EventTime &amp;lt; DateBeforeTime
 AND if(condition=ContextRegex,
 then=ContextInfo=~ContextRegex,else=TRUE)
 AND if(condition=PayloadRegex,
 then=ContextInfo=~PayloadRegex,else=TRUE)
 })
 ORDER BY Source DESC

 -- Output results
 SELECT
 EventTime,
 EventID,
 Computer,
 SecurityID,
 ContextInfo,
 Payload,
 Message,
 EventRecordID,
 Level,
 Opcode,
 Task,
 Source
 FROM hits

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.PowershellScriptblock</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.powershellscriptblock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.powershellscriptblock/</guid><description>&lt;p>This Artifact will search and extract ScriptBlock events (Event ID 4104) from
Powershell-Operational Event Logs.&lt;/p>
&lt;p>Powershell is commonly used by attackers across all stages of the attack
lifecycle. A valuable hunt is to search Scriptblock logs for signs of
malicious content.&lt;/p>
&lt;p>There are several parameter&amp;rsquo;s available for search leveraging regex.&lt;/p>
&lt;ul>
&lt;li>DateAfter enables search for events after this date.&lt;/li>
&lt;li>DateBefore enables search for events before this date.&lt;/li>
&lt;li>SearchStrings enables regex search over scriptblock text field.&lt;/li>
&lt;li>StringWhiteList enables a regex whitelist for scriptblock text field.&lt;/li>
&lt;li>PathWhitelist enables a regex whitelist for path of scriptblock.&lt;/li>
&lt;li>LogLevel enables searching on type of log. Default is Warning level which
is logged even if ScriptBlock logging is turned off when suspicious keywords
detected in Powershell interpreter. See second reference for list of keywords.&lt;/li>
&lt;li>SearchVSS enables VSS search.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.PowershellScriptblock
author: Matt Green - @mgreen27

description: |
 This Artifact will search and extract ScriptBlock events (Event ID 4104) from
 Powershell-Operational Event Logs.

 Powershell is commonly used by attackers across all stages of the attack
 lifecycle. A valuable hunt is to search Scriptblock logs for signs of
 malicious content.

 There are several parameter's available for search leveraging regex.
 - DateAfter enables search for events after this date.
 - DateBefore enables search for events before this date.
 - SearchStrings enables regex search over scriptblock text field.
 - StringWhiteList enables a regex whitelist for scriptblock text field.
 - PathWhitelist enables a regex whitelist for path of scriptblock.
 - LogLevel enables searching on type of log. Default is Warning level which
 is logged even if ScriptBlock logging is turned off when suspicious keywords
 detected in Powershell interpreter. See second reference for list of keywords.
 - SearchVSS enables VSS search.

reference:
 - https://attack.mitre.org/techniques/T1059/001/
 - https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/runtime/CompiledScriptBlock.cs#L1781-L1943

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\winevt\logs\Microsoft-Windows-PowerShell%4Operational.evtx'
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: SearchStrings
 type: regex
 description: "regex search over scriptblock text field."
 - name: StringWhitelist
 description: "Regex of string to witelist"
 type: regex
 - name: PathWhitelist
 description: "Regex of path to whitelist."
 type: regex
 - name: LogLevel
 description: "Log level. Warning is Powershell default bad keyword list."
 type: choices
 default: Warning
 choices:
 - All
 - Warning
 - Verbose
 - name: LogLevelMap
 type: hidden
 default: |
 Choice,Regex
 All,"."
 Warning,"3"
 Verbose,"5"

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 -- Parse Log level dropdown selection
 LET LogLevelRegex &amp;lt;= SELECT format(format="%v", args=Regex) as value
 FROM parse_csv(filename=LogLevelMap, accessor="data")
 WHERE Choice=LogLevel LIMIT 1

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=expand(path=EvtxGlob), accessor=Accessor)

 -- function returning IOC hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.Channel as Channel,
 System.EventID.Value as EventID,
 System.Security.UserID as SecurityID,
 EventData.Path as Path,
 EventData.ScriptBlockId as ScriptBlockId,
 EventData.ScriptBlockText as ScriptBlockText,
 get(field="Message") as Message,
 System.EventRecordID as EventRecordID,
 System.Level as Level,
 System.Opcode as Opcode,
 System.Task as Task,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE System.EventID.Value = 4104
 AND EventTime &amp;lt; DateBeforeTime
 AND EventTime &amp;gt; DateAfterTime
 AND format(format="%d", args=System.Level) =~ LogLevelRegex.value[0]
 AND if(condition=SearchStrings,
 then=ScriptBlockText =~ SearchStrings,
 else=TRUE)
 AND if(condition=StringWhitelist,
 then= NOT ScriptBlockText =~ StringWhitelist,
 else=TRUE)
 AND if(condition=PathWhitelist,
 then= NOT Path =~ PathWhitelist,
 else=TRUE)
 })

 SELECT * FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.RDPAuth</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.rdpauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.rdpauth/</guid><description>&lt;p>This artifact will extract Event Logs related to Remote Desktop sessions,
logon and logoff.&lt;/p>
&lt;p>Security channel - EventID in 4624,4634 AND LogonType 3, 7, or 10.
Security channel - EventID in 4778,4625,4779, or 4647.
System channel - EventID 9009.
Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational - EventID 1149.
Microsoft-Windows-TerminalServices-LocalSessionManager/Operational - EventID 23,22,21,24,25,39, or 40.&lt;/p>
&lt;p>Best use of this artifact is to collect RDP and Authentication events around
a timeframe of interest and order by EventTime to scope RDP activity.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.RDPAuth
author: "Matt Green - @mgreen27"
description: |
 This artifact will extract Event Logs related to Remote Desktop sessions,
 logon and logoff.

 Security channel - EventID in 4624,4634 AND LogonType 3, 7, or 10.
 Security channel - EventID in 4778,4625,4779, or 4647.
 System channel - EventID 9009.
 Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational - EventID 1149.
 Microsoft-Windows-TerminalServices-LocalSessionManager/Operational - EventID 23,22,21,24,25,39, or 40.

 Best use of this artifact is to collect RDP and Authentication events around
 a timeframe of interest and order by EventTime to scope RDP activity.

reference:
 - https://ponderthebits.com/2018/02/windows-rdp-related-event-logs-identification-tracking-and-investigation/

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: Security
 description: path to Security event log.
 default: '%SystemRoot%\System32\Winevt\Logs\Security.evtx'
 - name: System
 description: path to System event log.
 default: '%SystemRoot%\System32\Winevt\Logs\System.evtx'
 - name: LocalSessionManager
 description: path to TerminalServices-LocalSessionManager operational event log.
 default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx'
 - name: RemoteConnectionManager
 description: path to TerminalServices-RemoteConnectionManager operational event log.
 default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx'
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: SourceIPRegex
 default: ".+"
 type: regex
 - name: UserNameRegex
 default: ".+"
 type: regex
 - name: UserNameWhitelist
 default: '\$$'
 type: regex
 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else=timestamp(epoch="2200-01-01"))

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths &amp;lt;= SELECT OSPath
 FROM glob(globs=[
 expand(path=Security),
 expand(path=System),
 expand(path=LocalSessionManager),
 expand(path=RemoteConnectionManager)], accessor=Accessor)

 -- function returning query hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.Channel as Channel,
 System.EventID.Value as EventID,
 if(condition= System.Channel='Security',
 then= EventData.TargetDomainName,
 else= if(condition= UserData.EventXML.User,
 then= split(string=UserData.EventXML.User,sep='\\\\')[0],
 else= if(condition= UserData.EventXML.Param2,
 then= UserData.EventXML.Param2,
 else= 'null' ))) as DomainName,
 if(condition= System.Channel='Security',
 then= EventData.TargetUserName,
 else= if(condition= UserData.EventXML.User,
 then= split(string=UserData.EventXML.User,sep='\\\\')[1],
 else= if(condition= UserData.EventXML.Param1,
 then= UserData.EventXML.Param1,
 else= 'null' ))) as UserName,
 if(condition= System.Channel='Security',
 then= if(condition= EventData.LogonType,
 then= EventData.LogonType,
 else= 'null' ),
 else= 'null' ) as LogonType,
 if(condition= System.Channel='Security',
 then= if(condition= EventData.IpAddress,
 then= EventData.IpAddress,
 else= 'null' ),
 else= if(condition= System.Channel=~'TerminalServices',
 then= if(condition= UserData.EventXML.Address,
 then= UserData.EventXML.Address,
 else= if(condition= UserData.EventXML.Param3,
 then= UserData.EventXML.Param3,
 else= 'null')),
 else= 'null' )) as SourceIP,
 if(condition= System.Channel=~'TerminalServices|System',
 then=
 get(item=dict(
 `21`='RDP_LOCAL_CONNECTED',
 `22`='RDP_REMOTE_CONNECTED',
 `23`='RDP_SESSION_LOGOFF',
 `24`='RDP_LOCAL_DISCONNECTED',
 `25`='RDP_REMOTE_RECONNECTION',
 `39`='RDP_REMOTE_DISCONNECTED_FORMAL',
 `40`='RDP_REMOTE_DISCONNECTED_REASON',
 `1149`='RDP_INITIATION_SUCCESSFUL',
 `9009`='DESKTOPWINDOWMANAGER_CLOSED'),
 member=str(str=System.EventID.Value)),
 else=if(condition= System.EventID.Value = 4624 AND EventData.LogonType = 10,
 then='RDP_LOGON_SUCCESSFUL_NEW',
 else=if(condition= System.EventID.Value = 4624 AND EventData.LogonType = 3,
 then='LOGON_SUCCESSFUL',
 else=if(condition= System.EventID.Value = 4624 AND EventData.LogonType = 7,
 then='LOGON_SUCCESSFUL_OLD',
 else=if(condition= System.EventID.Value = 4625 AND EventData.LogonType = 3,
 then='LOGON_FAILED',
 else=if(condition= System.EventID.Value = 4625 AND EventData.LogonType = 10,
 then='RDP_LOGON_FAILED',
 else=
 get(item=dict(
 `4778`='LOGON_RECONNECT_EXISTING',
 `4779`='SESSION_DISCONNECT',
 `4647`='USER_INITIATED_LOGOFF',
 `4634`='LOGOFF_DISCONNECT'),
 member=str(str=System.EventID.Value)
 ))))))) as Description,
 get(field="Message") as Message,
 System.EventRecordID as EventRecordID,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE
 ( Channel = 'Security'
 AND ( (EventID in (4624,4634) AND LogonType in (3,10,7))
 OR EventID in (4778,4625,4779,4647)))
 OR ( Channel = 'System' AND EventID = 9009 )
 OR ( Channel = 'Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational'
 AND EventID = 1149 )
 OR ( Channel = 'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational'
 AND EventID in (23,22,21,24,25,39,40))
 AND EventTime &amp;lt; DateBeforeTime
 AND EventTime &amp;gt; DateAfterTime
 AND if(condition= UserNameWhitelist,
 then= NOT UserName =~ UserNameWhitelist,
 else= True)
 AND UserName =~ UserNameRegex
 AND SourceIP =~ SourceIPRegex
 }
 )

 SELECT * FROM if(condition=VSSAnalysisAge &amp;gt; 0,
 then={
 SELECT * FROM evtxsearch(PathList=fspaths)
 GROUP BY EventRecordID, Channel
 }, else={
 SELECT * FROM evtxsearch(PathList=fspaths)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.ScheduledTasks</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.scheduledtasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.scheduledtasks/</guid><description>&lt;p>This artifact will extract Event Logs related to ScheduledTasks and provide
a nice format for simplified review.&lt;/p>
&lt;p>Adversaries may abuse tasks for execution, persistence, lateral movement or
privilege escalation. This artifact collates all events from
Microsoft-Windows-TaskScheduler/Operational event log channel and scheduled
task events from the Security log if configured.&lt;/p>
&lt;p>A common hunting use case may be collection all deleted scheduled tasks (EID 141),
all modified scheduled tasks (EID 140) then run frequency analysis and chase
down any abnormalities for the environment. Similarly task execution (EID 129)
and registration (EID 106) can be a good collection hunting for unusual paths.&lt;/p>
&lt;p>Pivoting can be via either: TaskSchedulerEventRegex, TaskName or IOC Regex
(e.g taskname|delete|created|update)&lt;/p>
&lt;p>Note: Audit Other Object Access Events is required to be implemented to record
scheduled tasks being registered, modified or disabled in the Security event
log channel.
See: Computer Configuration\Policies\Windows Settings\Security Settings\Advanced Audit Policy Configuration\Object Access&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.ScheduledTasks
description: |
 This artifact will extract Event Logs related to ScheduledTasks and provide
 a nice format for simplified review.

 Adversaries may abuse tasks for execution, persistence, lateral movement or
 privilege escalation. This artifact collates all events from
 Microsoft-Windows-TaskScheduler/Operational event log channel and scheduled
 task events from the Security log if configured.

 A common hunting use case may be collection all deleted scheduled tasks (EID 141),
 all modified scheduled tasks (EID 140) then run frequency analysis and chase
 down any abnormalities for the environment. Similarly task execution (EID 129)
 and registration (EID 106) can be a good collection hunting for unusual paths.

 Pivoting can be via either: TaskSchedulerEventRegex, TaskName or IOC Regex
 (e.g taskname|delete|created|update)

 Note: Audit Other Object Access Events is required to be implemented to record
 scheduled tasks being registered, modified or disabled in the Security event
 log channel.
 See: Computer Configuration\Policies\Windows Settings\Security Settings\Advanced Audit Policy Configuration\Object Access

author: "@mgreen27 - Matt Green"

precondition: SELECT OS From info() where OS = 'windows'

reference:
 - https://attack.mitre.org/techniques/T1053/005/
 - https://mnaoumov.wordpress.com/2014/05/15/task-scheduler-event-ids/

parameters:
 - name: Security
 description: path to Security event log.
 default: '%SystemRoot%\System32\Winevt\Logs\Security.evtx'
 - name: TaskScheduler
 description: path to the TaskScheduler/Operational event log
 default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TaskScheduler%4Operational.evtx'
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: TaskSchedulerEventRegex
 description: Regex of TaskScheduler log event ids.
 type: regex
 default: .
 - name: SecurityEventRegex
 description: regex of Security log event ids.
 type: regex
 default: '^(4698|4699|4700|4701|4702)$'
 - name: TaskNameRegex
 description: regex of target task name.
 default: .
 type: regex
 - name: TaskNameWhitelist
 description: regex of task names to exclude from results.
 default:
 type: regex
 - name: TaskActionRegex
 description: regex of target task execution process / path.
 default: .
 type: regex
 - name: TaskActionWhitelist
 description: regex of task processes to exclude from results.
 default:
 type: regex
 - name: UserNameRegex
 description: regex of target user name.
 default: .
 type: regex
 - name: IocRegex
 description: IOC regex to search for.
 default: .
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.


sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else=timestamp(epoch="2200-01-01"))

 -- Lookup what each task ID means (sadly dict keys are always strings).
 LET TaskIDLookup &amp;lt;= dict(
 `4698`="A scheduled task was created.",
 `4699`="A scheduled task was deleted.",
 `4700`="A scheduled task was enabled.",
 `4701`="A scheduled task was disabled.",
 `4702`="A scheduled task was updated.")

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=[expand(path=Security), expand(path=TaskScheduler)],
 accessor=Accessor)

 -- function to parse task content and replace xml in EventData
 LET parse_task(data) = dict(
 SubjectUserSid=data.SubjectUserSid,
 SubjectUserName=data.SubjectUserName,
 SubjectDomainName=data.SubjectDomainName,
 SubjectLogonId=data.SubjectLogonId,
 TaskName=data.TaskName,
 TaskContent=parse_xml(
 accessor='data',
 file=regex_replace(
 source= if(condition= data.TaskContentNew,
 then= data.TaskContentNew,
 else= if(condition= data.TaskContent,
 then= data.TaskContent)),
 re='&amp;lt;[?].+?&amp;gt;',
 replace='')).Task,

 ClientProcessStartKey=data.ClientProcessStartKey,
 ClientProcessId=data.ClientProcessId,
 ParentProcessId=data.ParentProcessId,
 RpcCallClientLocality=data.RpcCallClientLocality,
 FQDN=data.FQDN)


 -- function returning query hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.Channel as Channel,
 System.EventID.Value as EventID,
 System.EventRecordID as EventRecordID,
 if(condition=EventData.UserName,
 then= EventData.UserName,
 else= if(condition=EventData.UserContext,
 then=EventData.UserContext,
 else= if(condition=EventData.SubjectUserName,
 then= EventData.SubjectDomainName + '\\' + EventData.SubjectUserName,
 else= 'N/A' ))) as UserName,
 if(condition=EventData.TaskName,
 then= EventData.TaskName) as TaskName,
 if(condition=EventData.ActionName,
 then= EventData.ActionName,
 else= if(condition=EventData.Path,
 then= EventData.Path,
 else= 'N/A' )) as TaskAction,
 if(condition=EventData.TaskContent OR EventData.TaskContentNew,
 then= parse_task(data=EventData),
 else= EventData) as EventData,
 get(field="Message") as Message,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE
 (( Channel = 'Microsoft-Windows-TaskScheduler/Operational'
 AND str(str=EventID) =~ TaskSchedulerEventRegex )
 OR ( Channel = 'Security'
 AND str(str=EventID) =~ SecurityEventRegex ))
 AND TaskName =~ TaskNameRegex
 AND NOT if(condition= TaskNameWhitelist,
 then= TaskName =~ TaskNameWhitelist,
 else= False)
 AND TaskAction =~ TaskActionRegex
 AND NOT if(condition= TaskActionWhitelist,
 then= TaskName =~ TaskActionWhitelist,
 else= False)
 AND UserName =~ UserNameRegex
 AND format(format='%v %v %v %v', args=[
 EventData, UserData, Message, System]) =~ IocRegex
 AND EventTime &amp;gt;= DateAfterTime AND EventTime &amp;lt;= DateBeforeTime
 }
 )

 SELECT
 EventTime,
 Computer,
 Channel,
 EventID,
 EventRecordID,
 UserName,
 TaskName,
 if(condition= Channel = 'Microsoft-Windows-TaskScheduler/Operational',
 then= Message,
 else=get(item=TaskIDLookup, member=str(str=EventID))) as Message,
 if(condition= EventID =~'^(4698|4699|4700|4701|4702)$',
 then= if(condition= EventData.TaskContent.Actions,
 then= if(condition= EventData.TaskContent.Actions.Exec,
 then= if(condition= EventData.TaskContent.Actions.Exec.Arguments,
 then= EventData.TaskContent.Actions.Exec.Command + ' ' + EventData.TaskContent.Actions.Exec.Arguments,
 else= EventData.TaskContent.Actions.Exec.Command),
 else= if(condition=EventData.TaskContent.Actions.ComHandler.ClassId,
 then= 'ClassId: ' + EventData.TaskContent.Actions.ComHandler.ClassId))),
 else= TaskAction) as TaskAction,
 EventData,
 OSPath
 FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.ServiceCreationComspec</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.servicecreationcomspec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.servicecreationcomspec/</guid><description>&lt;p>This Detection hts on the string &amp;ldquo;COMSPEC&amp;rdquo; (nocase) in Windows Service
Creation events. That is: EventID 7045 from the System event log.&lt;/p>
&lt;p>This detects many hack tools that leverage SCM based lateral movement
including smbexec.&lt;/p>
&lt;p>SearchVSS allows querying VSS instances of EventLog Path with event
deduplication.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.ServiceCreationComspec
description: |

 This Detection hts on the string "COMSPEC" (nocase) in Windows Service
 Creation events. That is: EventID 7045 from the System event log.

 This detects many hack tools that leverage SCM based lateral movement
 including smbexec.

 SearchVSS allows querying VSS instances of EventLog Path with event
 deduplication.

author: Matt Green - @mgreen27

parameters:
 - name: EventLog
 default: C:\Windows\system32\winevt\logs\System.evtx
 - name: ComspecRegex
 default: "(COMSPEC|cmd.exe|ADMIN\\$)"
 type: regex

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

sources:
 - name: ServiceCreation
 query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 // Extract all target paths from glob
 LET files = SELECT OSPath
 FROM glob(globs=EventLog, accessor=Accessor)

 // Parse all target files, order by source and add dedupe string
 LET hits = SELECT * FROM foreach(
 row=files,
 query={
 SELECT timestamp(epoch=System.TimeCreated.SystemTime) as EventTime,
 System.EventID.Value as EventID,
 System.Computer as Computer,
 System.Security.UserID as SecurityID,
 EventData.AccountName as ServiceAccount,
 EventData.ServiceName as ServiceName,
 EventData.ImagePath as ImagePath,
 EventData.ServiceType as ServiceType,
 EventData.StartType as StartType,
 System.EventRecordID as EventRecordID,
 System.Level as Level,
 System.Opcode as Opcode,
 System.Task as Task,
 OSPath AS Source
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE System.EventID.Value = 7045 and
 EventData.ImagePath =~ ComspecRegex
 })
 ORDER BY Source DESC

 SELECT
 EventTime,
 EventID,
 Computer,
 SecurityID,
 ServiceAccount,
 ServiceName,
 ImagePath,
 ServiceType,
 StartType,
 EventRecordID,
 Source
 FROM hits

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Symantec</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.symantec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.symantec/</guid><description>&lt;p>Query the Symantec Endpoint Protection Event Logs. The default artifact will
return EventId 51 and high value strings with goals bubble up some events for
triage.&lt;/p>
&lt;p>Note:
EventID selection is controlled by regex to allow multiple EID selections.
If running a hunt, consider also hunting EventId 45 - Tamper Protection
Detection (this will be noisy so whitelist is required).
IgnoreRegex allows filtering out events relevant to the target environment.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Symantec
description: |
 Query the Symantec Endpoint Protection Event Logs. The default artifact will
 return EventId 51 and high value strings with goals bubble up some events for
 triage.

 Note:
 EventID selection is controlled by regex to allow multiple EID selections.
 If running a hunt, consider also hunting EventId 45 - Tamper Protection
 Detection (this will be noisy so whitelist is required).
 IgnoreRegex allows filtering out events relevant to the target environment.

reference:
 - https://www.nextron-systems.com/wp-content/uploads/2019/10/Antivirus_Event_Analysis_CheatSheet_1.7.2.pdf

author: Matt Green - @mgreen27

parameters:
 - name: SymantecEventLog
 default: C:\Windows\system32\winevt\logs\Symantec Endpoint Protection Client.evtx
 - name: RegexEventIds
 description: "Regex of Event IDs to hunt for. Consider EID 45 for Tamper Protection Detection"
 type: regex
 default: ^51$
 - name: TargetRegex
 description: "Regex to hunt for - default is high value SEP detections"
 default: "Infostealer|Hacktool|Mimi|SecurityRisk|WinCredEd|NetCat|Backdoor|Pwdump|SuperScan|XScan|PasswordRevealer|Trojan|Malscript|Agent|Malware|Exploit|webshell|cobalt|Mpreter|sploit|Meterpreter|RAR|7z|encrypted|tsclient|PerfLogs"
 type: regex
 - name: IgnoreRegex
 description: "Regex to ignore events with EventData strings matching."
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

sources:
 - query: |
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))
 SELECT timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
 System.EventID.Value as EventId,
 System.Computer as Computer,
 EventData.Data[0] as EventData
 FROM parse_evtx(filename=SymantecEventLog)
 WHERE
 EventTime &amp;lt; DateBeforeTime AND
 EventTime &amp;gt; DateAfterTime AND
 format(format="%v",args=System.EventID.Value) =~ RegexEventIds AND
 EventData =~ TargetRegex AND
 if(condition=IgnoreRegex,
 then= NOT EventData=~IgnoreRegex,
 else= True)

&lt;/code>&lt;/pre></description></item><item><title>Windows.EventLogs.Telerik</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.telerik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.eventlogs.telerik/</guid><description>&lt;p>This Artifact will hunt for evidence of Telerik exploitation in the Application
Event Log.&lt;/p>
&lt;p>Telerik is a commonly exploited component of IIS web pages that has been
actively targeted by actors via several CVEs. Several tools and attack
capabilities exist making exploitation of vulnerable services trivial. Due to
the nature of the software and typical deployments the patches may require
manual application.&lt;/p>
&lt;p>IocRegex enables searching for regex in the whole EventData field.
Output of this artifact is targeted fields from EventID 1309 to provide
context for the hit.&lt;/p>
&lt;p>This Artifact will hunt for evidence of Telerik exploitation in the Application Event Log.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.EventLogs.Telerik
description: |
 This Artifact will hunt for evidence of Telerik exploitation in the Application
 Event Log.

 Telerik is a commonly exploited component of IIS web pages that has been
 actively targeted by actors via several CVEs. Several tools and attack
 capabilities exist making exploitation of vulnerable services trivial. Due to
 the nature of the software and typical deployments the patches may require
 manual application.

 IocRegex enables searching for regex in the whole EventData field.
 Output of this artifact is targeted fields from EventID 1309 to provide
 context for the hit.

 This Artifact will hunt for evidence of Telerik exploitation in the Application Event Log.

author: Matt Green - @mgreen27

reference:
 - https://www.cyber.gov.au/acsc/view-all-content/advisories/advisory-2020-004-remote-code-execution-vulnerability-being-actively-exploited-vulnerable-versions-telerik-ui-sophisticated-actors
 - https://attack.mitre.org/techniques/T1190/

parameters:
 - name: EvtxGlob
 default: '%SystemRoot%\System32\Winevt\Logs\Application.evtx'
 - name: IocRegex
 description: "IOC Regex"
 default: telerik.*\\?type=rau
 type: regex
 - name: WhitelistRegex
 description: "Regex of string to witelist"
 type: regex
 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"

sources:
 - precondition: SELECT OS From info() where OS = 'windows'

 query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then = DateAfter, else = "1600-01-01" )
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then = DateBefore, else = "2200-01-01" )

 -- expand provided glob into a list of paths on the file system (fs)
 LET fspaths = SELECT OSPath
 FROM glob(globs=expand(path=EvtxGlob), accessor=Accessor)

 -- function returning IOC hits
 LET evtxsearch(PathList) = SELECT * FROM foreach(
 row=PathList,
 query={
 SELECT
 timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
 System.Computer as Computer,
 System.Channel as Channel,
 System.EventID.Value as EventID,
 System.EventRecordID as EventRecordID,
 EventData.Data[17] as Exception,
 EventData.Data[16] as User,
 EventData.Data[15] as Process,
 EventData.Data[14] as Pid,
 EventData.Data[21] as SourceIP,
 EventData.Data[19] as Uri,
 EventData.Data[11] as SitePath,
 OSPath
 FROM parse_evtx(filename=OSPath, accessor=Accessor)
 WHERE EventID = 1309
 AND format(format='%v',args=EventData.Data) =~ IocRegex
 AND NOT if(condition=WhitelistRegex,
 then= format(format='%v',args=EventData.Data) =~ WhitelistRegex,
 else= FALSE )
 AND EventTime &amp;gt;= DateAfterTime AND EventTime &amp;lt;= DateBeforeTime
 }
 )

 SELECT * FROM evtxsearch(PathList=fspaths)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.EventLogModifications</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.eventlogmodifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.eventlogmodifications/</guid><description>&lt;p>It is possible to disable windows event logs on a per channel or per
provider basis. Attackers may disable ciritcal log sources to
prevent detections.&lt;/p>
&lt;p>This artifact monitors the state of the event log system from the
registry and attempts to detect when event logs were disabled.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.EventLogModifications
description: |
 It is possible to disable windows event logs on a per channel or per
 provider basis. Attackers may disable ciritcal log sources to
 prevent detections.

 This artifact monitors the state of the event log system from the
 registry and attempts to detect when event logs were disabled.

type: CLIENT_EVENT

precondition:
 SELECT * FROM info() WHERE OS =~ "windows"

parameters:
 - name: Period
 type: int
 default: 60

sources:
 - query: |
 LET Publishers = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Publishers\\*\\@"

 LET ProviderNames &amp;lt;= memoize(key="GUID", query={
 SELECT OSPath.Components[-2] AS GUID,
 Data.value AS Name
 FROM glob(globs=Publishers, accessor="registry")
 })

 LET Key = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\*"

 LET Query = SELECT Key.Mtime AS Mtime,
 Key.OSPath[-1] AS ChannelName,
 format(format="%s/%v", args=[Key.OSPath[-1], Enabled]) AS QueryKey ,
 Key.OSPath AS _Key,
 get(item=ProviderNames, field=OwningPublisher).Name AS Publisher, Enabled
 FROM read_reg_key(globs=Key)

 SELECT * FROM diff(query=Query, period=Period, key="QueryKey")
 WHERE Diff =~ "added"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.FailedLogBeforeSuccess</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.failedlogbeforesuccess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.failedlogbeforesuccess/</guid><description>&lt;p>Sometimes attackers will brute force an local user&amp;rsquo;s account&amp;rsquo;s
password. If the account password is strong, brute force attacks are
not effective and might not represent a high value event in
themselves.&lt;/p>
&lt;p>However, if the brute force attempt succeeds, then it is a very high
value event (since brute forcing a password is typically a
suspicious activity).&lt;/p>
&lt;p>On the endpoint this looks like a bunch of failed logon attempts in
quick succession followed by a successful login.&lt;/p>
&lt;p>NOTE: In order for this artifact to work we need Windows to be
logging failed account login. This is not on by default and should
be enabled via group policy.&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events" target="_blank" >https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events&lt;/a>
&lt;/p>
&lt;p>You can set the policy in group policy management console (gpmc):
Computer Configuration\Windows Settings\Security Settings\Local Policies\Audit Policy.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.FailedLogBeforeSuccess
description: |
 Sometimes attackers will brute force an local user's account's
 password. If the account password is strong, brute force attacks are
 not effective and might not represent a high value event in
 themselves.

 However, if the brute force attempt succeeds, then it is a very high
 value event (since brute forcing a password is typically a
 suspicious activity).

 On the endpoint this looks like a bunch of failed logon attempts in
 quick succession followed by a successful login.

 NOTE: In order for this artifact to work we need Windows to be
 logging failed account login. This is not on by default and should
 be enabled via group policy.

 https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events

 You can set the policy in group policy management console (gpmc):
 Computer Configuration\Windows Settings\Security Settings\Local Policies\Audit Policy.
type: CLIENT_EVENT

parameters:
 - name: securityLogFile
 default: &amp;gt;-
 C:/Windows/System32/Winevt/Logs/Security.evtx

 - name: failureCount
 description: Alert if there are this many failures before the successful logon.
 default: 3

 - name: failedLogonTimeWindow
 default: 3600

sources:
 - precondition:
 SELECT OS FROM info() where OS = 'windows'
 query: |
 LET failed_logon = SELECT EventData as FailedEventData,
 System as FailedSystem
 FROM watch_evtx(filename=securityLogFile)
 WHERE System.EventID.Value = 4625


 LET last_5_events = SELECT FailedEventData, FailedSystem
 FROM fifo(query=failed_logon,
 max_rows=500,
 max_age=atoi(string=failedLogonTimeWindow))

 // Force the fifo to materialize.
 LET foo &amp;lt;= SELECT * FROM last_5_events

 LET success_logon = SELECT EventData as SuccessEventData,
 System as SuccessSystem
 FROM watch_evtx(filename=securityLogFile)
 WHERE System.EventID.Value = 4624

 SELECT * FROM foreach(
 row=success_logon,
 query={
 SELECT SuccessSystem.TimeCreated.SystemTime AS LogonTime,
 SuccessSystem, SuccessEventData,
 enumerate(items=FailedEventData) as FailedEventData,
 FailedSystem, count(items=SuccessSystem) as Count
 FROM last_5_events
 WHERE FailedEventData.SubjectUserName = SuccessEventData.SubjectUserName
 GROUP BY LogonTime
 }) WHERE Count &amp;gt; atoi(string=failureCount)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.Kerberoasting</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.kerberoasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.kerberoasting/</guid><description>&lt;p>&lt;strong>Description&lt;/strong>:
This Artifact will monitor all successful Kerberos TGS Ticket events for
Service Accounts (SPN attribute) implemented with weak encryption. These
tickets are vulnerable to brute force attack and this event is an indicator
of a Kerberoasting attack.&lt;/p>
&lt;p>&lt;strong>ATT&amp;amp;CK&lt;/strong>: &lt;a href="https://attack.mitre.org/techniques/T1208/" target="_blank" >T1208 - Kerberoasting&lt;/a>

Typical attacker methodology is to firstly request accounts in the domain
with SPN attributes, then request an insecure TGS ticket for brute forcing.
This attack is particularly effective as any domain credentials can be used
to implement the attack and service accounts often have elevated privileges.
Kerberoasting can be used for privilege escalation or persistence by adding a
SPN attribute to an unexpected account.&lt;/p>
&lt;p>&lt;strong>Reference&lt;/strong>: &lt;a href="https://www.trustedsec.com/2018/05/art_of_kerberoast/" target="_blank" >The Art of Detecting Kerberoast Attacks&lt;/a>

&lt;strong>Log Source&lt;/strong>: Windows Security Event Log (Domain Controllers)
&lt;strong>Event ID&lt;/strong>: 4769
&lt;strong>Status&lt;/strong>: 0x0 (Audit Success)
&lt;strong>Ticket Encryption&lt;/strong>: 0x17 (RC4)
&lt;strong>Service Name&lt;/strong>: NOT krbtgt or NOT a system account (account name ends in $)
&lt;strong>TargetUserName&lt;/strong>: NOT a system account (&lt;em>$@&lt;/em>)&lt;/p>
&lt;p>Monitor and alert on unusual events from an unexpected IP.
Note: There are potential false positives so whitelist normal source IPs and
manage risk of insecure ticket generation.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.Kerberoasting
description: |
 **Description**:
 This Artifact will monitor all successful Kerberos TGS Ticket events for
 Service Accounts (SPN attribute) implemented with weak encryption. These
 tickets are vulnerable to brute force attack and this event is an indicator
 of a Kerberoasting attack.

 **ATT&amp;amp;CK**: [T1208 - Kerberoasting](https://attack.mitre.org/techniques/T1208/)
 Typical attacker methodology is to firstly request accounts in the domain
 with SPN attributes, then request an insecure TGS ticket for brute forcing.
 This attack is particularly effective as any domain credentials can be used
 to implement the attack and service accounts often have elevated privileges.
 Kerberoasting can be used for privilege escalation or persistence by adding a
 SPN attribute to an unexpected account.

 **Reference**: [The Art of Detecting Kerberoast Attacks](https://www.trustedsec.com/2018/05/art_of_kerberoast/)
 **Log Source**: Windows Security Event Log (Domain Controllers)
 **Event ID**: 4769
 **Status**: 0x0 (Audit Success)
 **Ticket Encryption**: 0x17 (RC4)
 **Service Name**: NOT krbtgt or NOT a system account (account name ends in $)
 **TargetUserName**: NOT a system account (*$@*)


 Monitor and alert on unusual events from an unexpected IP.
 Note: There are potential false positives so whitelist normal source IPs and
 manage risk of insecure ticket generation.


author: Matt Green - @mgreen27

type: CLIENT_EVENT

parameters:
 - name: eventLog
 default: C:\Windows\system32\winevt\logs\Security.evtx

sources:
 - name: Kerberoasting
 query: |
 LET files = SELECT * FROM glob(globs=eventLog)

 SELECT timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
 System.EventID.Value as EventID,
 System.Computer as Computer,
 EventData.ServiceName as ServiceName,
 EventData.ServiceSid as ServiceSid,
 EventData.TargetUserName as TargetUserName,
 "0x" + format(format="%x", args=EventData.Status) as Status,
 EventData.TargetDomainName as TargetDomainName,
 "0x" + format(format="%x", args=EventData.TicketEncryptionType) as TicketEncryptionType,
 "0x" + format(format="%x", args=EventData.TicketOptions) as TicketOptions,
 EventData.TransmittedServices as TransmittedServices,
 EventData.IpAddress as IpAddress,
 EventData.IpPort as IpPort
 FROM foreach(
 row=files,
 async=TRUE,
 query={
 SELECT *
 FROM watch_evtx(filename=OSPath)
 WHERE System.EventID.Value = 4769
 AND EventData.TicketEncryptionType = 23
 AND EventData.Status = 0
 AND NOT EventData.ServiceName =~ "krbtgt|\\$$"
 AND NOT EventData.TargetUserName =~ "\\$@"
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.Kerbroasting</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.kerbroasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.kerbroasting/</guid><description>&lt;p>&lt;strong>Description&lt;/strong>:
This Artifact will monitor all successful Kerberos TGS Ticket events for
Service Accounts (SPN attribute) implemented with weak encryption. These
tickets are vulnerable to brute force attack and this event is an indicator
of a Kerbroasting attack.&lt;/p>
&lt;p>&lt;strong>ATT&amp;amp;CK&lt;/strong>: &lt;a href="https://attack.mitre.org/techniques/T1208/" target="_blank" >T1208 - Kerbroasting&lt;/a>

Typical attacker methodology is to firstly request accounts in the domain
with SPN attributes, then request an insecure TGS ticket for brute forcing.
This attack is particularly effective as any domain credentials can be used
to implement the attack and service accounts often have elevated privileges.
Kerbroasting can be used for privilege escalation or persistence by adding a
SPN attribute to an unexpected account.&lt;/p>
&lt;p>&lt;strong>Reference&lt;/strong>: &lt;a href="https://www.trustedsec.com/2018/05/art_of_kerberoast/" target="_blank" >The Art of Detecting Kerberoast Attacks&lt;/a>

&lt;strong>Log Source&lt;/strong>: Windows Security Event Log (Domain Controllers)
&lt;strong>Event ID&lt;/strong>: 4769
&lt;strong>Status&lt;/strong>: 0x0 (Audit Success)
&lt;strong>Ticket Encryption&lt;/strong>: 0x17 (RC4)
&lt;strong>Service Name&lt;/strong>: NOT krbtgt or NOT a system account (account name ends in $)
&lt;strong>TargetUserName&lt;/strong>: NOT a system account (&lt;em>$@&lt;/em>)&lt;/p>
&lt;p>Monitor and alert on unusual events from an unexpected IP.
Note: There are potential false positives so whitelist normal source IPs and
manage risk of insecure ticket generation.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Events.Kerbroasting
description: |
 **Description**:
 This Artifact will monitor all successful Kerberos TGS Ticket events for
 Service Accounts (SPN attribute) implemented with weak encryption. These
 tickets are vulnerable to brute force attack and this event is an indicator
 of a Kerbroasting attack.

 **ATT&amp;amp;CK**: [T1208 - Kerbroasting](https://attack.mitre.org/techniques/T1208/)
 Typical attacker methodology is to firstly request accounts in the domain
 with SPN attributes, then request an insecure TGS ticket for brute forcing.
 This attack is particularly effective as any domain credentials can be used
 to implement the attack and service accounts often have elevated privileges.
 Kerbroasting can be used for privilege escalation or persistence by adding a
 SPN attribute to an unexpected account.

 **Reference**: [The Art of Detecting Kerberoast Attacks](https://www.trustedsec.com/2018/05/art_of_kerberoast/)
 **Log Source**: Windows Security Event Log (Domain Controllers)
 **Event ID**: 4769
 **Status**: 0x0 (Audit Success)
 **Ticket Encryption**: 0x17 (RC4)
 **Service Name**: NOT krbtgt or NOT a system account (account name ends in $)
 **TargetUserName**: NOT a system account (*$@*)


 Monitor and alert on unusual events from an unexpected IP.
 Note: There are potential false positives so whitelist normal source IPs and
 manage risk of insecure ticket generation.


author: Matt Green - @mgreen27

type: CLIENT_EVENT

parameters:
 - name: eventLog
 default: C:\Windows\system32\winevt\logs\Security.evtx

sources:
 - name: Kerbroasting
 query: |
 LET files = SELECT * FROM glob(globs=eventLog)

 SELECT timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
 System.EventID.Value as EventID,
 System.Computer as Computer,
 EventData.ServiceName as ServiceName,
 EventData.ServiceSid as ServiceSid,
 EventData.TargetUserName as TargetUserName,
 &amp;quot;0x&amp;quot; + format(format=&amp;quot;%x&amp;quot;, args=EventData.Status) as Status,
 EventData.TargetDomainName as TargetDomainName,
 &amp;quot;0x&amp;quot; + format(format=&amp;quot;%x&amp;quot;, args=EventData.TicketEncryptionType) as TicketEncryptionType,
 &amp;quot;0x&amp;quot; + format(format=&amp;quot;%x&amp;quot;, args=EventData.TicketOptions) as TicketOptions,
 EventData.TransmittedServices as TransmittedServices,
 EventData.IpAddress as IpAddress,
 EventData.IpPort as IpPort
 FROM foreach(
 row=files,
 async=TRUE,
 query={
 SELECT *
 FROM watch_evtx(filename=FullPath)
 WHERE System.EventID.Value = 4769
 AND EventData.TicketEncryptionType = 23
 AND EventData.Status = 0
 AND NOT EventData.ServiceName =~ &amp;quot;krbtgt|\\$$&amp;quot;
 AND NOT EventData.TargetUserName =~ &amp;quot;\\$@&amp;quot;
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.Mutants</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.mutants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.mutants/</guid><description>&lt;p>This artifact detects creation of Mutants and triggers an alert.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.Mutants
description: |
 This artifact detects creation of Mutants and triggers an alert. 

author: Jos Clephas - @DfirJos

type: CLIENT_EVENT

precondition:
 SELECT * FROM info() WHERE OS =~ "windows"

parameters:
 - name: processRegex
 description: A regex applied to process names.
 default: .
 type: regex
 - name: Period
 type: int
 default: 120
 - name: MutantNameRegex
 default: EvilMutant
 type: regex
 - name: AlertName
 default: "Suspicious mutex created"
 - name: diff
 default: added
 - name: enrich
 description: Enrich mutex with process information. Closely monitor the performance impact if you enable this.
 type: bool
 default: N

sources:
 - query: |
 
 LET processes = SELECT Pid AS ProcPid, Name AS ProcName, Exe FROM process_tracker_pslist() WHERE ProcName =~ processRegex AND int(int=ProcPid) &amp;gt; 0

 LET query_mutant = SELECT * FROM winobj() WHERE Type = "Mutant" AND Name =~ MutantNameRegex 

 LET query_enriched = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT ProcPid, ProcName, Exe, Type, Name, Handle
 FROM handles(pid=int(int=ProcPid), types="Mutant")
 })
 WHERE Type = "Mutant" AND Name =~ MutantNameRegex
 
 LET query_diff = if(condition=enrich, then=query_enriched, else=query_mutant) 
 
 SELECT *, alert(name=AlertName, Name=Name, Type=Type, Exe=Exe) as AlertSent FROM diff(query=query_diff, period=Period, key="Name") WHERE Diff = diff

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.ProcessCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.processcreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.processcreation/</guid><description>&lt;p>Collect all process creation events.&lt;/p>
&lt;p>This artifact relies on WMI to receive process start events. This
method is not as good as kernel mechanism used by Sysmon. It is more
reliable to use Sysmon instead via the
Windows.Sysinternals.SysmonLogForward artifact instead.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.ProcessCreation
description: |
 Collect all process creation events.

 This artifact relies on WMI to receive process start events. This
 method is not as good as kernel mechanism used by Sysmon. It is more
 reliable to use Sysmon instead via the
 Windows.Sysinternals.SysmonLogForward artifact instead.

type: CLIENT_EVENT

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 -- Add a small delay to allow the process tracker to catch up
 -- for enrichments.
 LET Delayed = SELECT * FROM delay(query={
 SELECT * FROM wmi_events(
 query="SELECT * FROM Win32_ProcessStartTrace",
 wait=5000000, // Do not time out.
 namespace="ROOT/CIMV2")
 }, delay=2)

 // Convert the timestamp from WinFileTime to Epoch.
 SELECT timestamp(winfiletime=atoi(string=Parse.TIME_CREATED)) as Timestamp,
 Parse.ParentProcessID as PPID,
 Parse.ProcessID as PID,
 Parse.ProcessName as Name,
 process_tracker_get(id=Parse.ProcessID).Data.CommandLine AS CommandLine,
 process_tracker_get(id=Parse.ParentProcessID).Data.CommandLine AS ParentCommandLine,
 join(array=process_tracker_callchain(id=Parse.ProcessID).Data.Name,
 sep=" &amp;lt;- ") AS CallChain
 FROM Delayed

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.ServiceCreation</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.servicecreation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.servicecreation/</guid><description>&lt;p>Monitor for creation of new services.&lt;/p>
&lt;p>New services are typically created by installing new software or
kernel drivers. Attackers will sometimes install a new service to
either insert a malicious kernel driver or as a persistence
mechanism.&lt;/p>
&lt;p>This event monitor extracts the service creation events from the
event log and records them on the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.ServiceCreation
description: |
 Monitor for creation of new services.

 New services are typically created by installing new software or
 kernel drivers. Attackers will sometimes install a new service to
 either insert a malicious kernel driver or as a persistence
 mechanism.

 This event monitor extracts the service creation events from the
 event log and records them on the server.
type: CLIENT_EVENT

parameters:
 - name: systemLogFile
 default: &amp;gt;-
 C:/Windows/System32/Winevt/Logs/System.evtx

sources:
 - precondition:
 SELECT OS from info() where OS = "windows"

 query: |
 SELECT System.TimeCreated.SystemTime as Timestamp,
 System.EventID.Value as EventID,
 EventData.ImagePath as ImagePath,
 EventData.ServiceName as ServiceName,
 EventData.ServiceType as Type,
 System.Security.UserID as UserSID,
 EventData as _EventData,
 System as _System
 FROM watch_evtx(filename=systemLogFile) WHERE EventID = 7045

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.Trackaccount</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackaccount/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackaccount/</guid><description>&lt;p>Artifact to detect account usage by monitoring event id 4624. This is useful for tracking attacker activity. If you want to receive Slack/Teams/Discord/etc alerts you can enable the server_event artifact named &amp;lsquo;Server.Alerts.Trackaccount&amp;rsquo;&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.Trackaccount
description: |
 Artifact to detect account usage by monitoring event id 4624. This is useful for tracking attacker activity. If you want to receive Slack/Teams/Discord/etc alerts you can enable the server_event artifact named 'Server.Alerts.Trackaccount'

author: Jos Clephas - @DfirJos

type: CLIENT_EVENT

parameters:
 - name: eventLog
 default: C:\Windows\system32\winevt\logs\Security.evtx
 - name: UserRegex
 default: 'admin|user'
 type: regex
 - name: LogonTypeRegex
 type: json_array
 default: '[2,3,4,5,7,8,9,10,11]'

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET files = SELECT * FROM glob(globs=eventLog)

 SELECT timestamp(epoch=System.TimeCreated.SystemTime) As EventTime,
 System.EventRecordID as EventRecordID,
 System.EventID.Value as EventID,
 System.Computer as SourceComputer,
 EventData.TargetUserName as TargetUserName,
 EventData.LogonType as LogonType,
 EventData.IpAddress as IpAddress,
 EventData.WorkstationName as TargetWorkstationName,
 System,
 EventData,
 Message

 FROM foreach(
 row=files,
 async=TRUE,
 query={
 SELECT *
 FROM watch_evtx(filename=OSPath)
 WHERE System.EventID.Value = 4624
 AND EventData.TargetUserName =~ UserRegex
 AND EventData.LogonType in LogonTypeRegex
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.TrackProcesses</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackprocesses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackprocesses/</guid><description>&lt;p>This artifact uses sysmon and pslist to keep track of running
processes using the Velociraptor process tracker.&lt;/p>
&lt;p>The Process Tracker keeps track of exited processes, and resolves
process callchains from it in memory cache.&lt;/p>
&lt;p>This event artifact enables the global process tracker and makes it
possible to run many other artifacts that depend on the process
tracker.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.TrackProcesses
description: |
 This artifact uses sysmon and pslist to keep track of running
 processes using the Velociraptor process tracker.

 The Process Tracker keeps track of exited processes, and resolves
 process callchains from it in memory cache.

 This event artifact enables the global process tracker and makes it
 possible to run many other artifacts that depend on the process
 tracker.

type: CLIENT_EVENT

tools:
 - name: SysmonBinary
 url: https://live.sysinternals.com/tools/sysmon64.exe
 serve_locally: true

 - name: SysmonConfig
 url: https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml
 serve_locally: true

parameters:
 - name: AlsoForwardUpdates
 type: bool
 description: |
 If set we also send process tracker state updates to
 the server.
 - name: MaxSize
 type: int64
 description: Maximum size of the in memory process cache (default 10k)

 - name: SysmonFileLocation
 description: If set, we check this location first for sysmon installed.
 default: C:/Windows/sysmon64.exe

 - name: AddEnrichments
 type: bool
 description: Add process information enrichments (can use more resources)

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 // Make sure sysmon is installed.
 LET _ &amp;lt;= SELECT * FROM Artifact.Windows.Sysinternals.SysmonInstall(
 SysmonFileLocation=SysmonFileLocation)

 LET UpdateQuery =
 SELECT * FROM foreach(row={
 SELECT *,
 get(member='EventData') AS EventData
 FROM watch_etw(
 guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}',
 description='Microsoft-Windows-Sysmon/Operational')
 }, query={
 SELECT * FROM switch(
 start={
 SELECT EventData.ProcessId AS id,
 EventData.ParentProcessId AS parent_id,
 "start" AS update_type,

 -- We need to manually build the dict here so
 -- we can maintain column ordering.
 dict(
 Pid=EventData.ProcessId,
 Ppid=EventData.ParentProcessId,
 Name=split(sep_string="\\", string=EventData.Image)[-1],
 StartTime=EventData.UtcTime,
 EndTime=NULL,
 Username=EventData.User,
 Exe=EventData.Image,
 CommandLine= EventData.CommandLine,
 CurrentDirectory= EventData.CurrentDirectory,
 FileVersion=EventData.FileVersion,
 Description= EventData.Description,
 Company= EventData.Company,
 Product= EventData.Product,
 ParentImage= EventData.ParentImage,
 ParentCommandLine= EventData.ParentCommandLine,
 TerminalSessionId= EventData.TerminalSessionId,
 IntegrityLevel= EventData.IntegrityLevel,
 Hashes=parse_string_with_regex(regex=[
 "SHA256=(?P&amp;lt;SHA256&amp;gt;[^,]+)",
 "MD5=(?P&amp;lt;MD5&amp;gt;[^,]+)",
 "IMPHASH=(?P&amp;lt;IMPHASH&amp;gt;[^,]+)"],
 string=EventData.Hashes)
 ) AS data,
 EventData.UtcTime AS start_time,
 NULL AS end_time
 FROM scope()
 WHERE System.ID = 1
 },
 end={
 SELECT EventData.ProcessId AS id,
 NULL AS parent_id,
 "exit" AS update_type,
 dict() AS data,
 NULL AS start_time,
 EventData.UtcTime AS end_time
 FROM scope()
 WHERE System.ID = 5
 })
 })

 LET SyncQuery =
 SELECT Pid AS id,
 Ppid AS parent_id,
 CreateTime AS start_time,
 dict(
 Name=Name,
 Username=Username,
 Exe=Exe,
 CommandLine=CommandLine) AS data
 FROM pslist()

 LET Tracker &amp;lt;= process_tracker(
 max_size=MaxSize,
 enrichments=if(condition=AddEnrichments, then=[
 '''x=&amp;gt;if(
 condition=NOT x.Data.VersionInformation AND x.Data.Image,
 then=dict(VersionInformation=parse_pe(file=x.Data.Image).VersionInformation))
 ''',
 '''x=&amp;gt;if(
 condition=NOT x.Data.OriginalFilename OR x.Data.OriginalFilename = '-',
 then=dict(OriginalFilename=x.Data.VersionInformation.OriginalFilename))
 '''], else=[]),
 sync_query=SyncQuery, update_query=UpdateQuery, sync_period=60000)

 SELECT * FROM process_tracker_updates()
 WHERE update_type = "stats" OR AlsoForwardUpdates

&lt;/code>&lt;/pre></description></item><item><title>Windows.Events.TrackProcessesBasic</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackprocessesbasic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.events.trackprocessesbasic/</guid><description>&lt;p>This artifact is a basic Process tracker using a simple polled
pslist(). The Process Tracker keeps track of exited processes, and
resolves process callchains from it in memory cache.&lt;/p>
&lt;p>This event artifact enables the global process tracker and makes it
possible to run many other artifacts that depend on the process
tracker.&lt;/p>
&lt;p>This tracker DOES NOT require sysmon and is &lt;strong>incompatible&lt;/strong> with
Windows.Events.TrackProcesses (only one should be running).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Events.TrackProcessesBasic
description: |
 This artifact is a basic Process tracker using a simple polled
 pslist(). The Process Tracker keeps track of exited processes, and
 resolves process callchains from it in memory cache.

 This event artifact enables the global process tracker and makes it
 possible to run many other artifacts that depend on the process
 tracker.

 This tracker DOES NOT require sysmon and is **incompatible** with
 Windows.Events.TrackProcesses (only one should be running).

type: CLIENT_EVENT

parameters:
 - name: MaxSize
 type: int64
 description: Maximum size of the in memory process cache (default 10k)
 - name: PollPeriod
 type: int64
 description: How often to run pslist to track processes (in Seconds)
 default: 60

sources:
 - query: |
 LET SyncQuery =
 SELECT Pid AS id,
 Ppid AS parent_id,
 CreateTime AS start_time,
 dict(
 Name=Name,
 Username=Username,
 Exe=Exe,
 CommandLine=CommandLine) AS data
 FROM pslist()

 LET Tracker &amp;lt;= process_tracker(
 sync_query=SyncQuery, sync_period=1000 * PollPeriod)

 SELECT * FROM process_tracker_updates()
 WHERE update_type = "stats"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Bam</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.bam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.bam/</guid><description>&lt;p>The Background Activity Moderator (BAM) is a Windows service that
Controls activity of background applications. This service exists
in Windows 10 only after Fall Creators update – version 1709.&lt;/p>
&lt;p>It provides full path of the executable file that was run on the
system and last execution date/time&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Bam
description: |
 The Background Activity Moderator (BAM) is a Windows service that
 Controls activity of background applications. This service exists
 in Windows 10 only after Fall Creators update – version 1709.

 It provides full path of the executable file that was run on the
 system and last execution date/time

reference:
 - https://andreafortuna.org/2018/05/23/forensic-artifacts-evidences-of-program-execution-on-windows-systems/

parameters:
 - name: bamKeys
 type: csv
 default: |
 KeyGlob
 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\UserSettings\*\*
 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings\*\*
 - name: userRegex
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS from info() where OS = "windows"
 query: |
 LET users &amp;lt;= SELECT Name, UUID
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex

 SELECT OSPath.Components[-2] as SID, {
 SELECT Name FROM users
 WHERE UUID = OSPath.Components[-2]
 } As UserName,
 Name as Binary,
 timestamp(winfiletime=parse_binary(
 filename=Data.value, accessor="data",
 profile="[]", struct="int64")) AS Bam_time
 FROM glob(globs=bamKeys.KeyGlob, accessor="registry")
 WHERE Data.type =~ "BINARY"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.BulkExtractor</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.bulkextractor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.bulkextractor/</guid><description>&lt;p>This content will execute bulk_extractor with record carving plugins from
4n6ist. Initially developed to carve EventLogs from physical disk and
unallocated space, this content may also be leveraged for other
bulk extractor capability. Best use case is for remote targeted machine
collection to remove the need for a disk image.&lt;/p>
&lt;p>&lt;strong>Settings&lt;/strong>
Target - Can be \\.\PhysicalDrive[X], \\?\HarddiskVolumeShadowCopy[Y]
or C:\Folder\Path&amp;quot;
TargetAllPhysical - boolean option to include all attached physical disks
TargetVSS - boolean option to target all VSC
CarveEvtx - boolean option to include evtx carving
FindRegex - regex to include for BulkExtractor find plugins&lt;/p>
&lt;p>FreeCommand - supersedes evtx or find options and allows free form switch
generation for adlib use cases.
e.g &amp;lsquo;-E evtx, -e zip -S unzip_carve_mode=2&amp;rsquo;&amp;quot;
Will add:
command prefix: &amp;ldquo;-q 99999999999 -R&amp;rsquo;&amp;rdquo; and
postfix: &amp;ldquo;-o [Outfolder] [Target]&amp;rdquo;.
To make: bulk_extractor q 99999999999 -R -E evtx, -e zip -S unzip_carve_mode=2 -o [outfolder] [Target]&lt;/p>
&lt;p>If FindRegex or &amp;ldquo;-f&amp;rdquo; has been used in FreeCommand the artifact will attempt
to parse find.txt output.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Currently only supported for x64 bit machines.&lt;/li>
&lt;li>This artifact usually takes a long time. Ensure default timeout is high
enough for completion.&lt;/li>
&lt;li>This content is NOT recommended for hunting without great consideration as
bulk_extractor is a multithreaded tool and utilises all CPU available on the
endpoint.&lt;/li>
&lt;li>The artifact copies carved data to the local disk prior to upload which
is not ideal from a forensic viewpoint.&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.BulkExtractor
description: |
 This content will execute bulk_extractor with record carving plugins from
 4n6ist. Initially developed to carve EventLogs from physical disk and
 unallocated space, this content may also be leveraged for other
 bulk extractor capability. Best use case is for remote targeted machine
 collection to remove the need for a disk image.

 **Settings**
 Target - Can be \\\\.\\PhysicalDrive[X], \\\\?\\HarddiskVolumeShadowCopy[Y]
 or C:\\Folder\\Path"
 TargetAllPhysical - boolean option to include all attached physical disks
 TargetVSS - boolean option to target all VSC
 CarveEvtx - boolean option to include evtx carving
 FindRegex - regex to include for BulkExtractor find plugins

 FreeCommand - supersedes evtx or find options and allows free form switch
 generation for adlib use cases.
 e.g '-E evtx, -e zip -S unzip_carve_mode=2'"
 Will add:
 command prefix: "-q 99999999999 -R'" and
 postfix: "-o [Outfolder] [Target]".
 To make: bulk_extractor q 99999999999 -R -E evtx, -e zip -S unzip_carve_mode=2 -o [outfolder] [Target]

 If FindRegex or "-f" has been used in FreeCommand the artifact will attempt
 to parse find.txt output.

 **Note**
 1. Currently only supported for x64 bit machines.
 2. This artifact usually takes a long time. Ensure default timeout is high
 enough for completion.
 3. This content is NOT recommended for hunting without great consideration as
 bulk_extractor is a multithreaded tool and utilises all CPU available on the
 endpoint.
 4. The artifact copies carved data to the local disk prior to upload which
 is not ideal from a forensic viewpoint.

reference:
 - http://www.kazamiya.net/en/bulk_extractor-rec
 - http://downloads.digitalcorpora.org/downloads/bulk_extractor/BEUsersManual.pdf
 - https://simson.net/clips/academic/2013.COSE.bulk_extractor.pdf

author: Matt Green - @mgreen27

required_permissions:
 - EXECVE

tools:
 - name: Bulk_Extractor_Binary
 url: https://github.com/Velocidex/Tools/raw/main/BulkExtractor/bulk_extractor.exe
 serve_locally: true

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: Target
 description: "Target. Can by physical drive, \\\\?\\HarddiskVolumeShadowCopy1 or C:\\Folder\\Path"
 default: \\.\PhysicalDrive0
 - name: TargetAllPhysical
 description: "Target all attached physical drives"
 type: bool
 - name: TargetVSS
 description: "Target all VSC. Note: Not targeted to folder. Velociraptor CAN collect from the Volume Shadow direct targeted to folder with ntfs accessor so there may be a better way."
 type: bool
 - name: CarveEvtx
 description: "Carve EVTX files"
 type: bool
 - name: FindRegex
 description: "Regex for Bulk_extractor find plugin"
 - name: FreeCommand
 description: "Bulk_extractor custom commands. .e.g '-E evtx, -e zip -S unzip_carve_mode=2'"

sources:
 - query: |
 LET bin &amp;lt;= SELECT *
 FROM Artifact.Generic.Utils.FetchBinary(ToolName="Bulk_Extractor_Binary")
 LET tempfolder &amp;lt;= tempdir()
 LET ExePath &amp;lt;= tempfile(extension=".exe")

 LET target = SELECT
 DeviceID,
 if(condition=DeviceID=~"^\\\\\\\\.\\\\",
 then=split(string=split(string=DeviceID,sep='\\\\\\\\.\\\\')[1],
 sep='\\\\')[0],
 else="bulk_out") as base,
 _DeviceID
 FROM chain(
 a={
 SELECT
 DeviceID,
 upcase(string=DeviceID) as _DeviceID
 FROM Artifact.Windows.Sys.DiskInfo()
 WHERE TargetAllPhysical
 },
 b={
 SELECT
 Target as DeviceID,
 upcase(string=Target) as _DeviceID
 FROM scope()
 WHERE Target =~ '.'
 },
 c={
 SELECT
 regex_replace(source=OSPath,
 re="GLOBALROOT\\\\Device\\\\",replace="")AS DeviceID,
 Data.ID AS ShadowCopyID,
 upcase(string=regex_replace(source=OSPath,
 re="GLOBALROOT\\\\Device\\\\",replace="")) as _DeviceID
 FROM glob(globs='/*', accessor='ntfs')
 WHERE ShadowCopyID AND TargetVSS
 ORDER by OSPath
 })
 GROUP BY _DeviceID

 LET cmdline = SELECT (bin[0].OSPath, '-q', '99999999999', '-R') +
 CMD + '-o' as CMD FROM switch(
 a= {
 SELECT commandline_split(command=FreeCommand) AS CMD
 FROM scope()
 WHERE FreeCommand
 },
 b= {
 SELECT
 ('-E','evtx','-e','find','-f',FindRegex) AS CMD
 FROM scope()
 WHERE CarveEvtx AND FindRegex
 },
 c= {
 SELECT ('-E','evtx') AS CMD
 FROM scope()
 WHERE CarveEvtx
 },
 d= {
 SELECT ('-E','find','-f',FindRegex) AS CMD
 FROM scope()
 WHERE FindRegex
 },
 e= {
 SELECT ('-h') AS CMD FROM scope()
 })

 SELECT * FROM foreach(
 row=target,
 query= {
 SELECT *
 FROM execve(
 argv=cmdline[0].CMD + (
 tempfolder + '\\' +
 regex_replace(source=base, re='[^a-zA-Z]', replace='_'),
 DeviceID),
 length=10000000, sep='\n')})

 - name: FindResults
 query: |
 SELECT * FROM foreach(
 row={ SELECT *
 FROM glob(globs='/*/find.txt', root=tempfolder)
 },
 query={
 SELECT *
 FROM split_records(filenames=OSPath,first_row_is_headers=false,
 columns=['Location','Match','Data'],regex='\t')
 WHERE NOT Location =~ '#'
 })
 WHERE FindRegex OR FreeCommand =~ '-f'

 - name: Upload
 query: |
 SELECT upload(file=OSPath,
 name=strip(string=OSPath,prefix=tempfolder)) AS Upload
 FROM glob(globs="/**", root=tempfolder)
 WHERE Upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.CertUtil</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.certutil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.certutil/</guid><description>&lt;p>The Windows Certutil binary is capable of downloading arbitrary
files. Attackers typically use it to fetch tools undetected using
Living off the Land (LOL) techniques.&lt;/p>
&lt;p>Certutil maintains a cache of the downloaded files and this contains
valuable metadata. This artifact parses this metadata to establish
what was downloaded and when.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.CertUtil
description: |
 The Windows Certutil binary is capable of downloading arbitrary
 files. Attackers typically use it to fetch tools undetected using
 Living off the Land (LOL) techniques.

 Certutil maintains a cache of the downloaded files and this contains
 valuable metadata. This artifact parses this metadata to establish
 what was downloaded and when.

reference:
 - https://u0041.co/blog/post/3
 - https://thinkdfir.com/2020/07/30/certutil-download-artefacts/
 - https://lolbas-project.github.io/lolbas/Binaries/Certutil/

parameters:
 - name: MinSize
 type: int
 description: Only show contents larger than this size.
 - name: URLWhitelist
 type: csv
 default: |
 URL
 http://sf.symcd.com
 http://oneocsp.microsoft.com
 http://certificates.godaddy.com
 http://ocsp.pki.goog
 http://repository.certum.pl
 http://www.microsoft.com
 http://ocsp.verisign.com
 http://ctldl.windowsupdate.com
 http://ocsp.sectigo.com
 http://ocsp.usertrust.com
 http://ocsp.comodoca.com
 http://cacerts.digicert.com
 http://ocsp.digicert.com
 - name: MetadataGlobUser
 default: C:/Users/*/AppData/LocalLow/Microsoft/CryptnetUrlCache/MetaData/*
 - name: MetadataGlobSystem
 default: C:/Windows/*/config/systemprofile/AppData/LocalLow/Microsoft/CryptnetUrlCache/MetaData/*
 - name: AlsoUpload
 type: bool

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.


sources:
 - query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge
 LET Accessor = if(condition=VSSAnalysisAge &amp;gt; 0, then="ntfs_vss", else="auto")

 LET Profile = '[
 ["Header", 0, [
 ["UrlSize", 12, "uint32"],
 ["HashSize", 100, "uint32"],
 ["DownloadTime", 16, "uint64"],
 ["FileSize", 112, "uint32"],
 ["URL", 116, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.UrlSize"
 }],
 ["Hash", "x=&amp;gt;x.UrlSize + 116", "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.HashSize"
 }]
 ]]
 ]'

 -- Build a whitelist regex
 LET URLRegex &amp;lt;= "^" + join(array=URLWhitelist.URL, sep="|")
 LET Files = SELECT OSPath,

 -- Parse each metadata file.
 parse_binary(filename=OSPath, accessor=Accessor,
 profile=Profile,
 struct="Header") AS Header,

 -- The content is kept in the Content directory.
 OSPath.Dirname.Dirname + "Content" + OSPath.Basename AS _ContentPath,
 read_file(length=4, accessor=Accessor,
 filename=OSPath.Dirname.Dirname + "Content" + OSPath.Basename) AS ContentHeader
 FROM glob(globs=[MetadataGlobUser, MetadataGlobSystem], accessor=Accessor)
 WHERE Header.FileSize &amp;gt; MinSize

 SELECT OSPath AS _MetadataFile, _ContentPath,
 if(condition=AlsoUpload, then=upload(file=OSPath, accessor=Accessor)) AS _MetdataUpload,
 if(condition=AlsoUpload, then=upload(file=_ContentPath, accessor=Accessor)) AS _Upload,
 Header.URL AS URL,
 url(parse=URL).Host AS UrlTLD,
 Header.FileSize AS FileSize,
 regex_replace(re='"', replace="", source=Header.Hash) AS Hash,
 timestamp(winfiletime=Header.DownloadTime) AS DownloadTime,
 if(condition= ContentHeader=~ 'MZ',
 then= parse_pe(file= _ContentPath, accessor=Accessor).VersionInformation,
 else= 'N/A' ) as VersionInformation,
 if(condition= ContentHeader=~ 'MZ',
 then= authenticode(filename= _ContentPath, accessor=Accessor),
 else= 'N/A' ) as Authenticode

 FROM Files
 WHERE NOT URL =~ URLRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.FilenameSearch</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.filenamesearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.filenamesearch/</guid><description>&lt;p>Did a specific file exist on this machine in the past or does it
still exist on this machine?&lt;/p>
&lt;p>This common question comes up frequently in cases of IP theft,
discovery and other matters. One way to answer this question is to
search the $MFT file for any references to the specific filename. If
the filename is fairly unique then a positive hit on that name
generally means the file was present.&lt;/p>
&lt;p>Simply determining that a filename existed on an endpoint in the
past is significant for some investigations.&lt;/p>
&lt;p>This artifact applies a YARA search for a set of filenames of
interest on the $MFT file. For any hit, the artifact then identified
the MFT entry where the hit was found and attempts to resolve that
to an actual filename.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.FilenameSearch
description: |
 Did a specific file exist on this machine in the past or does it
 still exist on this machine?

 This common question comes up frequently in cases of IP theft,
 discovery and other matters. One way to answer this question is to
 search the $MFT file for any references to the specific filename. If
 the filename is fairly unique then a positive hit on that name
 generally means the file was present.

 Simply determining that a filename existed on an endpoint in the
 past is significant for some investigations.

 This artifact applies a YARA search for a set of filenames of
 interest on the $MFT file. For any hit, the artifact then identified
 the MFT entry where the hit was found and attempts to resolve that
 to an actual filename.

parameters:
 - name: yaraRule
 default: |
 rule Hit {
 strings:
 $a = "my secret file.txt" nocase wide ascii
 condition:
 any of them
 }
 type: yara
 - name: Device
 default: "C:"

sources:
 - query: |
 SELECT String.Offset AS Offset,
 String.HexData AS HexData,
 parse_ntfs(device=Device,
 mft=String.Offset / 1024) AS MFT
 FROM yara(
 rules=yaraRule, files=Device + "/$MFT",
 end=10000000000,
 number=1000,
 accessor="ntfs")

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.JumpLists</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.jumplists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.jumplists/</guid><description>&lt;p>The automaticdestinatinons jumplist is an OLE2 container containing
LNK files as individual streams&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.JumpLists
description: |
 The automaticdestinatinons jumplist is an OLE2 container containing
 LNK files as individual streams

imports:
 - Windows.Forensics.Lnk

parameters:
 - name: Globs
 default: C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations\*.automaticDestinations-ms

sources:
 - query: |
 // https://raw.githubusercontent.com/EricZimmerman/JumpList/a72a510b01922f60ce550c307e5f04131272448f/JumpList/Resources/AppIDs.txt
 LET AppIdTable &amp;lt;= '''AppId|Description
 0006f647f9488d7a|AIM 7.5.11.9 (custom AppID + JL support)
 00098b0ef1c84088|fulDC 6.78
 012dc1ea8e34b5a6|Microsoft Paint 6.1
 01b29f0dc90366bb|AIM 5.9.3857
 b08971c77377bde3|Visual Studio Enterprise 2015 Version 14.0 Update 3
 c31b3d36438b5e2c|Visual Studio Enterprise 2017 Version 15.9.10
 03d877ec11607fe4|Thunderbird 6.0.2
 044a50e6c87bc012|Classic FTP Plus 2.15
 a2b95ca27b6c33d9|Windows Live Photo Gallery
 fdbd48d45512dffc|Photoshop 7
 e26f61afb0824f2e|Photoshop CC 2015
 050620fe75ee0093|VMware Player 3.1.4
 a55ed4fbb973aefb|Microsoft Teams version 1.3.0.4461
 05e01ecaf82f7d8e|Scour Exchange 0.0.0.228
 06059df4b02360af|Kadu 0.10.0 / 0.6.5.5
 070b52cf73249257|Sococo 1.5.0.2274
 0a1d19afe5a80f80|FileZilla 2.2.32
 0a79a7ce3c45d781|CuteFTP 7.1 (Build 06.06.2005.1)
 0b17d3d0c9ca7e29|Document ViewerPicasa 3.8.0 (Build 117.43, 0)
 0b3f13480c2785ae|Paint 6.1 (build 7601: SP1)
 0b48ce76eda60b97|Shareaza 8.0.0.112300
 0cfab0ec14b6f953|Express NewsPictures 2.41 (Build 08.05.07.0)
 0ef606b196796ebb|HP MediaSmart Photo
 10f5a20c21466e85|FTP Voyager 15.2.0.17
 1110d9896dceddb3|imgSeek 0.8.5
 12dc1ea8e34b5a6|Microsoft Paint (built-in Win7)
 12dc1ea8e34b5a6|Microsoft Paint 6.1
 134620458666ccb0|TeraCopy 2.3 64-bit
 135df2a440abe9bb|SoulSeek 156c
 13eb0e5d9a49eaef|Binjet 3.0.2
 1434d6d62d64857d|BitLord 1.2.0-66
 14354e216395983a|Remote Desktop Manager 2.1.0.0 FREE
 1461132e553e2e6c|Firefox 6.0
 169b3be0bc43d592|FastPictureViewer Professional 1.6 (Build 211)
 16d71406474462b5|Snagit Editor 12.4.1
 16ec093b8f51508f|Opera 8.54 build 7730 / 9.64 build 10487 / 11.50 build 1074
 174c2c811c286c58|InfraRecorder 0.53.0.0 64-bit
 177aeb41deb606ae|Adobe Photoshop CS6 (64 Bit)
 17d3eb086439f0d7|TrueCrypt 7.0a
 17d3eb086439f0d7|TrueCrypt 7.1a 64-bit
 18434d518c3a61eb|Minitab 17
 186b5ccada1d986b|NewsGrabber 3.0.36
 19ccee0274976da8|mIRC 4.72 / 5.61
 19e6043495a5b4da|Edit Pad Pro
 1a60b1067913516a|Psi 0.14
 1a89d1befe8e90e3|Adobe Acrobat Distiller Pro XI 32-bit 11.0.0779
 1b29f0dc90366bb|AIM 5.9.3857
 1b4dd67f29cb1962|Windows Explorer (Win7)
 1b4dd67f29cb1962|Windows Explorer Pinned and Recent.
 1bc392b8e104a00e|Remote Desktop
 1bc392b8e104a00e|Remote Desktop Connection 6.1.7600 (Win7)
 1bc9bbbe61f14501|OneNote
 1c30573bdfce4155|Zenmap GUI 6.49BETA4
 1cf97c38a5881255|MediaPortal 1.1.3
 1cffbe973a437c74|DSPlayer 0.889 Lite
 1da3c90a72bf5527|Safari 4.0.5 (531.22.7) / 5.1 (7534.50)
 1eb796d87c32eff9|Firefox 5.0
 20ef367747c22564|Bullet Proof FTP 2010.75.0.75
 223bf0f360c6fea5|I2P 0.8.8 (restartable)
 226400522157fe8b|FileZilla Server 0.9.39 beta
 22c4d315e96389e0|FastCopy 3.12
 22cefa022402327d|Meca Messenger 5.3.0.52
 22cefa022402327d|Meca Messenger 5.3.0.52 (CHANGED)
 236461219accfae0|This is new 1(NEW)
 23646679aaccfae0|Adobe Acrobat 9.4.0
 23646679aaccfae0|Adobe Reader 9 x64
 23646679aaccfae0|Adobe Reader 9.
 23646679aaccfae0|Adobe Reader 9.x
 23646679aaccfae0|Adobe Reader 9.x(CHANGED)
 23709f643539f03d|TGHIS IS NEW 2(NEW)
 23709f6439b9f03d|Hex Editor Neo 5.14
 23709f6439b9f03d|Hex Editor Neo 5.14(CHANGED)
 23ef200ca6364eff|Oracle VM VirtualBox 5.0.16
 23f08dab0f6aaf30|SoMud 1.3.3
 2417caa1f2a881d4|ICQ 7.6 (Build 5617)
 2437d4d14b056114|EiskaltDC++ 2.2.3
 2519133d6d830f7e|IMatch 3.6.0.113
 2544ff74641b639d|WiseFTP 6.1.5
 26717493b25aa6e1|Adobe Dreamweaver CS5 (32-bit)
 26753c97ea000ecd|LibreOffice 5.1.0.3 Math
 271e609288e1210a|Microsoft Office Access 2010 x86
 27da120d7e75cf1f|pbFTPClient 6.1
 27ececd8d89b6767|AIM 6.2.14.2 / 6.5.3.12 / 6.9.17.2
 28493d9d08e13aa6|UltraVNC Viewer 1.2.1.0
 28c8b86deab549a1|Internet Explorer 8 / 9
 28c8b86deab549a1|Internet Explorer 8 / 9 / 10 (32-bit)
 28c8b86deab549a1|Internet Explorer 8.0.7600.16385 / 9
 290532160612e071|WinRAR 2.90 / 3.60 / 4.01
 290532160612e071|WinRar x64
 292a746334889a7e|SQLiteSpy 1.9.13
 2a5a615382a84729|X-Chat 2 2.8.6-2
 2aa756186e21b320|RealTimeQuery 3.2
 2b164f512891ae37|NewsWolf NSListGen
 2b53c4ddf69195fc|Zune x64
 2b5841989b3857da|RealVNC Server 5.3.0 64-bit (Chat)
 2ca2a1a69dc5465f|UltraVNC 1.2.1.0 Server Property Page
 2d1658d5dc3cbe2d|MySpaceIM 1.0.823.0 Beta
 2d61cccb4338dfc8|BitTorrent 5.0.0 / 6.0.0 / 7.2.1 (Build 25548)
 2db8e25112ab4453|Deluge 1.3.12 / 1.3.3
 2db8e25112ab4453|Deluge 1.3.3
 2fa14c7753239e4c|Paint.NET 2.72 / 3.5.8.4081.24580
 2ff9dc8fb7e11f39|I2P 0.8.8 (no window)
 3094cdb43bf5e9c2|Microsoft Office OneNote 2010 x86
 30d23723bdd5d908|Digsby (Build 30140) (JL support)
 315e29a36e961336|Roboform 7.8
 3168cc975b354a01|Slypheed 3.1.2 (Build 1120)
 3198e37206f28dc7|CuteFTP 8.3 Professional (Build 8.3.4.0007)
 319f01bf9fe00f2d|Microsoft Access 2013 64-bit
 319f01bf9fe00f2d|Microsoft Access 2016 64-bit
 31e8ac6b0784ed7d|Foxit Reader 9.4.0.16811
 3353b940c074fd0c|Microsoft Built-in Snipping Tool
 337ed59af273c758|Sticky Notes
 337ed59af273c758|Sticky Notes (Windows 10)
 3461e4d1eb393c9c|WTW 0.8.18.2852 / 0.8.19.2940
 353e9052cccbec5d|Kindle for PC 1.21.0
 3594aab44bca414b|Windows Photo Viewer
 36801066f71b73c5|Binbot 2.0
 36c36598b08891bf|Vovox 2.5.3.4250
 36f6bc3efe1d99e0|Alt.Binz 0.25.0 (Build 27.09.2007)
 37392221756de927|RealPlayer SP 12
 3866ff352d7719e1|Paint.NET 4.0.9
 386a2f6aa7967f36|EyeBrowse 2.7
 387d72eb9c9aa960|UltraVNC 1.2.1.0 Launcher
 3917dd550d7df9a8|Konvertor 4.06 (Build 10)
 3a5148bf2288a434|Secure FTP 2.6.1 (Build 20101209.1254)
 3be7b307dfccb58f|NiouzeFire 0.8.7.0
 3c0022d9de573095|QuteCom 2.2
 3c309c17f7e8ffe1|GIMP 2.8.16
 3c93a049a30e25e6|J. River Media Center 16.0.149
 3cf13d83b0bd3867|RevConnect 0.674p (based on DC++)
 3d877ec11607fe4|Thunderbird 6.0.2
 3dc02b55e44d6697|7-Zip 3.13 / 4.20
 3df22b7648cec4c1|TeamViewer 11.0.55321
 3e9850346f375d41|Foxit Phantom PDF 7.2.2.929
 3ed70ef3495535f7|Gravity 3.0.4
 3edf100b207e2199|digiKam 1.7.0 (KDE 4.4.4)
 3f2cd46691bbee90|GOIM 1.1.0
 3f97341a65bac63a|Ozum 6.07 (Build 6070)
 409b67100697bcc0|Revo Uninstaller Pro 3.1.5
 40f2aca05d8a33f2|Minitab 16
 411447f7de177c68|Windows DVD Maker 64-bit (Win7)
 4278d3dc044fc88a|Gaim 1.5.0
 431a5b43435cc60b|Python (.pyc)
 43578521d78096c6|Windows Media Player Classic Home Cinema 1.3 (32-bit)
 435a2f986b404eb7|SmartFTP 4.0.1214.0
 435a2f986b404eb7|SmartFTP 4.0.1214.0 / 7.0.2200.0
 43886ba3395acdcc|Easy Post 3.0
 44a3621b32122d64|Microsoft Office Word 2010 x64
 44a398496acc926d|Adobe Premiere Pro CS5 (64-bit)
 44a50e6c87bc012|Classic FTP Plus 2.15
 454ef7dca3bb16b2|Exodus 0.10.0.0
 469e4a7982cea4d4|? (.job)
 469e4a7982cea4d4|Windows Wordpad
 46f433176bc0b3d2|WinRAR 5.30 beta 64-bit
 4700ff5ae80a6713|PDFCreator 2.2
 490c000889535727|WinMX 4.9.3.0
 4975d6798a8bdf66|7-Zip 4.65 / 9.20
 497b42680f564128|Zoner PhotoStudio 13 (Build 7)
 49b5edbd92d8cd58|FTP Commander 8.02
 49db7ed4f2703c22|LogMeIn Client 1.3.1835
 4a49906d074a3ad3|Media Go 1.8 (Build 121)
 4a7e4f6a181d3d08|broolzShare
 4aa2a5710da3efe0|DCSharpHub 2.0.0
 4acae695c73a28c7|VLC 0.3.0 / 0.4.6
 4b632cf2ceceac35|Robo-FTP Server 3.2.5
 4b6925efc53a3c08|BCWipe 5.02.2 Task Manager 3.02.3
 4b6925efc53a3c08|BCWipe Task Manager 3.02.3 / 3.06.5.5
 4b8a4727aa452343|Firefox 56.0.2
 4c58cf9096ef3efd|Kindle for PC 1.24.3
 4cdf7858c6673f4b|Bullet Proof FTP 1.26
 4d72cfa1d0a67418|Newsgroup Image Collector
 4d7bdaea55ad352|PeaZip 6.0.0
 4d8bdacf5265a04f|The KMPlayer 2.9.4.1434
 4dd48f858b1a6ba7|Free Download Manager 3.0 (Build 852)
 4e0ac37db19cba15|Xfire 1.138 (Build 44507)
 4e538fde985a3c01|Torch Browser 65.0.0.1614 (x86)
 4f24a7b84a7de5a6|Palringo 2.6.3 (r45983)
 4fceec8e021ac978|CoffeeCup Free FTP 3.5.0.0
 4fd44f9938892caa|CDBurnerXP
 500b8c1d5302fc9c|Python (.pyw)
 50620fe75ee0093|VMware Player 12 build-3272444
 50620fe75ee0093|VMware Player 3.1.4
 50c5e019818564e3|Microsoft Excel Viewer 12.0.6219.1000
 521a29e5d22c13b4|Skype 1.4.0.84 / 2.5.0.154 / 3.8.0.139 / 4.2.0.187 / Skype 5.3.0.120 / 5.5.0.115 / 5.5.32.117
 54c803dfc87b52ba|Nettalk 6.7.12
 550abc1cb58eb92c|VeraCrypt 1.16 / 1.19 64-bit
 550abc1cb58eb92c|VeraCrypt 1.16 64-bit
 558c5bd9f906860a|BearShare Lite 5.2.5.1
 560d789a6a42ad5a|DC++ 0.261 / 0.698 / 0.782 (r2402.1)
 56c5204009d2b915|uTorrent 3.5.5
 590aee7bdd69b59b|Powershell Windows 10
 590aee7bdd69b59b|Windows Powershell 5.0 64-bit
 59e86071b87ac1c3|CuteFTP 8.3 (Build 8.3.4.0007)
 59f56184c796cfd4|ACDSee Photo Manager 10 (Build 219)
 5b186fc4a0b40504|Dtella 1.2.5 (Purdue network only)
 5b72f67adcce9045|UltraVNC 1.2.1.0 Settings
 5b7f3287093c1623|Total Commander 8.52a 64-bit
 5bb830f67194431a|7-Zip 18.05 (x64)
 5c450709f7ae4396|Firefox 1.0 / 2.0 / 3.0
 5c450709f7ae4396|Firefox 3.6.13 (32-bit)
 5d696d521de238c3|Chrome 9.0.597.84 / 12.0.742.100 / 13.0.785.215
 5d696d521de238c3|Chrome 9.0.597.84 / 12.0.742.100 / 13.0.785.215 / 26
 5d696d521de238c3|Google Chrome 9.0.597.84 / 12.0.742.100 / 13.0.785.215 / 48.0.2564.116
 5d6f13ed567aa2da|Microsoft Office Outlook 2010 x64
 5d7b4175afdcc260|Shareaza 2.0.0.0
 5da8f997fd5f9428|Internet Explorer x64
 5df4765359170e26|Firefox 4.0.1
 5e01ecaf82f7d8e|Scour Exchange 0.0.0.228
 5ea2a50c7979fbdc|TrustyFiles 3.1.0.22
 5f6e7bc0fb699772|Microsoft Office PowerPoint 2010 x64
 5f7b5f1e01b83767|Quick Access
 5fb817cd5a8cad21|Google Drive
 5fd959f6fe6b8ae7|PuTTY 0.70 (x64)
 6059df4b02360af|Kadu 0.10.0 / 0.6.5.5
 606a33f5a27b57d4|Microsoft Built-in Computer Management 10.0.10011.16384 (Win10)
 6224453d9701a612|BinTube 3.7.1.0 (requires VLC 10.5!)
 62bff50b969c2575|"Quintessential Media Player 5.0 (Build 121) - also usage stats (times used, tracks played, total time used)"
 62bff50b969c2575|Quintessential Media Player 5.0 (Build 121)
 62dba7fb39bb0adc|Yahoo Messenger 7.5.0.647 / 8.1.0.421 / 9.0.0.2162 / 10.0.0.1270
 65009083bfa6a094|(app launched via XPMode)
 65f7dd884b016ab2|LimeChat 2.39
 669967f27afdebec|NirSoft PstPassword 1.20 (x86)
 6728dd69a3088f97|Command Prompt
 6728dd69a3088f97|Windows Command Processor - cmd.exe (64-bit)
 6824f4a902c78fbd|Firefox 64.0
 689319b6547cda85|emesene 2.11.7
 6a316aa67a46820b|Core FTP LE 1.3c (Build 1437) / 2.2 (Build 1689)
 6a8b377d0f5cb666|WinSCP 2.3.0 (Build 146)
 6aa18a60024620ae|GCN 2.9.1
 6b3a5ce7ad4af9e4|IceChat 9 RC2
 6bb54d82fa42128d|WinSCP 4.3.4 (Build 1428)
 6bb98fb8cdc26d69|Calculator (Windows built-in)
 6bc3383cb68a3e37|iTunes 7.6.0.29 / 8.0.0.35
 6d2bac8f1edf6668|Microsoft Office Outlook 365
 6d2bac8f1edf6668|Microsoft Outlook 2013 32-bit
 6d2bac8f1edf6668|Microsoft Outlook 2016 64-bit
 6e855c85de07bc6a|Microsoft Office Excel 2010 x64
 6e9a79992da9ea2|Nokia PC Suite 7.1
 6e9d40a4c63bb562|Real Player Alternative 1.25 (Media Player Classic 6.4.8.2 / 6.4.9.0)
 6f647f9488d7a|AIM 7.5.11.9 (custom AppID + JL support)
 6fee01bd55a634fe|Smuxi 0.8.0.0
 7010c278903c2b0f|Adobe Acrobat XI Pro 32-bit
 70b52cf73249257|Sococo 1.5.0.2274
 70d9ada92108d731|IrfanView 4.51 (x64)
 714b179e552596df|Bullet Proof FTP 2.4.0 (Build 31)
 7192f2de78fd9e96|TIFNY 5.0.3
 728008617bc3e34b|eM Client 3.0.10206.0
 73c6a317412687c2|Google Talk 1.0.0.104
 73ce3745a843c0a4|FrostWire 5.1.4
 7494a606a9eef18e|Crystal Player 1.98
 74d7f43c1561fc1e|Windows Media Player 12 (32-bit)
 74d7f43c1561fc1e|Windows Media Player 12.0.7600.16415 / 12.0.7601.17514
 74d7f43c1561fc1e|Windows Media Player 12.0.7601.17514
 74ea779831912e30|Skype 7.18.0.112
 74ea779831912e30|Skype 7.24.0.104
 7526de4a8b5914d9|Forte Agent 6.00 (Build 32.1186)
 7593af37134fd767|RealPlayer 6.0.6.99 / 7 / 8 / 10.5
 76689ff502a1fd9e|Imagine Image and Animation Viewer 1.0.7
 76f6f1bd18c19698|aMule 2.2.6
 776beb1fcfc6dfa5|Thunderbird 1.0.6 (20050716) / 3.0.2
 777483d3cdac1727|Gajim 0.14.4
 780732558f827a42|AutoPix 5.3.3
 784182360de0c5b6|Kazaa Lite 1.7.1
 78f0afb5bd4bb278|Microsoft Lync 2016 64-bit (Skype for Business)
 7904145af324576e|Total Commander 7.56a (Build 16.12.2010)
 7904145af324576e|Total Commander 7.56a (Build 16.12.2010) / 8.52a 32-bit
 792699a1373f1386|Piolet 3.1.1
 79370f660ab51725|UploadFTP 2.0.1.0
 7937df3c65790919|FTP Explorer 10.5.19 (Build 001)
 7a4ba998575ff2a4|FreeCommander XE 2016 Build 715 32-bit
 7a7c60efd66817a2|Spotnet 1.7.4
 7a8db574299c8568|Windows Movie Maker 2012 (build 16.4.3528.0331)
 7b2b4f995b54387d|News Reactor 20100224.16
 7b4d500e147e4391|Tor Browser 8.0.4 (x64)
 7b7f65aaeca20a8c|Dropbox App 5.4.24
 7c2916afd6f116a6|LibreOffice 5.1.0.3 Base
 7cb0735d45243070|CDisplay 1.8.1.0
 7dca40fd2a5a971f|LibreOffice 5.1.0.3
 7e4dca80246863e3|Control Panel
 7e4dca80246863e3|Control Panel (?)
 7e4dca80246863e3|Control Panel - Settings
 7fd04185af357bd5|UltraLeeacher 1.7.0.2969 / 1.8 Beta (Build 3490)
 8172865a9d5185cb|Binreader 1.0 (Beta 1)
 817bb211c92fd254|GOM Player 2.0.12.3375 / 2.1.28.5039
 817e5ad5be351574|Microsoft Built-in Services 10.0.10011.16384 (Win10)
 8211531a7918b389|Newsbin Pro 6.00 (Build 1019) (JL support)
 83b03b46dcd30a0e|iTunes 10
 83b03b46dcd30a0e|iTunes 9.0.0.70 / 9.2.1.5 / 10.4.1.10 (begin custom 'Tasks' JL capability)
 83b03b46dcd30a0e|iTunes 9.0.0.70 / 9.2.1.5 / 10.4.1.10 (begin custom 'Tasks' JL capability) / 12.3.2.35 64-bit
 83dd64e7fa560bd5|LibreOffice 5.1.0.3 Calc
 84f066768a22cc4f|Adobe Photoshop CS5 (64-bit)
 8628e76fd9020e81|Fling File Transfer Plus 2.24
 86781fe8437db23e|Messenger Pro 2.66.6.3353
 86b804f7a28a3c17|Miranda IM 0.6.8 / 0.7.6 / 0.8.27 / 0.9.9 / 0.9.29
 86b804f7a28a3c17|Miranda IM 0.6.8 / 0.7.6 / 0.8.27 / 0.9.9 / 0.9.29 (ANSI + Unicode)
 884fd37e05659f3a|VZOchat 6.3.5
 888f2fa044591eda|Twitter - Trusted Microsoft Store App (Win10)
 8904a5fd2d98b546|IceChat 7.70 20101031
 89b0d939f117f75c|Adobe Acrobat 9 Pro Extended (32-bit)
 8a1c1c7c389a5320|Safari 3.2.3 (525.29)
 8a461f82e9eb4102|Foxit Reader 7.2.0.722
 8bd5c6433ca967e9|ACDSee Photo Manager 2009 (v11.0 Build 113)
 8c816c711d66a6b5|MSN Messenger 6.2.0137 / 7.0.0820
 8dcca8b24a5e822e|CDBurnerXP 4.5.7.6623
 8deb27dfa31c5c2a|CoffeeCup Free FTP 4.4 (Build 1904)
 8eafbd04ec8631ce|VMware Workstation 11.0.0 build-2305329
 8eafbd04ec8631ce|VMware Workstation 9 x64
 8f3d7202aa5d4c01|ImgBurn 2.5.8.0
 8f852307189803b8|Far Manager 2.0.1807
 8fb5ce5e2b049ce|Windows Defender (Win10 built-in)
 8fd1364019dc2115|Calibre E-Book Manager 2.33
 8fdb062f1e486cac|Microsoft Powerpoint 2013 32-bit
 9027fe24326910d2|Thunderbird 38.6.0
 905c98e216107aa1|Microsoft Lync 2013 15.0.4753.1000
 9077b9c9cf187cc2|KeePass 1.36
 90e5e8b21d7e7924|Winamp 3.0d (Build 488)
 918e0ecb43d17e23|Notepad (32-bit)
 92f1d5db021cd876|NewsLeecher 4.0 / 5.0 Beta 6
 939c10c2c101c1b0|Stickies 9.0d
 93b18adf1d948fa3|qutIM 0.2
 954ea5f70258b502|Windows Script Host - wscript.exe (32-bit)
 9560577fd87cf573|LeechFTP 1.3 (Build 207)
 96252daff039437a|Lphant 7.0.0.112351
 966fa7c312d9b10|Eraser 6.2.0.2970
 969252ce11249fdd|Mozilla Firefox 40.0 / 44.0.2
 9749cea96d411f37|HexChat 2.10.2 64-bit
 977a5d147aa093f4|Lphant 3.51
 9839aec31243a928|Microsoft Office Excel 2010 x86
 989d7545c2b2e7b2|IMVU 465.8.0.0
 98b0ef1c84088|fulDC 6.78
 99c15cf3e6d52b61|mldonkey 3.1.0
 9a3bdae86d5576ee|WinSCP 3.2.1 (Build 174) / 3.8.0 (Build 312)
 9a464053cd82de6d|LINE Messenger
 9ad1ec169bf2da7f|FlylinkDC++ r405 (Build 7358)
 9ad84c52efeae190|1Password 4.6.0.604
 9b9cdc69c1c24e2b|Notepad (64-bit)
 9b9cdc69c1c24e2b|Notepad 64-bit
 9c08ad74ad8708df|Microsoft Publisher 2016 64-bit
 9c32e2313792e6e8|Microsoft Built-in Disk Cleanup (Win10)
 9c7cc110ff56d1bd|Microsoft Office PowerPoint 2010 x86
 9ce6555426f54b46|HxD 1.7.7.0
 9d1f905ce5044aee|Edge Browser
 9d78513a8998829c|Microsoft Built-in Run Dialog (Win7 + Win10)
 9d91276b0be3e46b|Windows Help and Support (Built-in) Win7
 9dacebaa9ac8ca4e|TLNews Newsreader 2.2.0 (Build 2430)
 9e0b3f677a26bbc4|BitKinex 3.2.3
 9edafe4ba4b22ce7|Eclipse IDE Oxygen (4.7.3a)
 9f03ae476ad461fa|GroupsAloud 1.0
 9f5c7755804b850a|Windows Script Host - wscript.exe (64-bit)
 9fda41b86ddcf1db|VLC 0.5.3 / 0.8.6i / 0.9.7 / 1.1.11
 9fda41b86ddcf1db|VLC Media Player 0.5.3 / 0.8.6i / 0.9.7 / 1.1.11 / 2.2.1
 9fdb10e18cdd0101|Cisco AnyConnect Secure Mobility Client 3.1.02040
 a028c9db28aa15a3|Piriform Defraggler 2.20.989 64-bit
 a0d6b1b874c6e9d2|TOR Browser 6.0.2
 a10b45adb36c1d27|PST Walker 5.54
 a18df73203b0340e|Microsoft Word 2016
 a1d19afe5a80f80|FileZilla 2.2.32
 a2c73c383525f1bb|RealVNC Viewer 5.3.0 64-bit
 a31ec95fdd5f350f|BitComet 0.49 / 0.59 / 0.69 / 0.79 / 0.89 / 0.99 / 1.07 / 1.28
 a3e0d98f5653b539|Instantbird 1.0 (20110623121653) (JL support)
 a4a5324453625195|Microsoft Office Word 2013 x86
 a4a5324453625195|Microsoft Word 2013 32-bit
 a4def57ee99d77e9|Nomad News 1.43
 a52b0784bd667468|Photos Microsoft 16.526.11220.0 (Windows 10)
 a581b8002a6eb671|WiseFTP 5.5.9
 a5db18f617e28a51|ICQ 6.5 (Build 2024)
 a6d4dfec09c69409|Microsoft Word Viewer 11.8169.8172
 a746f9625f7695e8|HeXHub 5.07
 a75b276f6e72cf2a|Kazaa Lite Tools K++ 2.7.0
 a75b276f6e72cf2a|Kazaa Lite Tools K++ 2.7.0 / WinMX 3.53
 a75b276f6e72cf2a|WinMX 3.53
 a777ad264b54abab|JetVideo 8.0.2.200 Basic
 a79a7ce3c45d781|CuteFTP 7.1 (Build 06.06.2005.1)
 a7bd71699cd38d1c|Microsoft Office Word 2010 x86
 a8c43ef36da523b1|Microsoft Office Word 2003 Pinned and Recent.
 a8df13a46d66f6b5|Kommute (Calypso) 0.24
 aa11f575087b3bdc|Unzbin 2.6.8
 ac3a63b839ac9d3a|Azureus Vuze Bittorrent Client 4.6.0.4 / 5.7.1.0
 ac3a63b839ac9d3a|Vuze 4.6.0.4
 ac8920ed05001800|@DMDirc 0.6.5 (Profile store: C:\Users\$user\AppData\Roaming\DMDirc\)
 ac8920ed05001800|DMDirc 0.6.5 (Profile store: C:\Users\$user\AppData\Roaming\DMDirc\)
 accca100973ef8dc|Azureus 2.0.8.4
 ace8715529916d31|40tude Dialog 2.0.15.1 (Beta 38)
 adecfb853d77462a|Microsoft Office Word 2007 Pinned and Recent.
 ae069d21df1c57df|mIRC 6.35 / 7.19
 ae3f2acd395b622e|QuickTime Player 6.5.1 / 7.0.3 / 7.5.5 (Build 249.13)
 aedd2de3901a77f4|Pidgin 2.0.0 / 2.10.0 / 2.7.3
 aedd2de3901a77f4|Pidgin 2.10.11
 b0236d03c0627ac4|ICQ 5.1 / ICQLite Build 1068
 b0459de4674aab56|(.vmcx)
 b0459de4674aab56|Windows Virtual PC - vmwindow.exe (32- and 64-bit)
 b06a975b62567622|Windows Live Messenger 8.5.1235.0517 BETA
 b08971c77377bde3|Microsoft Visual Studio Community 2015
 b17d3d0c9ca7e29|"Picasa 3.8.0 (build 117.43, 0) / 3.9.141 (build 259)"
 b17d3d0c9ca7e29|"Picasa 3.8.0 (Build 117.43, 0)"
 b223c3ffbc0a7a42|Bersirc 2.2.14
 b3016b8da2077262|eMule 0.50a
 b3965c840bf28ef4|AIM 4.8.2616
 b39bc6b590f53961|HexChat 2.10.2 32-bit
 b39c5f226977725d|ACDSee Pro 8.1.99
 b3f13480c2785ae|Paint 6.1 (build 7601: SP1)
 b48ce76eda60b97|Shareaza 8.0.0.112300
 b50ee40805bd280f|QuickTime Alternative 1.9.5 (Media Player Classic 6.4.9.1)
 b6267f3fcb700b60|WiseFTP 4.1.0
 b74736c2bd8cc8a5|WinZip
 b74736c2bd8cc8a5|WinZip 15.5 (9468)
 b77ef7f3fc946302|Pale Moon Browser 26.1.1 (32-bit)
 b7cb1d1c1991accf|FlashFXP 4.0.0 (Build 1548)
 b868d9201b866d96|Microsoft Lync 4.0.7577.0
 b8ab77100df80ab2|Microsoft Excel 2016 64-bit
 b8ab77100df80ab2|Microsoft Office Excel x64
 b8c13a5dd8c455a2|Titan FTP Server 8.40 (Build 1338)
 b8c29862d9f95832|Microsoft Office InfoPath 2010 x86
 b91050d8b077a4e8|Windows Media Center (Win7)
 b91050d8b077a4e8|Windows Media Center x64
 ba132e702c0147ef|KCeasy 0.19-rc1
 ba3a45f7fd2583e1|Blubster 3.1.1
 bac8a6b507360131|Remote Desktop Connection Manager 2.2
 baea31eacd87186b|BinaryBoy 1.97 (Build 55)
 bba8a4896f0d26f|Ares Chat Client (3.1.9.4045)
 bc03160ee1a59fc1|Foxit PDF Reader 5.4.5
 bc0c37e84e063727|Windows Command Processor - cmd.exe (32-bit)
 bc2f88eccd3461b4|Microsoft Built-in Event Viewer 1.0 (Win10)
 bcc705f705d8132b|Instan-t 5.2 (Build 2824)
 bcd7ba75303acbcf|BitLord 1.1
 bd249197a6faeff2|Windows Live Messenger 2011
 be4875bb3e0c158f|CrossFTP 1.75a
 be71009ff8bb02a2|Microsoft Office Outlook x86
 bec10d3aaf939ffa|Pale Moon Browser 26.1.1 (64-bit)
 bf483b423ebbd327|Binary Vortex 5.0
 bf9ae1f46bd9c491|Nimbuzz 2.0.0 (rev 6266)
 bfc1d76f16fa778f|Ares (Galaxy) 1.8.4 / 1.9.8 / 2.1.0 / 2.1.7.3041
 bfc1d76f16fa778f|Ares (Galaxy) 1.8.4 / 1.9.8 / 2.1.0 / 2.1.7.3041 / 3.1.9.4045
 bfe841f4d35c92b1|QuadSucker/News 5.0
 c01d68e40226892b|ClicksAndWhistles 2.7.146
 c02baf50d02056fc|FotoVac 1.0
 c04f69101c131440|CuteFTP 5.0 (Build 50.6.10.2)
 c1eece5026414c64|Recuva 1.52.1086 (64-bit)
 c2d349a0e756411b|Adobe Reader 8.1.2
 c312e260e424ae76|Mail.Ru Agent 5.8 (JL support)
 c5236fd5824c9545|PLAYXPERT 1.0.140.2822
 c54b96f328bdc28d|WiseFTP 7.3.0
 c5c24a503b1727df|XnView 1.98.2 Small / 1.98.2 Standard
 c5c24a503b1727df|XnView 1.98.2 Small / 1.98.2 Standard / 2.35
 c5ef839d8d1c76f4|LimeWire 5.2.13
 c634153e7f5fce9c|IrfanView 3.10 / 4.30
 c634153e7f5fce9c|IrfanView 3.10 / 4.30 / 4.41 32-bit
 c6f7b5bf1b9675e4|BitWise IM 1.7.3a
 c71ef2c372d322d7|PGP Desktop 10
 c765823d986857ba|Adobe Illustrator CS5 (32-bit)
 c7a4093872176c74|Paint Shop Pro Pinned and Recent.
 c8112ac53c5ed250|Jetico Log Viewer 1.1
 c845f3a6022d647c|Another File 2.Build 2/7/2004)
 c8aa3eaee3d4343d|Trillian 0.74 / 3.1 / 4.2.0.25 / 5.0.0.35 (JL support)
 c8e4c10e5460b00c|iMesh 6.5.0.16898
 c91d08dcfc39a506|SM Player 0.6.9 r3447
 c9374251edb4c1a8|BitTornado T-0.3.17
 c98ab5ccf25dda79|NewsShark 2.0
 c9950c443027c765|WinZip 9.0 SR-1 (6224) / 10.0 (6667)
 c997d2e1a0f0929|BCWipe 6.08.6
 c99ddde925d26df3|Robo-FTP 3.7.9 CronMaker
 ca1eb46544793057|RetroShare 0.5.2a (Build 4550)
 ca942805559495e9|aMSN 0.98.4
 caea34d2e74f5c8|uTorrent 3.4.7
 cb1d97aca3fb7e6b|Newz Crawler 1.9.0 (Build 4100)
 cb5250eaef7e3213|ApexDC++ 1.4.3.957
 cb984e3bc7faf234|NewsRover 17.0 (Rev.0)
 cb996a858d7f15c|PDF Architect 4.0.09.25450 64-bit
 cbbe886eca4bfc2d|ExoSee 1.0.0
 cbeb786f0132005d|VLC 0.7.2
 cc4b36fbfb69a757|gtk-gnutella 0.97
 cc76755e0f925ce6|AllPicturez 1.2
 cca6383a507bac64|Gadu-Gadu 10.5.2.13164
 ccb36ff8a8c03b4b|Azureus 2.5.0.4 / Vuze 3.0.5.0
 ccc0fa1b9f86f7b3|CCleaner 5.15.5513 64-bit
 cd2acd4089508507|AbsoluteTelnet 9.18 Lite
 cd40ead0b1eb15ab|NNTPGrab 0.6.2
 cd8cafb0fb6afdab|uTorrent 1.7.7 (Build 8179) / 1.8.5 / 2.0 / 2.21 (Build 25113) / 3.0 (Build 25583)
 cdb6f0c373f2da0f|stunnel 5.31
 cdf30b95c55fd785|Microsoft Office Excel 2007
 cf6379a9a987366e|Digibin 1.31
 cfab0ec14b6f953|Express NewsPictures 2.41 (Build 08.05.07.0)
 cfb56c56fa0f0a54|Mozilla 0.9.9
 d00655d2aa12ff6d|Microsoft Office PowerPoint x64
 d00655d2aa12ff6d|Microsoft PowerPoint 2016 64-bit
 d0261ed6e16b200b|News File Grabber 4.6.0.4
 d1fc019238236806|Newsgroup Commander Pro 9.05
 d22ad6d9d20e6857|ALLPlayer 4.7
 d28ee773b2cea9b2|3D-FTP 9.0 build 7
 d2d0fc95675fb2c8|Microsoft Built-in Print Management (Win10)
 d33ecf70f0b74a77|"Picasa 2.2.0 (Build 28.08, 0)"
 d33ecf70f0b74a77|Picasa 2.2.0 (Build 28.08, 0)
 d3530c5294441522|HydraIRC 0.3.165
 d38a3ea7ec79fbed|LibreOffice 5.1.0.3 Writer
 d38adec6953449ba|Microsoft Office OneNote 2010 x64
 d3c5cf21e86b28af|SeaMonkey 2.3.3
 d41746b133d17456|Tkabber 0.11.1
 d460280b17628695|Java Binary
 d4a589cab4f573f7|Microsoft Project 2010 x86
 d53b52fb65bde78c|Android Newsgroup Downloader 6.2
 d5c02fc7afbb3fd4|NNTPGrab 0.6.2 Server
 d5c3931caad5f793|Adobe Soundbooth CS5 (32-bit)
 d64d36b238c843a3|Microsoft Office InfoPath 2010 x86
 d7528034b5bd6f28|Windows Live Mail Pinned and Recent.
 d7666c416cba240c|NewsMan Pro 3.0.5.2
 d78150e0484a4e1d|Evernote 5.9.6.9494
 d7d647c92cd5d1e6|uTalk 2.6.4 r47692
 d7db75db9cdd7c5d|Xnews 5.04.25
 d8081f151f4bd8a5|CuteFTP 8.3 Lite (Build 8.3.4.0007)
 d838aac097abece7|ACDSee Photo Manager 12 (Build 344)
 d8671c1ed93c75c8|Tor Browser 5.5.2
 d93f411851d7c929|Windows Powershell 5.0 32-bit
 d97efdf3888fe7eb|KeePass 2.31
 da7e8de5b8273a0f|Yahoo Messenger 5.0.0.1226 / 6.0.0.1922
 db3b8d985f0668e|FreeFileSync 10.7
 dba909a61476ccec|NewsWolf 1.41
 dc64de6c91c18300|Brosix Communicator 3.1.3 (Build 110719 nid 1)
 dd658a07478b46c2|PIRCH98 1.0.1.1190
 de48a32edcbe79e4|Acrobat Reader 15.x
 de48a32edcbe79e4|Adobe Acrobat Reader DC 2015.010.20056
 de76415e0060ce13|Noworyta News Reader 2.9
 dee18f19c7e3a2ec|PopNote 5.21
 e0246018261a9ccc|qutIM 0.2.80.0
 e0532b20aa26a0c9|QQ International 1.1 (2042)
 e0f7a40340179171|imule 1.4.5 (rev. 749)
 e107946bb682ce47|FileZilla 3.5.1
 e107946bb682ce47|Filezilla 3.5.1 / 3.16
 e1d47cb031dafb9f|BearShare 6.0.0.22717 / 8.1.0.70928 / 10.0.0.112380
 e2a593822e01aed3|Adobe Flash CS5 (32-bit)
 e30bbea3e1642660|Neebly 1.0.4
 e31a6a8a7506f733|Image AXS Pro 4.1
 e36bfc8972e5ab1d|XPS Viewer
 e40cb5a291ad1a5b|Songbird 1.9.3 (Build 1959)
 e42a8e0f4d9b8dcf|Sysax FTP Automation 5.15
 e4bd2558bfab368d|UltraDefrag 7.0.0
 e57cfc995bdc1d98|Snagit 11
 e6ea77a1d4553872|Gnucleus 1.8.6.0
 e6ee34ac9913c0a9|VLC 0.6.2
 e6ef42224b845020|ALFTP 5.20.0.4
 e70d383b15687e37|Notepad++ 5.6.8 (32-bit)
 e70d383b15687e37|Notepad++ 6.6.7
 e73d9f534ed5618a|BitSpirit 1.2.0.228 / 2.0 / 2.6.3.168 / 2.7.2.239 / 2.8.0.072 / 3.1.0.077 / 3.6.0.550
 e76a4ef13fbf2bb1|Manolito 3.1.1
 e93dbdcede8623f2|Pandion 2.6.106
 e9a39dfba105ea23|FastStone Image Viewer 4.6
 e9a39dfba105ea23|Faststone Image Viewer 4.6 / 5.5
 ea83017cdd24374d|IrfanView Thumbnails
 eab25958dbddbaa4|Binary News Reaper 2 (Beta 0.14.7.448)
 eb3300e672136bc7|Stream Reactor 1.0 Beta 9 (uses VLC!)
 eb7e629258d326a1|WindowWasher 6.6.1.18
 ebd8c95d87f25154|Carrier 2.5.5
 ec3e36af0cdcb3e1|Steam build 2/4/2016
 ecd1a5e2c3af9c46|LibreOffice 5.1.0.3 Press
 ecd21b58c2f65a2f|StealthNet 0.8.7.9
 ecdd9154e84d5544|Wickr Top Secret Messenger Desktop 2.3.5
 ed49e1e6ccdba2f5|GNUnet 0.8.1a
 ed7a5cc3cca8d52a|CCleaner 1.32.345 / 1.41.544 / 2.36.1233 / 3.10.1525
 edc786643819316c|HoneyView3 #5834
 ee0c103672a7a2b9|ManyCam 6.7.0
 ee462c3b81abb6f6|Adobe Reader X 10.1.0
 ef473fab8120b354|uTorrent 3.5.5
 ef606b196796ebb|HP MediaSmart Photo
 efb08d4e11e21ece|Paltalk Messenger 10.0 (Build 409)
 efbb2bf3c1d06466|Auslogics Disk Defrag 6.2.1.0
 f001ea668c0aa916|Cabos 0.8.2
 f01b4d95cf55d32a|Windows Explorer (Win10) ??? TEST THIS
 f01b4d95cf55d32a|Windows Explorer Windows 8.1
 f0275e8685d95486|Microsoft Excel 2013 32-bit
 f0275e8685d95486|Microsoft Office Excel 2013 x86
 f0468ce1ae57883d|Adobe Reader 7.1.0
 f09b920bfb781142|Camfrog 4.0.47 / 5.5.0 / 6.1 (build 146) (JL support)
 f0c7bd3e0584a65a|InfraRecorder 0.53.0.0 32-bit
 f1a4c04eebef2906|[i2p] Robert 0.0.29 Preferences
 f214ca2dd40c59c1|FrostWire 4.20.9
 f2cb1c38ab948f58|X-Chat 1.8.10 / 2.6.9 / 2.8.9
 f5ac5390b9115fdb|Microsoft Office PowerPoint 2007
 f5e4e50707bcd215|Microsoft Message Analyzer 1.4
 f61b65550a84027e|iMesh 11.0.0.112351
 f64de962764b9b0f|FTPRush 1.1.3 / 2.15
 f674c3a77cfe39d0|Winamp 2.95 / 5.1 / 5.621
 f674c3a77cfe39d0|Winamp 2.95 / 5.1 / 5.621 / 5.666
 f6fd5d99e2b6e178|LibreOffice 5.1.0.3 Draw
 f784591ff7f60f76|Microsoft Built-in Defragment and Optimize Drives (Win10)
 f82607a219af2999|Cyberduck 4.1.2 (Build 8999)
 f91fd0c57c4fe449|ExpanDrive 2.1.0
 f920768fe275f7f4|Grabit 1.5.3 Beta (Build 909) / 1.6.2 (Build 940) / 1.7.2 Beta 4 (Build 997)
 f92e607f9de02413|RealPlayer 14.0.6.666
 fa02aa2c575837a6|Microsoft Built-in Task Scheduler 1.0 (Win10)
 fa496fe13dd62edf|KVIrc 3.4.2.1 / 4.0.4
 fa7144034d7d083d|Directory Opus 10.0.2.0.4269 (JL tasks supported)
 fac3aa4105c6c466|Microsoft Built-in System Restore (Win7)
 faef7def55a1d4b|VLC 2.2.6
 fb1f39d1f230480a|Bopup Messenger 5.6.2.9178 (all languages: en,du,fr,ger,rus,es)
 fb1f39d1f230480a|Bopup Messenger 5.6.2.9178 (all languages: en;du;fr;ger;rus;es)
 fb230a9fe81e71a8|Yahoo Messenger 11.0.0.2014-us
 fb3b0dbfee58fac8|Microsoft Office Word 365 x86
 fb3b0dbfee58fac8|Microsoft Word 2016 64-bit
 fb7ca8059b8f2123|ooVoo 3.0.7.21
 fc999f29bc5c3560|Robo-FTP 3.7.9
 fd1ad55e472f20e0|Google Earth Pro 7.3.2.5491
 fdbaca0a1fce6055|MozBackup 1.5.1
 fe57f5df17b45fe|Wireshark 2.6.3
 fe5e840511621941|JetAudio 5.1.9.3018 Basic / 6.2.5.8220 Basic / 7.0.0 Basic / 8.0.16.2000 Basic
 fe8bb4692de7b989|Smart Defrag 4.3.0.847
 fe9e0f7260000a12|RealVNC Server 5.3.0 64-bit (Connect+File Transfer)
 ff103e2cc310d0d|Adobe Reader XI
 ff224628f0e8103c|Morpheus 3.0.3.6
 4cb9c5750d51c07f|Microsoft Movies &amp;amp; TV (Build 10.19031.11411.0)
 ae6df75df512bd06|Microsoft Groove Music (Build 10.19031.1141.0)
 959668a81d4f220e|Sublime Text 3.2.1 (Build 3207)
 9eff0b23d51fe003|XMind 201807140020
 70ffd305907c983b|7zip 18.05
 1c7a9be1b15a03ba|Microsoft ScreenSketch
 1ced32d74a95c7bc|Microsoft Visual Studio Code
 3c3871276e149215|PowerShell 7
 573770283dc3d854|Microsoft Window SecHealthUI
 9390ee5b658e96e|PuTTY 0.72 / 0.73
 a55ed4fbb973aefb|Microsoft Teams
 baacb5294867b833|Notepad++ 7.8.6
 d249d9ddd424b688|Google Chrome 81.0.4044.138
 ff99ba2fb2e34b73|Microsoft Windows Calculator
 4ac866364817f10c|Microsoft Edge (Chromium)
 ccba5a5986c77e43|Microsoft Edge (Chromium)
 188f5ec9d11ded56|Microsoft Edge (Chromium)
 69639df789022856|Google Chrome 86.0.4240.111
 352fd027c0e8f0e5|Zoom
 8bce06a9e923e1f9|Slack 4.10.3
 a55ed4fbb973aefb|Microsoft Teams
 1c7a9be1b15a03ba|Microsoft Snip &amp;amp; Sketch
 466d339d8f21cfbf|Microsoft Snip &amp;amp; Sketch
 9a165f62edbfa161|Microsoft Store
 573770283dc3d854|Windows Defender
 f18460fded109990|Windows Connected Devices
 dd7c3b1adb1c168b|Microsoft Game Bar
 447e6aa2bbdfbc8a|Slack 4.11.3
 3b94415067dd2c5d|GOG Galaxy
 58170c92fa4b91a1|MediaMonkey
 5f218922e0901ebf|MusicBee
 75fdacd8330bac18|AnyDesk
 8b87640a40ec9fc|Snagit 2020
 af0fdd562e3f275b|Snagit 2020
 b7173093b23b9a6a|Beyond Compare 4
 d356105fac5527ef|Steam 1/22/2021
 28efb5b6d2e28389|EA Origin
 20513cdf29d09c0e|Hex Editor Neo
 1d12f965b876dc87|Snagit 2021
 16f2f0042ddbe0e8|Windows Terminal
 352fd027c0e8f0e5|Zoom
 7111c0ce965b7246|Battle.net
 a7ba40025dac9a67|Microsoft Office Hub
 8e4e81d9adc545b8|Microsoft Your Phone
 c01827d56ff89056|Microsoft Sticky Notes
 bd050ac447f6cd65|Microsoft Xbox App
 ff99ba2fb2e34b73|Windows Calculator
 fc98c00f85d4ce77|EditPad Pro 8
 46e77b87767b92|Opera Browser 75
 ad57bd0f4825cce|WinRAR 6.01 Russian 64 bit
 '''

 LET AppIdLookup &amp;lt;= memoize(key="AppId", query={
 SELECT *
 FROM parse_csv(accessor='data', separator="|",
 filename=AppIdTable)
 })

 LET X = SELECT * FROM foreach(row={
 SELECT OSPath AS AutomaticDestinationsPath
 FROM glob(globs=Globs)
 }, query={
 SELECT AutomaticDestinationsPath, Name,
 parse_binary(filename=OSPath, accessor="mscfb",
 profile=Profile, struct="ShellLinkHeader") AS Parsed
 FROM glob(globs='*', accessor="mscfb",
 root=pathspec(DelegatePath=AutomaticDestinationsPath))
 WHERE Size &amp;gt; 0 AND NOT IsDir AND Name =~ "^\\d+$"
 })

 LET Y = SELECT AutomaticDestinationsPath, Name AS Stream,
 split(sep_string=".", string=AutomaticDestinationsPath.Basename)[0] AS ApplicationId,
 ShowHeader(Parsed=Parsed) as _ShellLinkHeader,
 Parsed.LinkInfo as _LinkInfo,
 ShowLinkTarget(Parsed=Parsed) as _LinkTarget,
 Parsed.StringData as _StringData,
 ShowExtraData(Parsed=Parsed) as _ExtraData,
 property_store(data=Parsed) as _PropertyStore
 FROM X

 SELECT *, ApplicationId,
 get(item=AppIdLookup, field=ApplicationId).Description AS Application,
 _LinkTarget.LinkTarget || _LinkInfo.Target.Path AS LinkTarget,
 _ShellLinkHeader.FileSize AS FileSize,
 _ShellLinkHeader.CreationTime AS CreationTime,
 _ShellLinkHeader.AccessTime AS AccessTime,
 _ShellLinkHeader.WriteTime AS WriteTime
 FROM Y

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Lnk</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.lnk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.lnk/</guid><description>&lt;p>This artiact parses LNK shortcut files.&lt;/p>
&lt;p>A LNK file is a type of Shell Item that serves as a shortcut or reference to a
specific file, folder, or application. It contains metadata and information
about the accessed file or location and is a valuable forensic artifact.
LNK files can be automatically created by the Windows operating system when a
user accesses a file from a supported application or manually created by the user.&lt;/p>
&lt;p>This artifact has several configurable options:&lt;/p>
&lt;ul>
&lt;li>TargetGlob: glob targeting. Default targets *.lnk files in Startup and Recent paths.&lt;/li>
&lt;li>IOCRegex: Regex search on key fields: StringData, TrackerData and PropertyStore.&lt;/li>
&lt;li>IgnoreRegex: Ignore regex filter on key fields.&lt;/li>
&lt;li>UploadLnk: uploads lnk hits.&lt;/li>
&lt;li>SuspiciousOnly: only returns LNK files reporting a suspicious attribute.&lt;/li>
&lt;li>SusSize: Any lnk over this size in bytes is suspicious.&lt;/li>
&lt;li>SusArgSize: Any lnk with Argument strings over this size is suspicious.&lt;/li>
&lt;li>SusArgRegex: Regex for suspicious strings in Arguments.&lt;/li>
&lt;li>SusHostnameRegex: Regex for suspicious TrackerData Hostname.&lt;/li>
&lt;li>VmPrefixMAC: Regex to match known Virtual Machine MacAddress prefix in TrackerData.&lt;/li>
&lt;li>RiskyExe: Regex target exe to flag as risky.&lt;/li>
&lt;/ul>
&lt;p>List of fields targeted by filter regex:&lt;/p>
&lt;ul>
&lt;li>StringData.TargetPath&lt;/li>
&lt;li>StringData.Name&lt;/li>
&lt;li>StringData.RelativePath&lt;/li>
&lt;li>StringData.WorkingDir&lt;/li>
&lt;li>StringData.Arguments&lt;/li>
&lt;li>StringData.IconLocation&lt;/li>
&lt;li>LinkTarget.LinkTarget&lt;/li>
&lt;li>PropertyStore&lt;/li>
&lt;li>TrackerData.MachineID&lt;/li>
&lt;li>TrackerData.MacAddress&lt;/li>
&lt;/ul>
&lt;p>NOTE: regex startof (^) and endof ($) line modifiers will not work.&lt;/p>
&lt;p>Windows.Forensics.Lnk also will highlight suspicious lnk attributes in a Suspicious field.&lt;/p>
&lt;ul>
&lt;li>Large Size - Check for large size, default over 20000 bytes&lt;/li>
&lt;li>Startup Path - Path with \Startup\&lt;/li>
&lt;li>Zeroed Headers - Check for ShellHeader items zeroed.&lt;/li>
&lt;li>Hidden window - Check for ShellLinkHeader.ShowCommand as SHOWMINNOACTIVE&lt;/li>
&lt;li>Target Changed path - Check LNK TargetPath different to PropertyStore path.&lt;/li>
&lt;li>Target Changed size - Check LNK ShellLinkHeader.FileSize different to PropertyStore size.&lt;/li>
&lt;li>Risky target - Checks several LNK target paths to the RiskyExe regex.&lt;/li>
&lt;li>WebDAV - Checks for NetworkProviderType = WNNC_NET_DAV&lt;/li>
&lt;li>Line break in StringData.Name&lt;/li>
&lt;li>Suspicious argument size - large sized arguments over 250 characters as default&lt;/li>
&lt;li>Environment variable script - environment vatiable with a common script configured (bat|cmd|ps1|js|vbs|vbe|py)&lt;/li>
&lt;li>No Target with environmant variable - environment variable only execution&lt;/li>
&lt;li>Suspicious hostname - some common malicious hostnames&lt;/li>
&lt;li>Created in VM - Check TrackerData MacAddress for known VM prefix&lt;/li>
&lt;li>Local Admin- check PropertyStore for indications LNK created by local admin UID 500&lt;/li>
&lt;li>Cyrillic Language - check PropertyStore for Cyrillic strings&lt;/li>
&lt;li>Chinese Language - check PropertyStore for Chinese strings&lt;/li>
&lt;li>Korean Language - check PropertyStore for Korean strings&lt;/li>
&lt;li>Persian Language - check PropertyStore for Persian strings&lt;/li>
&lt;li>Vietnamese Language - check PropertyStore for Vietnamese strings&lt;/li>
&lt;li>CodePage - checks for existance of a ExtraData code page setting. Rare enough to report on - 936:Simplified Chinese, 949:Korean, 950:Traditional Chinese&lt;/li>
&lt;li>Has Overlay - check for overlay and extra data attached to LNK&lt;/li>
&lt;li>Long Base64 - check for a long base64 blog over 20 decoded characters&lt;/li>
&lt;li>Arguments have ticks - ticks are common in malicious LNK files&lt;/li>
&lt;li>Arguments have environment variables - environment variables (%|$env:) are common in malicious LNKs&lt;/li>
&lt;li>Arguments have rare characters - looks for specific rare characters that may indicate obfuscation (?|!|~|@)&lt;/li>
&lt;li>Arguments have leading space - malicious LNK files may have a many leading spaces to obfuscate some tools&lt;/li>
&lt;li>Arguments have http strings - LNKs are reguarly used as a download cradle - https?://&lt;/li>
&lt;li>Arguments have UNC strings&lt;/li>
&lt;li>Suspicious arguments - some common malicious arguments observed in field (with mind to False positive)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Lnk
author: Matt Green - @mgreen27
description: |
 This artiact parses LNK shortcut files.

 A LNK file is a type of Shell Item that serves as a shortcut or reference to a
 specific file, folder, or application. It contains metadata and information
 about the accessed file or location and is a valuable forensic artifact.
 LNK files can be automatically created by the Windows operating system when a
 user accesses a file from a supported application or manually created by the user.

 This artifact has several configurable options:

 - TargetGlob: glob targeting. Default targets *.lnk files in Startup and Recent paths.
 - IOCRegex: Regex search on key fields: StringData, TrackerData and PropertyStore.
 - IgnoreRegex: Ignore regex filter on key fields.
 - UploadLnk: uploads lnk hits.
 - SuspiciousOnly: only returns LNK files reporting a suspicious attribute.
 - SusSize: Any lnk over this size in bytes is suspicious.
 - SusArgSize: Any lnk with Argument strings over this size is suspicious.
 - SusArgRegex: Regex for suspicious strings in Arguments.
 - SusHostnameRegex: Regex for suspicious TrackerData Hostname.
 - VmPrefixMAC: Regex to match known Virtual Machine MacAddress prefix in TrackerData. 
 - RiskyExe: Regex target exe to flag as risky.
 

 List of fields targeted by filter regex:

 - StringData.TargetPath
 - StringData.Name
 - StringData.RelativePath
 - StringData.WorkingDir
 - StringData.Arguments
 - StringData.IconLocation
 - LinkTarget.LinkTarget
 - PropertyStore
 - TrackerData.MachineID
 - TrackerData.MacAddress

 NOTE: regex startof (^) and endof ($) line modifiers will not work.
 

 Windows.Forensics.Lnk also will highlight suspicious lnk attributes in a Suspicious field.

 * Large Size - Check for large size, default over 20000 bytes
 * Startup Path - Path with \Startup\
 * Zeroed Headers - Check for ShellHeader items zeroed.
 * Hidden window - Check for ShellLinkHeader.ShowCommand as SHOWMINNOACTIVE
 * Target Changed path - Check LNK TargetPath different to PropertyStore path.
 * Target Changed size - Check LNK ShellLinkHeader.FileSize different to PropertyStore size.
 * Risky target - Checks several LNK target paths to the RiskyExe regex.
 * WebDAV - Checks for NetworkProviderType = WNNC_NET_DAV
 * Line break in StringData.Name
 * Suspicious argument size - large sized arguments over 250 characters as default
 * Environment variable script - environment vatiable with a common script configured (bat|cmd|ps1|js|vbs|vbe|py)
 * No Target with environmant variable - environment variable only execution
 * Suspicious hostname - some common malicious hostnames
 * Created in VM - Check TrackerData MacAddress for known VM prefix
 * Local Admin- check PropertyStore for indications LNK created by local admin UID 500
 * Cyrillic Language - check PropertyStore for Cyrillic strings
 * Chinese Language - check PropertyStore for Chinese strings
 * Korean Language - check PropertyStore for Korean strings
 * Persian Language - check PropertyStore for Persian strings
 * Vietnamese Language - check PropertyStore for Vietnamese strings
 * CodePage - checks for existance of a ExtraData code page setting. Rare enough to report on - 936:Simplified Chinese, 949:Korean, 950:Traditional Chinese
 * Has Overlay - check for overlay and extra data attached to LNK
 * Long Base64 - check for a long base64 blog over 20 decoded characters
 * Arguments have ticks - ticks are common in malicious LNK files 
 * Arguments have environment variables - environment variables (%|\$env:) are common in malicious LNKs 
 * Arguments have rare characters - looks for specific rare characters that may indicate obfuscation (\?|\!|\~|\@) 
 * Arguments have leading space - malicious LNK files may have a many leading spaces to obfuscate some tools
 * Arguments have http strings - LNKs are reguarly used as a download cradle - https?://
 * Arguments have UNC strings
 * Suspicious arguments - some common malicious arguments observed in field (with mind to False positive)


reference:
 - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink

parameters:
 - name: TargetGlob
 default: C:\{ProgramData,Users\*\AppData\*}\Microsoft\Windows\{Start Menu\Programs\StartUp,Recent\**}\*.lnk
 - name: IocRegex
 type: regex
 description: A regex to filter on all fields
 - name: IgnoreRegex
 type: regex
 description: A regex to ignore ilter all fields
 - name: UploadLnk
 description: Also upload the link files themselves.
 type: bool
 - name: SuspiciousOnly
 description: Only returns LNK files reporting a suspicious attribute
 type: bool
 - name: SusSize
 description: Any lnk over this size in bytes is suspicious.
 default: 20000
 type: int
 - name: SusArgSize
 default: 250
 description: Any lnk with Argument strings over this size is suspicious.
 type: int
 - name: SusArgRegex
 description: Regex for suspicious strings in Argumetns.
 type: regex
 default: \\AppData\\|\\Users\\Public\\|\\Temp\\|comspec|&amp;amp;cd&amp;amp;echo| -NoP | -W Hidden | [-/]decode | -e.* (JAB|SUVYI|SQBFAFgA|aWV4I|aQBlAHgA)|start\s*[\\/]b|\.downloadstring\(|\.downloadfile\(|iex
 - name: SusHostnameRegex
 description: Regex for suspicious TrackerData Hastname.
 type: regex
 default: ^(Win-|Desktop-|Commando$)
 - name: CheckHostnameMismatch
 description: Compare TrackerData.MachineID with Hostname (noisy in many networks)
 type: bool
 - name: VmPrefixMAC
 description: VM MacAddress prefix regex to compate to LNK TrackerData.
 type: regex
 default: ^(00:50:56|00:0C:29|00:05:69|00:1C:14|08:00:27|52:54:00|00:21:F6|00:14:4F|00:0F:4B|00:15:5D)
 - name: RiskyExe
 description: Regex target exe to flag as risky.
 type: regex
 default: \\(cmd|powershell|cscript|wscript|rundll32|regsvr32|mshta|wmic|conhost)\.exe$
 

export: |
 LET Profile = '''
 [
 ["ShellLinkHeader", 0, [
 ["HeaderSize", 0, "uint32"],
 ["__LinkClsID", 4, "String", {
 "length": 16,
 "term": ""
 }],
 ["LinkClsID", 0, "Value", {
 "value": "x=&amp;gt;format(format='%x', args=x.__LinkClsID)"
 }],
 ["LinkFlags", 20, "Flags", {
 "type": "uint32",
 "bitmap": {
 "HasLinkTargetIDList": 0,
 "HasLinkInfo": 1,
 "HasName": 2,
 "HasRelativePath": 3,
 "HasWorkingDir": 4,
 "HasArguments": 5,
 "HasIconLocation": 6,
 "IsUnicode": 7,
 "ForceNoLinkInfo": 8,
 "HasExpString": 9,
 "RunInSeparateProcess": 10,
 "HasDarwinID": 12,
 "RunAsUser": 13,
 "HasExpIcon": 14,
 "NoPidlAlias": 15,
 "RunWithShimLayer": 17,
 "ForceNoLinkTrack": 18,
 "EnableTargetMetadata": 19,
 "DisableLinkPathTracking": 20,
 "DisableKnownFolderTracking": 21,
 "DisableKnownFolderAlias": 22,
 "AllowLinkToLink": 23,
 "UnaliasOnSave": 24,
 "PreferEnvironmentPath": 25,
 "KeepLocalIDListForUNCTarget": 26
 }
 }],
 ["FileAttributes", 24, "Flags", {
 "type": "uint32",
 "bitmap": {
 "FILE_ATTRIBUTE_READONLY": 0,
 "FILE_ATTRIBUTE_HIDDEN": 1,
 "FILE_ATTRIBUTE_SYSTEM": 2,
 "FILE_ATTRIBUTE_DIRECTORY": 4,
 "FILE_ATTRIBUTE_ARCHIVE": 5,
 "FILE_ATTRIBUTE_NORMAL": 7,
 "FILE_ATTRIBUTE_TEMPORARY": 8,
 "FILE_ATTRIBUTE_SPARSE_FILE": 9,
 "FILE_ATTRIBUTE_REPARSE_POINT": 10,
 "FILE_ATTRIBUTE_COMPRESSED": 11,
 "FILE_ATTRIBUTE_OFFLINE": 12,
 "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED": 13,
 "FILE_ATTRIBUTE_ENCRYPTED": 14,
 }
 }],
 ["CreationTime", 28, "WinFileTime", {
 "type": "uint64"
 }],
 ["AccessTime", 36, "WinFileTime", {
 "type": "uint64"
 }],
 ["WriteTime", 44, "WinFileTime", {
 "type": "uint64"
 }],

 ["FileSize", 52, "uint32"],
 ["IconIndex", 56, "uint32"],
 ["ShowCommand", 60, "Enumeration", {
 "type": "uint32",
 "map": {
 "SHOWNORMAL": 0x00000001,
 "SHOWMAXIMIZED": 0x00000003,
 "SHOWMINNOACTIVE": 0x00000007,
 }
 }],
 ["__HotKeyLow", 62, "Enumeration", {
 "type": "uint8",
 "map": {
 "No key assigned." : 0x00,
 "0" : 0x30,
 "1" : 0x31,
 "2" : 0x32,
 "3" : 0x33,
 "4" : 0x34,
 "5" : 0x35,
 "6" : 0x36,
 "7" : 0x37,
 "8" : 0x38,
 "9" : 0x39,
 "A" : 0x41,
 "B" : 0x42,
 "C" : 0x43,
 "D" : 0x44,
 "E" : 0x45,
 "F" : 0x46,
 "G" : 0x47,
 "H" : 0x48,
 "I" : 0x49,
 "J" : 0x4A,
 "K" : 0x4B,
 "L" : 0x4C,
 "M" : 0x4D,
 "N" : 0x4E,
 "O" : 0x4F,
 "P" : 0x50,
 "Q" : 0x51,
 "R" : 0x52,
 "S" : 0x53,
 "T" : 0x54,
 "U" : 0x55,
 "V" : 0x56,
 "W" : 0x57,
 "X" : 0x58,
 "Y" : 0x59,
 "Z" : 0x5A,
 "F1" : 0x70,
 "F2" : 0x71,
 "F3" : 0x72,
 "F4" : 0x73,
 "F5" : 0x74,
 "F6" : 0x75,
 "F7" : 0x76,
 "F8" : 0x77,
 "F9" : 0x78,
 "F10" : 0x79,
 "F11" : 0x7A,
 "F12" : 0x7B,
 "F13" : 0x7C,
 "F14" : 0x7D,
 "F15" : 0x7E,
 "F16" : 0x7F,
 "F17" : 0x80,
 "F18" : 0x81,
 "F19" : 0x82,
 "F20" : 0x83,
 "F21" : 0x84,
 "F22" : 0x85,
 "F23" : 0x86,
 "F24" : 0x87,
 "NumLock" : 0x90,
 "ScrollLock" : 0x91,
 }
 }],
 ["__HotKeyHigh", 63, "Enumeration", {
 "type": "uint8",
 "map": {
 "No modifier key used." : 0x00,
 "SHIFT" : 0x01,
 "CONTROL" : 0x02,
 "ALT" : 0x04,
 }
 }],
 ["HotKey", 0, "Value", {
 "value": "x=&amp;gt;if(condition= x.__HotKeyLow=~'No key assigned',
 then=x.__HotKeyLow,
 else=x.__HotKeyLow + ' + ' + x.__HotKeyHigh)"

 }],

 # The LinkTargetIDList only exists if the Link Flag is set otherwise it is empty.
 ["LinkTargetIDList", "x=&amp;gt;x.HeaderSize", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasLinkTargetIDList'",
 "choices": {
 "true": "LinkTargetIDList",
 "false": "Empty"
 }
 }],
 ["LinkInfo", "x=&amp;gt;x.LinkTargetIDList.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasLinkInfo'",
 "choices": {
 "true": "LinkInfo",
 "false": "Empty"
 }
 }],

 # StringData flag checks
 ["__Name", "x=&amp;gt;x.LinkInfo.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasName'",
 "choices": {
 "true": "Name",
 "false": "Empty"
 }
 }],
 ["__RelativePath", "x=&amp;gt;x.__Name.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasRelativePath'",
 "choices": {
 "true": "RelativePath",
 "false": "Empty"
 }
 }],
 ["__WorkingDir", "x=&amp;gt;x.__RelativePath.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasWorkingDir'",
 "choices": {
 "true": "WorkingDir",
 "false": "Empty"
 }
 }],
 ["__Arguments", "x=&amp;gt;x.__WorkingDir.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasArguments'",
 "choices": {
 "true": "Arguments",
 "false": "Empty"
 }
 }],
 ["__IconLocation", "x=&amp;gt;x.__Arguments.EndOf", "Union", {
 "selector": "x=&amp;gt;x.LinkFlags =~ 'HasIconLocation'",
 "choices": {
 "true": "IconLocation",
 "false": "Empty"
 }
 }],
 ["StringData",0,"StringData"],
 ["ExtraData", "x=&amp;gt;x.__IconLocation.EndOf", "Array", {
 "type": "ExtraData",
 "count": 1000,
 "sentinel": "x=&amp;gt;x.Size &amp;lt; 0x00000004"
 }],
 ["Overlay", "x=&amp;gt;x.ExtraData.EndOf", "Overlay"],

 ]],
 ["Empty", 0, []],
 
 # Struct size includes the size field
 ["LinkTargetIDList", "x=&amp;gt;x.IDListSize + 2", [
 ["IDListSize", 0, "uint16"],
 ["IDList", 2, "Array", {
 "type": "ItemIDList",
 "count": 1000 # Max count until sentinel
 }]
 ]],

 # Item List contains shell bags
 ["ItemIDList", "x=&amp;gt;x.ItemIDSize", [
 ["ItemIDSize", 0, "uint16"],
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Type", 2, "BitField", {
 "type": "uint8",
 "start_bit": 4,
 "end_bit": 7,
 }],

 ["Subtype", 2, "BitField", {
 "type": "uint8",
 "start_bit": 0,
 "end_bit": 1,
 }],

 # For now only support some common shell bags
 ["ShellBag", 0, "Union", {
 "selector": "x=&amp;gt;x.Type",
 "choices": {
 # Older VQL had a bug in BitField
 "64": "ShellBag0x40",
 "48": "ShellBag0x30",
 "16": "ShellBag0x1f",
 "32": "ShellBag0x20",

 # Newer versions should work better
 "1": "ShellBag0x1f",
 "2": "ShellBag0x20",
 "3": "ShellBag0x30",
 "4": "ShellBag0x40",

 }
 }]
 ]],

 ["ShellBag0x40", 0, [
 ["Name", 5, "String", {
 encoding: "utf8",
 }],
 ["Description", 0, "Value", {
 "value": 'x=&amp;gt;dict(
 Type="NetworkLocation",
 ShortName=x.Name
 )'
 }]
 ]],

 # A LinkInfo stores information about the destination of the link.
 ["LinkInfo", "x=&amp;gt;x.__LinkInfoSize", [
 ["__LinkInfoOffset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["__LinkInfoSize", 0, "uint32"],
 ["__LinkInfoHeaderSize", 4, "uint32"],
 ["LinkInfoFlags", 8, "Flags", {
 "type": "uint32",
 "bitmap": {
 "VolumeIDAndLocalBasePath": 0,
 "CommonNetworkRelativeLinkAndPathSuffix": 1
 }
 }],
 ["__VolumeIDOffset", 0xc, "uint32"],
 ["__LocalBasePathOffset", 16, "uint32"],
 ["__CommonNetworkRelativeLinkOffset", 20, "uint32"],
 ["__CommonPathSuffixOffset", 24, "uint32"],
 ["__LocalBasePath", "x=&amp;gt;x.__LocalBasePathOffset", "String", {}],
 ["__CommonNetworkRelativePath", "x=&amp;gt;x.__CommonNetworkRelativeLinkOffset", "String"],
 ["__CommonPathSuffix", "x=&amp;gt;x.__CommonPathSuffixOffset", "String"],
 ["__VolumeID", "x=&amp;gt;x.__VolumeIDOffset", "VolumeID"],
 ["__CommonNetworkRelativeLink", "x=&amp;gt;x.__CommonNetworkRelativeLinkOffset", "CommonNetworkRelativeLink"],
 ["Target", 0, "Value", { # Depending on the LinkInfoFlags this struct needs to be interpreted differently.
 "value": '
 x=&amp;gt;if(condition=x.LinkInfoFlags =~ "VolumeIDAndLocalBasePath",
 then=dict(Path=x.__LocalBasePath,
 VolumeInfo=x.__VolumeID),
 else=dict(Path=format(format="%v\\%v",
 args=[x.__CommonNetworkRelativeLink.NetName, x.__CommonPathSuffix]),
 RelativeLink=x.__CommonNetworkRelativeLink) )'
 }]
 ]],

 ["CommonNetworkRelativeLink", 0, [
 ["__CommonNetworkRelativeLinkSize", 0, "uint32"],
 ["__CommonNetworkRelativeLinkFlags", 4, "Flags", {
 "type": "uint32",
 "bitmap": {
 "ValidDevice": 0,
 "ValidNetType": 1,
 }
 }],
 ["__NetNameOffset", 8, "uint32"],
 ["__DeviceNameOffset", 12, "uint32"],
 ["NetworkProviderType", 16, "Enumeration", {
 "type": "uint32",
 "map": {
 "WNNC_NET_AVID": 0x001A0000,
 "WNNC_NET_DOCUSPACE": 0x001B0000,
 "WNNC_NET_MANGOSOFT": 0x001C0000,
 "WNNC_NET_SERNET": 0x001D0000,
 "WNNC_NET_RIVERFRONT1": 0X001E0000,
 "WNNC_NET_RIVERFRONT2": 0x001F0000,
 "WNNC_NET_DECORB": 0x00200000,
 "WNNC_NET_PROTSTOR": 0x00210000,
 "WNNC_NET_FJ_REDIR": 0x00220000,
 "WNNC_NET_DISTINCT": 0x00230000,
 "WNNC_NET_TWINS": 0x00240000,
 "WNNC_NET_RDR2SAMPLE": 0x00250000,
 "WNNC_NET_CSC": 0x00260000,
 "WNNC_NET_3IN1": 0x00270000,
 "WNNC_NET_EXTENDNET": 0x00290000,
 "WNNC_NET_STAC": 0x002A0000,
 "WNNC_NET_FOXBAT": 0x002B0000,
 "WNNC_NET_YAHOO": 0x002C0000,
 "WNNC_NET_EXIFS": 0x002D0000,
 "WNNC_NET_DAV": 0x002E0000,
 "WNNC_NET_KNOWARE": 0x002F0000,
 "WNNC_NET_OBJECT_DIRE": 0x00300000,
 "WNNC_NET_MASFAX": 0x00310000,
 "WNNC_NET_HOB_NFS": 0x00320000,
 "WNNC_NET_SHIVA": 0x00330000,
 "WNNC_NET_IBMAL": 0x00340000,
 "WNNC_NET_LOCK": 0x00350000,
 "WNNC_NET_TERMSRV": 0x00360000,
 "WNNC_NET_SRT": 0x00370000,
 "WNNC_NET_QUINCY": 0x00380000,
 "WNNC_NET_OPENAFS": 0x00390000,
 "WNNC_NET_AVID1": 0X003A0000,
 "WNNC_NET_DFS": 0x003B0000,
 "WNNC_NET_KWNP": 0x003C0000,
 "WNNC_NET_ZENWORKS": 0x003D0000,
 "WNNC_NET_DRIVEONWEB": 0x003E0000,
 "WNNC_NET_VMWARE": 0x003F0000,
 "WNNC_NET_RSFX": 0x00400000,
 "WNNC_NET_MFILES": 0x00410000,
 "WNNC_NET_MS_NFS": 0x00420000,
 "WNNC_NET_GOOGLE": 0x00430000,
 }
 }],
 ["__NetNameOffsetUnicode", 20, "uint32"],
 ["__DeviceNameOffsetUnicode", 24, "uint32"],
 ["__NetNameAscii", "x=&amp;gt;x.__NetNameOffset", "String"],
 ["__DeviceNameAscii", "x=&amp;gt;x.__DeviceNameOffset", "String"],
 ["__NetNameUnicode", "x=&amp;gt;x.__NetNameOffsetUnicode", "String", {"encoding": "utf16"}],
 ["__DeviceNameUnicode", "x=&amp;gt;x.__DeviceNameOffsetUnicode", "String", {"encoding": "utf16"}],
 ["NetName", 0, "Value", {
 "value": "x=&amp;gt;if(condition=x.__NetNameOffset, then=x.__NetNameAscii, else=x.__NetNameUnicode)"
 }],
 ["DeviceName", 0, "Value", {
 "value": "x=&amp;gt;if(condition=x.__DeviceNameOffset, then=x.__DeviceNameAscii, else=x.__DeviceNameUnicode)"
 }]
 ]],

 # This is a comment
 ["VolumeID", 0, [
 ["__VolumeIDSize", 0, "uint32"],
 ["DriveType", 4, "Enumeration", {
 "type": "uint32",
 "choices": {
 "0": "DRIVE_UNKNOWN",
 "1": "DRIVE_NO_ROOT_DIR",
 "2": "DRIVE_REMOVABLE",
 "3": "DRIVE_FIXED",
 "4": "DRIVE_REMOTE",
 "5": "DRIVE_CDROM",
 "6": "DRIVE_RAMDISK"
 }
 }],
 ["DriveSerialNumber", 8, "uint32"],
 ["__VolumeLabelOffset", 12, "uint32"],
 ["__VolumeLabelOffsetUnicode", 16, "uint32"],
 ["__VolumeLabelAscii", "x=&amp;gt;x.__VolumeLabelOffset", "String"],
 ["__VolumeLabelUnicode", "x=&amp;gt;x.__VolumeLabelOffsetUnicode", "String", {"encoding": "utf16"}],
 ["VolumeLabel", 0, "Value", {
 "value": 'x=&amp;gt;if(condition=x.__VolumeLabelOffset,
 then=x.__VolumeLabelAscii, else=x.__VolumeLabelUnicode)'
 }]
 ]],

 # Volume name
 ["ShellBag0x20", 0, [
 ["__Name", 3, "String"],
 # Name is only valid if the first bit is set.
 ["Name", 3, "Value", {
 "value": "x=&amp;gt;if(condition=x.ParentOf.Subtype, then=x.__Name, else='')",
 }],
 ["Description", 0, "Value", {
 "value": 'x=&amp;gt;dict(
 LongName=x.Name,
 ShortName=x.Name,
 Type="Volume"
 )'
 }]
 ]],

 # Marks the root class My Computer
 ["ShellBag0x1f", 0, [
 ["Description", 0, "Value", {
 "value": 'x=&amp;gt;dict(
 ShortName="My Computer",
 Type="Root"
 )'
 }]
 ]],

 # Represent a file or directory
 ["ShellBag0x30", 0, [
 ["Size", 0, "uint16"],
 ["Type", 2, "uint8"],
 ["SubType", 2, "Flags", {
 "type": "uint8",
 "bitmap": {
 "File": 1,
 "Directory": 0,
 "Unicode": 4,
 }
 }],
 ["__LastModificationTime", 8, "uint32"],
 ["LastModificationTime", 8, "FatTimestamp"],
 ["ShortName", 14, "String"],

 # Variable length search for the extension signature from the start of the struct.
 ["__pre", 0, "String", {
 "term_hex": "0400efbe"
 }],

 # The extension tag should be immediately after the search string.
 ["__ExtensionTag", "x=&amp;gt;len(list=x.__pre)", "uint32"],

 # Extension starts 4 bytes before the tag
 ["Extension", "x=&amp;gt;len(list=x.__pre) - 4", "Union", {
 "selector": "x=&amp;gt;format(format='%#x', args=x.__ExtensionTag)",
 "choices": {
 "0xbeef0004": "Beef0004",
 }
 }],

 # Put all the data together in a convenient location
 ["Description", 0, "Value", {
 "value": 'x=&amp;gt;dict(
 Type=x.SubType,
 Modified=if(condition=x.__LastModificationTime, then=x.LastModificationTime),
 LastAccessed=if(condition=x.Extension.__LastAccessed, then=x.Extension.LastAccessed),
 CreateDate=if(condition=x.Extension.__CreateDate, then=x.Extension.CreateDate),
 ShortName=x.ShortName,
 LongName=x.Extension.LongName,
 MFTID=x.Extension.MFTReference.MFTID,
 MFTSeq=x.Extension.MFTReference.SequenceNumber
 )'
 }]
 ]],
 ["Beef0004", 0, [
 ["Size", 0, "uint16"],
 ["Version", 2, "uint16"],
 ["__Signature", 4, "uint32"],
 ["Signature", 0, "Value", {
 "value": "x=&amp;gt;format(format='%#x', args=x.__Signature)"
 }],
 ["__CreateDate", 8, "uint32"],
 ["__LastAccessed", 12, "uint32"],

 ["CreateDate", 8, "FatTimestamp"],
 ["LastAccessed", 12, "FatTimestamp"],
 ["MFTReference", 20, "MFTReference"],
 ["LongName", 46, "String", {
 "encoding": "utf16"
 }]
 ]],
 ["MFTReference", 0, [
 ["MFTID", 0, "BitField", {
 "type": "uint64",
 "start_bit": 0,
 "end_bit": 48,
 }],
 ["SequenceNumber", 0, "BitField", {
 "type": "uint64",
 "start_bit": 48,
 "end_bit": 64,
 }]
 ]],

 ["StringData",0,[
 ["TargetPath",0,"Value",{ "value":"x=&amp;gt; x.ParentOf.LinkInfo.Target.Path"}],
 ["Name",0,"Value",{ "value":"x=&amp;gt; x.ParentOf.__Name.StringData"}],
 ["RelativePath",0,"Value",{ "value":"x=&amp;gt; x.ParentOf.__RelativePath.StringData"}],
 ["WorkingDir",0,"Value",{ "value":"x=&amp;gt; x.ParentOf__WorkingDir.StringData"}],
 ["Arguments",0,"Value",{ "value":"x=&amp;gt; x.ParentOf.__Arguments.StringData"}],
 ["IconLocation",0,"Value",{ "value":"x=&amp;gt; x.ParentOf.__IconLocation.StringData"}],
 ]],

 ## StringDataBlock structs
 ["Name", "x=&amp;gt;x.Size + 2", [
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Characters", 0, "uint16"],
 ["Size", 0, "Value", {"value": "x=&amp;gt;x.Characters * 2"}],
 ["StringData", 2, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Size",
 "max_length": 10000,
 "term": "",
 }],
 ]],
 ["WorkingDir", "x=&amp;gt;x.Size + 2", [
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Characters", 0, "uint16"],
 ["Size", 0, "Value", {"value": "x=&amp;gt;x.Characters * 2"}],
 ["StringData", 2, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Size",
 "max_length": 10000,
 "term": "",
 }],
 ]],
 ["RelativePath", "x=&amp;gt;x.Size + 2", [
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Characters", 0, "uint16"],
 ["Size", 0, "Value", {"value": "x=&amp;gt;x.Characters * 2"}],
 ["StringData", 2, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Size",
 "max_length": 10000,
 "term": "",
 }],
 ]],
 ["Arguments", "x=&amp;gt;x.Size + 2", [
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Characters", 0, "uint16"],
 ["Size", 0, "Value", {"value": "x=&amp;gt;x.Characters * 2"}],
 ["SizeType", 0, "Value", {"value": "x=&amp;gt;format(format='%T',args=x.Size)"}],
 ["StringData", 2, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Size",
 "max_length": 50000,
 "term": "",
 }],
 ]],
 ["IconLocation", "x=&amp;gt;x.Size + 2", [
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf"}],
 ["Characters", 0, "uint16"],
 ["Size", 0, "Value", {"value": "x=&amp;gt;x.Characters * 2"}],
 ["StringData", 2, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Size",
 "max_length": 10000,
 "term": "",
 }],
 ]],
 ["ExtraData","x=&amp;gt;x.Size",[
 ["Offset",0,"Value",{"value":"x=&amp;gt;x.StartOf"}],
 ["Size",0,"uint32"],
 ["EndOf",0,"Value",{"value":"x=&amp;gt;x.EndOf"}],
 ["__Header",4,"uint32"],
 ["Header",0,"Value",{"value":"x=&amp;gt;'0x' + upcase(string=format(format='%08x',args=x.__Header))"}],
 ["BlockClass", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "EnvironmentVariable": 0xA0000001,
 "Console": 0xA0000002,
 "TrackerData": 0xA0000003,
 "CodePage": 0xA0000004,
 "SpecialFolder": 0xA0000005,
 "Darwin": 0xA0000006,
 "IconEnvironment": 0xA0000007,
 "Shim": 0xA0000008,
 "PropertyStore": 0xA0000009,
 "KnownFolder": 0xA000000B,
 "VistaAndAboveIDList": 0xA000000C,
 }}],
 ["Data", 0, "Union", {
 "selector": "x=&amp;gt;x.Header",
 "choices": {
 "0xA0000001": "EnvironmentVariableDataBlock",
 "0xA0000002": "ConsoleDataBlock",
 "0xA0000003": "TrackerDataBlock",
 "0xA0000004": "ConsoleFEDataBlock",
 "0xA0000005": "SpecialFolderDataBlock",
 "0xA0000006": "DarwinDataBlock",
 "0xA0000007": "IconEnvironmentDataBlock",
 "0xA0000008": "ShimDataBlock",
 "0xA0000009": "PropertyStoreDataBlock",
 "0xA000000B": "KnownFolderDataBlock",
 "0xA000000C": "VistaAndAboveIDListDataBlock",
 }
 }],
 ]],
 #0xA0000001
 ["EnvironmentVariableDataBlock", 0x00000314, [
 ["__DataBlockSize",0,"uint32"],
 ["__TargetAnsi", 8, "String", {"max_length": 260 }],
 ["__TargetUnicode", 268, "String", {
 "encoding": "utf16",
 "max_length": 520
 }],
 ["DataValue", 0, "Value",{
 "value": "x=&amp;gt;if(condition= x.__TargetAnsi=x.__TargetUnicode,
 then=x.__TargetAnsi,
 else=dict(Ascii=x.__TargetAnsi,Unicode=x.__TargetUnicode))" }],
 ]],
 #0xA0000002
 ["ConsoleDataBlock", 0x000000CC, [
 ["__DataBlockSize",0,"uint32"],
 ["FillAttributes",8,"Flags", {
 "type": "uint16",
 "bitmap": {
 "FOREGROUND_BLUE": 0,
 "FOREGROUND_GREEN": 1,
 "FOREGROUND_RED": 2,
 "FOREGROUND_INTENSITY": 3,
 "BACKGROUND_BLUE": 4,
 "BACKGROUND_GREEN": 5,
 "BACKGROUND_RED": 6,
 "BACKGROUND_INTENSITY": 7,
 }}],
 ["PopupFillAttributes",10,"Flags", {
 "type": "uint16",
 "bitmap": {
 "FOREGROUND_BLUE": 0,
 "FOREGROUND_GREEN": 1,
 "FOREGROUND_RED": 2,
 "FOREGROUND_INTENSITY": 3,
 "BACKGROUND_BLUE": 4,
 "BACKGROUND_GREEN": 5,
 "BACKGROUND_RED": 6,
 "BACKGROUND_INTENSITY": 7,
 }}],
 ["__ScreenBufferSizeX",12,"int16"],
 ["__ScreenBufferSizeY",14,"int16"],
 ["ScreenBufferSize",0,"Value",{
 "value":"x=&amp;gt;format(format='%v x %v',args=[x.__ScreenBufferSizeX,x.__ScreenBufferSizeY])"
 }],
 ["__WindowSizeX",16,"int16"],
 ["__WindowSizeY",18,"int16"],
 ["WindowSize",0,"Value",{
 "value":"x=&amp;gt;format(format='%v x %v',args=[x.__WindowSizeX,x.__WindowSizeY])"
 }],
 ["__WindowOriginX",20,"int16"],
 ["__WindowOriginY",22,"int16"],
 ["WindowOrigin",0,"Value",{
 "value":"x=&amp;gt;format(format='%v / %v',args=[x.__WindowOriginX,x.__WindowOriginY])"
 }],
 ["__FontSizeW",32,"int16"],
 ["__FontSizeH",34,"int16"],
 ["FontSize",0,"Value",{
 "value":"x=&amp;gt;if(condition= x.__FontSizeW=0,
 then= x.__FontSizeH,
 else= format(format='%v / %v',args=[x.__FontSizeW,x.__FontSizeH])) "
 }],
 ["__FontFamily", 36, "BitField", {
 type: "uint32",
 start_bit: 4,
 end_bit: 31,
 }],
 ["FontFamily", 0, "Value", {
 "value": "x=&amp;gt;get(item=dict(
 `0`='DONTCARE',
 `16`='ROMAN',
 `32`='SWISS',
 `48`='MODERN',
 `64`='SCRIPT',
 `80`='DECORATIVE',

 `1`='ROMAN',
 `2`='SWISS',
 `3`='MODERN',
 `4`='SCRIPT',
 `5`='DECORATIVE'),
 member=x.__FontFamily)"
 }],
 ["__FontPitch", 36, "BitField", {
 type: "uint32",
 start_bit: 0,
 end_bit: 3,
 }],
 # TODO: implement Flag select for FontPitch
 ["FontPitch", 0 ,"Value",{
 "value":"x=&amp;gt;format(format='0x%02x',args=x.__FontPitch)"
 }],
 ["__FontWeight",40,"uint32"],
 ["BoldFont", 0 ,"Value",{
 "value":"x=&amp;gt;if(condition= 700&amp;lt;=x.__FontWeight,
 then= True,
 else= False)"
 }],
 ["FaceName", 44, "String", {
 "encoding": "utf16",
 "length": 64,
 }],
 ["__CursorSize",108,"uint32"],
 ["CursorSize", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__CursorSize &amp;lt;= 25,
 then= 'Small',
 else=if(condition= x.__CursorSize &amp;gt;= 26 AND x.__CursorSize &amp;lt;= 50,
 then= 'Medium',
 else=if(condition= x.__CursorSize &amp;gt;= 51 AND x.__CursorSize &amp;lt;= 100,
 else= 'Large',
 else= x.__CursorSize )))"
 }],
 ["__FullScreen",112,"uint32"],
 ["FullScreen", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__FullScreen &amp;gt; 0,
 then= True,
 else= False )"
 }],
 ["__QuickEdit",116,"uint32"],
 ["QuickEdit", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__QuickEdit &amp;gt; 0,
 then= True,
 else= False )"
 }],
 ["__InsertMode",120,"uint32"],
 ["InsertMode", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__InsertMode &amp;gt; 0,
 then= True,
 else= False )"
 }],
 ["__AutoPosition",124,"uint32"],
 ["AutoPosition", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__AutoPosition &amp;gt; 0,
 then= True,
 else= False )"
 }],
 ["HistoryBufferSize",128,"uint32"],
 ["NumberOfHistoryBuffers",132,"uint32"],
 ["__HistoryNoDup",136,"uint32"],
 ["HistoryDuplicatesAllowed", 0 ,"Value",{
 "value":"x=&amp;gt; if(condition= x.__HistoryNoDup &amp;gt; 0,
 then= True,
 else= False )"
 }],
 ["ColorTable", 140, "Array", {
 "type": "uint32",
 "count": 16 # Max count until sentinel
 }],
 ]],
 #0xA0000003
 ["TrackerDataBlock", 0x00000060, [
 ["__DataBlockSize",0,"uint32"],
 ["__MachineID", 16, "String"],
 ["MachineID", 0, "Value",{ "value": "x=&amp;gt;if(condition= x.__MachineID=~'[^ -~]+', then=Null, else=x.__MachineID )" }],
 ["MacAddress", 0, "Value",{ "value": "x=&amp;gt;if(condition=x.MachineID,then=strip(suffix=':',string=regex_replace(source=split(string=x.FileDroid,sep='-')[-1],re='.{2}',replace='$0:')))" }],
 ["__CreationTimeHex", 0, "Value",{ "value": "x=&amp;gt;if(condition=x.MachineID,then='0x' + x.FileDroid[15:18] + x.FileDroid[9:13] + x.FileDroid[0:8] )" }],
 ["CreationTime", 0, "Value",{ "value": "x=&amp;gt;timestamp(epoch=int(int=( int(int=x.__CreationTimeHex) - 0x01B21DD213814000) / 10000))" }],
 ["__Droid0", 32, "GUID"],
 ["__Droid1", 48, "GUID"],
 ["__DroidBirth0", 64, "GUID"],
 ["__DroidBirth1", 80, "GUID"],
 ["VolumeDroid", 0, "Value",{"value": "x=&amp;gt;if(condition=x.MachineID,then=x.__Droid0.Value)" }],
 ["VolumeDroidBirth", 0, "Value",{ "value": "x=&amp;gt;if(condition=x.MachineID,then=x.__DroidBirth0.Value)" }],
 ["FileDroid", 0, "Value",{"value": "x=&amp;gt;if(condition=x.MachineID,then=x.__Droid1.Value)" }],
 ["FileDroidBirth", 0, "Value",{ "value": "x=&amp;gt;if(condition=x.MachineID,then=x.__DroidBirth1.Value)" }],
 ]],
 #0xA0000004
 ["ConsoleFEDataBlock", 0x0000000C, [
 ["__DataBlockSize",0,"uint32"],
 ["CodePage",8,"uint32"],
 ["DataValue",0,"Value",{"value":"x=&amp;gt;x.CodePage"}],
 ]],
 #0xA0000005
 ["SpecialFolderDataBlock", 0x00000010, [
 ["__DataBlockSize",0,"uint32"],
 ["SpecialFolderId",8,"uint32"],
 ["IdOffset",12,"uint32"],
 ["DataValue",0,"Value",{"value":"x=&amp;gt;x.SpecialFolderId"}],
 ]],
 #0xA0000006
 ["DarwinDataBlock", 0x00000314, [
 ["__DataBlockSize",0,"uint32"],
 ["__DarwinDataAnsi", 8, "String", {"max_length": 260 }],
 ["__DarwinDataUnicode", 268, "String", {
 "encoding": "utf16",
 "max_length": 520
 }],
 ["DataValue", 0, "Value",{
 "value": "x=&amp;gt;if(condition= x.__DarwinDataAnsi=x.__DarwinDataUnicode,
 then=x.__DarwinDataAnsi,
 else=dict(Ascii=x.__DarwinDataAnsi,Unicode=x.__DarwinDataUnicode))" }],
 ]],
 #0xA0000007
 ["IconEnvironmentDataBlock", 0x00000314, [
 ["__DataBlockSize",0,"uint32"],
 ["__TargetAnsi", 8, "String", {"max_length": 260 }],
 ["__TargetUnicode", 268, "String", {
 "encoding": "utf16",
 "max_length": 520,
 }],
 ["DataValue", 0, "Value",{
 "value": "x=&amp;gt;if(condition= x.__TargetAnsi=x.__TargetUnicode,
 then=x.__TargetAnsi,
 else=dict(Ascii=x.__TargetAnsi,Unicode=x.__TargetUnicode))" }],
 ]],
 #0xA0000008
 ["ShimDataBlock", "x=&amp;gt;x.__DataBlockSize", [
 ["__DataBlockSize",0,"uint32"],
 ["LayerName", 8, "String", {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.__DataBlockSize - 8",
 "max_length": 10000
 }],
 ["DataValue",0,"Value",{"value":"x=&amp;gt;x.LayerName"}],
 ]],
 #0xA0000009
 ["PropertyStoreDataBlock", "x=&amp;gt;x.__DataBlockSize", [
 ["__DataBlockSize",0,"uint32"],
 ["PropertyStorage", 8, "Array", {
 "count": 1000,
 "type": "PropertyStorage",
 "sentinel": "x=&amp;gt;x.__DataBlockSize = 0"
 }],
 ["DataValue",0,"Value",{"value":"x=&amp;gt;x.PropertyStorage.PropertyValue"}],
 #["DataValue",0,"Value",{"value":"x=&amp;gt;property_store(data=x.PropertyStorage.PropertyValue)"}],

 ]],
 #0xA000000B
 ["KnownFolderDataBlock", 0x00000314, [
 ["__DataBlockSize",0,"uint32"],
 ["__KnownFolderId", 8, "GUID"],
 ["GUID",0,"Value",{"value":"x=&amp;gt;x.__KnownFolderId.Value"}],
 ["__Offset", 24,"uint32"],
 ["KnownFolder", 0, "Value", {
 "value": "x=&amp;gt; get(item=dict(
 `DE61D971-5EBC-4F02-A3A9-6C82895E5C04`='AddNewPrograms',
 `724EF170-A42D-4FEF-9F26-B60E846FBA4F`='AdminTools',
 `A520A1A4-1780-4FF6-BD18-167343C5AF16`='AppDataLow',
 `A305CE99-F527-492B-8B1A-7E76FA98D6E4`='AppUpdates',
 `9E52AB10-F80D-49DF-ACB8-4330F5687855`='CDBurning',
 `DF7266AC-9274-4867-8D55-3BD661DE872D`='ChangeRemovePrograms',
 `D0384E7D-BAC3-4797-8F14-CBA229B392B5`='CommonAdminTools',
 `C1BAE2D0-10DF-4334-BEDD-7AA20B227A9D`='CommonOEMLinks',
 `0139D44E-6AFE-49F2-8690-3DAFCAE6FFB8`='CommonPrograms',
 `A4115719-D62E-491D-AA7C-E74B8BE3B067`='CommonStartMenu',
 `82A5EA35-D9CD-47C5-9629-E15D2F714E6E`='CommonStartup',
 `B94237E7-57AC-4347-9151-B08C6C32D1F7`='CommonTemplates',
 `0AC0837C-BBF8-452A-850D-79D08E667CA7`='Computer',
 `4BFEFB45-347D-4006-A5BE-AC0CB0567192`='Conflict',
 `6F0CD92B-2E97-45D1-88FF-B0D186B8DEDD`='Connections',
 `56784854-C6CB-462B-8169-88E350ACB882`='Contacts',
 `82A74AEB-AEB4-465C-A014-D097EE346D63`='ControlPanel',
 `2B0F765D-C0E9-4171-908E-08A611B84FF6`='Cookies',
 `B4BFCC3A-DB2C-424C-B029-7FE99A87C641`='Desktop',
 `FDD39AD0-238F-46AF-ADB4-6C85480369C7`='Documents',
 `374DE290-123F-4565-9164-39C4925E467B`='Downloads',
 `1777F761-68AD-4D8A-87BD-30B759FA33DD`='Favorites',
 `FD228CB7-AE11-4AE3-864C-16F3910AB8FE`='Fonts',
 `CAC52C1A-B53D-4EDC-92D7-6B2E8AC19434`='Games',
 `054FAE61-4DD8-4787-80B6-090220C4B700`='GameTasks',
 `D9DC8A3B-B784-432E-A781-5A1130A75963`='History',
 `4D9F7874-4E0C-4904-967B-40B0D20C3E4B`='Internet',
 `352481E8-33BE-4251-BA85-6007CAEDCF9D`='InternetCache',
 `BFB9D5E0-C6A9-404C-B2B2-AE6DB6AF4968`='Links',
 `F1B32785-6FBA-4FCF-9D55-7B8E7F157091`='LocalAppData',
 `2A00375E-224C-49DE-B8D1-440DF7EF3DDC`='LocalizedResourcesDir',
 `4BD8D571-6D19-48D3-BE97-422220080E43`='Music',
 `C5ABBF53-E17F-4121-8900-86626FC2C973`='NetHood',
 `D20BEEC4-5CA8-4905-AE3B-BF251EA09B53`='Network',
 `31C0DD25-9439-4F12-BF41-7FF4EDA38722`='Objects3D',
 `2C36C0AA-5812-4B87-BFD0-4CD0DFB19B39`='OriginalImages',
 `69D2CF90-FC33-4FB7-9A0C-EBB0F0FCB43C`='PhotoAlbums',
 `33E28130-4E1E-4676-835A-98395C3BC3BB`='Pictures',
 `DE92C1C7-837F-4F69-A3BB-86E631204A23`='Playlists',
 `76FC4E2D-D6AD-4519-A663-37BD56068185`='Printers',
 `9274BD8D-CFD1-41C3-B35E-B13F55A758F4`='PrintHood',
 `5E6C858F-0E22-4760-9AFE-EA3317B67173`='Profile',
 `62AB5D82-FDC1-4DC3-A9DD-070D1D495D97`='ProgramData',
 `905E63B6-C1BF-494E-B29C-65B732D3D21A`='ProgramFiles',
 `F7F1ED05-9F6D-47A2-AAAE-29D317C6F066`='ProgramFilesCommon',
 `6365D5A7-0F0D-45E5-87F6-0DA56B6A4F7D`='ProgramFilesCommonX64',
 `DE974D24-D9C6-4D3E-BF91-F4455120B917`='ProgramFilesCommonX86',
 `6D809377-6AF0-444B-8957-A3773F02200E`='ProgramFilesX64',
 `7C5A40EF-A0FB-4BFC-874A-C0F2E0B9FA8E`='ProgramFilesX86',
 `A77F5D77-2E2B-44C3-A6A2-ABA601054A51`='Programs',
 `DFDF76A2-C82A-4D63-906A-5644AC457385`='Public',
 `C4AA340D-F20F-4863-AFEF-F87EF2E6BA25`='PublicDesktop',
 `ED4824AF-DCE4-45A8-81E2-FC7965083634`='PublicDocuments',
 `3D644C9B-1FB8-4F30-9B45-F670235F79C0`='PublicDownloads',
 `DEBF2536-E1A8-4C59-B6A2-414586476AEA`='PublicGameTasks',
 `3214FAB5-9757-4298-BB61-92A9DEAA44FF`='PublicMusic',
 `B6EBFB86-6907-413C-9AF7-4FC2ABF07CC5`='PublicPictures',
 `2400183A-6185-49FB-A2D8-4A392A602BA3`='PublicVideos',
 `52A4F021-7B75-48A9-9F6B-4B87A210BC8F`='QuickLaunch',
 `AE50C081-EBD2-438A-8655-8A092E34987A`='Recent',
 `BD85E001-112E-431E-983B-7B15AC09FFF1`='RecordedTV',
 `B7534046-3ECB-4C18-BE4E-64CD4CB7D6AC`='RecycleBin',
 `8AD10C31-2ADB-4296-A8F7-E4701232C972`='ResourceDir',
 `3EB685DB-65F9-4CF6-A03A-E3EF65729F3D`='RoamingAppData',
 `B250C668-F57D-4EE1-A63C-290EE7D1AA1F`='SampleMusic',
 `C4900540-2379-4C75-844B-64E6FAF8716B`='SamplePictures',
 `15CA69B3-30EE-49C1-ACE1-6B5EC372AFB5`='SamplePlaylists',
 `859EAD94-2E85-48AD-A71A-0969CB56A6CD`='SampleVideos',
 `4C5C32FF-BB9D-43B0-B5B4-2D72E54EAAA4`='SavedGames',
 `7D1D3A04-DEBB-4115-95CF-2F29DA2920DA`='SavedSearches',
 `EE32E446-31CA-4ABA-814F-A5EBD2FD6D5E`='SEARCH_CSC',
 `98EC0E18-2098-4D44-8644-66979315A281`='SEARCH_MAPI',
 `190337D1-B8CA-4121-A639-6D472D16972A`='SearchHome',
 `8983036C-27C0-404B-8F08-102D10DCFD74`='SendTo',
 `7B396E54-9EC5-4300-BE0A-2482EBAE1A26`='SidebarDefaultParts',
 `A75D362E-50FC-4FB7-AC2C-A8BEAA314493`='SidebarParts',
 `625B53C3-AB48-4EC1-BA1F-A1EF4146FC19`='StartMenu',
 `B97D20BB-F46A-4C97-BA10-5E3608430854`='Startup',
 `43668BF8-C14E-49B2-97C9-747784D784B7`='SyncManager',
 `289A9A43-BE44-4057-A41B-587A76D7E7F9`='SyncResults',
 `0F214138-B1D3-4A90-BBA9-27CBC0C5389A`='SyncSetup',
 `1AC14E77-02E7-4E5D-B744-2EB1AE5198B7`='System',
 `D65231B0-B2F1-4857-A4CE-A8E7C6EA7D27`='SystemX86',
 `A63293E8-664E-48DB-A079-DF759E0509F7`='Templates',
 `5B3749AD-B49F-49C1-83EB-15370FBD4882`='TreeProperties',
 `0762D272-C50A-4BB0-A382-697DCD729B80`='UserProfiles',
 `F3CE0F7C-4901-4ACC-8648-D5D44B04EF8F`='UsersFiles',
 `18989B1D-99B5-455B-841C-AB7C74E4DDFC`='Videos',
 `F38BF404-1D43-42F2-9305-67DE0B28FC23`='Windows'),
 field=x.GUID)"
 }],
 ]],
 #0xA000000C
 ["VistaAndAboveIDListDataBlock", "x=&amp;gt;x.__BlockSize", [
 ["__DataBlockSize",0,"uint32"],
 ["IDList", 8, "ItemIDList"],
 ]],

 ["PropertyStorage","x=&amp;gt;x.StorageSize", [
 ["StorageSize",0,"uint32"],
 #["Version",4,"String",{ "length":4 }], #Expect 1SPS / 0x53505331
 ["__Format", 8,"GUID"],
 ["Format", 0, "Value",{"value": "x=&amp;gt;x.__Format.Value" }],
 ["PropertyValue", 24, "Array", {
 "type": "PropertyValue",
 "count": 1000,
 "sentinel": "x=&amp;gt;x.__ValueSize = 0"
 }],
 ]],
 ["PropertyValue","x=&amp;gt;x.__ValueSize", [
 ["__ValueSize",0,"uint32"],
 ["__ID",4,"uint32"],
 ["GuidId",0,"Value",{"value": "x=&amp;gt;x.ParentOf.Format + '/' + str(str=x.__ID)"}],
 ["Description", 0, "Value", {
 "value": "x=&amp;gt; get(item=dict(
 `28636AA6-953D-11D2-B5D6-00C04FD918D0`=x.__SHELL_DETAILS,
 `446D16B1-8DAD-4870-A748-402EA43D788C`=x.__CACHE,
 `46588AE2-4CBC-4338-BBFC-139326986DCE`=x.__User,
 `841E4F90-FF59-4D16-8947-E81BBFFAB36D`=x.__Software,
 `86407DB8-9DF7-48CD-B986-F999ADC19731`=x.__Share,
 `86D40B4D-9069-443C-819A-2A54090DCCEC`=x.__Tile,
 `9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3`=x.__AppUserModel,
 `B725F130-47EF-101A-A5F1-02608C9EEBAC`=x.__STORAGE,
 `DABD30ED-0043-4789-A7F8-D013A4736622`=x.__FolderDisplay,
 `E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD`=x.__SEARCH,
 `F29F85E0-4FF9-1068-AB91-08002B27B3D9`=x.__Document,
 `FB8D2D7B-90D1-4E34-BF60-6EAC09922BBF`=x.__Hash),
 member=x.ParentOf.Format) || 'Unknown Guid' "
 }],
 ["__STORAGE", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "System.ItemFolderNameDisplay": 0x00000002,
 "ClassId": 0x00000003,
 "System.ItemTypeText": 0x00000004,
 "FileIndex": 0x00000008,
 "USN": 0x00000009,
 "System.ItemNameDisplay": 0x0000000A,
 "Path": 0x0000000B,
 "System.Size": 0x0000000C,
 "System.FileAttributes": 0x0000000D,
 "System.DateModified": 0x0000000E,
 "System.DateCreated": 0x0000000F,
 "System.DateAccessed": 0x00000010,
 "AllocSize": 0x00000012,
 "ShortFilename": 0x00000014,
 }}],
 ["__SHELL_DETAILS", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "ComputerName": 0x00000005,
 "ContainedItems": 0x0000001D,
 "FileCount": 0x0000000C,
 "FindData": 0x00000000,
 "IsSendToTarget": 0x00000021,
 "ItemPathDisplayNarrow": 0x00000008,
 "ItemSubType": 0x00000025,
 "ItemType": 0x0000000B,
 "ParsingName": 0x00000018,
 "ParsingPath": 0x0000001E,
 "PerceivedType": 0x00000009,
 "SFGAOFlags": 0x00000019,
 "TotalFileSize": 0x0000000E,
 "DescriptionID": 0x00000002,
 "NamespaceCLSID": 0x00000006,
 }}],
 ["__CACHE", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "ThumbnailCacheId": 0x00000064,
 "VolumeId": 0x00000068,
 }}],
 ["__SEARCH", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "FolderPath": 0x00000006,
 "SearchRanking": 0x00000003,
 }}],
 ["__User", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "SID": 0x00000004,
 }}],
 ["__Share", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "Share Target Description": 0x00000002,
 }}],
 ["__Hash", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "WinX Hash": 0x00000002,
 }}],
 ["__FolderDisplay", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "Item Folder Path Display Narrow": 0x00000064,
 }}],
 ["__AppUserModel", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "App User Model Relaunch Command": 2,
 "App User Model Relaunch Icon Resource": 3,
 "App User Model Relaunch Display Name Resource": 4,
 "App User Model ID": 5,
 "App User Model Is DestList Separator": 6,
 "App User Model Is DestList Link": 7,
 "App User Model Exclude From Show In New Install": 8,
 "App User Model Prevent Pinning": 9,
 "App User Model Best Shortcut": 10,
 "App User Model Is Dual Mode": 11,
 "App User Model Start Pin Option": 12,
 "App User Model Relevance": 13,
 "App User Model Host Environment": 14,
 "App User Model Package Install Path": 15,
 "App User Model Record State": 16,
 "App User Model Package Family Name": 17,
 "App User Model Installed By": 18,
 "App User Model Parent ID": 19,
 "App User Model Activation Context": 20,
 "App User Model Package Full Name": 21,
 "App User Model Package Relative Application ID": 22,
 "App User Model Excluded From Launcher": 23,
 "App User Model AppCompat ID": 24,
 "App User Model Run Flags": 25,
 "App User Model Toast Activator CLSID": 26,
 "App User Model DestList Provided Title": 27,
 "App User Model DestList Provided Description": 28,
 "App User Model DestList Logo Uri": 29,
 "App User Model DestList Provided Group Name": 30,
 }}],
 ["__Software", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "Publisher Display Name": 2,
 "Software Registered Owner": 3,
 "Software Registered Company": 4,
 "Software AppId": 5,
 "Software Support Url": 6,
 "Software Support Telephone": 7,
 "Software Help Link": 8,
 "Software Install Location": 9,
 "Software Install Source": 10,
 "Software Date Installed": 11,
 "Software Support Contact Name": 12,
 "Software ReadMe Url": 13,
 "Software Update Info Url": 14,
 "Software Times Used": 15,
 "Software Date Last Used": 16,
 "Software Tasks File Url": 17,
 "Software Parent Name": 18,
 "Software Product ID": 19,
 "Software Comments": 20,
 "Software Null Preview Total Size": 997,
 "Software Null Preview Subtitle": 998,
 "Software Null Preview Title": 999,
 }}],
 ["__Tile", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "Tile Small Image Location": 0x00000002,
 "Tile Background Color": 0x00000004,
 "Tile Foreground Color": 0x00000005,
 "Tile Display Name": 0x0000000b,
 "Tile Image Location": 0x0000000c,
 "Tile Wide 310x150 Logo Path": 0x0000000d,
 "Tile Unknown Flags": 0x0000000e,
 "Tile Badge Logo Path": 0x0000000f,
 "Tile Suite Display Name": 0x00000010,
 "Tile Suite Sor tName": 0x00000011,
 "Tile Display Name Language": 0x00000012,
 "Tile Square 310x310 Logo Path": 0x00000013,
 "Tile Square 70x70 Logo Path": 0x00000014,
 "Tile Fence Post": 0x00000015,
 "Tile Install Progress": 0x00000016,
 "Tile Encoded Target Path": 0x00000017,
 }}],
 ["__Document", 4, "Enumeration", {
 "type": "uint32",
 "map": {
 "Subject": 3,
 "Author": 4,
 "Keywords": 5,
 "Comment": 6,
 "Document Template": 7,
 "Document Last Author": 8,
 "Document Revision Number": 9,
 "Document Total Editing Time": 10,
 "Document Date Printed": 11,
 "Document Date Created": 12,
 "Document Date Saved": 13,
 "Document Page Count": 14,
 "Document Word Count": 15,
 "Document Character Count": 16,
 "Thumbnail": 17,
 "Application Name": 18,
 "Document Security": 19,
 "High Keywords": 24,
 "Low Keywords": 25,
 "Medium Keywords": 26,
 "Thumbnail Stream": 27,
 }}],
 #["Unused",8,"char"],
 ["Type", 9, "Enumeration", {
 "type": "uint32",
 "map": {
 "LPWSTR": 0x0000001F,
 "FILETIME": 0x00000040,
 "UI8": 0x00000015,
 "CLSID": 0x00000048
 }
 }],
 ["__Size",13,"uint32"],
 ["__LPWSTR",17, "String",{
 "term_hex": "00",
 "length": "x=&amp;gt;x.__Size * 2",
 "encoding": "utf16"
 }],
 ["__FILETIME",13, "WinFileTime"],
 ["__UI8",13, "uint64"],
 ["__CLSID",13,"GUID"],
 ["Value", 0, "Value", {
 "value": "x=&amp;gt; get(item=dict(
 `LPWSTR`=x.__LPWSTR,
 `FILETIME`=x.__FILETIME,
 `UI8`=x.__UI8,
 `CLSID`=x.__CLSID.Value),
 member=x.Type) || 'Unknown: First bytes 0x' + upcase(string=format(format='%08x',args=x.__Size))"
 }],
 ]],
 ["GUID", 16, [
 ["__D1", 0, "uint32"],
 ["__D2", 4, "uint16"],
 ["__D3", 6, "uint16"],
 ["__D4", 8, "String", {"term": "", "length": 2}],
 ["__D5", 10, "String", {"term": "", "length": 6}],
 ["Value", 0, "Value", { "value": "x=&amp;gt;upcase(string=
 format(format='%08x-%04x-%04x-%02x-%02x',
 args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5]))" }],
 ]],
 ["Overlay", "x=&amp;gt;x.Length", [
 ["Header", 0, "Value", {"value": "x=&amp;gt;format(format='0x%08x',args=read_file(filename=OSPath,offset=x.StartOf + 4,length=4))"}],
 ["Offset", 0, "Value", {"value": "x=&amp;gt;x.StartOf + 4"}],
 ["Length", 0, "Value", {"value": "x=&amp;gt;len(list=read_file(filename=OSPath, offset=x.StartOf + 4))"}],
 ["Entropy", 0, "Value", {"value": "x=&amp;gt;entropy(string=read_file(filename=OSPath,offset=x.StartOf + 4))"}],
 ["Magic", 0, "Value", {"value": "x=&amp;gt;magic(accessor='data',path=read_file(filename=OSPath,offset=x.StartOf + 4))"}],
 ]],
 ]
 '''

 LET fixpath(data) = regex_transform(key='x', source=join(sep='\\',array=data),
 map=dict( `My Computer\\\\` = '', `:\\\\\\\\` = ''':\''',`\\\\\\\\\\\\` = '\\'))

 // Pretty format the PropertyStorage
 LET property_store(Parsed) = SELECT * FROM foreach(
 row=Parsed.ExtraData.Data.PropertyStorage.PropertyValue,
 query={
 SELECT * FROM foreach(row=_value,
 query={
 SELECT GuidId,Description,Type,Value FROM foreach(row=_value)
 })})

 LET ShowHeader(Parsed) = dict(
 Headersize = Parsed.HeaderSize,
 LinkClsID = Parsed.LinkClsID,
 LinkFlags = Parsed.LinkFlags,
 FileAttributes = Parsed.FileAttributes,
 FileSize = Parsed.FileSize,
 CreationTime = Parsed.CreationTime,
 AccessTime = Parsed.AccessTime,
 WriteTime = Parsed.WriteTime,
 IconIndex = Parsed.IconIndex,
 ShowCommand = Parsed.ShowCommand,
 HotKey = Parsed.HotKey
 )

 LET ShowLinkTarget(Parsed) = dict(
 LinkTarget= if(
 condition= len(list=fixpath(data=Parsed.LinkTargetIDList.IDList.ShellBag.Description.LongName)) &amp;lt; len(list=fixpath(data=Parsed.LinkTargetIDList.IDList.ShellBag.Description.ShortName)),
 then= fixpath(data=Parsed.LinkTargetIDList.IDList.ShellBag.Description.ShortName),
 else= fixpath(data=Parsed.LinkTargetIDList.IDList.ShellBag.Description.LongName)),
 LinkTargetIDList = Parsed.LinkTargetIDList
 )

 LET ShowExtraData(Parsed) = to_dict(item={
 SELECT if(condition= BlockClass=~'^0x',
 then= 'Overlay',
 else= BlockClass ) as _key,
 if(condition= Data.DataValue,
 then= Data.DataValue, else=
 if(condition= NOT BlockClass =~ '^0x',
 then= Data,
 else= dict(
 Header=format(format='0x%x',args=read_file(filename=OSPath, offset=Offset,length=4)),
 Offset=Offset, 
 Length=len(list=read_file(filename=OSPath, offset=Offset)),
 Entropy=entropy(string=read_file(filename=OSPath,offset=Offset)),
 Magic=magic(accessor='data',path=read_file(filename=OSPath,offset=Offset))
 ))) as _value
 FROM foreach(row=Parsed.ExtraData)
 })
 
 
sources:
 - query: |
 LET targets = SELECT OSPath, Mtime,Atime,Ctime,Btime,Size,
 read_file(filename=OSPath,offset=0,length=2) as _Header
 FROM glob(globs=TargetGlob)
 WHERE NOT IsDir AND _Header =~ '^L\x00$'

 LET lnk_files = SELECT *,
 parse_binary(filename=OSPath,
 profile=Profile, struct="ShellLinkHeader") AS Parsed
 FROM targets

 LET parsed = SELECT
 dict(OSPath=OSPath, Size=Size,
 Mtime=Mtime,Btime=Btime) as SourceFile,
 ShowHeader(Parsed=Parsed) as ShellLinkHeader,
 Parsed.LinkInfo as LinkInfo,
 ShowLinkTarget(Parsed=Parsed) as LinkTarget,
 Parsed.StringData as StringData,
 ShowExtraData(Parsed=Parsed) as ExtraData,
 property_store(data=Parsed) as PropertyStore,
 Parsed.Overlay as Overlay,
 Parsed
 FROM lnk_files
 
 -- Several dynamic functions to check propertystore for anormalities
 LET find_uid(propertystore) = SELECT regex_replace(source=Value,re='''S-1-5-\d{2}-\d+-\d+-\d+-''',replace='') as Value 
 FROM propertystore WHERE Description = 'SID'
 LET find_oldpath(propertystore) = SELECT Value FROM propertystore WHERE Description = 'ParsingPath'
 LET find_oldsize(propertystore) = SELECT Value FROM propertystore WHERE Description = 'System.Size'

 LET results = SELECT SourceFile,
 ShellLinkHeader,
 LinkInfo,
 LinkTarget,
 StringData,
 if(condition=PropertyStore,
 then= if(condition= ExtraData.Overlay,
 then= ExtraData + dict(PropertyStore=PropertyStore),
 else= if(condition= Overlay.Length &amp;gt; 4,
 then= ExtraData + dict(PropertyStore=PropertyStore) + dict(Overlay=to_dict(item=Overlay)),
 else= ExtraData + dict(PropertyStore=PropertyStore) 
 )),
 else= if(condition= ExtraData.Overlay,
 then= ExtraData,
 else= if(condition= Overlay.Length &amp;gt; 4,
 then= ExtraData + dict(Overlay=to_dict(item=Overlay)),
 else= ExtraData 
 )
 )) as ExtraData,
 find_uid(propertystore=PropertyStore)[0].Value as UID,
 find_oldpath(propertystore=PropertyStore)[0].Value as OldPath,
 find_oldsize(propertystore=PropertyStore)[0].Value as OldSize
 FROM parsed
 WHERE if(condition= IocRegex,
 then= format(format='%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\s%s',
 args=[
 StringData.TargetPath,
 StringData.Name,
 StringData.RelativePath,
 StringData.WorkingDir,
 StringData.Arguments,
 StringData.IconLocation,
 LinkTarget.LinkTarget,
 ExtraData.TrackerData.MachineID,
 ExtraData.TrackerData.MacAddress,
 join(array=PropertyStore.Value,sep='\n')
 ]) =~ IocRegex,
 else= True)
 AND NOT if(condition= IgnoreRegex,
 then= format(format='%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\s%s',
 args=[
 StringData.TargetPath,
 StringData.Name,
 StringData.RelativePath,
 StringData.WorkingDir,
 StringData.Arguments,
 StringData.IconLocation,
 LinkTarget.LinkTarget,
 ExtraData.TrackerData.MachineID,
 ExtraData.TrackerData.MacAddress,
 join(array=PropertyStore.Value,sep='\n')
 ]) =~ IgnoreRegex,
 else= False)

 LET sus_cli(data) = dict(
 `Arguments have ticks` = data=~'''\^|\`|[a-z][\'\"]{2}[a-z]''',
 `Arguments have environment variables` = data=~'''\%|\$env:''',
 `Arguments have rare characters` = data=~'''\?\!\~\@''',
 `Arguments have leading space` = data=~ '^ ',
 `Arguments have http strings` = data=~'''(http|ftp)s?://''',
 `Arguments have UNC strings` = data=~'''(\s|^)\\\\[a-z0-9$_.-]+''',
 `Suspicious arguments` = data=~SusArgRegex
 )
 
 -- find largest base64 blob over 10 characters
 LET find_b64(data) = SELECT *
 FROM if(condition=data, 
 then={
 SELECT Base64, len(list=Base64) as Length 
 FROM parse_records_with_regex(accessor='data',file=data, regex='''(?P&amp;lt;Base64&amp;gt;(https?://[^\s]+/)*[A-Za-z0-9+/]{10,}={0,2})''')
 WHERE NOT Base64 =~ '^http' -- Implementing negative regex match: We exclude b64 strings with http prefix.
 ORDER BY Length DESC 
 LIMIT 1
 },
 else=null )
 
 
 LET add_suspicious = SELECT *, dict(
 `Large Size` = SourceFile.Size &amp;gt; SusSize,
 `Startup Path` = SourceFile.OSPath =~ '''\\Startup\\''',
 `Zeroed Headers` = ( ShellLinkHeader.FileSize=0 AND ShellLinkHeader.CreationTime=~'^1601-01' AND len(list=LinkInfo.LinkInfoFlags)=0 ),
 `Hidden window` = ShellLinkHeader.ShowCommand = 'SHOWMINNOACTIVE',
 `Target Changed path` = lowcase(string=LinkInfo.Target.Path) != lowcase(string=OldPath) AND OldPath,
 `Target Changed size` = ( ShellLinkHeader.FileSize - OldSize != 0 ) AND ShellLinkHeader.FileSize AND OldSize,
 `Risky target` = StringData.TargetPath =~ RiskyExe || LinkInfo.Target.Path =~ RiskyExe || LinkTarget.LinkTarget =~ RiskyExe,
 `WebDAV` = LinkInfo.Target.RelativeLink.NetworkProviderType = 'WNNC_NET_DAV',
 `Line break in StringData.Name` = StringData.Name =~ '''\n''',
 `Suspicious argument size` = len(list=StringData.Arguments) &amp;gt; SusArgSize,
 `Environment variable script` = ExtraData.EnvironmentVariable =~ '''\.(bat|cmd|ps1|js|vbs|vbe|py)$''',
 `No Target with environment variable` = ExtraData.EnvironmentVariable AND StringData.Arguments AND NOT (StringData.TargetPath OR StringData.RelativePath),
 `Suspicious hostname` = ExtraData.TrackerData.MachineID AND SusHostnameRegex AND ExtraData.TrackerData.MachineID=~SusHostnameRegex,
 `Created in VM` = ExtraData.TrackerData.MacAddress =~ VmPrefixMAC,
 `Local Admin` = UID='500',
 `Cyrillic Language` = format(format='%s%s',args=[LinkTarget,ExtraData])=~ '''[\x{0400}-\x{04FF}]''',
 `Chinese Language` = format(format='%s%s',args=[LinkTarget,ExtraData])=~ '''[\x{4E00}-\x{9FCC}]''',
 `Korean Language` = format(format='%s%s',args=[LinkTarget,ExtraData])=~ '''[\x{3131}-\x{314e}|\x{314f}-\x{3163}|\x{ac00}-\x{d7a3}]''',
 `Persian Language` = format(format='%s%s',args=[LinkTarget,ExtraData])=~ '''[\x{0600}-\x{06FF}]''',
 `Vietnamese Language` = format(format='%s%s',args=[LinkTarget,ExtraData])=~ '''[\x{0102}\x{0103}\x{0110}\x{0111}\x{01A0}\x{01A1}\x{01AF}\x{01B0}\x{1EA0}-\x{1EF9}]''',
 `CodePage` = ExtraData.CodePage,
 `Has Overlay` = if(condition=ExtraData.Overlay, then=True)
 ) as Suspicious,
 regex_replace(source=base64decode(string=find_b64(data=StringData.Arguments)[0].Base64),re='''[^ -~\s]''',replace='') as ArgumentsDecoded,
 sus_cli(data=StringData.Arguments) as SuspiciousCli
 FROM results
 WHERE if(condition=SuspiciousOnly,
 then= join(array=Suspicious) =~ ''':(true|0x|\d)''' OR join(array=SuspiciousCli) =~ ''':(true|0x|\d)''' OR len(list=ArgumentsDecoded) &amp;gt; 20,
 else= True )

 LET add_suspiciousb64 = SELECT *
 if(condition= len(list=ArgumentsDecoded) &amp;gt; 20, then = dict(`Long Base64`=True) + sus_cli(data=ArgumentsDecoded)) as SuspiciousCliB64
 FROM add_suspicious
 
 LET upload_results = SELECT *,
 upload(file=SourceFile.OSPath) as UploadedLnk
 FROM add_suspiciousb64

 -- finally return rows and remove suspicious attributes that are not true
 SELECT
 SourceFile,
 ShellLinkHeader,
 LinkInfo,
 LinkTarget,
 if(condition= SuspiciousCliB64,
 then= to_dict(item=StringData) + dict(`DecodedBase64`=ArgumentsDecoded),
 else= StringData) as StringData,
 ExtraData,
 to_dict(item={SELECT * FROM items(item=Suspicious) WHERE _value }) + 
 to_dict(item={SELECT * FROM items(item=SuspiciousCli) WHERE _value }) + 
 to_dict(item={SELECT * FROM items(item=SuspiciousCliB64) WHERE _value }) 
 as Suspicious
 FROM if(condition=UploadLnk,
 then= upload_results,
 else= add_suspiciousb64 )

column_types:
 - name: SourceFile.Mtime
 type: timestamp
 - name: SourceFile.Btime
 type: timestamp
 - name: ShellLinkHeader.CreationTime
 type: timestamp
 - name: ShellLinkHeader.AccessTime
 type: timestamp
 - name: ShellLinkHeader.WriteTime
 type: timestamp
&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.LocalHashes.Usn</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.localhashes.usn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.localhashes.usn/</guid><description>&lt;p>This artifact maintains a local (client side) database of file
hashes. It is then possible to query this database using the
Generic.Forensic.LocalHashes.Query artifact&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.LocalHashes.Usn
description: |
 This artifact maintains a local (client side) database of file
 hashes. It is then possible to query this database using the
 Generic.Forensic.LocalHashes.Query artifact

type: CLIENT_EVENT

parameters:
 - name: PathRegex
 description: A regex to match the entire path (you can watch a directory or a file type).
 default: .
 type: regex

 - name: Device
 description: The NTFS drive to watch
 default: C:\\

 - name: HashDb
 description: Name of the local hash database
 default: hashdb.sqlite

 - name: SuppressOutput
 description: If this is set, the artifact does not return any rows to the server but will still update the local database.
 type: bool

 - name: UsnCheckPeriod
 type: int
 description: Dedup all file operations that occur within this period
 default: "10"

precondition: SELECT OS from info() where OS = "windows"

sources:
 - query: |
 -- Dont be too aggressive on the USN watching to conserve CPU usage
 LET NTFS_CACHE_TIME = 30
 LET USN_FREQUENCY = 60

 LET hash_db &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Forensic.LocalHashes.Init(HashDb=HashDb)

 LET path &amp;lt;= hash_db[0].OSPath

 LET _ &amp;lt;= log(message="Will use local hash database " + path)

 LET file_modifications = SELECT Device + OSPath AS OSPath
 FROM watch_usn(device=Device, accessor="ntfs")
 WHERE OSPath =~ PathRegex

 -- The USN journal may contain multiple entries for the same
 -- file modification (e.g. TRUNCATE followed by APPEND and
 -- CLOSE). We therefore dedup all entries that happen within the
 -- period as a single modification.
 LET deduped = SELECT * FROM foreach(row={
 SELECT * FROM clock(period=UsnCheckPeriod, start=0)
 },
 query={
 -- Each time the fifo is accessed we pull all the rows and
 -- dedup the path, then clear the cache.
 SELECT * FROM fifo(
 query=file_modifications,
 max_rows=5000,
 max_age=6000, flush=TRUE)
 GROUP BY OSPath
 })

 -- Stat each file that was changed to get its size and hash
 LET files = SELECT * FROM foreach(row=deduped,
 query={
 SELECT OSPath, Size, hash(path=OSPath).MD5 AS Hash, now() AS Time
 FROM stat(filename=OSPath)
 WHERE Mode.IsRegular
 })

 -- For each file hashed, insert to the local database
 LET insertion = SELECT OSPath, Hash, Size, Time, {
 SELECT * FROM sqlite(file=path,
 query="INSERT into hashes (path, md5, timestamp, size) values (?,?,?,?)",
 args=[OSPath, Hash, Time, Size])
 } AS Insert
 FROM files
 WHERE Insert OR TRUE

 // If output is suppressed do not emit a row, but still update the local database.
 SELECT OSPath, Hash, Size, Time
 FROM insertion
 WHERE NOT SuppressOutput

column_types:
 - name: Time
 type: timestamp

 - name: Hash
 type: hash

 - name: ClientId
 type: client_id

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.PartitionTable</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.partitiontable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.partitiontable/</guid><description>&lt;p>Parses the raw disk for partition tables.&lt;/p>
&lt;p>This artifact also applies magic() check to indicate the type of
partition stored. If a partition contains NTFS filesystems, the
artifact will also list the top level directory. This allows a quick
overview of what type of partition this is (e.g. System OS or data
drive).&lt;/p>
&lt;p>Currently handles only GPT (Most common) and Primary Dos partition
tables&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.PartitionTable
description: |
 Parses the raw disk for partition tables.

 This artifact also applies magic() check to indicate the type of
 partition stored. If a partition contains NTFS filesystems, the
 artifact will also list the top level directory. This allows a quick
 overview of what type of partition this is (e.g. System OS or data
 drive).

 Currently handles only GPT (Most common) and Primary Dos partition
 tables

parameters:
 - name: ImagePath
 default: "\\\\?\\GLOBALROOT\\Device\\Harddisk0\\DR0"
 description: Raw Device for main disk containing partition table to parse.
 - name: Accessor
 default: "raw_file"
 - name: SectorSize
 type: int
 default: 512
 - name: MagicRegex
 type: regex
 description: Filter partitions by their magic
 default: .
 - name: NameRegex
 type: regex
 description: Filter partitions by their magic
 default: .

export: |
 LET MBRProfile = '''[
 ["MBRHeader", 0, [
 ["Magic", 0x1FE, "uint16"],
 ["PrimaryPartitions", 0x1BE, Array, {
 type: "PrimaryPartition",
 count: 4,
 }],
 ]],
 ["PrimaryPartition", 16, [
 ["boot", 0, "uint8"],
 ["ptype", 4, "Enumeration", {
 type: "uint8",
 map: {
 "Unused": 0,
 "Dos Extended": 0x05,
 "Win95 Extended": 0x0f,
 "GPT Safety Partition": 0xee,
 "NTFS / exFAT": 7,
 "Hibernation": 0x12,
 "Linux": 0x83,
 "Linux Swap": 0x82,
 "Linux Extended": 0x85,
 }}],
 ["start_sec", 8, "uint32"],
 ["size_sec", 12, "uint32"],
 ]],
 ["GPTHeader", 0, [
 ["signature", 0, "String", {
 length: 8,
 }],
 ["version", 4, "uint32"],
 ["tab_start_lba", 72, "uint64"],
 ["tab_num", 80, "uint32"],
 ["tab_size", 84, "uint32"],
 ["entries", 0, "Profile", {
 type: "Array",
 offset: "x=&amp;gt;x.tab_start_lba * 512",
 type_options: {
 type: "GPTEntry",
 count: "x=&amp;gt;x.tab_num",
 }}]
 ]],
 ["GPTEntry", 128, [
 ["Offset", 0, "Value", {
 value: "x=&amp;gt;x.StartOf",
 }],
 ["type_guid", 0, GUID],
 ["id_guid", 16, GUID],
 ["start_lba", 32, "uint64"],
 ["end_lba", 40, "uint64"],
 ["flag", 48, "uint64"],
 ["name", 56, "String", {
 encoding: "utf16"
 }]
 ]],
 ["GUID", 16, [
 ["__D1", 0, "uint32"],
 ["__D2", 2, "uint16"],
 ["__D3", 4, "uint16"],
 ["__D4", 6, "String", {"term": "", "length": 2}],
 ["__D5", 8, "String", {"term": "", "length": 6}],
 ["Value", 0, "Value", {
 "value": "x=&amp;gt;format(format='{%08x-%04x-%04x-%02x-%02x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])"
 }]
 ]]
 ]
 '''

sources:
 - query: |
 LET GPTHeader &amp;lt;= parse_binary(filename=ImagePath,
 accessor=Accessor,
 profile=MBRProfile,
 struct="GPTHeader",
 offset=SectorSize)

 LET PrimaryPartitions &amp;lt;= parse_binary(filename=ImagePath,
 accessor=Accessor,
 profile=MBRProfile,
 struct="MBRHeader",
 offset=0)

 -- Display GPT - this is by far the most common one on modern
 -- systems.
 LET GPT = SELECT * FROM if(condition=GPTHeader.signature =~ "EFI",
 then={
 SELECT start_lba * SectorSize AS StartOffset,
 end_lba * SectorSize AS EndOffset,
 humanize(bytes=(end_lba - start_lba) * SectorSize) AS Size,
 name
 FROM foreach(row=GPTHeader.entries)
 WHERE start_lba &amp;gt; 0
 })

 -- Display primary partitions
 LET PARTS = SELECT start_sec * SectorSize AS StartOffset,
 ( start_sec + size_sec ) * SectorSize AS EndOffset,
 humanize(bytes=size_sec * SectorSize) AS Size,
 ptype AS name
 FROM foreach(row=PrimaryPartitions.PrimaryPartitions)
 WHERE start_sec &amp;gt; 0

 -- Handle the correct partition types
 LET GetAccessor(Magic) =
 if(condition=Magic =~ "NTFS", then="raw_ntfs",
 else=if(condition=Magic =~ "FAT", then="fat"))

 LET ListTopDirectory(PartitionPath, Magic) =
 SELECT * FROM if(condition=GetAccessor(Magic=Magic), then={
 SELECT OSPath.Path AS OSPath
 FROM glob(globs="/*",
 accessor=GetAccessor(Magic=Magic),
 root=PartitionPath)
 })

 LET PartitionList = SELECT StartOffset, EndOffset, Size, name,
 magic(accessor="data", path=read_file(
 accessor=Accessor,
 filename=ImagePath,
 offset=StartOffset, length=10240)) AS Magic,

 -- The OSPath to access the partition
 pathspec(
 DelegateAccessor="offset",
 DelegatePath=pathspec(
 DelegateAccessor=Accessor,
 DelegatePath=ImagePath,
 Path=format(format="%d", args=StartOffset))) AS _PartitionPath
 FROM chain(a=PARTS, b=GPT)
 WHERE name =~ NameRegex
 AND Magic =~ MagicRegex

 SELECT StartOffset, EndOffset, Size, name,
 ListTopDirectory(Magic=Magic,
 PartitionPath= _PartitionPath).OSPath AS TopLevelDirectory,
 Magic, _PartitionPath
 FROM PartitionList

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Prefetch</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.prefetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.prefetch/</guid><description>&lt;p>Windows keeps a cache of prefetch files. When an executable is run,
the system records properties about the executable to make it faster
to run next time. By parsing this information we are able to
determine when binaries are run in the past. On Windows10 we can see
the last 8 execution times and creation time (9 potential executions).&lt;/p>
&lt;p>There are several parameter&amp;rsquo;s available for this artifact.&lt;/p>
&lt;ul>
&lt;li>dateAfter enables search for prefetch evidence after this date.&lt;/li>
&lt;li>dateBefore enables search for prefetch evidence before this date.&lt;/li>
&lt;li>binaryRegex enables to filter on binary name, e.g evil.exe.&lt;/li>
&lt;li>hashRegex enables to filter on prefetch hash.&lt;/li>
&lt;/ul>
&lt;p>NOTE: The Prefetch file format is described extensively in libscca
and painstakingly reversed by Joachim Metz (Shouts and Thank you!).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Prefetch
description: |
 Windows keeps a cache of prefetch files. When an executable is run,
 the system records properties about the executable to make it faster
 to run next time. By parsing this information we are able to
 determine when binaries are run in the past. On Windows10 we can see
 the last 8 execution times and creation time (9 potential executions).

 There are several parameter's available for this artifact.
 - dateAfter enables search for prefetch evidence after this date.
 - dateBefore enables search for prefetch evidence before this date.
 - binaryRegex enables to filter on binary name, e.g evil.exe.
 - hashRegex enables to filter on prefetch hash.

 NOTE: The Prefetch file format is described extensively in libscca
 and painstakingly reversed by Joachim Metz (Shouts and Thank you!).

reference:
 - https://www.forensicswiki.org/wiki/Prefetch
 - https://github.com/libyal/libscca/blob/main/documentation/Windows%20Prefetch%20File%20(PF)%20format.asciidoc

parameters:
 - name: prefetchGlobs
 default: C:\Windows\Prefetch\*.pf
 - name: dateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: dateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: binaryRegex
 description: "Regex of executable name."
 type: regex
 - name: hashRegex
 description: "Regex of prefetch hash."
 type: regex
 - name: IncludeFilesAccessed
 description: Include all accessed files
 type: bool

export: |
 LET PrefetchProfile = '''[
 ["Header", 8, [
 ["Signature", 0, "String", {"length": 3}],
 ["UncompressedSize", 4, "unsigned long"],
 ["Data", 8, String, {
 length: "x=&amp;gt;x.UncompressedSize",
 term: "",
 max_length: 10000000,
 }],
 ["Decompressed", 0, "Value", {
 value: "x=&amp;gt;lzxpress_decompress(data=x.Data)"
 }],
 ]],
 ["SCCAHeader", 84, [
 ["Version", 0, "Enumeration", {
 type: "unsigned int",
 choices: {
 "17": "WinXP (17)",
 "23": "Vista (23)",
 "26": "Win8.1 (26)",
 "30": "Win10 (30)",
 "31": "Win11 (31)"
 }
 }],
 ["Signature", 4, "String", {"length": 4}],
 ["FileSize", 12, "unsigned long"],
 ["Executable", 16, "String", {
 encoding: "utf16",
 }],
 ["Hash", 76, "unsigned long"],

 # Hash is followed by a version specific info struct.
 ["Info", 84, "Union", {
 selector: "x=&amp;gt;x.Version",
 choices: {
 "WinXP (17)": "FileInformationWinXP",
 "Vista (23)": "FileInformationVista",
 "Win8.1 (26)": "FileInformationWin81",
 "Win10 (30)": "FileInformationWin10",
 "Win11 (31)": "FileInformationWin10"
 }
 }]
 ]],

 ["FileInformationWinXP", 68, [
 ["__FileMetricsOffset", 0, "unsigned long"],
 ["__NumberOfFileMetrics", 4, "unsigned long"],
 ["__TraceChainsArrayOffset", 8, "unsigned long"],
 ["__NumberOfTraceChains", 12, "unsigned long"],
 ["__FilenameOffset", 16, "unsigned long"],
 ["__FilenameSize", 20, "unsigned long"],
 ["__VolumesInformationOffset", 24, "unsigned long"],
 ["__NumberOfVolumes", 28, "unsigned long"],
 ["__VolumesInformationSize", 32, "unsigned long"],

 # This is realy just one time but we make it an
 # array to be compatible with the others.
 ["LastRunTimes", 36, "Array", {
 "type": "Timestamp",
 "count": 1
 }],
 ["RunCount", 60, "unsigned long"],

 # Metrics offset is absolute.
 ["Metrics", "x=&amp;gt;x.__FileMetricsOffset - x.StartOf", "Array", {
 type: "FileMetricsEntryV17",
 count: "x=&amp;gt;x.__NumberOfFileMetrics",
 }],
 ["VolumeInfo", "x=&amp;gt;x.__VolumesInformationOffset - x.StartOf", "Array", {
 type: "VolumeInformation",
 count: "x=&amp;gt;x.__NumberOfVolumes",
 }],
 ]],

 ["FileInformationVista", 156, [
 ["__FileMetricsOffset", 0, "unsigned long"],
 ["__NumberOfFileMetrics", 4, "unsigned long"],
 ["__TraceChainsArrayOffset", 8, "unsigned long"],
 ["__NumberOfTraceChains", 12, "unsigned long"],
 ["__FilenameOffset", 16, "unsigned long"],
 ["__FilenameSize", 20, "unsigned long"],
 ["__VolumesInformationOffset", 24, "unsigned long"],
 ["__NumberOfVolumes", 28, "unsigned long"],
 ["__VolumesInformationSize", 32, "unsigned long"],

 # This is realy just one time but we make it an
 # array to be compatible with the others.
 ["LastRunTimes", 44, "Array", {
 "type": "Timestamp",
 "count": 1
 }],
 ["RunCount", 68, "unsigned long"],

 # Metrics offset is absolute.
 ["Metrics", "x=&amp;gt;x.__FileMetricsOffset - x.StartOf", "Array", {
 type: "FileMetricsEntryV23",
 count: "x=&amp;gt;x.__NumberOfFileMetrics",
 }],
 ["VolumeInfo", "x=&amp;gt;x.__VolumesInformationOffset - x.StartOf", "Array", {
 type: "VolumeInformation",
 count: "x=&amp;gt;x.__NumberOfVolumes",
 }],
 ]],


 ["FileInformationWin81", 224, [
 ["__FileMetricsOffset", 0, "unsigned long"],
 ["__NumberOfFileMetrics", 4, "unsigned long"],
 ["__TraceChainsArrayOffset", 8, "unsigned long"],
 ["__NumberOfTraceChains", 12, "unsigned long"],
 ["__FilenameOffset", 16, "unsigned long"],
 ["__FilenameSize", 20, "unsigned long"],
 ["__VolumesInformationOffset", 24, "unsigned long"],
 ["__NumberOfVolumes", 28, "unsigned long"],
 ["__VolumesInformationSize", 32, "unsigned long"],

 # This is realy just one time but we make it an
 # array to be compatible with the others.
 ["LastRunTimes", 44, "Array", {
 "type": "Timestamp",
 "count": 8,
 }],
 ["RunCount", 124, "unsigned long"],

 # Metrics offset is absolute.
 ["Metrics", "x=&amp;gt;x.__FileMetricsOffset - x.StartOf", "Array", {
 type: "FileMetricsEntryV23",
 count: "x=&amp;gt;x.__NumberOfFileMetrics",
 }],
 ["VolumeInfo", "x=&amp;gt;x.__VolumesInformationOffset - x.StartOf", "Array", {
 type: "VolumeInformation",
 count: "x=&amp;gt;x.__NumberOfVolumes",
 }],
 ]],

 ["FileInformationWin10", 224, [
 ["__FileMetricsOffset", 0, "unsigned long"],
 ["__NumberOfFileMetrics", 4, "unsigned long"],
 ["__TraceChainsArrayOffset", 8, "unsigned long"],
 ["__NumberOfTraceChains", 12, "unsigned long"],
 ["__FilenameOffset", 16, "unsigned long"],
 ["__FilenameSize", 20, "unsigned long"],
 ["__VolumesInformationOffset", 24, "unsigned long"],
 ["__NumberOfVolumes", 28, "unsigned long"],
 ["__VolumesInformationSize", 32, "unsigned long"],
 ["__TotalDirectoryCount", 36, "unsigned long"],
 ["LastRunTimes", 44, "Array", {
 "type": "Timestamp",
 "count": 8
 }],
 ["__RunCount1", 124, "unsigned long"],
 ["__RunCountPre", 120, "unsigned long"],
 ["__RunCount2", 116, "unsigned long"],
 ["RunCount", 0, Value, {
 value: "x=&amp;gt;if(condition=x.__RunCountPre=0, then=x.__RunCount1, else=x.__RunCount2)",
 }],

 # Metrics offset is absolute.
 ["Metrics", "x=&amp;gt;x.__FileMetricsOffset - x.StartOf", "Array", {
 type: "FileMetricsEntryV30",
 count: "x=&amp;gt;x.__NumberOfFileMetrics",
 }],
 ["VolumeInfo", "x=&amp;gt;x.__VolumesInformationOffset - x.StartOf", "Array", {
 type: "VolumeInformation",
 count: "x=&amp;gt;x.__NumberOfVolumes",
 }],
 ]],

 ["Timestamp", 8, [
 ["Date", 0, "WinFileTime"],
 ["Int", 0, "unsigned long long"]
 ]],

 ["FileMetricsEntryV17", 20, [
 ["__FilenameOffset", 8, "unsigned long"],
 ["__FilenameLength", 12, "unsigned long"],
 ["Filename", 0, "Profile", {
 offset: "x=&amp;gt;x.ParentOf.__FilenameOffset + x.__FilenameOffset",
 type: "String",
 type_options: {
 encoding: "utf16",
 length: 1024,
 }
 }]
 ]],


 ["FileMetricsEntryV23", 32, [
 ["__FilenameOffset", 12, "unsigned long"],
 ["__FilenameLength", 16, "unsigned long"],
 ["__MFTFileReference", 24, "unsigned long"],
 ["Filename", 0, "Profile", {
 offset: "x=&amp;gt;x.ParentOf.__FilenameOffset + x.__FilenameOffset",
 type: "String",
 type_options: {
 encoding: "utf16",
 length: 1024,
 }
 }]
 ]],

 ["FileMetricsEntryV30", 32, [
 ["__FilenameOffset", 12, "unsigned long"],
 ["__FilenameLength", 16, "unsigned long"],
 ["__MFTFileReference", 24, "unsigned long"],
 ["Filename", 0, "Profile", {
 offset: "x=&amp;gt;x.ParentOf.__FilenameOffset + x.__FilenameOffset",
 type: "String",
 type_options: {
 encoding: "utf16",
 length: 1024,
 }
 }]
 ]],

 ["VolumeInformation", 40, [
 ["__DeviceOffset", 0, "unsigned long"],
 ["DeviceName", "x=&amp;gt;x.__DeviceOffset", "String", {
 encoding: utf16,
 length: "x=&amp;gt;x.__DeviceSize * 2",
 }],
 ["__DeviceSize", 4, "unsigned long"],
 ["DeviceCreationTime", 8, "WinFileTime"],
 ["VolumeSerialNumber", 12, "unsigned long"],
 ["VolumeSerialNumberHex", 0, Value, {
 value: "x=&amp;gt;format(format='%#x', args=x.VolumeSerialNumber)",
 }],
 ["__FileReferenceOffset", 20, "unsigned long"],
 ["__FileReferenceDataSize", 24, "unsigned long"],
 ["__DirectoryStringsOffset", 28, "unsigned long"],
 ["__NumDirectoryStrings", 32, "unsigned long"],
 ["__Directories", "x=&amp;gt;x.__DirectoryStringsOffset", "Array", {
 type: "DirectoryName",
 count: "x=&amp;gt;x.__NumDirectoryStrings",
 }],
 ["Directories", 0, Value, {
 value: "x=&amp;gt;x.__Directories.Name"
 }],
 ]],
 ["DirectoryName", "x=&amp;gt;x.Size * 2 + 4", [
 ["Size", 0, "uint8"],
 ["Name", 2, "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.Size * 2"
 }]
 ]]
 ]
 '''

 LET ParsePrefetch(PrefetchFile) = SELECT
 parse_binary(accessor="data", filename=Data,
 profile=PrefetchProfile, struct="SCCAHeader") AS SCCAHeader
 FROM switch(a={
 -- Handle compressed MAM prefetch files.
 SELECT
 parse_binary(filename=PrefetchFile, profile=PrefetchProfile, struct="Header") AS Header,
 parse_binary(filename=PrefetchFile, profile=PrefetchProfile, struct="Header").Decompressed AS Data
 FROM scope()
 WHERE Header.Signature = "MAM"
 },
 b={
 -- Handle uncompressed files
 SELECT read_file(filename=PrefetchFile, length=1024*1024) AS Data
 FROM scope()
 })
 WHERE SCCAHeader.Signature = "SCCA"

sources:
 - query: |
 // Parse prefetch files and apply non time filters
 LET pf = SELECT * FROM foreach(
 row={
 SELECT * FROM glob(globs=prefetchGlobs)
 },
 query={
 SELECT SCCAHeader AS _SCCAHeader,
 SCCAHeader.Executable AS Executable,
 SCCAHeader.FileSize AS FileSize,
 format(format="%#X", args=SCCAHeader.Hash) AS Hash,
 SCCAHeader.Version AS Version,
 filter(list=SCCAHeader.Info.LastRunTimes.Date, condition="x=&amp;gt;x.Unix &amp;gt; 0") AS LastRunTimes,
 SCCAHeader.Info.RunCount AS RunCount,
 OSPath,
 Name AS PrefetchFileName,
 Btime as CreationTime,
 Mtime as ModificationTime,
 filter(list=SCCAHeader.Info.Metrics.Filename, regex=".exe$")[0] AS Binary,
 if(condition= IncludeFilesAccessed, then=SCCAHeader.Info.Metrics.Filename) AS FilesAccessed,
 if(condition= IncludeFilesAccessed, then=SCCAHeader.Info.VolumeInfo) AS VolumeInfo
 FROM ParsePrefetch(PrefetchFile=OSPath)
 WHERE
 if(condition=binaryRegex, then= Executable =~ binaryRegex, else=TRUE) AND
 if(condition=hashRegex, then= Hash =~ hashRegex, else=TRUE)
 })

 // Flattern to enable time filters. Remember VQL is lazy.
 LET executionTimes = SELECT * FROM flatten(
 query = {
 SELECT *,
 OSPath as FilteredPath,
 LastRunTimes as ExecutionTime
 FROM pf
 })
 WHERE
 if(condition=dateAfter, then=ExecutionTime &amp;gt; timestamp(string=dateAfter),
 else=TRUE) AND
 if(condition=dateBefore, then=ExecutionTime &amp;lt; timestamp(string=dateBefore),
 else=TRUE)
 LET creationTimes = SELECT * FROM flatten(
 query = {
 SELECT *,
 OSPath as FilteredPath,
 CreationTime as ExecutionTime
 FROM pf
 WHERE RunCount &amp;gt; 8
 })
 WHERE
 if(condition=dateAfter, then=ExecutionTime &amp;gt; timestamp(string=dateAfter),
 else=TRUE) AND
 if(condition=dateBefore, then=ExecutionTime &amp;lt; timestamp(string=dateBefore),
 else=TRUE)
 GROUP BY ExecutionTime

 // For stdOutput with timefilters we need to group by OSPath
 LET timeFiltered = SELECT FilteredPath
 FROM chain(
 a = { SELECT * FROM executionTimes },
 b = { SELECT * FROM creationTimes })
 GROUP BY FilteredPath

 LET timeFilteredStdOut = SELECT * FROM foreach(
 row={
 SELECT * FROM timeFiltered
 },
 query={
 SELECT *
 FROM pf
 WHERE OSPath = FilteredPath
 })

 SELECT *
 FROM if(condition = (dateBefore OR dateAfter),
 then={ SELECT * FROM timeFilteredStdOut },
 else={ SELECT * FROM pf })


column_types:
 - name: CreationTime
 type: timestamp
 - name: ModificationTime
 type: timestamp

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.ProcessInfo</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.processinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.processinfo/</guid><description>&lt;p>Extract information about processes.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Forensics.ProcessInfo
description: |
 Extract information about processes.

parameters:
 - name: ProcessNameRegex
 default: .
 type: regex

sources:
- query: |
 LET profile = '''[
 [&amp;quot;PEB&amp;quot;,0 , [
 # https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb
 [&amp;quot;ProcessParameters&amp;quot;, 32, &amp;quot;Pointer&amp;quot;, {
 &amp;quot;type&amp;quot;: &amp;quot;ProcessParameters&amp;quot;,
 }],
 ]],
 [&amp;quot;ProcessParameters&amp;quot;, 0, [
 [&amp;quot;ImagePathName&amp;quot;, 96, &amp;quot;UNICODE_STRING&amp;quot;],
 [&amp;quot;CommandLine&amp;quot;, 112, &amp;quot;UNICODE_STRING&amp;quot;],
 [&amp;quot;CurrentDirectory&amp;quot;, 56, &amp;quot;CURDIR&amp;quot;],
 [&amp;quot;EnvironmentSize&amp;quot;, 1008, &amp;quot;uint64&amp;quot;],
 [&amp;quot;Environment&amp;quot;, 128, &amp;quot;Pointer&amp;quot;, {
 &amp;quot;type&amp;quot;: &amp;quot;String&amp;quot;,
 &amp;quot;type_options&amp;quot;: {
 &amp;quot;length&amp;quot;: &amp;quot;x=&amp;gt;x.EnvironmentSize&amp;quot;,
 &amp;quot;encoding&amp;quot;: &amp;quot;utf16&amp;quot;,
 &amp;quot;max_length&amp;quot;: 10000,
 &amp;quot;term&amp;quot;: &amp;quot;&amp;quot;,
 }}]
 ]],
 [&amp;quot;CURDIR&amp;quot;, 0, [
 [&amp;quot;DosPath&amp;quot;, 0, &amp;quot;UNICODE_STRING&amp;quot;],
 ]],
 [&amp;quot;UNICODE_STRING&amp;quot;, 16, [
 [&amp;quot;Length&amp;quot;, 0, &amp;quot;uint16&amp;quot;],
 [&amp;quot;Buffer&amp;quot;, 8, &amp;quot;Pointer&amp;quot;, {
 &amp;quot;type&amp;quot;: &amp;quot;String&amp;quot;,
 &amp;quot;type_options&amp;quot;: {
 &amp;quot;encoding&amp;quot;: &amp;quot;utf16&amp;quot;,
 &amp;quot;length&amp;quot;: &amp;quot;x=&amp;gt;x.Length&amp;quot;,
 &amp;quot;term&amp;quot;: &amp;quot;&amp;quot;,
 }}],
 ]]
 ]'''

 LET ParsePeb(PID) = SELECT Name,
 format(format=&amp;quot;%0#x&amp;quot;, args=PebBaseAddress) AS PebBaseAddress, Pid,
 parse_binary(accessor=&amp;quot;process&amp;quot;,
 filename=format(format=&amp;quot;/%v&amp;quot;, args=PID),
 profile=profile,
 struct=&amp;quot;PEB&amp;quot;,
 offset=PebBaseAddress) AS Data
 FROM pslist(pid=PID)

 -- The Environment string consists of null terminated
 -- lines. Each line contains the variable name followed by an =
 -- sign and then the variable value.
 LET SplitEnv(EnvString) = SELECT parse_string_with_regex(
 string=_value, regex=&amp;quot;^(?P&amp;lt;Name&amp;gt;[^=]*)=(?P&amp;lt;Value&amp;gt;.+)&amp;quot;) AS Line
 FROM foreach(row=split(string=EnvString, sep=&amp;quot;\x00&amp;quot;))
 WHERE Line

 -- Massage the parsed data into a structured table
 LET Calculate(PID) = SELECT Name, PebBaseAddress, Pid,
 Data.ProcessParameters.ImagePathName.Buffer AS ImagePathName,
 Data.ProcessParameters.CommandLine.Buffer AS CommandLine,
 Data.ProcessParameters.CurrentDirectory.DosPath.Buffer AS CurrentDirectory,
 -- Build an Env dict out of the parsed string.
 to_dict(item={
 SELECT Line.Name AS _key, Line.Value AS _value
 FROM SplitEnv(EnvString=Data.ProcessParameters.Environment)
 }) AS Env
 FROM ParsePeb(PID=PID)

 SELECT * FROM foreach(row={
 SELECT Pid FROM pslist()
 WHERE Name =~ ProcessNameRegex
 }, query={
 SELECT * FROM Calculate(PID=Pid)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.RDPCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.rdpcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.rdpcache/</guid><description>&lt;p>This artifact parses, views and enables simplified upload of RDP
cache files.&lt;/p>
&lt;p>By default the artifact will parse .BIN RDPcache files.&lt;/p>
&lt;p>Filters include User regex to target a user and Accessor to target
vss via ntfs_vss.&lt;/p>
&lt;p>Best combined with:&lt;/p>
&lt;ul>
&lt;li>Windows.EventLogs.RDPAuth to collect RDP focused event logs.&lt;/li>
&lt;li>Windows.Registry.RDP to collect user RDP mru and server info&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.RDPCache
author: Matt Green - @mgreen27
description: |
 This artifact parses, views and enables simplified upload of RDP 
 cache files. 
 
 By default the artifact will parse .BIN RDPcache files.
 
 Filters include User regex to target a user and Accessor to target
 vss via ntfs_vss.
 
 Best combined with:
 
 - Windows.EventLogs.RDPAuth to collect RDP focused event logs.
 - Windows.Registry.RDP to collect user RDP mru and server info

reference:
 - https://github.com/ANSSI-FR/bmc-tools
 - https://github.com/BSI-Bund/RdpCacheStitcher

parameters:
 - name: RDPCacheGlob
 default: C:\{{Users,Windows.old\Users}\*\AppData\Local,Documents and Settings\*\Local Settings\Application Data}\Microsoft\Terminal Server Client\Cache\*
 - name: Accessor
 description: Set accessor to use. blank is default, file for api, ntfs for raw, ntfs_vss for vss
 - name: UserRegex
 default: .
 description: Regex filter of user to target. StartOf(^) and EndOf($)) regex may behave unexpectanly.
 type: regex
 - name: ParseCache
 description: If selected will parse .BIN RDPcache files.
 type: bool
 - name: Workers
 default: 100
 type: int
 description: Number of workers to use for ParseCache
 - name: UploadRDPCache
 description: If selected will upload raw cache files. Can be used for offline processing/preservation.
 type: bool

sources:
 - name: TargetFiles
 description: RDP BitmapCache files in scope. 
 query: |
 LET results = SELECT OSPath, Size, Mtime, Atime, Ctime, Btime
 FROM glob(globs=RDPCacheGlob,accessor=Accessor)
 WHERE OSPath =~ UserRegex
 
 LET upload_results = SELECT *, upload(file=OSPath) as CacheUpload
 FROM results
 
 SELECT * FROM if(condition= UploadRDPCache,
 then= upload_results,
 else= results )
 
 - name: Parsed
 description: Parsed RDP BitmapCache files. 
 query: |
 LET PROFILE = '''[
 ["BIN_CONTAINER", 0, [
 [Magic, 0, String, {length: 8, term_hex : "FFFFFF" }],
 [Version, 8, uint32],
 [CachedFiles, 12, Array, {
 "type": "rgb32b",
 "count": 10000,
 "max_count": 2000,
 "sentinel": "x=&amp;gt;x.__Size &amp;lt; 15",
 }],
 ]],
 ["rgb32b","x=&amp;gt;x.__Size",[
 [__key1, 0, uint32],
 [__key1, 4, uint32],
 ["Width", 8, "uint16"],
 ["Height", 10, "uint16"],
 [DataLength, 0, Value,{ value: "x=&amp;gt; 4 * x.Width * x.Height"}],
 [DataOffset, 0, Value,{ "value": "x=&amp;gt;x.StartOf + 12"}],
 ["__Size", 0, Value,{ "value": "x=&amp;gt;x.DataLength + 12"}],
 ["Index", 0, Value,{ "value": "x=&amp;gt;count() - 1 "}],
 ]]]'''
 
 LET parse_rgb32b(data) = SELECT
 _value as Offset,
 _value + 3 as EndOffset,
 len(list=data) as Length,
 data[(_value):(_value + 3)] + unhex(string="FF") as Buffer
 FROM range(step=4,end=len(list=data))
 
 LET fix_bmp(data) = SELECT 
 _value as Offset,
 _value + 255 as EndOffset,
 join(array=data[ (_value):(_value + 256 ) ],sep='') as Buffer
 FROM range(step=256, end= len(list=data) )
 ORDER BY Offset DESC
 
 LET parse_container = SELECT * OSPath,Name,Size as FileSize,
 read_file(filename=OSPath,length=12) as Header,
 parse_binary(filename=OSPath,profile=PROFILE,struct='BIN_CONTAINER') as Parsed
 FROM foreach(row={
 SELECT * FROM glob(globs=RDPCacheGlob,accessor=Accessor) 
 WHERE OSPath =~ '\.bin$'
 AND OSPath =~ UserRegex
 AND NOT IsDir
 })
 
 LET find_index_differential = SELECT *, 0 - Parsed.CachedFiles.Index[0] as IndexDif
 FROM parse_container
 
 LET parse_cache = SELECT * FROM foreach(row=find_index_differential, query={
 SELECT OSPath, IndexDif,
 OSPath.Dirname + ( OSPath.Basename + '_' + format(format='%04v',args= Index + IndexDif ) + '.bmp' ) as BmpName,
 FileSize,Header,Width,Height,DataLength,DataOffset
 FROM foreach(row=Parsed.CachedFiles)
 })
 
 LET extract_data = SELECT *
 FROM foreach(row=parse_cache,query={
 SELECT
 OSPath,BmpName,FileSize,Header,Width,Height,DataLength,DataOffset,
 join(array=parse_rgb32b(data=read_file(filename=OSPath,offset=DataOffset,length=DataLength)).Buffer,sep='') as Data 
 FROM scope()
 }, workers=Workers)
 
 -- change endianess for unint32
 LET pack_lt_l(data) = unhex(string=join(array=[ 
 format(format='%02x',args=unhex(string=format(format='%08x',args=data))[3]), 
 format(format='%02x',args=unhex(string=format(format='%08x',args=data))[2]),
 format(format='%02x',args=unhex(string=format(format='%08x',args=data))[1]),
 format(format='%02x',args=unhex(string=format(format='%08x',args=data))[0]) 
 ],sep=''))
 
 -- build bmp file, adding appropriate header
 LET build_bmp(data,width,height) = join(array=[ 
 "BM",
 pack_lt_l(data=len(list=data) + 122),
 unhex(string="000000007A0000006C000000"),
 pack_lt_l(data=width),
 pack_lt_l(data=height),
 unhex(string="0100200003000000"),
 pack_lt_l(data=len(list=data)),
 unhex(string="000000000000000000000000000000000000FF0000FF0000FF000000000000FF"),
 " niW",
 unhex(string="00" * 36),
 unhex(string="000000000000000000000000"),
 data 
 ], sep='')
 
 SELECT * FROM if(condition= ParseCache,
 then={
 SELECT 
 BmpName, Header, Width, Height, DataLength, DataOffset,
 upload(
 file=build_bmp(data=join(array=fix_bmp(data=Data).Buffer,sep=''), 
 width=Width, height=Height),
 name=BmpName,
 accessor='data' ) as BmpUpload,
 OSPath as SourceFile
 FROM extract_data
 ORDER BY BmpName
 }, 
 else= Null )
 
 
column_types:
 - name: BmpUpload
 type: upload_preview
 - name: CacheUpload
 type: upload_preview
&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.RecentApps</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.recentapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.recentapps/</guid><description>&lt;p>GUI Program execution launched on the Win10 system is tracked in the
RecentApps key.&lt;/p>
&lt;p>NOTE: This artifact is available up from Windows 10 1607 to 1709.
After that, the RecentApps key is no longer populated in the referenced location. Previously existing data is not removed.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.RecentApps
description: |
 GUI Program execution launched on the Win10 system is tracked in the
 RecentApps key.

 NOTE: This artifact is available up from Windows 10 1607 to 1709.
 After that, the RecentApps key is no longer populated in the referenced location. Previously existing data is not removed.

reference:
 - https://www.sans.org/security-resources/posters/windows-forensics-evidence-of/75/download
 - https://www.forensicfocus.com/forums/general/forensics-windows-registry-program-launch-history/
 - https://thinkdfir.com/2020/10/23/when-did-recentapps-go/

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: UserFilter
 default: ""
 description: If specified we filter by this user ID.
 type: regex

 - name: ExecutionTimeAfter
 default: ""
 type: timestamp
 description: If specified only show executions after this time.

 - name: RecentAppsKey
 default: Software\Microsoft\Windows\CurrentVersion\Search\RecentApps\*

 - name: UserHomes
 default: C:\Users\*\NTUSER.DAT

sources:
 - query: |
 LET TMP = SELECT * FROM foreach(
 row={
 SELECT OSPath FROM glob(globs=UserHomes)
 },
 query={
 SELECT AppId, AppPath, LaunchCount,
 timestamp(winfiletime=LastAccessedTime) AS LastExecution,
 timestamp(winfiletime=LastAccessedTime).Unix AS LastExecutionTS,
 parse_string_with_regex(
 string=Key.OSPath,
 regex="/Users/(?P&amp;lt;User&amp;gt;[^/]+)/ntuser.dat").User AS User
 FROM read_reg_key(
 globs=RecentAppsKey,
 root=pathspec(
 DelegateAccessor="ntfs",
 DelegatePath=OSPath),
 accessor="raw_reg")
 })

 LET A1 = SELECT * FROM if(
 condition=UserFilter,
 then={
 SELECT * FROM TMP WHERE User =~ UserFilter
 }, else={ SELECT * FROM TMP})

 SELECT * FROM if(
 condition=ExecutionTimeAfter,
 then={
 SELECT * FROM A1 WHERE LastExecutionTS &amp;gt; ExecutionTimeAfter
 }, else={ SELECT * FROM A1})

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.RecycleBin</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.recyclebin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.recyclebin/</guid><description>&lt;p>This artefact will parse the &lt;code>$I&lt;/code> files found in the &lt;code>$Recycle.Bin&lt;/code> folder to
obtain the time of deletion and the original path and file name.&lt;/p>
&lt;p>Supports Recycle Bin format found in Vista onwards. This will not parse INFO2
files found in the &amp;ldquo;Recycler&amp;rdquo; folder from XP and below.&lt;/p>
&lt;p>The layout of the Recycle Bin folder is in the in the form:&lt;/p>
&lt;pre>&lt;code> C:\$Recycle.Bin\%SID%\
&lt;/code>&lt;/pre>
&lt;p>Each folder contains the following files:&lt;/p>
&lt;pre>&lt;code>$R###### files; the original data
$I###### files; the &amp;quot;Recycled&amp;quot; file's metadata
&lt;/code>&lt;/pre>
&lt;p>The first file begins with the value &lt;code>$R&lt;/code> followed by a random string
– this file contains the actual contents of the recycled file.
The second file begins with &lt;code>$I&lt;/code> and ends in the same string as the
&lt;code>$R&lt;/code> file – this file contains the metadata for that specific file&lt;/p>
&lt;p>Limitations: This artifact uses the API to read available $I data. There may be additional unallocated but readable $I files referenced in the MFT that may be recoverable.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.RecycleBin
description: |
 This artefact will parse the `$I` files found in the `$Recycle.Bin` folder to
 obtain the time of deletion and the original path and file name.

 Supports Recycle Bin format found in Vista onwards. This will not parse INFO2
 files found in the "Recycler" folder from XP and below.

 The layout of the Recycle Bin folder is in the in the form:
 ```
 C:\$Recycle.Bin\%SID%\
 ```
 Each folder contains the following files:
 ```
 $R###### files; the original data
 $I###### files; the "Recycled" file's metadata
 ```
 The first file begins with the value `$R` followed by a random string
 – this file contains the actual contents of the recycled file.
 The second file begins with `$I` and ends in the same string as the
 `$R` file – this file contains the metadata for that specific file

 Limitations: This artifact uses the API to read available $I data. There may be additional unallocated but readable $I files referenced in the MFT that may be recoverable.

author: "Zach Stanford - @svch0st"

reference:
 - https://forensicswiki.xyz/wiki/index.php?title=Windows#Recycle_Bin
 - https://www.magnetforensics.com/blog/artifact-profile-recycle-bin/


parameters:
 - name: RecycleBinGlobs
 default: C:\$Recycle.Bin\**\$I*

 - name: AlsoUpload
 type: bool
 description: Also upload recovered files.

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 SELECT * FROM foreach(
 row={
 SELECT OSPath FROM glob(globs=RecycleBinGlobs)
 },
 query={
 SELECT
 timestamp(winfiletime=DeletedTime) as DeletedTimestamp,
 Name,
 FilePath as OriginalFilePath,
 FileSize,
 OSPath,
 regex_replace(source=OSPath, re="\\\\\\$I", replace="\\$$R") AS RecyclePath,
 if(condition=AlsoUpload, then=upload(
 file=regex_replace(source=OSPath, re="\\\\\\$I", replace="\\$$R"),
 name=FilePath
 )) AS Upload
 FROM parse_recyclebin(filename=OSPath)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.SAM</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.sam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.sam/</guid><description>&lt;p>Parses user account information from the SAM hive.&lt;/p>
&lt;p>Based on Omer Yampel&amp;rsquo;s parser&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.SAM
description: |
 Parses user account information from the SAM hive.

 Based on Omer Yampel's parser

reference:
 - https://github.com/yampelo/samparser/blob/master/samparser.py

parameters:
 - name: SAMPath
 description: Path to the SAM file to parse.
 default: C:/Windows/System32/Config/SAM

export: |
 // Reference: https://github.com/yampelo/samparser/blob/master/samparser.py
 LET Profile = '''
 [
 ["F", 0, [
 ["LastLoginDate", 8, "WinFileTime"],
 ["PasswordResetDate", 24, "WinFileTime"],
 ["PasswordFailDate", 40, "WinFileTime"],
 ["RID", 48, "uint32"],
 ["Flags", 56, "Flags", {
 "type": "uint16",
 "bitmap": {
 "Account Disabled": 0,
 "Home directory required": 1,
 "Password not required": 2,
 "Temporary duplicate account": 3,
 "Normal user account": 4,
 "MNS logon user account": 5,
 "Interdomain trust account": 6,
 "Workstation trust account": 7,
 "Server trust account": 8,
 "Password does not expire": 9,
 "Account auto locked": 10
 }
 }],
 ["FailedLoginCount", 64, "uint16"],
 ["LoginCount", 66, "uint16"],
 ]],
 ["V", 0, [
 ["AccountType", 4, "Enumeration", {
 "type": "uint32",
 "choices": {
 "188" : "Default Admin User",
 "212" : "Custom Limited Acct",
 "176" : "Default Guest Acct"
 }
 }],
 ["__username_offset", 12, "uint32"],
 ["__username_length", 16, "uint32"],
 ["username", "x=&amp;gt;x.__username_offset + 0xcc", "String", {
 "length": "x=&amp;gt;x.__username_length",
 "encoding": "utf16",
 }],
 ["__fullname_offset", 24, "uint32"],
 ["__fullname_length", 28, "uint32"],
 ["fullname", "x=&amp;gt;x.__fullname_offset + 0xcc", "String", {
 "length": "x=&amp;gt;x.__fullname_length",
 "encoding": "utf16",
 }],
 ["__comment_offset", 36, "uint32"],
 ["__comment_length", 40, "uint32"],
 ["comment", "x=&amp;gt;x.__comment_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__comment_length",
 }],

 ["__driveletter_offset", 84, "uint32"],
 ["__driveletter_length", 88, "uint32"],
 ["driveletter", "x=&amp;gt;x.__driveletter_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__driveletter_length",
 }],

 ["__logon_script_offset", 96, "uint32"],
 ["__logon_script_length", 100, "uint32"],
 ["logon_script", "x=&amp;gt;x.__logon_script_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__logon_script_length",
 }],

 ["__profile_path_offset", 108, "uint32"],
 ["__profile_path_length", 112, "uint32"],
 ["profile_path", "x=&amp;gt;x.__profile_path_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__profile_path_length",
 }],

 ["__workstation_offset", 120, "uint32"],
 ["__workstation_length", 124, "uint32"],
 ["workstation", "x=&amp;gt;x.__workstation_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__workstation_length",
 }],

 ["__lmpwd_hash_offset", 156, "uint32"],
 ["__lmpwd_hash_length", 160, "uint32"],
 ["lmpwd_hash", "x=&amp;gt;x.__lmpwd_hash_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__lmpwd_hash_length",
 }],

 ["__ntpwd_hash_offset", 168, "uint32"],
 ["__ntpwd_hash_length", 172, "uint32"],
 ["ntpwd_hash", "x=&amp;gt;x.__ntpwd_hash_offset + 0xcc", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.__ntpwd_hash_length",
 }]
 ]]
 ]
 '''

precondition:
 SELECT OS From info() where OS = 'windows'

sources:
 - name: Parsed
 query: |
 SELECT Key.OSPath.Path AS Key,
 Key.OSPath.DelegatePath AS Hive,
 get(field="F") AS _F,
 get(field="V") AS _V,
 get(field="SupplementalCredentials") AS _SupplementalCredentials,
 parse_binary(accessor="data", filename=F,
 profile=Profile, struct="F") AS ParsedF,
 parse_binary(accessor="data", filename=V,
 profile=Profile, struct="V") AS ParsedV
 FROM read_reg_key(
 globs='SAM\\Domains\\Account\\Users\\0*',
 root=pathspec(DelegatePath=SAMPath),
 accessor="raw_reg")
 WHERE _F AND _V

 - name: CreateTimes
 description: "Show the modified times of the \\SAM\\Domains\\Account\\Users\\Names keys"
 query: |
 SELECT Name AS Username, Mtime AS CreatedTime
 FROM glob(globs='SAM\\Domains\\Account\\Users\\Names\\*',
 root=pathspec(DelegatePath=SAMPath),
 accessor="raw_reg")
 WHERE Data.type =~ "Key"

column_types:
 - name: F
 type: hex
 - name: V
 type: hex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Shellbags</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.shellbags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.shellbags/</guid><description>&lt;p>Windows uses the Shellbag keys to store user preferences for GUI
folder display within Windows Explorer.&lt;/p>
&lt;p>This artifact uses the raw registry parser to inspect various user
registry hives around the filesystem for BagMRU keys. Different OS
versions may have slightly different locations for the MRU keys.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Shellbags
description: |
 Windows uses the Shellbag keys to store user preferences for GUI
 folder display within Windows Explorer.

 This artifact uses the raw registry parser to inspect various user
 registry hives around the filesystem for BagMRU keys. Different OS
 versions may have slightly different locations for the MRU keys.

reference:
 - https://www.sans.org/blog/computer-forensic-artifacts-windows-7-shellbags/

parameters:
 - name: SearchSpecs
 type: csv
 description: Define locations of MRU bags in various registries.
 default: |
 HiveGlob,KeyGlob
 C:/Users/*/NTUSER.dat,\Software\Microsoft\Windows\Shell\BagMRU\**
 C:/Users/*/AppData/Local/Microsoft/Windows/UsrClass.dat,\Local Settings\Software\Microsoft\Windows\Shell\BagMRU\**


imports:
 # Link files use the same internal format as shellbags so we import
 # the profile here.
 - Windows.Forensics.Lnk

sources:
 - query: |
 LET AllHives = SELECT * FROM foreach(row=SearchSpecs,
 query={
 SELECT OSPath AS HivePath, KeyGlob
 FROM glob(globs=HiveGlob)
 WHERE log(message="Inspecting hive " + HivePath)
 })

 LET ShellValues = SELECT * FROM foreach(row=AllHives,
 query={
 SELECT OSPath, Data, ModTime
 FROM glob(
 root=pathspec(DelegatePath=HivePath),
 globs=KeyGlob,
 accessor="raw_reg")
 WHERE Data.type =~ "BINARY" AND OSPath.Basename =~ "^[0-9]+$"
 })

 LET ParsedValues = SELECT
 OSPath.Dirname AS KeyPath,
 parse_binary(profile=Profile, filename=Data.value,
 accessor="data", struct="ItemIDList") as _Parsed,
 base64encode(string=Data.value) AS _RawData, ModTime
 FROM ShellValues

 LET AllResults &amp;lt;= SELECT KeyPath,
 _Parsed.ShellBag.Description AS Description,
 _Parsed, _RawData, ModTime
 FROM ParsedValues

 // Recursive function to join path components together.
 // Limit recursion depth just in case.
 LET FormPath(MRUPath, Description, Depth) = SELECT * FROM if(
 condition=Depth &amp;lt; 20,
 then={SELECT * FROM chain(
 b={
 SELECT MRUPath, Description, Depth,
 -- Signify unknown component as ?
 Description.LongName || Description.ShortName || "?" AS Name
 FROM scope()
 },
 c={
 SELECT * FROM foreach(row={
 SELECT KeyPath, Description, Depth
 FROM AllResults
 WHERE KeyPath = MRUPath.Dirname
 LIMIT 1
 }, query={
 SELECT * FROM FormPath(MRUPath=KeyPath,
 Description=Description, Depth=Depth + 1)
 })
 })
 ORDER BY Depth DESC
 LIMIT 10
 })

 // Now display all hits and their reconstructed path
 LET ReconstructedPath = SELECT ModTime, KeyPath, Description, {
 SELECT * FROM FormPath(
 MRUPath=KeyPath, Description=Description, Depth=0)
 } AS Chain, _RawData, _Parsed
 FROM AllResults

 SELECT ModTime,
 KeyPath AS _OSPath,
 KeyPath.DelegatePath AS Hive,
 KeyPath.Path AS KeyPath, Description,
 join(array=Chain.Name, sep=" -&amp;gt; ") AS Path,
 _RawData, _Parsed
 FROM ReconstructedPath
 ORDER BY Path

column_types:
 - name: _RawData
 type: base64

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.SolarwindsSunburst</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.solarwindssunburst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.solarwindssunburst/</guid><description>&lt;p>&amp;ldquo;SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers.&amp;rdquo;&lt;/p>
&lt;p>We can look for evidence of this dll by first performing a YARA search on the MFT across all drives, then applying an additional FireEye-supplied rule against the file found via MFT.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.SolarwindsSunburst

description: |
 "SolarWinds.Orion.Core.BusinessLayer.dll is a SolarWinds digitally-signed component of the Orion software framework that contains a backdoor that communicates via HTTP to third party servers."

 We can look for evidence of this dll by first performing a YARA search on the MFT across all drives, then applying an additional FireEye-supplied rule against the file found via MFT.

reference:
 - https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html

author: Wes Lambert - @therealwlambert

tools:
 - name: SunburstYARARules
 url: https://raw.githubusercontent.com/fireeye/sunburst_countermeasures/main/all-yara.yar

parameters:
 - name: yaraMFT
 type: yara
 description: "The term we will use to search the MFT"
 default: |
 rule Hit {
 strings:
 $a = "SolarWinds.Orion.Core.BusinessLayer.dll" wide nocase
 condition:
 any of them
 }
 - name: SizeMax
 type: int64
 description: "Entries in the MFT under this size in bytes."
 default: 1200000
 - name: SizeMin
 type: int64
 description: "Entries in the MFT over this size in bytes."
 default: 1000000

sources:
 - query: |
 LET yara_rules &amp;lt;= SELECT read_file(filename=OSPath) AS Rule,
 basename(path=OSPath) AS ToolName
 FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="SunburstYARARules", IsExecutable=FALSE)

 LET ntfs_drives = SELECT OSPath + '/$MFT'as Path, OSPath AS Device
 FROM glob(globs="/*", accessor="ntfs")

 LET MFTEntries = SELECT * from foreach(
 row=ntfs_drives,
 query={ SELECT Device, String.Offset AS Offset,
 String.HexData AS HexData,
 Device + "\\" + parse_ntfs(device=Device,
 mft=String.Offset / 1024).OSPath AS FilePath,
 parse_ntfs(device=Device,
 mft=String.Offset / 1024) AS MFT
 FROM yara(
 rules=yaraMFT, files=Device + "/$MFT",
 end=10000000000,
 number=1000,
 accessor="ntfs")}) WHERE MFT.Size &amp;gt; SizeMin AND MFT.Size &amp;lt; SizeMax

 LET yarasearch = SELECT Rule, String.Offset AS HitOffset,
 str(str=String.Data) AS HitContext,
 FileName,
 File.Size AS Size,
 File.ModTime AS ModTime
 FROM yara(
 rules=yara_rules[0].Rule, key="A",
 files=FilePath)
 LIMIT 1

 LET yarahits = SELECT * FROM if(condition=yara_rules,
 then={
 SELECT *
 FROM foreach(row=MFTEntries,query=yarasearch)
 })

 SELECT *,
 hash(path=FileName) AS Hash
 FROM yarahits

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.SRUM</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.srum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.srum/</guid><description>&lt;p>Process the SRUM database.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.SRUM
description: |
 Process the SRUM database.

reference:
 - https://www.sans.org/cyber-security-summit/archives/file/summit-archive-1492184583.pdf
 - https://cyberforensicator.com/2017/08/06/windows-srum-forensics/

type: client

parameters:
 - name: SRUMLocation
 default: c:/windows/system32/sru/srudb.dat
 - name: accessor
 default: auto
 - name: ExecutableRegex
 default: .
 - name: NetworkConnectionsGUID
 default: "{DD6636C4-8929-4683-974E-22C046A43763}"
 type: hidden
 - name: ApplicationResourceUsageGUID
 default: "{D10CA2FE-6FCF-4F6D-848E-B2E99266FA89}"
 type: hidden
 - name: ExecutionGUID
 default: "{5C8CF1C7-7257-4F13-B223-970EF5939312}"
 type: hidden
 - name: NetworkUsageGUID
 default: "{973F5D5C-1D90-4944-BE8E-24B94231A174}"
 type: hidden
 - name: Upload
 description: Select to Upload the SRUM database file 'srudb.dat'
 type: bool

export: |
 LET ResolveESEId(OSPath, Accessor, Id) = cache(
 name="ESE",
 func=srum_lookup_id(file=OSPath, accessor=Accessor, id=Id),
 key=format(format="%v-%v-%v", args=[OSPath, Accessor, Id]))

imports:
 - Windows.Sys.AllUsers

sources:
 - name: Upload
 precondition:
 SELECT * FROM scope() WHERE Upload
 query: |
 SELECT upload(file=SRUMLocation, accessor=accessor) AS Upload
 FROM scope()

 - name: Execution Stats
 query: |
 LET SRUMFiles &amp;lt;= SELECT OSPath FROM glob(globs=SRUMLocation)

 SELECT AutoIncId AS ID,
 TimeStamp,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=AppId) AS App,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=UserId) AS UserSid,
 LookupSIDCache(SID=srum_lookup_id(
 file=SRUMFiles, accessor=accessor, id=UserId) || "") AS User,
 timestamp(winfiletime=EndTime) AS EndTime,
 DurationMS,
 NetworkBytesRaw
 FROM parse_ese(file=SRUMFiles.OSPath,
 accessor=accessor, table=ExecutionGUID)
 WHERE App =~ ExecutableRegex

 - name: Application Resource Usage
 query: |
 LET SRUMFiles &amp;lt;= SELECT OSPath FROM glob(globs=SRUMLocation)

 SELECT AutoIncId as SRUMId,
 TimeStamp,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=AppId) AS App,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=UserId) AS UserSid,
 LookupSIDCache(SID=srum_lookup_id(
 file=SRUMFiles, accessor=accessor, id=UserId) || "") AS User,
 ForegroundCycleTime,
 BackgroundCycleTime,
 FaceTime,
 ForegroundContextSwitches,
 BackgroundContextSwitches,
 ForegroundBytesRead,
 ForegroundBytesWritten,
 ForegroundNumReadOperations,
 ForegroundNumWriteOperations,
 ForegroundNumberOfFlushes,
 BackgroundBytesRead,
 BackgroundBytesWritten,
 BackgroundNumReadOperations,
 BackgroundNumWriteOperations,
 BackgroundNumberOfFlushes
 FROM parse_ese(file=SRUMFiles.OSPath,
 accessor=accessor, table=ApplicationResourceUsageGUID)
 WHERE App =~ ExecutableRegex

 - name: Network Connections
 query: |
 LET SRUMFiles &amp;lt;= SELECT OSPath FROM glob(globs=SRUMLocation)

 SELECT AutoIncId as SRUMId,
 TimeStamp,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=AppId) AS App,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=UserId) AS UserSid,
 LookupSIDCache(SID=srum_lookup_id(
 file=SRUMFiles, accessor=accessor, id=UserId) || "") AS User,
 InterfaceLuid,
 ConnectedTime,
 timestamp(winfiletime=ConnectStartTime) AS StartTime
 FROM parse_ese(file=SRUMFiles.OSPath,
 accessor=accessor, table=NetworkConnectionsGUID)
 WHERE App =~ ExecutableRegex

 - name: Network Usage
 query: |
 LET SRUMFiles &amp;lt;= SELECT OSPath FROM glob(globs=SRUMLocation)

 SELECT AutoIncId as SRUMId,
 TimeStamp,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=AppId) AS App,
 ResolveESEId(OSPath=SRUMFiles.OSPath,
 Accessor=accessor, Id=UserId) AS UserSid,
 LookupSIDCache(SID=srum_lookup_id(
 file=SRUMFiles, accessor=accessor, id=UserId) || "") AS User,
 UserId,
 BytesSent,
 BytesRecvd,
 InterfaceLuid,
 L2ProfileId,
 L2ProfileFlags
 FROM parse_ese(file=SRUMFiles.OSPath,
 accessor=accessor, table=NetworkUsageGUID)
 WHERE App =~ ExecutableRegex

 notebook:
 - type: vql_suggestion
 name: SRUM Network Usage summary
 template: |
 /*
 # SRUM Network Usage summary
 */
 SELECT Fqdn,
 count() as TotalEntries,
 min(item=TimeStamp) as Earliest,
 max(item=TimeStamp) as Latest,
 App,
 User,UserId,
 sum(item=BytesSent) as TotalSent,
 sum(item=BytesRecvd) as TotalRecvd,
 InterfaceLuid
 FROM source(artifact="Windows.Forensics.SRUM/Network Usage")
 GROUP BY App, User,InterfaceLuid
 ORDER BY TotalSent DESC

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Timeline</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.timeline/</guid><description>&lt;p>Win10 records recently used applications and files in a “timeline”
accessible via the “WIN+TAB” key. The data is recorded in a SQLite
database.&lt;/p>
&lt;h2 id="notes">NOTES:&lt;/h2>
&lt;p>This artifact is deprecated in favor of
Generic.Forensic.SQLiteHunter and will be removed in future&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Timeline
description: |
 Win10 records recently used applications and files in a “timeline”
 accessible via the “WIN+TAB” key. The data is recorded in a SQLite
 database.

 ## NOTES:

 This artifact is deprecated in favor of
 Generic.Forensic.SQLiteHunter and will be removed in future

parameters:
 - name: UserFilter
 default: ""
 description: If specified we filter by this user ID.
 type: regex

 - name: ExecutionTimeAfter
 default: ""
 type: timestamp
 description: If specified only show executions after this time.

 - name: Win10TimelineGlob
 default: C:\Users\*\AppData\Local\ConnectedDevicesPlatform\*\ActivitiesCache.db

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET timeline = SELECT * FROM foreach(
 row={
 SELECT OSPath
 FROM glob(globs=Win10TimelineGlob)
 },
 query={
 SELECT AppId, OSPath, LastModifiedTime
 FROM sqlite(file=OSPath, query="SELECT * FROM Activity")
 })

 LET TMP = SELECT get(
 item=parse_json_array(data=AppId).application,
 member="0") AS Application,
 parse_string_with_regex(
 string=OSPath,
 regex="\\\\L.(?P&amp;lt;User&amp;gt;[^\\\\]+)\\\\").User AS User,
 LastModifiedTime,
 LastModifiedTime.Unix as LastExecutionTS
 FROM timeline

 LET A1 = SELECT * FROM if(
 condition=UserFilter,
 then={
 SELECT * FROM TMP WHERE User =~ UserFilter
 }, else={ SELECT * FROM TMP})

 SELECT * FROM if(
 condition=ExecutionTimeAfter,
 then={
 SELECT * FROM A1 WHERE LastExecutionTS &amp;gt; ExecutionTimeAfter
 }, else={ SELECT * FROM A1})

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.UEFI</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.uefi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.uefi/</guid><description>&lt;p>This artifact enables disk analysis over an EFI System Partition (ESP).&lt;/p>
&lt;p>The artifact queries the specified pysical disk, parses the partition table
to targets the ESPs File Allocation Table (FAT).&lt;/p>
&lt;p>The default artifact returns file information, and PE enrichment as typical EFI files are in the PE format.&lt;/p>
&lt;p>We can looks for anomalities in EFI such as:&lt;/p>
&lt;ul>
&lt;li>unexpected time stamps outside install / OS updates&lt;/li>
&lt;li>unexpected paths (EFI/ is typically the root folder on this partition)&lt;/li>
&lt;li>unexpected metadata: signer non microsoft or known vendor (note we expect non trusted certificates here as the authenticode api does not service ESP binaries)&lt;/li>
&lt;/ul>
&lt;p>NOTE: default returns EFI files, rerun with &lt;code>TargetGlob=**/*&lt;/code> glob and
return all files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.UEFI
author: Matt Green - @mgreen27
description: |
 This artifact enables disk analysis over an EFI System Partition (ESP).

 The artifact queries the specified pysical disk, parses the partition table
 to targets the ESPs File Allocation Table (FAT).

 The default artifact returns file information, and PE enrichment as typical EFI files are in the PE format.

 We can looks for anomalities in EFI such as:

 - unexpected time stamps outside install / OS updates
 - unexpected paths (EFI/ is typically the root folder on this partition)
 - unexpected metadata: signer non microsoft or known vendor (note we expect non trusted certificates here as the authenticode api does not service ESP binaries)

 NOTE: default returns EFI files, rerun with ```TargetGlob=**/*``` glob and
 return all files.

parameters:
 - name: ImagePath
 default: \\.\PhysicalDrive0
 description: Raw Device for main disk containing partition table to parse.
 - name: SectorSize
 type: int
 default: 512
 - name: TargetGlob
 default: "**/*.efi"
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
- query: |
 LET find_efi = SELECT StartOffset,EndOffset,
 Size AS PartitionSize,
 name AS PartitionName
 FROM Artifact.Windows.Forensics.PartitionTable(
 ImagePath=ImagePath, SectorSize=SectorSize)
 WHERE PartitionName =~ "EFI"

 LET find_files = SELECT * FROM foreach(row=find_efi,
 query={
 SELECT *,
 StartOffset as PartitionOffset,
 PartitionSize,
 PartitionName
 FROM glob(globs=TargetGlob,
 accessor="fat",
 root=pathspec(
 DelegateAccessor="offset",
 DelegatePath=pathspec(
 DelegateAccessor="raw_file",
 DelegatePath=ImagePath,
 Path=format(format="%d", args=StartOffset))))
 })

 SELECT
 dict(
 ImagePath=ImagePath,
 PartitionOffset=PartitionOffset,
 PartitionSize=PartitionSize,
 PartitionName=PartitionName
 ) as Partition,
 OSPath.Path as OSPath,
 Size, Mtime, Atime, Ctime, Btime,
 Data.first_cluster as FirstCluster,
 Data.attr AS Attr,
 Data.deleted as IsDeleted,
 Data.short_name AS ShortName,
 hash(accessor='fat',path=OSPath) as Hash,
 magic(accessor='fat',path=OSPath) as Magic,
 parse_pe(accessor='fat',file=OSPath) as PEInfo,
 authenticode(accessor='fat',filename=OSPath) as Authenticode
 FROM find_files

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.UserAccessLogs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.useraccesslogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.useraccesslogs/</guid><description>&lt;p>Parse and collect the SUM database&lt;/p>
&lt;p>UAL is a feature that can help server administrators quantify the
number of unique client requests of roles and services on a local
server.&lt;/p>
&lt;p>The UAL only exists on Windows Server edition 2012 and above.&lt;/p>
&lt;p>NOTE: Unlike other tools, Velociraptor DOES NOT use the JET API to
access the database because it has a builtin ESE parser. This means
that you &lt;strong>do not need to repair&lt;/strong> the files using &lt;code>eseutil.exe&lt;/code> as
is commonly explained in the references below. Velociraptor should
have no trouble parsing these files on the live system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.UserAccessLogs
description: |
 Parse and collect the SUM database

 UAL is a feature that can help server administrators quantify the
 number of unique client requests of roles and services on a local
 server.

 The UAL only exists on Windows Server edition 2012 and above.

 NOTE: Unlike other tools, Velociraptor DOES NOT use the JET API to
 access the database because it has a builtin ESE parser. This means
 that you **do not need to repair** the files using `eseutil.exe` as
 is commonly explained in the references below. Velociraptor should
 have no trouble parsing these files on the live system.

reference:
 - https://advisory.kpmg.us/blog/2021/digital-forensics-incident-response.html
 - https://docs.microsoft.com/en-us/windows-server/administration/user-access-logging/manage-user-access-logging
 - https://www.crowdstrike.com/blog/user-access-logging-ual-overview/

export: |
 LET IPProfile = '''[
 ["IP4", 0, [
 ["A", 0, "uint8"],
 ["B", 1, "uint8"],
 ["C", 2, "uint8"],
 ["D", 3, "uint8"],
 ["IP", 0, "Value", {
 value: "x=&amp;gt; format(format='%d.%d.%d.%d', args=[x.A, x.B, x.C, x.D])"
 }]
 ]],
 ["IP6", 0, [
 ["A", 0, "uint16be"],
 ["B", 2, "uint16be"],
 ["C", 4, "uint16be"],
 ["D", 6, "uint16be"],
 ["E", 8, "uint16be"],
 ["F", 10, "uint16be"],
 ["G", 12, "uint16be"],
 ["H", 14, "uint16be"],
 ["IP", 0, "Value", {
 value: "x=&amp;gt; format(format='%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x', args=[x.A, x.B, x.C, x.D, x.E, x.F, x.G, x.H])"
 }]
 ]]
 ]'''

 -- Format the address - it can be IPv4, IPv6 or something else.
 LET FormatAddress(Address) = if(condition=len(list=Address) = 4,

 -- IPv4 address should be formatted in dot notation
 then=parse_binary(accessor="data",
 filename=Address, struct="IP4",
 profile=IPProfile).IP,

 else=if(condition=len(list=Address)=16,
 -- IPv6 addresses are usually shortened
 then=parse_binary(accessor="data",
 filename=Address, struct="IP6",
 profile=IPProfile).IP,

 -- We dont know what kind of address it is.
 else=format(format="%x", args=Address)))

 -- Get the Clients table from all snapshot files.
 LET SystemIdentity = SELECT OSPath FROM glob(globs=SUMGlob)
 WHERE Name =~ "SystemIdentity.mdb"

 -- Prepare a Role lookup to resolve the role GUID
 LET RoleLookup &amp;lt;= memoize(key="RoleGuid", query={
 SELECT * FROM foreach(row=SystemIdentity, query={
 SELECT * FROM parse_ese(file=OSPath, table="ROLE_IDS")
 WHERE log(message="RoleGuid " + RoleGuid)
 })
 })

parameters:
 - name: SUMGlob
 type: glob
 default: C:/Windows/System32/LogFiles/Sum/*
 description: A glob to file all SUM ESE databases on the system.
 - name: AlsoUpload
 type: bool
 description: If set we also upload the raw files.

sources:
 - name: SystemIdentity
 description: Parse the SystemIdentity database.
 query: |
 SELECT * FROM foreach(row=SystemIdentity, query={
 SELECT *, OSPath AS _OSPath
 FROM parse_ese(file=OSPath, table="SYSTEM_IDENTITY")
 })

 - name: Chained Databases
 query: |
 SELECT * FROM foreach(row=SystemIdentity, query={
 SELECT *, OSPath AS _OSPath
 FROM parse_ese(file=OSPath, table="CHAINED_DATABASES")
 })

 - name: RoleIds
 query: |
 SELECT * FROM foreach(row=SystemIdentity, query={
 SELECT *, OSPath AS _OSPath
 FROM parse_ese(file=OSPath, table="ROLE_IDS")
 })

 - name: Clients
 description: Dump the clients database from all ESE files
 query: |
 LET ContentDatabases = SELECT * FROM glob(globs=SUMGlob)
 WHERE Name =~ ".mdb" AND NOT Name =~ "SystemIdentity"

 -- The clients table has potentially 365 columns (1 per day) so we
 -- format it a bit better by putting the Day* columns in their own dict.
 LET GetClients(OSPath) = SELECT *, OSPath AS _OSPath
 FROM foreach(row={
 SELECT to_dict(item={
 SELECT _key, _value FROM items(item=_value)
 WHERE NOT _key =~ "Day"
 }) +
 dict(Days=to_dict(item={
 SELECT _key, _value FROM items(item=_value)
 WHERE _key =~ "Day"
 })) AS Value
 FROM items(item={
 SELECT *, get(item=RoleLookup, field=RoleGuid).RoleName AS RoleName,
 Address AS RawAddress,
 FormatAddress(Address=unhex(string=Address)) AS Address
 FROM parse_ese(file=OSPath, table="CLIENTS")
 })
 }, column="Value")

 -- Get the Clients table from all snapshot files.
 SELECT * FROM foreach(row=ContentDatabases, query={
 SELECT * FROM GetClients(OSPath=OSPath)
 })

 - name: VIRTUALMACHINES
 query: |
 SELECT * FROM foreach(row=ContentDatabases, query={
 SELECT *, OSPath AS _OSPath
 FROM parse_ese(file=OSPath, table="VIRTUALMACHINES")
 })

 - name: DNS
 query: |
 SELECT * FROM foreach(row=ContentDatabases, query={
 SELECT *, OSPath AS _OSPath
 FROM parse_ese(file=OSPath, table="DNS")
 })

 - name: Uploads
 query: |
 SELECT OSPath, if(condition=AlsoUpload, then=upload(file=OSPath))
 FROM glob(globs=SUMGlob)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Forensics.Usn</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.usn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.forensics.usn/</guid><description>&lt;p>This artifact parses the NTFS USN journal and allows filters to
assist investigative workflow.&lt;/p>
&lt;p>NTFS is a journal filesystem. This means that it maintains a journal
file where intended filesystem changes are written first, then the
filesystem is changed. This journal is called the USN journal in NTFS.&lt;/p>
&lt;p>Velociraptor can parse the USN journal from the filesystem. This
provides an indication of recent file changes. Typically the system
maintains the journal of around 30mb and depending on system
activity this can go back quite some time.&lt;/p>
&lt;p>Use this artifact to determine the times when a file was
modified/added from the journal. This will be present even if the
file was later removed.&lt;/p>
&lt;p>Availible filters are Filename, OSPath, MFT/Parent ID and time bounds.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Forensics.Usn
description: |
 This artifact parses the NTFS USN journal and allows filters to
 assist investigative workflow.

 NTFS is a journal filesystem. This means that it maintains a journal
 file where intended filesystem changes are written first, then the
 filesystem is changed. This journal is called the USN journal in NTFS.

 Velociraptor can parse the USN journal from the filesystem. This
 provides an indication of recent file changes. Typically the system
 maintains the journal of around 30mb and depending on system
 activity this can go back quite some time.

 Use this artifact to determine the times when a file was
 modified/added from the journal. This will be present even if the
 file was later removed.

 Availible filters are Filename, OSPath, MFT/Parent ID and time bounds.

type: CLIENT

parameters:
 - name: Device
 description: The NTFS drive to parse
 default: "C:\\"
 - name: MFTFile
 description: Alternatively provide an MFTFile to use for resolving paths.
 - name: USNFile
 description: Alternatively provide a previously extracted USN file to parse.
 - name: Accessor
 description: The accessor to use.
 - name: AllDrives
 description: Dump USN from all drives and VSC
 type: bool
 - name: FileNameRegex
 description: A regex to match the Filename field.
 default: .
 - name: PathRegex
 description: A regex to match the entire path (you can watch a directory or a file type).
 default: .
 type: regex
 - name: MFT_ID_Regex
 description: A regex to match the MFTId. e.g ^10225$ or ^(10225|232111)$
 default: .
 type: regex
 - name: Parent_MFT_ID_Regex
 description: A regex to match the MFTId. e.g ^10225$ or ^(10225|232111)$
 default: .
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: FastPaths
 type: bool
 description: When set use a faster but less accurate path reassembly algorithm.


sources:
 - precondition:
 SELECT OS From info() where OS =~ 'windows'

 query: |
 -- firstly set timebounds for performance
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=timestamp(epoch=DateAfter), else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=timestamp(epoch=DateBefore), else=timestamp(epoch="2200-01-01"))

 -- If the user specified an MFTFile then ignore the device
 LET Device &amp;lt;= if(condition=MFTFile OR USNFile, then="",
 else=if(condition=Device,
 then=pathspec(parse=Device, path_type="ntfs")))

 LET Parse(MFT, USN, Accessor) = SELECT *
 FROM parse_usn(accessor=Accessor, fast_paths=FastPaths,
 mft_filename=MFT, usn_filename=USN)
 WHERE Filename =~ FileNameRegex
 AND _FileMFTID =~ MFT_ID_Regex
 AND _ParentMFTID =~ Parent_MFT_ID_Regex
 AND Timestamp &amp;lt; DateBeforeTime
 AND Timestamp &amp;gt; DateAfterTime
 AND _Links =~ PathRegex

 LET all_drives = SELECT * FROM foreach(
 row={
 SELECT OSPath[:1] AS Drive
 FROM glob(globs="/*/$Extend/$UsnJrnl:$J", accessor="ntfs")
 WHERE log(message=format(format="Processing Drive %v", args=Drive))
 }, query={
 SELECT Timestamp,
 Filename,
 Drive + OSPath AS OSPath,
 _Links,
 Reason,
 _FileMFTID as MFTId,
 _FileMFTSequence as Sequence,
 _ParentMFTID as ParentMFTId,
 _ParentMFTSequence as ParentSequence,
 FileAttributes,
 SourceInfo,
 Usn
 FROM Parse(MFT=Drive + "$MFT",
 USN=Drive + "$Extend/$UsnJrnl:$J",
 Accessor="ntfs")
 })

 SELECT *
 FROM if(condition=AllDrives, then=all_drives, else={
 SELECT * FROM if(condition=Device AND
 log(message=format(format="Processing Device %v", args=Device)),
 then={
 SELECT Timestamp,
 Filename,
 Device + OSPath AS OSPath,
 _Links,
 Reason,
 _FileMFTID as MFTId,
 _FileMFTSequence as Sequence,
 _ParentMFTID as ParentMFTId,
 _ParentMFTSequence as ParentSequence,
 FileAttributes,
 SourceInfo,
 Usn
 FROM Parse(MFT=Device + "$MFT",
 USN=Device + "$Extend/$UsnJrnl:$J",
 Accessor="ntfs")

 }, else={
 SELECT Timestamp,
 Filename,
 OSPath,
 _Links,
 Reason,
 _FileMFTID as MFTId,
 _FileMFTSequence as Sequence,
 _ParentMFTID as ParentMFTId,
 _ParentMFTSequence as ParentSequence,
 FileAttributes,
 SourceInfo,
 Usn
 FROM Parse(MFT=MFTFile,
 USN=USNFile, Accessor=Accessor)
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.KapeFiles.Extract</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.extract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.extract/</guid><description>&lt;p>The Windows.KapeFiles.Targets artifact collects files into a Zip
file. Zip files can not generally preserve timestamps since they
only have a single timestamp concept. Velociraptor will only record
the modified time in the zip file header itself but all the times
are present in the metadata file:&lt;/p>
&lt;p>&amp;ldquo;Windows.KapeFiles.Targets/All File Metadata.json&amp;rdquo;&lt;/p>
&lt;p>Sometimes, users wish to extract the contents of a collection to a
directory, and run an external tool over the data. Some such
external tools assume the file timestamps (e.g. prefetch files) are
meaningful. In this case we need to preserve the timestamps.&lt;/p>
&lt;p>You can use this artifact to extract the content of a collection
while preserving the timestamps. The artifact will read the metadata
file, unpack the contents of the container and set the timestamps on
the resulting file.&lt;/p>
&lt;p>NOTE: Windows allows 3 timestamps to be set (MAC time except for
Btime), while Linux only allows 2 timestamps (Modified and
Accessed).&lt;/p>
&lt;h2 id="example---command-line-invocation">Example - command line invocation&lt;/h2>
&lt;pre>&lt;code>velociraptor-v0.6.7-linux-amd64 artifacts collect Windows.KapeFiles.Extract --args ContainerPath=Collection-DESKTOP-2OR51GL-2021-07-16_06_56_50_-0700_PDT.zip --args OutputDirectory=/tmp/MyOutput/
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.KapeFiles.Extract
description: |
 The Windows.KapeFiles.Targets artifact collects files into a Zip
 file. Zip files can not generally preserve timestamps since they
 only have a single timestamp concept. Velociraptor will only record
 the modified time in the zip file header itself but all the times
 are present in the metadata file:

 "Windows.KapeFiles.Targets/All File Metadata.json"

 Sometimes, users wish to extract the contents of a collection to a
 directory, and run an external tool over the data. Some such
 external tools assume the file timestamps (e.g. prefetch files) are
 meaningful. In this case we need to preserve the timestamps.

 You can use this artifact to extract the content of a collection
 while preserving the timestamps. The artifact will read the metadata
 file, unpack the contents of the container and set the timestamps on
 the resulting file.

 NOTE: Windows allows 3 timestamps to be set (MAC time except for
 Btime), while Linux only allows 2 timestamps (Modified and
 Accessed).

 ## Example - command line invocation

 ```
 velociraptor-v0.6.7-linux-amd64 artifacts collect Windows.KapeFiles.Extract --args ContainerPath=Collection-DESKTOP-2OR51GL-2021-07-16_06_56_50_-0700_PDT.zip --args OutputDirectory=/tmp/MyOutput/
 ```

type: SERVER

parameters:
 - name: OutputDirectory
 description: Directory to write on (must be set).
 - name: ContainerPath
 description: Path to container (zip file) to unpack.

sources:
 - query: |
 LET MetadataFile = ("results", "Windows.KapeFiles.Targets/All File Metadata.json")
 LET UploadsFile = "uploads.json"

 // Path to the root of the container
 LET RootPathSpec = pathspec(DelegateAccessor="auto",
 path_type="zip",
 DelegatePath=ContainerPath)

 // The pathspec for where to store the file
 LET OutputPathSpec = pathspec()

 // Memoize the metadata stored in the container file so we can
 // quickly extract the file times.
 LET AllFileMetadata &amp;lt;= memoize(
 key="SourceFile",
 query={
 SELECT *
 FROM parse_jsonl(accessor="collector",
 filename=RootPathSpec + MetadataFile)
 })

 LET ALLUploads = SELECT *, RootPathSpec + _Components AS FileUpload,
 OutputPathSpec + _Components[2:] AS Dest,
 get(item=AllFileMetadata,
 field=vfs_path) AS Metadata
 FROM parse_jsonl(accessor="collector",
 filename=RootPathSpec + UploadsFile)
 WHERE Type != "idx"

 SELECT *, upload_directory(
 accessor="collector",
 output=OutputDirectory,
 mtime=Metadata.Modified,
 atime=Metadata.LastAccessed,
 ctime=Metadata.Created,
 name=Dest,
 file=RootPathSpec + _Components) AS UploadedFile
 FROM ALLUploads

&lt;/code>&lt;/pre></description></item><item><title>Windows.KapeFiles.Remapping</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.remapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.remapping/</guid><description>&lt;p>This artifact automates the rebuilding of remapping rules to be
able to easily post process the results of the
Windows.KapeFiles.Targets.&lt;/p>
&lt;p>Use as follows in the flow notebook cell of a collection:&lt;/p>
&lt;pre>&lt;code class="language-vql">LET _ &amp;lt;=
 SELECT * FROM Artifact.Windows.KapeFiles.Remapping(ClientId=ClientId, FlowId=FlowId)

SELECT * FROM Artifact.Windows.System.TaskScheduler()
&lt;/code>&lt;/pre>
&lt;p>NOTE: Not all plugins are enabled in this mode for obvious reasons
(e.g. pslist, wmi etc).&lt;/p>
&lt;p>See &lt;a href="https://docs.velociraptor.app/blog/2022/2022-08-04-post-processing/" target="_blank" >https://docs.velociraptor.app/blog/2022/2022-08-04-post-processing/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.KapeFiles.Remapping
description: |
 This artifact automates the rebuilding of remapping rules to be
 able to easily post process the results of the
 Windows.KapeFiles.Targets.

 Use as follows in the flow notebook cell of a collection:

 ```vql
 LET _ &amp;lt;=
 SELECT * FROM Artifact.Windows.KapeFiles.Remapping(ClientId=ClientId, FlowId=FlowId)

 SELECT * FROM Artifact.Windows.System.TaskScheduler()
 ```

 NOTE: Not all plugins are enabled in this mode for obvious reasons
 (e.g. pslist, wmi etc).

 See https://docs.velociraptor.app/blog/2022/2022-08-04-post-processing/

type: CLIENT

parameters:
 - name: ClientId
 description: The ClientID of the collection we need to remap
 - name: FlowId
 description: The FlowID of the collection

export: |
 -- Get the base path of files in the filestore for this client id
 -- and flow id
 LET GetBasePath(FlowId, ClientId) = regex_transform(
 source="/clients/ClientId/collections/FlowId/uploads",
 map=dict(FlowId=FlowId, ClientId=ClientId))

 -- Get the registry mount for the users
 LET HiveMount(BasePath, Target) = regex_transform(source='''
 - type: mount
 from:
 accessor: raw_reg
 prefix: |-
 {
 "Path": "/",
 "DelegateAccessor": "fs",
 "DelegatePath": "BasePath"
 }
 path_type: registry
 "on":
 accessor: registry
 prefix: Target
 path_type: registry
 ''', map=dict(BasePath=BasePath, Target=Target), key=Target)

 -- Map regular files from the fs accessor to the designated accessor
 LET AccessorMount(Accessor, BasePath) = regex_transform(source='''
 - type: mount
 from:
 accessor: fs
 prefix: "BasePath/AccessorName"
 "on":
 accessor: AccessorName
 prefix: ""
 path_type: AccessorName
 ''', map=dict(BasePath=BasePath, AccessorName=Accessor), key=Accessor)

 -- ShadowMount just copy accessors into the new remapped environment.
 LET ShadowMount(Accessor) = regex_transform(source='''
 - type: shadow
 from:
 accessor: AccessorName
 "on":
 accessor: AccessorName
 ''', map=dict(AccessorName=Accessor), key=Accessor)

 -- Common mounts that are used in all cases.
 LET CommonMount = '''remappings:
 - type: permissions
 permissions:
 - COLLECT_CLIENT
 - FILESYSTEM_READ
 - FILESYSTEM_WRITE
 - READ_RESULTS
 - MACHINE_STATE
 - SERVER_ADMIN
 - type: impersonation
 os: windows
 hostname: Virtual Host
 env:
 - key: SystemRoot
 value: C:\Windows
 - key: WinDir
 value: C:\Windows
 disabled_functions:
 - amsi
 - lookupSID
 - token
 disabled_plugins:
 - users
 - certificates
 - handles
 - pslist
 - interfaces
 - modules
 - netstat
 - partitions
 - proc_dump
 - proc_yara
 - vad
 - winobj
 - wmi
 '''

 -- Build remapping parts by searching for registry hives to mount.
 LET Parts(BasePath) = SELECT * FROM chain(
 a={

 -- Mount all ntuser.dat hives that were fetched. Username is
 -- taken to be containing directory.
 SELECT OSPath,
 HiveMount(BasePath=OSPath.String,
 Target="HKEY_USERS/" + OSPath[-2]) AS Mount
 FROM glob(globs="*/C:/Users/*/ntuser.dat", accessor="fs", root=BasePath)
 WHERE NOT OSPath.Basename =~ "idx$"

 }, b={
 -- Mount the main system registry hives
 SELECT OSPath,
 HiveMount(BasePath=OSPath.String,
 Target="HKEY_LOCAL_MACHINE/" + OSPath[-1]) AS Mount
 FROM glob(globs="*/C:/Windows/System32/Config/{SOFTWARE,SYSTEM}",
 accessor="fs", root=BasePath)
 WHERE NOT OSPath.Basename =~ "idx$"

 }, e={
 SELECT ShadowMount(Accessor=_value) AS Mount
 FROM foreach(row=["raw_reg", "zip", "data", "scope", "gzip"])
 })

 -- Mount all files to be accessible by auto, ntfs and file accessor.
 LET GetRemappingByBase(BasePath) = join(array=CommonMount +
 AccessorMount(BasePath=BasePath, Accessor="auto") +
 AccessorMount(BasePath=BasePath, Accessor="ntfs") +
 AccessorMount(BasePath=BasePath, Accessor="file") +
 Parts(BasePath=BasePath).Mount, sep="")

 LET GetRemapping(FlowId, ClientId) = GetRemappingByBase(
 BasePath=GetBasePath(FlowId=FlowId, ClientId=ClientId))

sources:
 - query: |
 SELECT remap(clear=TRUE, config=GetRemapping) AS Remapping
 FROM scope()

&lt;/code>&lt;/pre></description></item><item><title>Windows.KapeFiles.Targets</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.targets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.kapefiles.targets/</guid><description>&lt;p>Kape is a popular bulk collector tool for triaging a system
quickly. While KAPE itself is not an opensource tool, the logic it
uses to decide which files to collect is encoded in YAML files
hosted on the KapeFiles project
(&lt;a href="https://github.com/EricZimmerman/KapeFiles" target="_blank" >https://github.com/EricZimmerman/KapeFiles&lt;/a>
) and released under an
MIT license.&lt;/p>
&lt;p>This artifact is automatically generated from these YAML files,
contributed and maintained by the community. This artifact only
encapsulates the KAPE &amp;ldquo;Targets&amp;rdquo; - basically a bunch of glob
expressions used for collecting files on the endpoint. We do not
do any post processing these files - we just collect them.&lt;/p>
&lt;p>We recommend that timeouts and upload limits be used
conservatively with this artifact because we can upload really
vast quantities of data very quickly.&lt;/p>
&lt;p>NOTE: This artifact was built from The KapeFile Repository
commit ad2180c dated 2024-10-08T15:00:46-0400.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.KapeFiles.Targets
description: |

 Kape is a popular bulk collector tool for triaging a system
 quickly. While KAPE itself is not an opensource tool, the logic it
 uses to decide which files to collect is encoded in YAML files
 hosted on the KapeFiles project
 (https://github.com/EricZimmerman/KapeFiles) and released under an
 MIT license.

 This artifact is automatically generated from these YAML files,
 contributed and maintained by the community. This artifact only
 encapsulates the KAPE "Targets" - basically a bunch of glob
 expressions used for collecting files on the endpoint. We do not
 do any post processing these files - we just collect them.

 We recommend that timeouts and upload limits be used
 conservatively with this artifact because we can upload really
 vast quantities of data very quickly.

 NOTE: This artifact was built from The KapeFile Repository
 commit ad2180c dated 2024-10-08T15:00:46-0400.

reference:
 - https://www.kroll.com/en/insights/publications/cyber/kroll-artifact-parser-extractor-kape
 - https://github.com/EricZimmerman/KapeFiles

parameters:
 - name: UseAutoAccessor
 description: |
 Uses file accessor when possible instead of ntfs parser - this
 is much faster. Note that when using VSS analysis we have to use
 the ntfs accessor for everything which will be much slower.
 type: bool
 default: Y

 - name: Device
 description: |
 Name of the drive letter to search. You can add multiple drives
 separated with a comma.
 default: "C:,D:"

 - name: VSSAnalysisAge
 type: int
 default: 0
 description: |
 If larger than zero we analyze VSS within this many days
 ago. (e.g 7 will analyze all VSS within the last week). Note
 that when using VSS analysis we have to use the ntfs accessor
 for everything which will be much slower.

 - name: _BasicCollection
 description: "Basic Collection (by Phill Moore): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Event logs Win7+, Event logs XP, Event logs Win7+, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell Transcripts - Observed Location, Prefetch, Rclone Config, RecentFileCache, RECYCLER - WinXP, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Protections, Search, Signons, Storage Sync, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB, User startup folders, System-wide startup folder, Steam Friend List and Username History file, TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, Windows Defender Logs, Windows Defender Event Logs, Zoom plugin (Outlook), eMule Logs and Configuration Files, eMule part.met files, iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: _KapeTriage
 description: "Calls Kape Triage (by Phill Moore): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG AV Logs, AVG Report Logs, AVG Persistent Logs, AVG FileInfo DB, AVG lsdbj2 JSON, Action1 Client Application logs, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - ProgramData - *.conf, AnyDesk Videos, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Chat Logs - User Profile, AppCompat PCA Folder, Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Avast AV Logs (XP), Avast AV Logs, Avast AV User Logs, Avast AV Index, Avast Persistent Data Logs, Avast Icarus Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Box Drive Application Metadata, Box Sync Application Metadata, Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Sessions Folder, Login Data, Network Action Predictor, Network Persistent State, Preferences, Quota Manager, Reporting and NEL, Shortcuts, Publisher Info DB/Brave Rewards, Top Sites, Visited Links, Web Data, Secure Preferences, Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Sessions Folder, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Windows Protect Folder, Chrome Snapshots Folder, SYSTEM Chrome History, ComboFix, Cybereason Anti-Ransomware Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cybereason Application Control and NGAV Logs, Cylance ProgramData Logs, Cylance Optics Logs, Cylance Program Files Logs, DWAgent Log Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata, ESET NOD32 AV Logs (XP), ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine, Edge folder, Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Sessions Folder, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Windows Protect Folder, Edge Chromium Extension Files, Event logs Win7+, Event logs XP, Event logs Win7+, Exchange TransportRoles log files, F-Secure Logs, F-Secure User Logs, FileZilla Log Files, Addons, Bookmarks, Bookmarks, Cookies, Cookies, Downloads, Extensions, Favicons, Form history, Permissions, Places, Protections, Search, Signons, Storage Sync, Webappstore, Password, Password, Password, Preferences, Sessionstore, Sessionstore Folder, Places XP, Downloads XP, Form history XP, Cookies XP, Signons XP, Webappstore XP, Favicons XP, Addons XP, Search XP, Password XP, Password XP, Password XP, Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata, HexChat Chat Logs, HitmanPro Logs, HitmanPro Alert Logs, IIS log files, ISLOnline Logs - Sessions - *.out, ISLOnline Logs - Session Configurations, ISL AlwaysOn Logs - Sessions List, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn - App Logs, ISL Light Logs - Sessions, ISL AlwaysOn - Email Configuration, ISL AlwaysOn - Configuration, ITarian, ITarian, Comodo, ImgBurn - Application Log File, Index.dat History, Index.dat History subdirectory, Index.dat cookies, Index.dat UserData, Index.dat Office XP, Index.dat Office, Local Internet Explorer folder, Roaming Internet Explorer folder, IE 9/10 History, IE 9/10 Cookies, IE 9/10 Download History, IE 11 Metadata, Kali WSL ext4.vhdx, Kaseya Live Connect Logs (XP), Kaseya Live Connect Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Endpoint Service Logs, Kaseya Agent Service Log, Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, LNK Files from C:\ProgramData, Error logging, LogMeIn ProgramData Logs, Macrium Reflect, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Service Logs, MalwareBytes Anti-Malware Scan Logs, Mattermost - Chat Logs, McAfee Desktop Protection Logs XP, McAfee Desktop Protection Logs, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, Small Memory Dump directory, MeshAgent .msh (configuration) file, Microsoft OneNote - RecentSearches, Nessus Logs, Net Monitor Server Logs, Net Monitor Server Data, Net Monitor Server Config, Net Monitor Server Temp Folder, Net Monitor Client Logs, One Commander - Other Configuration Files, OneDrive Metadata Logs, OpenVPN Client Config, Opera - Local Folder, PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell Transcripts - Observed Location, Prefetch, ProtonVPN - Connection Logs, Puffin - data.db, Puffin - Autocomplete Data, Puffin - Password Forms Data, Puffin - Password (Encrypted), Puffin - Subscription Data, Puffin - Cookies, Qlik Sense Logs, RDP Cache Files, Windows.old RDP Cache Files, RDP Jumplist Files, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, Radmin Server 32bit Log, Radmin Server 64bit Log, Radmin Server 32bit Chats, Radmin Server 64bit Chats, Radmin Viewer Chats, Rclone Config, RecentFileCache, RECYCLER - WinXP, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, UsrClass.dat registry transaction files, RemoteUtilities Connection Logs, Chrome Trust Tokens, Chrome Trust Tokens, Chrome SyncData Database, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Protections, Search, Signons, Storage Sync, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB, ActivitiesCache.db, Update Store.db, Bitdefender SQLite DB Files, EventTranscript.db, EventTranscript.db, at SchedLgU.txt, at SchedLgU.txt, XML, ScreenConnect Session Database, ScreenConnect User Config, Slack Storage, Snagit - Captures, Snip &amp;amp; Sketch, Sophos Logs (XP), Sophos Logs, Sophos Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings, SpeedCommander - .ini File, Splashtop Log Files, Splashtop Log Files in ProgramData, User startup folders, System-wide startup folder, Steam Login Metadata file, Steam Friend List and Username History file, Steam User Avatar files, Steam Game Tray Icon files, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Logs, Syscache transaction files, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Tablacus Explorer - window1.xml, TeamViewer Connection Logs, TotalAV Logs, Total Commander - .ini File, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal, Total Commander - Frequent Directory Listing, Total Commander - FTP Logs, TreeSize - ScanHistory.XML, Trend Micro Logs, Setupapi.log Win7+, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/fstab, VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (up to v4), VLC Recently Opened Files, VLC Recorded Files, VMware - Virtual Machine Inventory, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), RealVNC Log, RealVNC Log, TightVNC Application Logs, Viber Config Database, Viber Users Data Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Thumbnails Cache, VirtualBox VM configs, VirtualBox VM backup configs, VirtualBox Logs, VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox, VHD, VHDX, VDI, Vivaldi Cookies, Vivaldi Network Persistent State, Vivaldi Favicons, Vivaldi History, Vivaldi Sessions Folder, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Preferences, Vivaldi Top Sites, SECURITY registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), WindowsIndexSearch, GatherLogs, Network setting files, Windows 10 Notification DB, Windows 10 Notification DB, MigLog.xml, Setupact.log, HumanReadable.xml, FolderMoveLog.txt, Update Store.db, Windows Power Diagnostics, DNS Netlogon files, DNS files, DHCP files, Diagnostic Logs for WSA, App download artifacts (PNG), App download artifacts (ICO), Appcompatdb.json, userdata.vhdx, Legacy .rbs files relating to Windows Telemetry and Diagnostics, Xeox RMM Client Application logs, Yandex Cookies, Yandex Network Persistent State, Zoom plugin (Outlook), eMule Logs and Configuration Files, eMule part.met files, iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: _SANS_Triage
 description: "SANS Triage Collection (by Mark Hallman): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG AV Logs, AVG Report Logs, AVG Persistent Logs, AVG FileInfo DB, AVG lsdbj2 JSON, Action1 Client Application logs, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - ProgramData - *.conf, AnyDesk Videos, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Chat Logs - User Profile, AppCompat PCA Folder, Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Avast AV Logs (XP), Avast AV Logs, Avast AV User Logs, Avast AV Index, Avast Persistent Data Logs, Avast Icarus Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, BITS files, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Box Drive Application Metadata, Box Sync Application Metadata, Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Sessions Folder, Login Data, Network Action Predictor, Network Persistent State, Preferences, Quota Manager, Reporting and NEL, Shortcuts, Publisher Info DB/Brave Rewards, Top Sites, Visited Links, Web Data, Secure Preferences, Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Sessions Folder, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Windows Protect Folder, Chrome Snapshots Folder, SYSTEM Chrome History, Cisco Jabber Database, ComboFix, Cybereason Anti-Ransomware Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cybereason Application Control and NGAV Logs, Cylance ProgramData Logs, Cylance Optics Logs, Cylance Program Files Logs, DWAgent Log Files, Discord Cache Files, Discord Local Storage LevelDB Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata, ESET NOD32 AV Logs (XP), ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine, Edge folder, Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Sessions Folder, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Windows Protect Folder, Edge Chromium Extension Files, Event logs Win7+, Event logs XP, Event logs Win7+, Event logs Win7+, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WMI Trace Logs, WMI Trace Logs, SleepStudy Trace Logs, SleepStudy Trace Logs, Energy-NTKL Trace Logs, Exchange TransportRoles log files, F-Secure Logs, F-Secure User Logs, FileZilla Log Files, Addons, Bookmarks, Bookmarks, Cookies, Cookies, Downloads, Extensions, Favicons, Form history, Permissions, Places, Protections, Search, Signons, Storage Sync, Webappstore, Password, Password, Password, Preferences, Sessionstore, Sessionstore Folder, Places XP, Downloads XP, Form history XP, Cookies XP, Signons XP, Webappstore XP, Favicons XP, Addons XP, Search XP, Password XP, Password XP, Password XP, Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata, Google Earth My Places Backup file (XP), Group Policy Files, Computer Group Policy files, User Group Policy files, Local Group Policy INI Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Startup/Shutdown Scripts, HeidiSQL (tabs.ini), HexChat Chat Logs, HitmanPro Logs, HitmanPro Alert Logs, IIS log files, ISLOnline Logs - Sessions - *.out, ISLOnline Logs - Session Configurations, ISL AlwaysOn Logs - Sessions List, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn - App Logs, ISL Light Logs - Sessions, ISL AlwaysOn - Email Configuration, ISL AlwaysOn - Configuration, ITarian, ITarian, Comodo, ITarian, ImgBurn - Application Log File, Index.dat History, Index.dat History subdirectory, Index.dat cookies, Index.dat UserData, Index.dat Office XP, Index.dat Office, Local Internet Explorer folder, Roaming Internet Explorer folder, IE 9/10 History, IE 9/10 Cookies, IE 9/10 Download History, IE 11 Metadata, Kali WSL ext4.vhdx, Kaseya Live Connect Logs (XP), Kaseya Live Connect Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Endpoint Service Logs, Kaseya Agent Service Log, Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, LNK Files from C:\ProgramData, Error logging, LogMeIn ProgramData Logs, Macrium Reflect, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Service Logs, MalwareBytes Anti-Malware Scan Logs, ManageEngine ADSelfService Plus Log Files, Mattermost - Chat Logs, McAfee Desktop Protection Logs XP, McAfee Desktop Protection Logs, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, Small Memory Dump directory, MeshAgent .msh (configuration) file, Microsoft OneNote - RecentSearches, Microsoft Sticky Notes - 1607 and later, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Cache, Microsoft Teams Config, Multi Commander - Log File, .NET CLR UsageLogs (user-scoped), Nessus Logs, Net Monitor Server Logs, Net Monitor Server Data, Net Monitor Server Config, Net Monitor Server Temp Folder, Net Monitor Client Logs, One Commander - Other Configuration Files, OneDrive Metadata Logs, OpenVPN Client Config, Opera - Local Folder, PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell ISE - User Config, PowerShell Transcripts - Default Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, Prefetch, ProtonVPN - Connection Logs, Puffin - data.db, Puffin - Autocomplete Data, Puffin - Password Forms Data, Puffin - Password (Encrypted), Puffin - Subscription Data, Puffin - Cookies, Qlik Sense Logs, RDP Cache Files, Windows.old RDP Cache Files, RDP Jumplist Files, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, Radmin Server 32bit Log, Radmin Server 64bit Log, Radmin Server 32bit Chats, Radmin Server 64bit Chats, Radmin Viewer Chats, Rclone Config, RecentFileCache, RECYCLER - WinXP, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, UsrClass.dat registry transaction files, RemoteUtilities Connection Logs, Chrome Trust Tokens, Chrome Trust Tokens, Chrome SyncData Database, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Protections, Search, Signons, Storage Sync, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB, ActivitiesCache.db, Update Store.db, Bitdefender SQLite DB Files, EventTranscript.db, EventTranscript.db, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SUM Database (.mdb files), SUPERAntiSpyware Logs, SUSE Linux Enterprise Server WSL /etc/passwd, SUSE Linux Enterprise Server WSL /etc/group, SUSE Linux Enterprise Server WSL /etc/shadow, SUSE Linux Enterprise Server WSL /etc/timezone, SUSE Linux Enterprise Server WSL /etc/hostname, SUSE Linux Enterprise Server WSL /etc/hosts, SUSE Linux Enterprise Server WSL /etc/bash.bashrc, SUSE Linux Enterprise Server WSL /etc/profile, SUSE Linux Enterprise Server WSL .bash_history, SUSE Linux Enterprise Server WSL .bashrc, SUSE Linux Enterprise Server WSL .profile, SUSE Linux Enterprise Server WSL ext4.vhdx, at SchedLgU.txt, at SchedLgU.txt, XML, ScreenConnect Session Database, ScreenConnect User Config, Slack Storage, Snagit - Captures, Snip &amp;amp; Sketch, Sophos Logs (XP), Sophos Logs, Sophos Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings, SpeedCommander - .ini File, Splashtop Log Files, Splashtop Log Files in ProgramData, User startup folders, System-wide startup folder, Steam Login Metadata file, Steam Friend List and Username History file, Steam User Avatar files, Steam Game Tray Icon files, Steam Startup Times Log file, Steam Game Image files, Steam Friend List and Username History file, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Logs, Syscache transaction files, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Tablacus Explorer - window1.xml, TeamViewer Connection Logs, TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, TotalAV Logs, Total Commander - .ini File, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal, Total Commander - Frequent Directory Listing, Total Commander - FTP Logs, TreeSize - ScanHistory.XML, Trend Micro Logs, Setupapi.log Win7+, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/fstab, Ubuntu WSL /etc/passwd, Ubuntu WSL /etc/group, Ubuntu WSL /etc/shadow, Ubuntu WSL /etc/timezone, Ubuntu WSL /etc/hostname, VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (up to v4), VLC Recently Opened Files, VLC Recorded Files, VMware - Virtual Machine Inventory, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), RealVNC Log, RealVNC Log, TightVNC Application Logs, Viber Config Database, Viber Users Data Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Thumbnails Cache, VirtualBox VM configs, VirtualBox VM backup configs, VirtualBox Logs, VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox, VHD, VHDX, VDI, VMDK, VSCode Opened Files, VSCode Workspaces, VSCode User extensions, Vivaldi Cookies, Vivaldi Network Persistent State, Vivaldi Favicons, Vivaldi History, Vivaldi Sessions Folder, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Preferences, Vivaldi Top Sites, Vivaldi Bookmarks, Vivaldi Visited Links, Windows Defender Logs, Windows Defender Event Logs, SECURITY registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), WindowsIndexSearch, GatherLogs, Network setting files, Windows 10 Notification DB, Windows 10 Notification DB, MigLog.xml, Setupact.log, HumanReadable.xml, FolderMoveLog.txt, Update Store.db, Windows Power Diagnostics, DNS Netlogon files, DNS files, DHCP files, Diagnostic Logs for WSA, App download artifacts (PNG), App download artifacts (ICO), Appcompatdb.json, userdata.vhdx, Legacy .rbs files relating to Windows Telemetry and Diagnostics, XYplorer - AutoBackup folder, XYplorer - .dat files, Xeox RMM Client Application logs, Yandex Cookies, Yandex Network Persistent State, Zoom plugin (Outlook), eMule Logs and Configuration Files, eMule part.met files, iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: _Boot
 description: "$Boot (by Eric Zimmerman): $Boot"
 type: bool
 - name: _J
 description: "$J (by Eric Zimmerman and Andrew Rathbun): $J, $Max, $J, $Max"
 type: bool
 - name: _LogFile
 description: "$LogFile (by Eric Zimmerman): $LogFile"
 type: bool
 - name: _MFT
 description: "$MFT (by Eric Zimmerman): $MFT"
 type: bool
 - name: _MFTMirr
 description: "$MFTMirr (by Teo Kia Meng): $MFTMirr"
 type: bool
 - name: _SDS
 description: "$SDS (by Eric Zimmerman and Andrew Rathbun): $SDS, $SDS"
 type: bool
 - name: _T
 description: "$T (by Eric Zimmerman and Andrew Rathbun): $T, $T"
 type: bool
 - name: 1Password
 description: "1Password Password Manager (by Matt Dawson): 1Password Database, 1Password Backup Databases, 1Password Logs"
 type: bool
 - name: 4KVideoDownloader
 description: "4K Video Downloader (by Andrew Rathbun): 4K Video Downloader, 4K Video Downloader+"
 type: bool
 - name: AVG
 description: "AVG Antivirus Data (by Kirtan Shah and Dhiral Panjwani): AVG AV Logs (XP), AVG AV Report Logs (XP), AVG AV Logs, AVG Report Logs, AVG Persistent Logs, AVG FileInfo DB, AVG lsdbj2 JSON"
 type: bool
 - name: AceText
 description: "AceText (by Andrew Rathbun): AceText - Clipboard History"
 type: bool
 - name: AcronisTrueImage
 description: "Acronis True Image (by Andrew Rathbun): Acronis True Image - Logs, Acronis True Image - Database Files, Acronis True Image - Scripts Folder"
 type: bool
 - name: Action1
 description: "Action1 Application Logs (by Andrew Skatoff @DFIR_TNT): Action1 Client Application logs"
 type: bool
 - name: ActiveDirectoryNTDS
 description: "Active Directory NTDS (by Zawadi Done): NTDS"
 type: bool
 - name: ActiveDirectorySysvol
 description: "Active Directory Sysvol (by Zawadi Done): SYSVOL"
 type: bool
 - name: AgentRansack
 description: "Agent Ransack - Free File Searching Utility (by Andrew Rathbun): Agent Ransack Config Logs, Agent Ransack CrashReports Logs, Agent Ransack IndexLog Logs, Agent Ransack Logs"
 type: bool
 - name: Amcache
 description: "Amcache.hve (by Eric Zimmerman): Amcache, Amcache, Amcache transaction files, Amcache transaction files"
 type: bool
 - name: Ammyy
 description: "Ammyy Data (by Drew Ervin): Ammyy Program Data"
 type: bool
 - name: Antivirus
 description: "Antivirus (by Andrew Rathbun): AVG AV Logs (XP), AVG AV Report Logs (XP), AVG AV Logs, AVG Report Logs, AVG Persistent Logs, AVG FileInfo DB, AVG lsdbj2 JSON, Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Avast AV Logs (XP), Avast AV Logs, Avast AV User Logs, Avast AV Index, Avast Persistent Data Logs, Avast Icarus Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, ComboFix, Cybereason Anti-Ransomware Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cybereason Application Control and NGAV Logs, Cylance ProgramData Logs, Cylance Optics Logs, Cylance Program Files Logs, ESET NOD32 AV Logs (XP), ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine, Edge Chromium Extension Files, Exchange TransportRoles log files, F-Secure Logs, F-Secure User Logs, HexChat Chat Logs, HitmanPro Logs, HitmanPro Alert Logs, Macrium Reflect, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Service Logs, MalwareBytes Anti-Malware Scan Logs, Mattermost - Chat Logs, McAfee Desktop Protection Logs XP, McAfee Desktop Protection Logs, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, Microsoft OneNote - RecentSearches, Chrome Trust Tokens, Edge Preferences, EventTranscript.db, EventTranscript.db, at SchedLgU.txt, at SchedLgU.txt, XML, Snip &amp;amp; Sketch, Sophos Logs (XP), Sophos Logs, Sophos Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings, SpeedCommander - .ini File, Splashtop Log Files, Splashtop Log Files in ProgramData, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Logs, Syscache transaction files, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Total Commander - Frequent Directory Listing, Total Commander - FTP Logs, TreeSize - ScanHistory.XML, Trend Micro Logs, VDI, Vivaldi Cookies, Vivaldi Network Persistent State, Vivaldi Favicons, Vivaldi History, Vivaldi Sessions Folder, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Preferences, Vivaldi Top Sites"
 type: bool
 - name: AnyDesk
 description: "AnyDesk (by Andrew Rathbun, Scott Hanson, and Nicole Jao): AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - ProgramData - *.conf, AnyDesk Videos, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Chat Logs - User Profile"
 type: bool
 - name: ApacheAccessLog
 description: "Apache Access Log (by Hadar Yudovich): Apache Access Log"
 type: bool
 - name: AppCompatPCA
 description: "AppCompat PCA Folder (by Andrew Rathbun): AppCompat PCA Folder"
 type: bool
 - name: AppData
 description: "AppData (by Phill Moore): AppData"
 type: bool
 - name: AppXPackages
 description: "AppXPackages (by Nisarg Suthar): WindowsApps for AppX, SystemApps for AppX, UserSpecificPackages for AppX, AppRepository for AppX, ProgramData Packages for AppX"
 type: bool
 - name: ApplicationEvents
 description: "Windows Application Event Log (by Drew Ervin): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+"
 type: bool
 - name: AsperaConnect
 description: "Aspera Connect Log Files (by Dennis Reneau): Aspera Client Logs, Aspera Server Logs"
 type: bool
 - name: AteraAgent
 description: "AteraAgent (by Andrew Rathbun): AteraAgent .ini files, AteraAgent Logs, AteraAgent Logs, AteraAgent Logs, AteraAgent Logs"
 type: bool
 - name: Avast
 description: "Avast Antivirus Data (by Drew Ervin and Dhiral Panjwani): Avast AV Logs (XP), Avast AV Logs, Avast AV User Logs, Avast AV Index, Avast Persistent Data Logs, Avast Icarus Logs"
 type: bool
 - name: AviraAVLogs
 description: "Avira Logs (by Fabian Murer and Dhiral Panjwani): Avira Activity Logs, Avira Security Logs, Avira VPN Logs"
 type: bool
 - name: BCD
 description: "Boot Configuration Files (by Troy Larson): BCD, BCD Logs"
 type: bool
 - name: BITS
 description: "Microsoft BITS (Background Intelligent Transer Service) persistent files (by Jos Clephas): BITS files"
 type: bool
 - name: BitTorrent
 description: "BitTorrent (by Banaanhangwagen): TorrentClients - BitTorrent"
 type: bool
 - name: Bitdefender
 description: "Bitdefender Antivirus Data (by Drew Ervin, Ahmed Elshaer): Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files"
 type: bool
 - name: BoxDrive_Metadata
 description: "Box Cloud Storage Metadata (by Chad Tilbury): Box Drive Application Metadata, Box Sync Application Metadata"
 type: bool
 - name: BoxDrive_UserFiles
 description: "Box Cloud Storage Files (by Chad Tilbury): Box Drive User Files, Box Sync User Files"
 type: bool
 - name: BraveBrowser
 description: "Brave Browser (by Cassie Doemel): Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Sessions Folder, Login Data, Network Action Predictor, Network Persistent State, Preferences, Quota Manager, Reporting and NEL, Shortcuts, Publisher Info DB/Brave Rewards, Top Sites, Visited Links, Web Data, Secure Preferences"
 type: bool
 - name: BrowserCache
 description: "Browser Caches (by Bjorn Vanhaeren): Chrome Cache Folder, Chromium Edge Cache Folder, Firefox Cache Folder, IE 9/10 Cache, IE Index.dat temp internet files, IE 11 Cache, Edge WebcacheV01.dat, Brave Cache Folder"
 type: bool
 - name: CertUtil
 description: "Certutil (by NVISO (@NVISOsecurity), 2thewes): System CryptnetUrlCache, System WOW64 CryptnetUrlCache, User CryptnetUrlCache, INetCache"
 type: bool
 - name: Chrome
 description: "Chrome (by Eric Zimmerman and Andrew Rathbun): Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Sessions Folder, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Windows Protect Folder, Chrome Snapshots Folder, SYSTEM Chrome History"
 type: bool
 - name: ChromeExtensions
 description: "Chrome Extension Files (by piesecurity): Chrome Extension Files, Chrome Extension Files XP"
 type: bool
 - name: ChromeFileSystem
 description: "Chrome HTML5 File System Contents (by Chad Tilbury): Chrome HTML5 File System Folder"
 type: bool
 - name: CiscoJabber
 description: "Jabber (by Andrew Bannon): Cisco Jabber Database"
 type: bool
 - name: ClipboardMaster
 description: "ClipboardMaster (by Andrew Rathbun): ClipboardMaster - Clipboard History - Text, ClipboardMaster - Clipboard History - Images, ClipboardMaster - Clipboard History - Backups"
 type: bool
 - name: CloudStorage_All
 description: "Cloud Storage Contents and Metadata (by Chad Tilbury and Andrew Rathbun): Box Drive Application Metadata, Box Sync Application Metadata, Box Drive User Files, Box Sync User Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata, Dropbox User Files, Gigatribe Files Windows XP, Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata, Windows IconCache DB, Idrive Cleanup Operations, Idrive Backup Operations, Idrive Delete Operations, Idrive Restore Operations, Idrive Backup Summary, Idrive Tracefile, Idrive Mapped Drives, Idrive Backup Schedule, Idrive Schedule History, Idrive Configuration, Idrive Local Drives, Idrive Exclusion Configurations, Idrive User Details, One Commander - Other Configuration Files, OneDrive Metadata Logs, OneDrive Metadata Settings, Radmin Viewer Chats, Skype for Destkop v8+ Chromium Cache, Slack - Chat Logs, Slack LevelDB Files, Zoho Assist .conf files in AppData\Local, Zoho Assist log files in ProgramData, Zoho Assist .conf files"
 type: bool
 - name: CloudStorage_Metadata
 description: "Cloud Storage Metadata (by Chad Tilbury and Andrew Rathbun, Eric Capuano): Box Drive Application Metadata, Box Sync Application Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata, Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata, One Commander - Other Configuration Files, OneDrive Metadata Logs, Radmin Viewer Chats"
 type: bool
 - name: CloudStorage_OneDriveExplorer
 description: "OneDrive and other files used with OneDriveExplorer (by Brian Maloney): One Commander - Other Configuration Files, OneDrive Metadata Logs, LNK Files from Microsoft Office Recent, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Recycle Bin - Windows Vista+, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive"
 type: bool
 - name: CombinedLogs
 description: "Collect Event logs, Trace logs, Windows Firewall, PowerShell console logs, and .NET CLR UsageLogs (by Mike Cary, Mark Hallman added the USBDevicelogs target, Thomas DIOT (Qazeer) added the .NET CLR UsageLogs and PowerShell Transcripts target): Event logs Win7+, Event logs XP, Event logs Win7+, Event logs Win7+, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WMI Trace Logs, WMI Trace Logs, SleepStudy Trace Logs, SleepStudy Trace Logs, Energy-NTKL Trace Logs, Multi Commander - Log File, .NET CLR UsageLogs (user-scoped), PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell ISE - User Config, PowerShell Transcripts - Default Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files, Vivaldi Bookmarks, Vivaldi Visited Links"
 type: bool
 - name: Combofix
 description: "ComboFix Antivirus Data (by Drew Ervin): ComboFix"
 type: bool
 - name: ConfluenceLogs
 description: "Confluence Log Files (by Eric Capuano): Confluence Wiki Log Files, Confluence Wiki Log Files"
 type: bool
 - name: Cybereason
 description: "Cybereason Sensor/Detection Logs (by piesecurity): Cybereason Anti-Ransomware Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cybereason Application Control and NGAV Logs"
 type: bool
 - name: Cylance
 description: "Cylance Antivirus Logs (by Ron Rader): Cylance ProgramData Logs, Cylance Optics Logs, Cylance Program Files Logs"
 type: bool
 - name: DC__
 description: "DC++ (by Andrew Rathbun): DC++ Chat Logs"
 type: bool
 - name: DWAgent
 description: "DWAgent Log Files (by Ron Rader): DWAgent Log Files"
 type: bool
 - name: Debian
 description: "Debian on Windows Subsystem for Linux (by Matt Dawson): Debian WSL /etc/debian_version, Debian WSL /etc/fstab, Debian WSL /etc/os-release, Debian WSL /etc/passwd, Debian WSL /etc/group, Debian WSL /etc/shadow, Debian WSL /etc/timezone, Debian WSL /etc/hostname, Debian WSL /etc/hosts, Debian WSL /etc/crontab, Debian WSL /etc/bash.bashrc, Debian WSL /etc/profile, Debian WSL .bash_history, Debian WSL .bashrc, Debian WSL .profile, Debian WSL User Crontabs, Debian WSL Apt Logs, Debian WSL ext4.vhdx"
 type: bool
 - name: DirectoryOpus
 description: "Directory Opus (by Andrew Rathbun): Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus"
 type: bool
 - name: DirectoryTraversal_AudioFiles
 description: "Find audio files covering a multitude of formats (by Andrew Rathbun): Audio files"
 type: bool
 - name: DirectoryTraversal_ExcelDocuments
 description: "Find Excel and Excel alternative documents (by Andrew Rathbun): Excel and Excel-like Documents"
 type: bool
 - name: DirectoryTraversal_PDFDocuments
 description: "Find PDF and PDF alternative documents (by Andrew Rathbun): PDF and PDF-like Documents"
 type: bool
 - name: DirectoryTraversal_PictureFiles
 description: "Find picture files covering a multitude of formats (by Andrew Rathbun): Picture files"
 type: bool
 - name: DirectoryTraversal_SQLiteDatabases
 description: "Find files with common SQLite file extensions (by Andrew Rathbun): SQLite Files (.db* and .sqlite*)"
 type: bool
 - name: DirectoryTraversal_VideoFiles
 description: "Find video files covering a multitude of formats (by Andrew Rathbun): Video files"
 type: bool
 - name: DirectoryTraversal_WildCardExample
 description: "Find zip archives (by Eric Zimmerman): Zips"
 type: bool
 - name: DirectoryTraversal_WordDocuments
 description: "Find Word and Word alternative documents (by Andrew Rathbun): Word and Word-like Documents"
 type: bool
 - name: Discord
 description: "Discord Cache and LevelDB Files (by Christian Johansen and Matt Dawson): Discord Cache Files, Discord Local Storage LevelDB Files"
 type: bool
 - name: DoubleCommander
 description: "Double Commander (by Andrew Rathbun): Double Commander - history.xml, Double Commander - doublecmd.xml, Double Commander - FTP Log, Double Commander - multiarc.ini, Double Commander - session.ini, Double Commander - pixmaps.txt, Double Commander - shortcuts.scf"
 type: bool
 - name: Drivers
 description: "Windows Drivers (by Zawadi Done): Drivers"
 type: bool
 - name: Dropbox_Metadata
 description: "Dropbox Cloud Storage Metadata (by Chad Tilbury and Andrew Rathbun): Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata"
 type: bool
 - name: Dropbox_UserFiles
 description: "Dropbox Cloud Storage Files (by Chad Tilbury): Dropbox User Files"
 type: bool
 - name: EFCommander
 description: "EF Commander (by Andrew Rathbun): EF Commander - .ini File"
 type: bool
 - name: ESET
 description: "ESET Antivirus Data (by Drew Ervin, Phill Moore): ESET NOD32 AV Logs (XP), ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine"
 type: bool
 - name: Edge
 description: "Edge (by Phill Moore): Edge folder"
 type: bool
 - name: EdgeChromium
 description: "Microsoft Edge Chromium Artifacts (by Chad Tilbury and Andrew Rathbun): Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Sessions Folder, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Windows Protect Folder"
 type: bool
 - name: EdgeChromiumExtensions
 description: "Edge Chromium Extension Files (by cardinsou): Edge Snapshots Folder"
 type: bool
 - name: Emsisoft
 description: "Emsisoft Antivirus Logs (by blueskycyber): Edge Chromium Extension Files"
 type: bool
 - name: EncapsulationLogging
 description: "EncapsulationLogging (by Troy Larson): Emsisoft Scan Logs, EncapsulationLogging, EncapsulationLogging, EncapsulationLogging Logs"
 type: bool
 - name: EventLogs_RDP
 description: "Collect Win7+ RDP related Event logs (by Mark Hallman, esecrpm): EncapsulationLogging Logs, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+, Event logs Win7+"
 type: bool
 - name: EventLogs
 description: "Event logs (by Eric Zimmerman): Event logs Win7+, Event logs XP, Event logs Win7+"
 type: bool
 - name: EventTraceLogs
 description: "Event Trace Logs (by Mark Hallman): Event logs Win7+, WDI Trace Logs 1, WDI Trace Logs 1, WDI Trace Logs 2, WDI Trace Logs 2, WMI Trace Logs, WMI Trace Logs, SleepStudy Trace Logs, SleepStudy Trace Logs, Energy-NTKL Trace Logs"
 type: bool
 - name: EventTranscriptDB
 description: "EventTranscript.db (and other files related to Telemetry and Diagnostic Data) (by Andrew Rathbun and Josh Mitchell): Delivery Optimization Trace Logs, EventTranscript.db, EventTranscript.db"
 type: bool
 - name: Evernote
 description: "Evernote (by Matt Dawson): Microsoft Office Diagnostic Logs, Evernote Accounts, Evernote Notebooks"
 type: bool
 - name: Everything__VoidTools_
 description: "Everything (VoidTools) (by Andrew Rathbun): Evernote Notebook Snippets, Everything (VoidTools), Everything (VoidTools) - Run History, Everything (VoidTools) - Search History"
 type: bool
 - name: EvidenceOfExecution
 description: "Evidence of execution related files (by Eric Zimmerman): Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, PowerShell Transcripts - Observed Location, Prefetch, Rclone Config, RecentFileCache, User startup folders, System-wide startup folder"
 type: bool
 - name: Exchange
 description: "Exchange Log Files (by Keith Twombley): Everything (VoidTools) - .ini file, Exchange Server Modified Compiled Files, Exchange Setup Log file"
 type: bool
 - name: ExchangeClientAccess
 description: "Exchange Client Access Log Files (by Keith Twombley): Everything (VoidTools) - .ini file"
 type: bool
 - name: ExchangeCve_2021_26855
 description: "Exchange Server Vulnerability *.Compiled Files (by Dennis Reneau): Exchange client access log files, Exchange Server Modified Compiled Files, Exchange Server Modified Compiled Files, Exchange Server Modified Compiled Files"
 type: bool
 - name: ExchangeSetupLog
 description: "Exchange Setup Log (by 2thewes): Exchange Server Modified Compiled Files"
 type: bool
 - name: ExchangeTransport
 description: "Exchange Transport Log Files (by Keith Twombley): Exchange Setup Log file"
 type: bool
 - name: FSecure
 description: "F-Secure Antivirus Data (by Drew Ervin): Exchange TransportRoles log files, F-Secure Logs, F-Secure User Logs"
 type: bool
 - name: FTPClients
 description: "FTP Clients (by Andrew Rathbun): Fences - Desktop Screenshots, FileZilla XML Log Files, FileZilla SQLite3 Log Files, FileZilla Server XML Log Files, VSCode Network Persistent State"
 type: bool
 - name: Fences
 description: "Fences (by Andrew Rathbun): F-Secure Scheduled Scan Reports"
 type: bool
 - name: FileExplorerReplacements
 description: "File Explorer Replacements (by Andrew Rathbun): Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Directory Opus, Double Commander - history.xml, Double Commander - doublecmd.xml, Double Commander - FTP Log, Double Commander - multiarc.ini, Double Commander - session.ini, Double Commander - pixmaps.txt, Double Commander - shortcuts.scf, EF Commander - .ini File, Sessionstore XP, Free Commander - FreeCommander.ini, Free Commander - FreeCommander.ftp.ini, Free Commander - FreeCommander.hist.ini, Free Commander - FreeCommander.fav.xml, Free Commander - Backup Settings, Free Commander - FTP Log, Microsoft To Do - User Avatar, Midnight Commander -- All Configuation Files, Multi Commander - Application Folder, Multi Commander - Config Folder, Multi Commander - Log Folder, Multi Commander - UserData Folder, Office Document Cache, One Commander - All Configuration Files, WNS, Q-Dir - .ini File, ScreenConnect Session Database, StartupInfo XML Files, StartupInfo XML Files, Steam Game Image files, Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection Quarantine, ccSubSDK Database, registrationInfo.xml, SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack)"
 type: bool
 - name: FileSystem
 description: "File system metadata (by Eric Zimmerman): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T"
 type: bool
 - name: FileZillaClient
 description: "FileZilla XML and SQLite Log Files (by Dennis Reneau): Fences - Desktop Screenshots, FileZilla XML Log Files"
 type: bool
 - name: FileZillaServer
 description: "FileZilla Server Logs (by Andrew Rathbun): FileZilla SQLite3 Log Files, FileZilla Server XML Log Files"
 type: bool
 - name: Firefox
 description: "Firefox (by Eric Zimmerman and Andrew Rathbun): FileZilla Log Files, Addons, Bookmarks, Bookmarks, Cookies, Cookies, Downloads, Extensions, Favicons, Form history, Permissions, Places, Protections, Search, Signons, Storage Sync, Webappstore, Password, Password, Password, Preferences, Sessionstore, Sessionstore Folder, Places XP, Downloads XP, Form history XP, Cookies XP, Signons XP, Webappstore XP, Favicons XP, Addons XP, Search XP, Password XP, Password XP, Password XP"
 type: bool
 - name: FreeCommander
 description: "FreeCommander XE (by Andrew Rathbun): Sessionstore XP, Free Commander - FreeCommander.ini, Free Commander - FreeCommander.ftp.ini, Free Commander - FreeCommander.hist.ini, Free Commander - FreeCommander.fav.xml, Free Commander - Backup Settings, Free Commander - FTP Log"
 type: bool
 - name: FreeDownloadManager
 description: "Free Download Manager (by Matt Dawson): Free Commander - FTP Related Information, FDM Database, FDM Backup Info"
 type: bool
 - name: FreeFileSync
 description: "FreeFileSync (by Andrew Rathbun): FDM Database (userdata.zip)"
 type: bool
 - name: Freenet
 description: "Freenet (by Charlie Rubisoff): FreeFileSync, Freenet, Freenet, Freenet, Freenet"
 type: bool
 - name: FrostWire
 description: "FrostWire (by Andrew Rathbun): Freenet, FrostWire Downloads, FrostWire AppData"
 type: bool
 - name: Gigatribe
 description: "Gigatribe Files (by Linus Nissi): FrostWire AppData, Gigatribe Files Windows Vista/7/8/10, Gigatribe Files Windows XP"
 type: bool
 - name: GoogleDriveBackupSync_UserFiles
 description: "Google Backup and Sync Storage Files (by Chad Tilbury): Gigatribe Files Windows XP"
 type: bool
 - name: GoogleDrive_Metadata
 description: "Google Drive Metadata (by Chad Tilbury): Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata"
 type: bool
 - name: GoogleEarth
 description: "Google Earth (by Guus Beckers): Google Drive for Desktop Metadata, Google Earth My Places file, Google Earth My Places Backup file, Google Earth My Places file (XP)"
 type: bool
 - name: GroupPolicy
 description: "Current Group Policy Enforcement (by piesecurity): Google Earth My Places Backup file (XP), Group Policy Files, Computer Group Policy files, User Group Policy files, Local Group Policy INI Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Registry Policy Files, Local Group Policy Files - Startup/Shutdown Scripts"
 type: bool
 - name: HeidiSQL
 description: "HeidiSQL (by Hyun Yi @hyuunnn): Local Group Policy Files - Startup/Shutdown Scripts, HeidiSQL Backup files (*.sql)"
 type: bool
 - name: HexChat
 description: "HexChat (by Andrew Rathbun): HeidiSQL (tabs.ini)"
 type: bool
 - name: HitmanPro
 description: "HitmanPro Antivirus Data (by Drew Ervin): HexChat Chat Logs, HitmanPro Logs, HitmanPro Alert Logs"
 type: bool
 - name: HostsFile
 description: "Hosts file (by Max Zabuty): HitmanPro Database"
 type: bool
 - name: IISConfiguration
 description: "IIS (by NVISO (@NVISOsecurity)): HostsFile, IIS applicationHost.config, IIS administration.config, IIS redirection.config"
 type: bool
 - name: IISLogFiles
 description: "IIS Log Files (by Troy Larson): web.config, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files"
 type: bool
 - name: IRCClients
 description: "IRC Clients (by Andrew Rathbun): HeidiSQL (tabs.ini), ITarian, XYplorer - AutoBackup folder, XYplorer - .dat files"
 type: bool
 - name: ISLOnline
 description: "ISLOnline Remote Access Tool (by Thomas Burnette): IIS log files, ISLOnline Logs - Sessions - *.out, ISLOnline Logs - Session Configurations, ISL AlwaysOn Logs - Sessions List, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn - App Logs, ISL Light Logs - Sessions, ISL AlwaysOn - Email Configuration"
 type: bool
 - name: ITarian
 description: "ITarian RMM (by Phill Moore): ISL AlwaysOn - Configuration, ITarian, ITarian, Comodo"
 type: bool
 - name: IceChat
 description: "IceChat (by Andrew Rathbun): ITarian"
 type: bool
 - name: IconCacheDB
 description: "IconCache.db files (by Herbert Bärschneider @SEC Consult): IceChat Chat Logs"
 type: bool
 - name: Idrive
 description: "Idrive Backup Artifacts (by Thomas Burnette): Windows IconCache DB, Idrive Cleanup Operations, Idrive Backup Operations, Idrive Delete Operations, Idrive Restore Operations, Idrive Backup Summary, Idrive Tracefile, Idrive Mapped Drives, Idrive Backup Schedule, Idrive Schedule History, Idrive Configuration, Idrive Local Drives, Idrive Exclusion Configurations, Idrive User Details"
 type: bool
 - name: ImgBurn
 description: "ImgBurn (by Chuck Whitson): Idrive SQL Databse"
 type: bool
 - name: InternetExplorer
 description: "Internet Explorer (by Eric Zimmerman): ImgBurn - Application Log File, Index.dat History, Index.dat History subdirectory, Index.dat cookies, Index.dat UserData, Index.dat Office XP, Index.dat Office, Local Internet Explorer folder, Roaming Internet Explorer folder, IE 9/10 History, IE 9/10 Cookies, IE 9/10 Download History, IE 11 Metadata"
 type: bool
 - name: IrfanView
 description: "IrfanView (by Andrew Rathbun): IE 11 Cookies"
 type: bool
 - name: JDownloader2
 description: "JDownloader 2 (by Matt Dawson): IrfanView Configuration File, JDownloader 2.0 Download Lists, JDownloader 2.0 Link Collector, JDownloader 2.0 General Settings, JDownloader 2.0 Link Grabber Settings"
 type: bool
 - name: JavaWebCache
 description: "Java WebStart Cache - (IDX Files) (by piesecurity): JDownloader 2.0 Proxy Settings, Java WebStart Cache User Level - Default, Java WebStart Cache User Level - IE Protected Mode, Java WebStart Cache System level, Java WebStart Cache System level, Java WebStart Cache System level - IE Protected Mode, Java WebStart Cache System level - IE Protected Mode, Java WebStart Cache System level (SysWow64), Java WebStart Cache System level (SysWow64), Java WebStart Cache System level (SysWow64) - IE Protected Mode, Java WebStart Cache System level (SysWow64) - IE Protected Mode"
 type: bool
 - name: JumpLists
 description: "Jump lists (by Max Zabuty): Java WebStart Cache User Level - XP, JumpLists from CustomDestinations"
 type: bool
 - name: Kali
 description: "Kali on Windows Subsystem for Linux (by Matt Dawson): JumpLists from CustomDestinations, Kali WSL /etc/debian_version, Kali WSL /etc/fstab, Kali WSL /etc/os-release, Kali WSL /etc/passwd, Kali WSL /etc/group, Kali WSL /etc/shadow, Kali WSL /etc/timezone, Kali WSL /etc/hostname, Kali WSL /etc/hosts, Kali WSL /etc/crontab, Kali WSL /etc/bash.bashrc, Kali WSL /etc/profile, Kali WSL .bash_history, Kali WSL .bashrc, Kali WSL .profile, Kali WSL User Crontabs, Kali WSL Apt Logs"
 type: bool
 - name: KapeTriage
 description: "KapeTriage collects most of the files needed for a DFIR Investigation. This Target pulls evidence from File System files, Registry Hives, Event Logs, Scheduled Tasks, Evidence of Execution, SRUM data, SUM data, Cloud metadata, WER, WBEM, Web Browser data (IE/Edge, Chrome, Mozilla history), LNK Files, JumpLists, 3rd party remote access software logs, 3rd party antivirus software logs, Windows 10/11 Timeline database, and $I Recycle Bin files. (by Scott Downie): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, AVG AV Logs (XP), AVG AV Report Logs (XP), AVG AV Logs, AVG Report Logs, AVG Persistent Logs, AVG FileInfo DB, AVG lsdbj2 JSON, Action1 Client Application logs, Amcache, Amcache, Amcache transaction files, Amcache transaction files, Ammyy Program Data, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - ProgramData - *.conf, AnyDesk Videos, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Chat Logs - User Profile, AppCompat PCA Folder, Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Avast AV Logs (XP), Avast AV Logs, Avast AV User Logs, Avast AV Index, Avast Persistent Data Logs, Avast Icarus Logs, Avira Activity Logs, Avira Security Logs, Avira VPN Logs, Bitdefender Endpoint Security Logs, Bitdefender Internet Security Logs, Bitdefender SQLite DB Files, Box Drive Application Metadata, Box Sync Application Metadata, Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Sessions Folder, Login Data, Network Action Predictor, Network Persistent State, Preferences, Quota Manager, Reporting and NEL, Shortcuts, Publisher Info DB/Brave Rewards, Top Sites, Visited Links, Web Data, Secure Preferences, Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Sessions Folder, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Windows Protect Folder, Chrome Snapshots Folder, SYSTEM Chrome History, ComboFix, Cybereason Anti-Ransomware Logs, Cybereason Sensor Communications and Anti-Malware Logs, Cybereason Application Control and NGAV Logs, Cylance ProgramData Logs, Cylance Optics Logs, Cylance Program Files Logs, DWAgent Log Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Windows Protect Folder, Dropbox Metadata, ESET NOD32 AV Logs (XP), ESET NOD32 AV Logs, ESET NOD32 AV Logs, ESET Remote Administrator Logs, Local User Quarantine, SYSTEM user quarantine, Edge folder, Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Sessions Folder, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Windows Protect Folder, Edge Chromium Extension Files, Event logs Win7+, Event logs XP, Event logs Win7+, Exchange TransportRoles log files, F-Secure Logs, F-Secure User Logs, FileZilla Log Files, Addons, Bookmarks, Bookmarks, Cookies, Cookies, Downloads, Extensions, Favicons, Form history, Permissions, Places, Protections, Search, Signons, Storage Sync, Webappstore, Password, Password, Password, Preferences, Sessionstore, Sessionstore Folder, Places XP, Downloads XP, Form history XP, Cookies XP, Signons XP, Webappstore XP, Favicons XP, Addons XP, Search XP, Password XP, Password XP, Password XP, Google Drive Backup and Sync User Files, Google Drive Backup and Sync Metadata, HexChat Chat Logs, HitmanPro Logs, HitmanPro Alert Logs, IIS log files, ISLOnline Logs - Sessions - *.out, ISLOnline Logs - Session Configurations, ISL AlwaysOn Logs - Sessions List, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn - App Logs, ISL Light Logs - Sessions, ISL AlwaysOn - Email Configuration, ISL AlwaysOn - Configuration, ITarian, ITarian, Comodo, ImgBurn - Application Log File, Index.dat History, Index.dat History subdirectory, Index.dat cookies, Index.dat UserData, Index.dat Office XP, Index.dat Office, Local Internet Explorer folder, Roaming Internet Explorer folder, IE 9/10 History, IE 9/10 Cookies, IE 9/10 Download History, IE 11 Metadata, Kali WSL ext4.vhdx, Kaseya Live Connect Logs (XP), Kaseya Live Connect Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Endpoint Service Logs, Kaseya Agent Service Log, Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, LNK Files from C:\ProgramData, Error logging, LogMeIn ProgramData Logs, Macrium Reflect, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Service Logs, MalwareBytes Anti-Malware Scan Logs, Mattermost - Chat Logs, McAfee Desktop Protection Logs XP, McAfee Desktop Protection Logs, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs, McAfee VirusScan Logs, Small Memory Dump directory, MeshAgent .msh (configuration) file, Microsoft OneNote - RecentSearches, Nessus Logs, Net Monitor Server Logs, Net Monitor Server Data, Net Monitor Server Config, Net Monitor Server Temp Folder, Net Monitor Client Logs, One Commander - Other Configuration Files, OneDrive Metadata Logs, OpenVPN Client Config, Opera - Local Folder, PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell Transcripts - Observed Location, Prefetch, ProtonVPN - Connection Logs, Puffin - data.db, Puffin - Autocomplete Data, Puffin - Password Forms Data, Puffin - Password (Encrypted), Puffin - Subscription Data, Puffin - Cookies, Qlik Sense Logs, RDP Cache Files, Windows.old RDP Cache Files, RDP Jumplist Files, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, Radmin Server 32bit Log, Radmin Server 64bit Log, Radmin Server 32bit Chats, Radmin Server 64bit Chats, Radmin Viewer Chats, Rclone Config, RecentFileCache, RECYCLER - WinXP, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, UsrClass.dat registry transaction files, RemoteUtilities Connection Logs, Chrome Trust Tokens, Chrome Trust Tokens, Chrome SyncData Database, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Protections, Search, Signons, Storage Sync, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB, ActivitiesCache.db, Update Store.db, Bitdefender SQLite DB Files, EventTranscript.db, EventTranscript.db, at SchedLgU.txt, at SchedLgU.txt, XML, ScreenConnect Session Database, ScreenConnect User Config, Slack Storage, Snagit - Captures, Snip &amp;amp; Sketch, Sophos Logs (XP), Sophos Logs, Sophos Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings, SpeedCommander - .ini File, Splashtop Log Files, Splashtop Log Files in ProgramData, User startup folders, System-wide startup folder, Steam Login Metadata file, Steam Friend List and Username History file, Steam User Avatar files, Steam Game Tray Icon files, Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Logs, Syscache transaction files, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml, Tablacus Explorer - window1.xml, TeamViewer Connection Logs, TotalAV Logs, Total Commander - .ini File, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal, Total Commander - Frequent Directory Listing, Total Commander - FTP Logs, TreeSize - ScanHistory.XML, Trend Micro Logs, Setupapi.log Win7+, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/fstab, VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (up to v4), VLC Recently Opened Files, VLC Recorded Files, VMware - Virtual Machine Inventory, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), RealVNC Log, RealVNC Log, TightVNC Application Logs, Viber Config Database, Viber Users Data Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Thumbnails Cache, VirtualBox VM configs, VirtualBox VM backup configs, VirtualBox Logs, VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox, VHD, VHDX, VDI, Vivaldi Cookies, Vivaldi Network Persistent State, Vivaldi Favicons, Vivaldi History, Vivaldi Sessions Folder, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Preferences, Vivaldi Top Sites, SECURITY registry hive, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), WindowsIndexSearch, GatherLogs, Network setting files, Windows 10 Notification DB, Windows 10 Notification DB, MigLog.xml, Setupact.log, HumanReadable.xml, FolderMoveLog.txt, Update Store.db, Windows Power Diagnostics, DNS Netlogon files, DNS files, DHCP files, Diagnostic Logs for WSA, App download artifacts (PNG), App download artifacts (ICO), Appcompatdb.json, userdata.vhdx, Legacy .rbs files relating to Windows Telemetry and Diagnostics, Xeox RMM Client Application logs, Yandex Cookies, Yandex Network Persistent State, Zoom plugin (Outlook), eMule Logs and Configuration Files, eMule part.met files, iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: Kaseya
 description: "Kaseya Data (by Drew Ervin and Andrew Rathbun): Kali WSL ext4.vhdx, Kaseya Live Connect Logs (XP), Kaseya Live Connect Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Endpoint Service Logs, Kaseya Agent Service Log, Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log"
 type: bool
 - name: Keepass
 description: "Keepass (by Vito Alfano): Kaseya Agent Edge Service Logs, Keepass User Config, Keepass Config Xml"
 type: bool
 - name: KeepassXC
 description: "KeepassXC (by Vito Alfano): Keepass Application Details, Keepass Local Ini"
 type: bool
 - name: LNKFilesAndJumpLists
 description: "LNK Files and jump lists (by Eric Zimmerman, Andrew Rathbun, Yogesh Khatri): Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP"
 type: bool
 - name: Level
 description: "Level.io Application Logs (by Andrew Skatoff @DFIR_TNT): LNK Files from C:\ProgramData"
 type: bool
 - name: LinuxOnWindowsProfileFiles
 description: "Linux on Windows Profile Files (by Troy Larson): Level RMM Client Application logs, .bash_history, .bash_logout, .bashrc"
 type: bool
 - name: LiveUserFiles
 description: "Live User Files (by Mark Hallman): .profile, User Files - Desktop, User Files - Documents, User Files - Downloads"
 type: bool
 - name: LogFiles
 description: "LogFiles (includes SUM) (by Fabian Murer): User Files - Dropbox, LogFiles, LogFiles"
 type: bool
 - name: LogMeIn
 description: "LogMeIn Data (by Drew Ervin): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Error logging, LogMeIn ProgramData Logs"
 type: bool
 - name: MOF
 description: "MOF files (WMI) (by Eric Zimmerman): LogMeIn Application Logs"
 type: bool
 - name: MSSQLErrorLog
 description: "MS SQL ErrorLogs (by Troy Larson): MOF files, MS SQL Errorlog"
 type: bool
 - name: MacriumReflect
 description: "Macrium Reflect (by Andrew Rathbun): MS SQL Errorlogs, Macrium Reflect, Macrium Reflect"
 type: bool
 - name: Malwarebytes
 description: "Malwarebytes Data (by Drew Ervin &amp;amp; Kirtan Shah): Macrium Reflect, MalwareBytes Anti-Malware Logs, MalwareBytes Anti-Malware Service Logs, MalwareBytes Anti-Malware Scan Logs"
 type: bool
 - name: ManageEngineLogs
 description: "ManageEngine Log Files (by Whitney Champion, Phill Moore): MalwareBytes Anti-Malware Scan Results Logs, ManageEngine Desktop Central Log Files"
 type: bool
 - name: Mattermost
 description: "Mattermost (by Andrew Rathbun): ManageEngine ADSelfService Plus Log Files"
 type: bool
 - name: McAfee
 description: "McAfee Log Files (by Sam Smoker): Mattermost - Chat Logs, McAfee Desktop Protection Logs XP, McAfee Desktop Protection Logs, McAfee Endpoint Security Logs, McAfee Endpoint Security Logs"
 type: bool
 - name: McAfee_ePO
 description: "McAfee ePO Log Files (by Doug Metz): McAfee VirusScan Logs"
 type: bool
 - name: MediaMonkey
 description: "MediaMonkey (by Andrew Rathbun): McAfee ePO Logs, MediaMonkey - Media SQLite Database"
 type: bool
 - name: Megasync
 description: "MegaSync Data Collection (by Vito Alfano): MediaMonkey - MediaMonkey.ini"
 type: bool
 - name: MemoryFiles
 description: "Memory Files (by Ahmed Elshaer, Teo Kia Meng): MegaSync Folder, hiberfil.sys, pagefile.sys, swapfile.sys, Small Memory Dump directory"
 type: bool
 - name: MeshAgent
 description: "MeshAgent log and configuration files (by Geir Olav Skei, Atea IRT): Small Memory Dump directory, MeshAgent .msh (configuration) file"
 type: bool
 - name: MessagingClients
 description: "Messaging and communication apps (by Gregor Wegberg): Cisco Jabber Database, Discord Cache Files, Discord Local Storage LevelDB Files, HeidiSQL (tabs.ini), ITarian, ManageEngine ADSelfService Plus Log Files, Microsoft Sticky Notes - 1607 and later, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Cache, Microsoft Teams Config, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SUM Database (.mdb files), SUPERAntiSpyware Logs, SUSE Linux Enterprise Server WSL /etc/passwd, SUSE Linux Enterprise Server WSL /etc/group, SUSE Linux Enterprise Server WSL /etc/shadow, SUSE Linux Enterprise Server WSL /etc/timezone, SUSE Linux Enterprise Server WSL /etc/hostname, SUSE Linux Enterprise Server WSL /etc/hosts, SUSE Linux Enterprise Server WSL /etc/bash.bashrc, SUSE Linux Enterprise Server WSL /etc/profile, SUSE Linux Enterprise Server WSL .bash_history, SUSE Linux Enterprise Server WSL .bashrc, SUSE Linux Enterprise Server WSL .profile, SUSE Linux Enterprise Server WSL ext4.vhdx, Steam Startup Times Log file, Steam Game Image files, Ubuntu WSL /etc/passwd, Ubuntu WSL /etc/group, Ubuntu WSL /etc/shadow, Ubuntu WSL /etc/timezone, Ubuntu WSL /etc/hostname, VMDK, VSCode Opened Files, VSCode Workspaces, VSCode User extensions, XYplorer - AutoBackup folder, XYplorer - .dat files"
 type: bool
 - name: MicrosoftOfficeBackstage
 description: "Microsoft Office Backstage (by Brian Maloney): MeshAgent log file"
 type: bool
 - name: MicrosoftOneNote
 description: "Microsoft OneNote (by Andrew Rathbun): Microsoft Office Backstage, Microsoft OneNote - FullTextSearchIndex, Microsoft OneNote - RecentNotebooks_SeenURLs, Microsoft OneNote - AccessibilityCheckerIndex, Microsoft OneNote - User NoteTags"
 type: bool
 - name: MicrosoftSafetyScanner
 description: "Microsoft Safety Scanner (by Geir Olav Skei): Microsoft OneNote - RecentSearches"
 type: bool
 - name: MicrosoftStickyNotes
 description: "Microsoft Sticky Notes (by Andrew Rathbun): Windows Safety Scanner Logs, Microsoft Sticky Notes - Windows 7, 8, and 10 version 1511 and earlier"
 type: bool
 - name: MicrosoftTeams
 description: "Microsoft Teams (by Matt Dawson and Andrew Rathbun): Microsoft Sticky Notes - 1607 and later, Microsoft Teams IndexedDB Cache, Microsoft Teams Local Storage Cache, Microsoft Teams Cache, Microsoft Teams Config"
 type: bool
 - name: MicrosoftToDo
 description: "Microsoft To Do (by Andrew Rathbun): Microsoft Teams Logs (Windows 11), Microsoft To Do - SQLite Database of To Do tasks"
 type: bool
 - name: MidnightCommander
 description: "Midnight Commander (by Andrew Rathbun): Microsoft To Do - User Avatar"
 type: bool
 - name: MiniTimelineCollection
 description: "MFT, Registry and Event Logs to generate a mini timeline (by Mari DeGrazia): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, Event logs Win7+, Event logs XP, Event logs Win7+, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive"
 type: bool
 - name: MultiCommander
 description: "Multi Commander (by Andrew Rathbun): Midnight Commander -- All Configuation Files, Multi Commander - Application Folder, Multi Commander - Config Folder, Multi Commander - Log Folder, Multi Commander - UserData Folder"
 type: bool
 - name: NETCLRUsageLogs
 description: ".NET CLR UsageLogs (by Matias Davaro, Thomas DIOT (Qazeer)): Multi Commander - Log File, .NET CLR UsageLogs (user-scoped)"
 type: bool
 - name: NGINXLogs
 description: "NGINX Log Files (by Eric Capuano): .NET CLR UsageLogs (system-scoped)"
 type: bool
 - name: NZBGet
 description: "NZBGet (by Andrew Rathbun): NGINX Log Files, Usenet Clients - NZBGet Log File"
 type: bool
 - name: Nessus
 description: "Nessus (by Andrew Rathbun): Usenet Clients - NZBGet NZBs, Nessus Logs"
 type: bool
 - name: NetMonitorforEmployeesProfessional
 description: "Net Monitor for Employees Pro (by Tristan PINCEAUX - CERT CWATCH - ALMOND): Nessus Logs, Net Monitor Server Logs, Net Monitor Server Data, Net Monitor Server Config, Net Monitor Server Temp Folder, Net Monitor Client Logs"
 type: bool
 - name: NewsbinPro
 description: "Newsbin Pro (by Andrew Rathbun): Net Monitor Client Config"
 type: bool
 - name: Newsleecher
 description: "Newsleecher (by Andrew Rathbun): Usenet Clients - Newsbin Pro"
 type: bool
 - name: Nicotine__
 description: "Nicotine++ (by Andrew Rathbun): Usenet Clients - Newsleecher, Nicotine++ Logs, Nicotine++ Incomplete Downloads, Nicotine++ Buddyfiles.db, Nicotine++ Buddystreams.db, Nicotine++ Buddymtimes.db, Nicotine++ Buddyfileindex.db, Nicotine++ Buddywordindex.db, Nicotine++ Config Files, Nicotine++ User Shares, Nicotine++ Downloads.json"
 type: bool
 - name: Notepad__
 description: "Notepad++ Backups, recently searched/replaced terms and recently opened documents (by Banaanhangwagen and Matt Dawson): Nicotine++ Uploads.json, Notepad++ Unsaved Edits, Notepad++ Config"
 type: bool
 - name: Notepad
 description: "A Target to collect files that are currently open in Notepad (Windows 11+) (by Andrew Rathbun): Notepad++ Session"
 type: bool
 - name: Notion
 description: "Notion Note-Taking App (by Thomas Burnette): Notepad Session Files, Notion Local Storage"
 type: bool
 - name: OfficeAutosave
 description: "Office Autosave (by Russ Taylor): Notion Custom Dictionary, Word Autosave Location, Excel Autosave Location, Powerpoint Autosave Location"
 type: bool
 - name: OfficeDiagnostics
 description: "Office Diagnostics (by teddy-ROxPin): Publisher Autosave Location, Office Diagnostics"
 type: bool
 - name: OfficeDocumentCache
 description: "Office Document Cache (by Banaanhangwagen): Office Elevated Diagnostics"
 type: bool
 - name: OneCommander
 description: "One Commander (by Andrew Rathbun): Office Document Cache, One Commander - All Configuration Files"
 type: bool
 - name: OneDrive_Metadata
 description: "Microsoft OneDrive Storage Metadata (by Chad Tilbury): One Commander - Other Configuration Files, OneDrive Metadata Logs"
 type: bool
 - name: OneDrive_UserFiles
 description: "Microsoft OneDrive Storage Files (by Chad Tilbury): OneDrive Metadata Settings"
 type: bool
 - name: OpenSSHClient
 description: "OpenSSH Client config, known hosts and keys (by Matt Dawson): OneDrive User Files, OpenSSH Config File, OpenSSH Known Hosts, OpenSSH Public Keys, OpenSSH Default RSA Private Key, OpenSSH Default ECDSA Private Key, OpenSSH Default ECDSA-SK Private Key, OpenSSH Default ED25519 Private Key, OpenSSH Default ED25519-SK Private Key"
 type: bool
 - name: OpenSSHServer
 description: "OpenSSH Server Config and Logs (by Matt Dawson): OpenSSH Default DSA Private Key, OpenSSH Server Config File, OpenSSH Server Logs, OpenSSH Host ECDSA Key, OpenSSH Host ED25519 Key, OpenSSH Host DSA Key, OpenSSH Host RSA Key, OpenSSH User Authorized Keys, OpenSSH User Authorized Keys 2"
 type: bool
 - name: OpenVPNClient
 description: "OpenVPN Client Config and Log (by Mathias Frank): OpenSSH Authorized Administrator Keys, OpenVPN Client Config, OpenVPN Client Config"
 type: bool
 - name: Opera
 description: "Opera (by Andrew Rathbun): OpenVPN Client Config, Opera - Local Folder"
 type: bool
 - name: OutlookPSTOST
 description: "Outlook PST and OST files (by Eric Zimmerman and Chad Tilbury): Opera - Roaming Folder, PST XP, OST XP, PST (2013 or 2016), OST (2013 or 2016), PST, OST, NST"
 type: bool
 - name: P2PClients
 description: "P2P Clients (by Andrew Rathbun): DC++ Chat Logs, Freenet, FrostWire Downloads, FrostWire AppData, FrostWire AppData, Gigatribe Files Windows Vista/7/8/10, Gigatribe Files Windows XP, SOFTWARE registry hive, XML, XML, Windows Component-Based Servicing logs, Windows Your Phone - All Databases"
 type: bool
 - name: PeaZip
 description: "PeaZip (by Andrew Rathbun): Outlook Attachment Temporary Storage"
 type: bool
 - name: PerfLogs
 description: "Perflogs Folder Copy (by Vito Alfano): PeaZip Configuration Files"
 type: bool
 - name: PowerShell7Config
 description: "PowerShell 7 Runtime Config (by Andrew Rathbun): Perflogs"
 type: bool
 - name: PowerShellConsole
 description: "PowerShell Console Log File (by Mike Cary, 2thewes, Vikas Singh): PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files"
 type: bool
 - name: PowerShellTranscripts
 description: "PowerShell Transcripts (by Andrew Rathbun and Chad Tilbury): PowerShell ISE - User Config, PowerShell Transcripts - Default Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location"
 type: bool
 - name: Prefetch
 description: "Prefetch files (by Eric Zimmerman): PowerShell Transcripts - Observed Location, Prefetch"
 type: bool
 - name: ProgramData
 description: "ProgramData Folder Copy (by Vito Alfano): Prefetch"
 type: bool
 - name: ProgramExecution
 description: "Program Execution Triage Collection (by Max Zabuty): Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Java WebStart Cache User Level - XP, JumpLists from CustomDestinations, Multi Commander - Log File, .NET CLR UsageLogs (user-scoped), PowerShell 7 Config JSON, PowerShell Console Log, PowerShell Console Log Systemprofile, PowerShell Console Log WOW64 Systemprofile, PowerShell ISE - AutoSave Files, PowerShell ISE - User Config, PowerShell Transcripts - Default Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, PowerShell Transcripts - Observed Location, Prefetch, Rclone Config, RecentFileCache, User startup folders, System-wide startup folder, VirtualBox VM backup configs, VirtualBox Logs, VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox, VHD, VHDX, SECURITY registry hive"
 type: bool
 - name: ProtonVPN
 description: "ProtonVPN (by Andrew Rathbun): ProgramData"
 type: bool
 - name: PuffinSecureBrowser
 description: "Puffin Secure Browser (by Andrew Rathbun): ProtonVPN - Connection Logs, Puffin - data.db, Puffin - Autocomplete Data, Puffin - Password Forms Data, Puffin - Password (Encrypted), Puffin - Subscription Data, Puffin - Cookies"
 type: bool
 - name: PushNotification
 description: "Windows Push Notification Service (by Zawadi Done): Puffin - Image Cache, WNS"
 type: bool
 - name: Q_Dir
 description: "Q-Dir (by Andrew Rathbun): WNS, Q-Dir - .ini File"
 type: bool
 - name: QFinderPro__QNAP_
 description: "QFinderPro (QNAP) (by Andrew Rathbun): Q-Dir - .qdr file"
 type: bool
 - name: QlikSense
 description: "Qlik Sense (by Abdelkarim CHORFI - CERT CWATCH - ALMOND): QFinderPro, Qlik Sense Logs, Qlik Sense Logs, Qlik Sense Logs"
 type: bool
 - name: RDPCache
 description: "RDP Cache Files (by Hadar Yudovich): Qlik Sense Logs, RDP Cache Files, Windows.old RDP Cache Files"
 type: bool
 - name: RDPJumplist
 description: "RDP Jumplist Files (by Vito Alfano): RDP Cache Files"
 type: bool
 - name: RDPLogs
 description: "RDP Logs (by Drew Ervin): RDP Jumplist Files, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs"
 type: bool
 - name: Radmin
 description: "Radmin Server/Viewer Logs and Chats (by Mathias Frank): RDPCoreTS Event Logs, Radmin Server 32bit Log, Radmin Server 64bit Log, Radmin Server 32bit Chats, Radmin Server 64bit Chats"
 type: bool
 - name: RcloneConf
 description: "Rclone config file (by Eric Capuano): Radmin Viewer Chats"
 type: bool
 - name: RecentFileCache
 description: "RecentFileCache (by Eric Zimmerman): Rclone Config, RecentFileCache"
 type: bool
 - name: RecentFolders
 description: "Recent Folders LNK files (by Max Zabuty): RecentFileCache, LNK Files from Recent"
 type: bool
 - name: RecycleBin
 description: "Recycle Bin DataAndInfo (by Mark Hallman / Joshua Hickman): LNK Files from Microsoft Office Recent, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+, RECYCLER - WinXP, Recycle Bin - Windows Vista+"
 type: bool
 - name: RecycleBin_DataFiles
 description: "Recycle Bin Data Files (by Joshua Hickman, Andreas Hunkeler (@Karneades), Brian Maloney): LNK Files from Microsoft Office Recent, Recycle Bin - Windows Vista+, Recycle Bin - Windows Vista+"
 type: bool
 - name: RecycleBin_InfoFiles
 description: "Recycle Bin Info Files (by Joshua Hickman, Andreas Hunkeler (@Karneades)): RECYCLER - WinXP, Recycle Bin - Windows Vista+"
 type: bool
 - name: RegistryHives
 description: "System and user related Registry hives (by Eric Zimmerman): RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive"
 type: bool
 - name: RegistryHivesMSIXApps
 description: "MSIX/APPX App Hives (by Zach Stanford / Mari DeGrazia): RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive"
 type: bool
 - name: RegistryHivesOther
 description: "Other Registry Hives (by Andrew Rathbun): UserClasses.dat MSIX Hive, BBI registry hive, BBI registry hive, BBI registry transaction files, BBI registry transaction files, BCD-Template registry hive, BCD-Template registry hive, BCD-Template registry transaction files, BCD-Template registry transaction files, COMPONENTS registry hive, COMPONENTS registry hive, COMPONENTS registry transaction files, COMPONENTS registry transaction files, DRIVERS registry hive, DRIVERS registry hive, DRIVERS registry transaction files, DRIVERS registry transaction files, ELAM registry hive, ELAM registry hive, ELAM registry transaction files, ELAM registry transaction files, userdiff registry hive, userdiff registry hive, userdiff registry transaction files, userdiff registry transaction files, VSMIDK registry hive, VSMIDK registry hive, VSMIDK registry transaction files"
 type: bool
 - name: RegistryHivesSystem
 description: "System level/related Registry hives (by Eric Zimmerman / Mark Hallman): VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files"
 type: bool
 - name: RegistryHivesUser
 description: "User Related Registry hives (by Eric Zimmerman / Mark Hallman): System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive"
 type: bool
 - name: RemoteAdmin
 description: "Composite target for files related to remote administration tools (by Drew Ervin, Mathias Frank, Andrew Rathbun, Phill Moore): Action1 Client Application logs, Ammyy Program Data, AnyDesk Logs - User Profile - *.trace, AnyDesk Logs - ProgramData - *.trace, AnyDesk Logs - User Profile - *.conf, AnyDesk Logs - ProgramData - *.conf, AnyDesk Videos, AnyDesk Logs - User Profile - connection_trace.txt, AnyDesk Logs - ProgramData - connection_trace.txt, AnyDesk Logs - System User Account, AnyDesk Chat Logs - User Profile, Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, DWAgent Log Files, IIS log files, ISLOnline Logs - Sessions - *.out, ISLOnline Logs - Session Configurations, ISL AlwaysOn Logs - Sessions List, ISL AlwaysOn Logs - Sessions, ISL AlwaysOn - App Logs, ISL Light Logs - Sessions, ISL AlwaysOn - Email Configuration, ISL AlwaysOn - Configuration, ITarian, ITarian, Comodo, Kali WSL ext4.vhdx, Kaseya Live Connect Logs (XP), Kaseya Live Connect Logs, Kaseya Agent Endpoint Service Logs (XP), Kaseya Agent Endpoint Service Logs, Kaseya Agent Service Log, Kaseya Setup Log, Kaseya Setup Log, Kaseya Setup Log, LNK Files from C:\ProgramData, Error logging, LogMeIn ProgramData Logs, Small Memory Dump directory, MeshAgent .msh (configuration) file, Nessus Logs, Net Monitor Server Logs, Net Monitor Server Data, Net Monitor Server Config, Net Monitor Server Temp Folder, Net Monitor Client Logs, Qlik Sense Logs, RDP Cache Files, Windows.old RDP Cache Files, RDP Jumplist Files, RemoteConnectionManager Event Logs, RemoteConnectionManager Event Logs, LocalSessionManager Event Logs, LocalSessionManager Event Logs, RDPClient Event Logs, RDPClient Event Logs, RDPCoreTS Event Logs, RDPCoreTS Event Logs, Radmin Server 32bit Log, Radmin Server 64bit Log, Radmin Server 32bit Chats, Radmin Server 64bit Chats, UsrClass.dat registry transaction files, RemoteUtilities Connection Logs, Chrome Trust Tokens, Chrome SyncData Database, ActivitiesCache.db, Update Store.db, Bitdefender SQLite DB Files, ScreenConnect Session Database, ScreenConnect User Config, Slack Storage, Snagit - Captures, Steam Login Metadata file, Steam Friend List and Username History file, Steam User Avatar files, Steam Game Tray Icon files, Tablacus Explorer - window1.xml, TeamViewer Connection Logs, TotalAV Logs, Total Commander - .ini File, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal, Setupapi.log Win7+, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/fstab, SYSTEM registry hive (RegBack), DHCP files, Diagnostic Logs for WSA, App download artifacts (PNG), App download artifacts (ICO), Appcompatdb.json, userdata.vhdx, Legacy .rbs files relating to Windows Telemetry and Diagnostics, Xeox RMM Client Application logs, Yandex Cookies, Yandex Network Persistent State"
 type: bool
 - name: RemoteUtilities_app
 description: "Remote Utilities (by Ryan McVicar): UsrClass.dat registry transaction files, RemoteUtilities Connection Logs"
 type: bool
 - name: RoamingProfile
 description: "User Related Registry Hives, LNK files, etc (by Scott Downie): RemoteUtilities Install Log, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, UsrClass.dat registry transaction files, LNK Files, Desktop LNK Files, Word Autosave Location, Publisher Autosave Location, Excel Autosave Location, PowerPoint Autosave Location, Publisher Autosave Location, Office Document Cache, Office Document Cache, Chrome bookmarks, Chrome bookmarks, Chrome Cookies, Chrome Cookies, Chrome Current Session, Chrome Current Session, Chrome Current Tabs, Chrome Current Tabs, Chrome Download Metadata, Chrome Download Metadata, Chrome Extension Cookies, Chrome Extension Cookies, Chrome Favicons, Chrome Favicons, Chrome History, Chrome History, Chrome Last Session, Chrome Last Session, Chrome Last Tabs, Chrome Last Tabs, Chrome Sessions Folder, Chrome Sessions Folder, Chrome Login Data, Chrome Login Data, Chrome Media History, Chrome Media History"
 type: bool
 - name: Robo_FTP
 description: "Robo-FTP (by Thomas Burnette): Chrome Network Action Predictor, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Network Persistent State, Chrome Preferences, Chrome Preferences, Chrome Quota Manager, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Shortcuts, Chrome Top Sites, Chrome Top Sites"
 type: bool
 - name: RogueKiller
 description: "RogueKiller Anti-Malware (by Adlice Software) (by Drew Ervin): Chrome Trust Tokens"
 type: bool
 - name: RustDesk
 description: "RustDesk (by Andrew Rathbun): Chrome Trust Tokens, Chrome SyncData Database"
 type: bool
 - name: SABnbzd
 description: "SABnbzd (by Andrew Rathbun): Chrome SyncData Database, Chrome Visited Links"
 type: bool
 - name: SCCMClientLogs
 description: "SCCM Client Log Files (by Andrew Rathbun): Chrome Visited Links"
 type: bool
 - name: SDB
 description: "Shim SDB FIles (by Troy Larson): Chrome Web Data, Chrome Web Data, Windows Protect Folder, Windows Protect Folder"
 type: bool
 - name: SOFELK
 description: "SOF-ELK related files of interest (by Tony Knutson and Andrew Rathbun): $Boot, $J, $Max, $J, $Max, $LogFile, $MFT, $SDS, $SDS, $T, $T, Amcache, Amcache, Amcache transaction files, Amcache transaction files, AppCompat PCA Folder, Event logs Win7+, Event logs XP, Event logs Win7+, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, PowerShell Transcripts - Observed Location, Prefetch, Rclone Config, RecentFileCache, User startup folders, System-wide startup folder"
 type: bool
 - name: SQLiteDatabases
 description: "SQLDatabases Target for use with SQLECmd Module (by Andrew Rathbun): Edge folder, Edge folder, Amcache, Amcache transaction files, LNK Files from Recent, LNK Files from Recent, LNK Files from Microsoft Office Recent, LNK Files from Microsoft Office Recent, Robo-FTP User Scripts, Robo-FTP User Debug Logs, Robo-FTP User Script/Trace Logs, Robo-FTP User XML Config, Robo-FTP User SSH Keys, Robo-FTP User SSL Certificates, Robo-FTP User PGP Keys, Robo-FTP SSH Keys, Robo-FTP SSL Certificates, Robo-FTP PGP Keys, Robo-FTP Debug Logs, Robo-FTP Script/Trace Logs, Robo-FTP XML Config, Robo-FTP Jobs, RogueKiller Reports, RustDesk logs, RustDesk logs, Usenet Clients - SABnzbd Download Logs, Usenet Clients - SABnzbd History.db, SCCM Client Log Files, SDB Files, SDB Files, SDB Files x64, SDB Files x64, 4K Video Downloader, Microsoft OneNote - FullTextSearchIndex, Microsoft OneNote - RecentNotebooks_SeenURLs, Microsoft OneNote - AccessibilityCheckerIndex, Microsoft OneNote - User NoteTags, Microsoft OneNote - RecentSearches, Microsoft Sticky Notes - 1607 and later, Microsoft To Do - SQLite Database of To Do tasks, Robo-FTP Jobs, TeraCopy - History Databases, TeraCopy - Main Database, Notion Local Storage, IDrive Backed Up Files, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Dropbox Metadata, Google File Stream Metadata, Google File Stream Metadata, Google File Stream Metadata, Google File Stream Metadata, FileZilla SQLite3 Log Files, Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs"
 type: bool
 - name: SRUM
 description: "System Resource Usage Monitor (SRUM) Data (by Mark Hallman): Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Login Data, Edge Media History"
 type: bool
 - name: SUM
 description: "SUM Database (by Andrew Rathbun): Edge Network Action Predictor"
 type: bool
 - name: SUPERAntiSpyware
 description: "SUPERAntiSpyware Data (by Drew Ervin): Edge Preferences"
 type: bool
 - name: SUSELinuxEnterpriseServer
 description: "SUSE Linux Enterprise Server on Windows Subsystem for Linux (by Matt Dawson): Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Addons, Bookmarks, Cookies, Cookies, Downloads, Favicons, Form history, Permissions, Places"
 type: bool
 - name: ScheduledTasks
 description: "Scheduled tasks (*.job and XML) (by Eric Zimmerman, Reece394): Protections, Search, Signons, Storage Sync, Webappstore, Windows 10 Notification DB, Windows 10 Notification DB, Zoom plugin (Outlook), eMule Logs and Configuration Files, eMule part.met files, iTunes Backup Folder, iTunes Backup Folder, iTunes Backup Folder - iOS13"
 type: bool
 - name: ScreenConnect
 description: "ScreenConnect Data (now known as ConnectWise Control) (by Drew Ervin): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, ActivitiesCache.db, Update Store.db, Bitdefender SQLite DB Files"
 type: bool
 - name: SecureAge
 description: "SecureAge Antivirus Logs (by Andrew Rathbun): EventTranscript.db"
 type: bool
 - name: SentinelOne
 description: "Sentinel One Logs (by Kirtan Shah): EventTranscript.db"
 type: bool
 - name: ServerTriage
 description: "A compound target for gathering artifacts common to servers. (by Eric Capuano): Apache Access Log, Confluence Wiki Log Files, Confluence Wiki Log Files, Everything (VoidTools) - .ini file, Exchange Server Modified Compiled Files, Exchange Setup Log file, FileZilla SQLite3 Log Files, FileZilla Server XML Log Files, web.config, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, MOF files, MS SQL Errorlog, MalwareBytes Anti-Malware Scan Results Logs, ManageEngine Desktop Central Log Files, .NET CLR UsageLogs (system-scoped), OpenSSH Default DSA Private Key, OpenSSH Server Config File, OpenSSH Server Logs, OpenSSH Host ECDSA Key, OpenSSH Host ED25519 Key, OpenSSH Host DSA Key, OpenSSH Host RSA Key, OpenSSH User Authorized Keys, OpenSSH User Authorized Keys 2"
 type: bool
 - name: Session
 description: "Session Desktop (by Vito Alfano): SRUM"
 type: bool
 - name: ShareX
 description: "ShareX (by Andrew Rathbun): SRUM"
 type: bool
 - name: Shareaza
 description: "Shareaza (by Andrew Rathbun): SOFTWARE registry hive"
 type: bool
 - name: SiemensTIA
 description: "Copy Siemens TIA Settings (by Olaf Schwarz (@b00010111)): SOFTWARE registry hive"
 type: bool
 - name: Signal
 description: "Signal (Please view this tkape file for documentation on decryption!) (by Matt Dawson): SOFTWARE registry transaction files, SOFTWARE registry transaction files, SUM Database (.mdb files), SUPERAntiSpyware Logs"
 type: bool
 - name: SignatureCatalog
 description: "Obtain detached signature catalog files (by Mike Pilkington): SUSE Linux Enterprise Server WSL /etc/os-release, SUSE Linux Enterprise Server WSL /etc/fstab"
 type: bool
 - name: Skype
 description: "Skype (by Eric Zimmerman, Matt Dawson): SUSE Linux Enterprise Server WSL /etc/passwd, SUSE Linux Enterprise Server WSL /etc/group, SUSE Linux Enterprise Server WSL /etc/shadow, SUSE Linux Enterprise Server WSL /etc/timezone, SUSE Linux Enterprise Server WSL /etc/hostname, SUSE Linux Enterprise Server WSL /etc/hosts, SUSE Linux Enterprise Server WSL /etc/bash.bashrc"
 type: bool
 - name: Slack
 description: "Slack (by Andrew Rathbun and Chad Tilbury): SUSE Linux Enterprise Server WSL /etc/profile, SUSE Linux Enterprise Server WSL .bash_history, SUSE Linux Enterprise Server WSL .bashrc, SUSE Linux Enterprise Server WSL .profile, SUSE Linux Enterprise Server WSL ext4.vhdx"
 type: bool
 - name: Snagit
 description: "Snagit (by Andrew Rathbun): at .job"
 type: bool
 - name: SnipAndSketch
 description: "Snip &amp;amp; Sketch Cached Images (by Kevin Pagano): at .job"
 type: bool
 - name: Sophos
 description: "Sophos Data (by Drew Ervin, Reece394): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, at SchedLgU.txt, at SchedLgU.txt, XML"
 type: bool
 - name: Soulseek
 description: "Soulseek (by Andrew Rathbun): XML, XML"
 type: bool
 - name: SpeedCommander
 description: "SpeedCommander (by Andrew Rathbun): ScreenConnect Session Database"
 type: bool
 - name: Splashtop
 description: "Splashtop (by Andrew Rathbun, Yogesh Khatri): ScreenConnect Session Database, ScreenConnect User Config"
 type: bool
 - name: StartupFolders
 description: "Startup Folders (by Jason Ballard): SecureAge Antvirus Logs, SentinelOne EDR Log"
 type: bool
 - name: StartupInfo
 description: "StartupInfo XML Files (by Hadar Yudovich): Session App Folder, ShareX"
 type: bool
 - name: Steam
 description: "Steam (by Nisarg Suthar, SolitudePy): Shareaza Logs, Siemens TIA Settings, Signal Attachments cache, Signal Logs, Signal config.json, Signal Database, SignatureCatalog, SignatureCatalog, main.db (App &amp;lt;v12), skype.db (App +v12), main.db XP, main.db Win7+"
 type: bool
 - name: SublimeText
 description: "Sublime Text 2/3/4 Auto Save Session (by Mathias Frank and Nisarg Suthar): s4l-[username].db (App +v8), leveldb (Skype for Desktop +v8)"
 type: bool
 - name: SugarSync
 description: "SugarSync (by Andrew Rathbun): Skype for Destkop v8+ Chromium Cache, Slack - Chat Logs, Slack LevelDB Files"
 type: bool
 - name: SumatraPDF
 description: "SumatraPDF (by Andrew Rathbun): Slack Electron Logs, Slack Cache"
 type: bool
 - name: SupremoRemoteDesktop
 description: "Supremo Remote Desktop Control Logs (by epoxigen): Slack Storage, Snagit - Captures"
 type: bool
 - name: Symantec_AV_Logs
 description: "Symantec AV Logs (by Brian Maloney): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Snip &amp;amp; Sketch, Sophos Logs (XP), Sophos Logs, Sophos Logs, Soulseek Chat Logs, Soulseek Search History/Shared Folders/Settings, SpeedCommander - .ini File, Splashtop Log Files, Splashtop Log Files in ProgramData"
 type: bool
 - name: Syscache
 description: "syscache.hve (by Phill Moore): User startup folders, System-wide startup folder"
 type: bool
 - name: TablacusExplorer
 description: "Tablacus Explorer (by Andrew Rathbun): StartupInfo XML Files, StartupInfo XML Files, Steam Game Image files"
 type: bool
 - name: TeamViewerLogs
 description: "TeamViewer Logs (by Hadar Yudovich, Sam Smoker): Steam Login Metadata file, Steam Friend List and Username History file, Steam User Avatar files, Steam Game Tray Icon files"
 type: bool
 - name: Telegram
 description: "Telegram Desktop (by Simone Marinari): Steam Startup Times Log file, Steam Game Image files"
 type: bool
 - name: TeraCopy
 description: "TeraCopy log history (by Kevin Pagano): Steam Login Metadata file"
 type: bool
 - name: ThumbCache
 description: "Thumbcache DB (by Eric Zimmerman): Steam Friend List and Username History file"
 type: bool
 - name: Thunderbird
 description: "Mozilla Thunderbird Email Client (by Matt Dawson): Steam User Avatar files, Steam Game Tray Icon files, Steam Startup Times Log file, SublimeText 2/3 Auto Save Session, SublimeText 4 Auto Save Session, SugarSync Log File, SugarSync - Shared Folders (Default Location), SugarSync - My SugarSync (Default Location), SumatraPDF Settings - SessionData, SumatraPDF Cache, Supremo Connection Logs"
 type: bool
 - name: TorrentClients
 description: "Torrent Clients (by Andrew Rathbun): TorrentClients - BitTorrent, Zoho Assist log files in Program Files*, Zoho Assist .conf files in Program Files*, Zoho Assist .txt files in Program Files*, Zoom client logs, Zoom client logs (Windows XP)"
 type: bool
 - name: Torrents
 description: "Torrent Files (by Tony Knutson): Supremo File Transfer Inbox"
 type: bool
 - name: TotalAV
 description: "TotalAV Antivirus Data (by Kirtan Shah): Symantec Endpoint Protection Logs (XP), Symantec Endpoint Protection Logs"
 type: bool
 - name: TotalCommander
 description: "Total Commander (by Andrew Rathbun, Jessica Venturo and Chuck Whitson): Symantec Endpoint Protection User Logs, Symantec Event Log Win7+, Symantec Event Log Win7+, Symantec Endpoint Protection Quarantine (XP), Symantec Endpoint Protection Quarantine, ccSubSDK Database, registrationInfo.xml"
 type: bool
 - name: TreeSize
 description: "TreeSize - Scan History (by Andrew Rathbun): Syscache"
 type: bool
 - name: TrendMicro
 description: "Trend Micro Data (by Drew Ervin): Syscache transaction files, Tablacus Explorer - remember.xml, Tablacus Explorer - window.xml"
 type: bool
 - name: UEMS
 description: "UEMS Manage Engine Agent (by Abdelkarim CHORFI - CERT CWATCH - ALMOND): Tablacus Explorer - window1.xml, TeamViewer Connection Logs"
 type: bool
 - name: USBDetective
 description: "Collects files that can be input into USB Detective for parsing (by Kevin Pagano): Amcache, Amcache, Amcache transaction files, Amcache transaction files, Event logs Win7+, Event logs XP, Event logs Win7+, Keepass Roaming Ini, LNK Files from Recent, LNK Files from Microsoft Office Recent, Start Menu LNK Files, LNK Files from Recent (XP), Desktop LNK Files XP, Desktop LNK Files, Restore point LNK Files XP, RECYCLER - WinXP, Registry.dat MSIX Hive, User.dat MSIX Hive, VSMIDK registry transaction files, SAM registry transaction files, SAM registry transaction files, SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files, SYSTEM registry transaction files, SAM registry hive, SAM registry hive, SECURITY registry hive, SECURITY registry hive, SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive, SYSTEM registry hive, RegBack registry transaction files, RegBack registry transaction files, SAM registry hive (RegBack), SAM registry hive (RegBack), SECURITY registry hive (RegBack), SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), System Profile registry hive, System Profile registry hive, System Profile registry transaction files, System Profile registry transaction files, Local Service registry hive, Local Service registry hive, Local Service registry transaction files, Local Service registry transaction files, Network Service registry hive, Network Service registry hive, Network Service registry transaction files, Network Service registry transaction files, System Restore Points Registry Hives (XP), NTUSER.DAT registry hive XP, NTUSER.DAT registry hive, NTUSER.DAT registry transaction files, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT registry hive, NTUSER.DAT DEFAULT transaction files, NTUSER.DAT DEFAULT transaction files, UsrClass.dat registry hive, TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files"
 type: bool
 - name: USBDevicesLogs
 description: "USB devices log files (by Eric Zimmerman, esecrpm): TeamViewer Application Logs, TeamViewer Application User Logs, TeamViewer Configuration Files"
 type: bool
 - name: Ubuntu
 description: "Ubuntu on Windows Subsystem for Linux (by Matt Dawson): Telegram app folder, Telegram downloaded files, TeraCopy, Thumbcache DB, Mozilla Thunderbird Install Date, Mozilla Thunderbird Profiles.ini, Mozilla Thunderbird prefs.js, Mozilla Thunderbird Global Messages Database, Mozilla Thunderbird logins.json, Mozilla Thunderbird places.sqlite, Mozilla Thunderbird ImapMail INBOX, Mozilla Thunderbird Mail INBOX, Mozilla Thunderbird Calendar Data, Mozilla Thunderbird Attachments, Mozilla Thunderbird Address Book, Torrents, TotalAV Logs"
 type: bool
 - name: Ultraviewer
 description: "UltraViewer (by Ryan McVicar, Sam Smoker): TotalAV Logs, Total Commander - .ini File, Total Commander - Log File, Total Commander - Temp Files Created During Folder Traversal"
 type: bool
 - name: Usenet
 description: "Usenet (NZB) Files (by Andrew Rathbun): Total Commander - FTP .ini File"
 type: bool
 - name: UsenetClients
 description: "Usenet Clients (by Andrew Rathbun): NGINX Log Files, Usenet Clients - NZBGet Log File, Net Monitor Client Config, Usenet Clients - Newsbin Pro, Chrome SyncData Database, Chrome Visited Links"
 type: bool
 - name: UsersFolders
 description: "Users folders Dump (by Vito Alfano): Total Commander - File Tree"
 type: bool
 - name: VIPRE
 description: "VIPRE Data (by Drew Ervin): Total Commander - Frequent Directory Listing, Total Commander - FTP Logs, TreeSize - ScanHistory.XML, Trend Micro Logs"
 type: bool
 - name: VLC_Media_Player
 description: "VLC Media Player (by Matt Dawson): Trend Micro Security Agent Report Logs, Trend Micro Security Agent Connection Logs"
 type: bool
 - name: VMware
 description: "Runs all VMware modules to collect VMware VM config files, logs and Virtual Hard Disks (by Matt Dawson): Unified endpoint management and security solutions from ManageEngine, Unified endpoint management and security solutions from ManageEngine, Setupapi.log XP, Setupapi.log Win7+, Ubuntu WSL .profile, Ubuntu WSL User Crontabs, Ubuntu WSL Apt Logs, Ubuntu WSL ext4.vhdx"
 type: bool
 - name: VMwareInventory
 description: "VMware - Virtual Machine Inventory (by Andrew Rathbun): Unified endpoint management and security solutions from ManageEngine"
 type: bool
 - name: VMwareMemory
 description: "VMware - Virtual Machine Memory (by Andrew Rathbun): Unified endpoint management and security solutions from ManageEngine, Setupapi.log XP, Setupapi.log Win7+"
 type: bool
 - name: VNCLogs
 description: "VNC Logs (by Phill Moore): Application Event Log XP, Application Event Log XP, Application Event Log Win7+, Application Event Log Win7+, Setupapi.log Win7+, Ubuntu WSL /etc/os-release, Ubuntu WSL /etc/fstab"
 type: bool
 - name: Viber
 description: "ViberPC Messaging App (by Matt Dawson): Ubuntu WSL /etc/passwd, Ubuntu WSL /etc/group, Ubuntu WSL /etc/shadow, Ubuntu WSL /etc/timezone, Ubuntu WSL /etc/hostname"
 type: bool
 - name: VirtualBox
 description: "Runs all VirtualBox modules to collect Virtualbox VM config files, logs and Virtual Hard Disks (by Matt Dawson): Ubuntu WSL /etc/hosts, Ubuntu WSL /etc/crontab, Ubuntu WSL /etc/bash.bashrc, Ubuntu WSL /etc/profile, Ubuntu WSL .bash_history, Ubuntu WSL .bashrc, Ubuntu WSL .profile, Ubuntu WSL User Crontabs, Ubuntu WSL Apt Logs, Ubuntu WSL ext4.vhdx"
 type: bool
 - name: VirtualBoxConfig
 description: "Collects VirtualBox configuration files (by Matt Dawson): Ubuntu WSL /etc/hosts, Ubuntu WSL /etc/crontab"
 type: bool
 - name: VirtualBoxLogs
 description: "Collects VirtualBox log files (by Matt Dawson): Ubuntu WSL /etc/bash.bashrc, Ubuntu WSL /etc/profile, Ubuntu WSL .bash_history"
 type: bool
 - name: VirtualBoxMemory
 description: "VirtualBox - Memory (by Andrew Rathbun): Ubuntu WSL .bashrc"
 type: bool
 - name: VirtualDisks
 description: "Virtual Disks (by Phill Moore): Ubuntu WSL .profile, Ubuntu WSL User Crontabs, Ubuntu WSL Apt Logs, Ubuntu WSL ext4.vhdx"
 type: bool
 - name: VisualStudioCode
 description: "Visual Studio Code artifacts (by Sebastian Søgaard): UltraViewer User Logs, UltraViewer System Logs, UltraViewer Service Log, UltraViewer Connection Log, Usenet (NZB) Files, Users, VIPRE Business Agent Logs, VIPRE Business User Logs (v7+)"
 type: bool
 - name: Vivaldi
 description: "Vivaldi Artifacts (by Sebastian Søgaard): VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (up to v4), VLC Recently Opened Files, VLC Recorded Files, VMware - Virtual Machine Inventory, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), RealVNC Log, RealVNC Log, TightVNC Application Logs, Viber Config Database, Viber Users Data Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Thumbnails Cache, VirtualBox VM configs"
 type: bool
 - name: WBEM
 description: "Web-Based Enterprise Management (WBEM) (by Mark Hallman): VirtualBox VM backup configs, VirtualBox Logs"
 type: bool
 - name: WER
 description: "Windows Error Reporting (by Troy Larson): VirtualBox Backup Logs, VirtualBox Hardening Logs, VirtualBox, VHD, VHDX"
 type: bool
 - name: WSL
 description: "All Windows Subsystem for Linux targets (by Matt Dawson): Debian WSL /etc/debian_version, Debian WSL /etc/fstab, Debian WSL /etc/os-release, Debian WSL /etc/passwd, Debian WSL /etc/group, Debian WSL /etc/shadow, Debian WSL /etc/timezone, Debian WSL /etc/hostname, Debian WSL /etc/hosts, Debian WSL /etc/crontab, Debian WSL /etc/bash.bashrc, Debian WSL /etc/profile, Debian WSL .bash_history, Debian WSL .bashrc, Debian WSL .profile, Debian WSL User Crontabs, Debian WSL Apt Logs, Debian WSL ext4.vhdx, JumpLists from CustomDestinations, Kali WSL /etc/debian_version, Kali WSL /etc/fstab, Kali WSL /etc/os-release, Kali WSL /etc/passwd, Kali WSL /etc/group, Kali WSL /etc/shadow, Kali WSL /etc/timezone, Kali WSL /etc/hostname, Kali WSL /etc/hosts, Kali WSL /etc/crontab, Kali WSL /etc/bash.bashrc, Kali WSL /etc/profile, Kali WSL .bash_history, Kali WSL .bashrc, Kali WSL .profile, Kali WSL User Crontabs, Kali WSL Apt Logs, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Addons, Bookmarks, Cookies, Cookies, Downloads, Favicons, Form history, Permissions, Places, Telegram app folder, Telegram downloaded files, TeraCopy, Thumbcache DB, Mozilla Thunderbird Install Date, Mozilla Thunderbird Profiles.ini, Mozilla Thunderbird prefs.js, Mozilla Thunderbird Global Messages Database, Mozilla Thunderbird logins.json, Mozilla Thunderbird places.sqlite, Mozilla Thunderbird ImapMail INBOX, Mozilla Thunderbird Mail INBOX, Mozilla Thunderbird Calendar Data, Mozilla Thunderbird Attachments, Mozilla Thunderbird Address Book, Torrents, TotalAV Logs, Yandex Favicons, Yandex History, Yandex Sessions Folder, Yandex Login Data, Yandex Network Action Predictor, Yandex Preferences, Yandex Top Sites, Yandex Bookmarks, Yandex Visited Links, Yandex Web Data, Yandex Autofill data, Yandex Passman logs, Yandex Shortcuts, Zoho Assist log files in AppData\Local"
 type: bool
 - name: WebBrowsers
 description: "Web browser history, bookmarks, etc. (by Eric Zimmerman): Bookmarks, Cookies, Current Session, Current Tabs, Download Metadata, Favicons, History, Sessions Folder, Login Data, Network Action Predictor, Network Persistent State, Preferences, Quota Manager, Reporting and NEL, Shortcuts, Publisher Info DB/Brave Rewards, Top Sites, Visited Links, Web Data, Secure Preferences, Chrome bookmarks XP, Chrome Cookies XP, Chrome Current Session XP, Chrome Current Tabs XP, Chrome Favicons XP, Chrome History XP, Chrome Last Session XP, Chrome Last Tabs XP, Chrome Login Data XP, Chrome Preferences XP, Chrome Shortcuts XP, Chrome Top Sites XP, Chrome Visited Links XP, Chrome Web Data XP, Chrome bookmarks, Chrome Cookies, Chrome Current Session, Chrome Current Tabs, Chrome Download Metadata, Chrome Extension Cookies, Chrome Favicons, Chrome History, Chrome Last Session, Chrome Last Tabs, Chrome Sessions Folder, Chrome Login Data, Chrome Media History, Chrome Network Action Predictor, Chrome Network Persistent State, Chrome Preferences, Chrome Quota Manager, Chrome Reporting and NEL, Chrome Shortcuts, Chrome Top Sites, Chrome Trust Tokens, Chrome SyncData Database, Chrome Visited Links, Chrome Web Data, Windows Protect Folder, Chrome Snapshots Folder, SYSTEM Chrome History, Edge folder, Edge bookmarks, Edge Bookmarks, Edge Collections, Edge Cookies, Edge Current Session, Edge Current Tabs, Edge Favicons, Edge History, Edge Last Session, Edge Last Tabs, Edge Sessions Folder, Edge Login Data, Edge Media History, Edge Network Action Predictor, Edge Preferences, Edge Shortcuts, Edge Top Sites, Edge SyncData Database, Edge Visited Links, Edge Web Data, Edge WebAssistDatabase, Windows Protect Folder, FileZilla Log Files, Addons, Bookmarks, Bookmarks, Cookies, Cookies, Downloads, Extensions, Favicons, Form history, Permissions, Places, Protections, Search, Signons, Storage Sync, Webappstore, Password, Password, Password, Preferences, Sessionstore, Sessionstore Folder, Places XP, Downloads XP, Form history XP, Cookies XP, Signons XP, Webappstore XP, Favicons XP, Addons XP, Search XP, Password XP, Password XP, Password XP, ImgBurn - Application Log File, Index.dat History, Index.dat History subdirectory, Index.dat cookies, Index.dat UserData, Index.dat Office XP, Index.dat Office, Local Internet Explorer folder, Roaming Internet Explorer folder, IE 9/10 History, IE 9/10 Cookies, IE 9/10 Download History, IE 11 Metadata, OpenVPN Client Config, Opera - Local Folder, ProtonVPN - Connection Logs, Puffin - data.db, Puffin - Autocomplete Data, Puffin - Password Forms Data, Puffin - Password (Encrypted), Puffin - Subscription Data, Puffin - Cookies, VIPRE Business User Logs (v5-v6), VIPRE Business User Logs (up to v4), VLC Recently Opened Files, VLC Recorded Files, VMware - Virtual Machine Inventory, VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), VMware (Fusion/Workstation/Server/Player), RealVNC Log, RealVNC Log, TightVNC Application Logs, Viber Config Database, Viber Users Data Database, Viber Users Avatars Cache, Viber Users Backgrounds Cache, Viber Users Thumbnails Cache, VirtualBox VM configs, SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), WindowsIndexSearch, GatherLogs, Network setting files, Windows 10 Notification DB, Windows 10 Notification DB, MigLog.xml, Setupact.log, HumanReadable.xml, FolderMoveLog.txt, Update Store.db, Windows Power Diagnostics, DNS Netlogon files, DNS files"
 type: bool
 - name: WebServers
 description: "Logs from all known web server applications and supporting services (by Eric Capuano): Apache Access Log, web.config, IIS log files, IIS log files, IIS log files, IIS log files, IIS log files, MOF files, MS SQL Errorlog, .NET CLR UsageLogs (system-scoped)"
 type: bool
 - name: Webroot
 description: "Webroot Antivirus (by Drew Ervin): VDI"
 type: bool
 - name: WhatsApp
 description: "WhatsApp Local Files (by Matt Dawson, SolitudePy): VMDK, VSCode Opened Files, VSCode Workspaces, VSCode User extensions"
 type: bool
 - name: WhatsApp_Media
 description: "WhatsApp Shared Media Files (by SolitudePy): VSCode User settings, VSCode User Preferences"
 type: bool
 - name: WinDefendDetectionHist
 description: "Windows Defender Threat DetectionHistory files (by Jordan Klepser): VSCode Network Cookies"
 type: bool
 - name: WinSCP
 description: "WinSCP (by Andrew Rathbun): VSCode Network Persistent State"
 type: bool
 - name: WindowsCopilotRecall
 description: "Windows Copilot+ Recall (by Zach Stanford/Phill Moore): VSCode Logs"
 type: bool
 - name: WindowsDefender
 description: "Windows Defender Data (by Drew Ervin): Vivaldi Cookies, Vivaldi Network Persistent State, Vivaldi Favicons, Vivaldi History, Vivaldi Sessions Folder, Vivaldi Login Data, Vivaldi Network Action Predictor, Vivaldi Preferences, Vivaldi Top Sites"
 type: bool
 - name: WindowsFirewall
 description: "Windows Firewall Logs (by Mike Cary): Vivaldi Bookmarks, Vivaldi Visited Links"
 type: bool
 - name: WindowsHello
 description: "Windows Hello (by Kevin Pagano): Vivaldi Web Data, Vivaldi User Tracking, Vivaldi Calendar, Vivaldi Contacts, Vivaldi Notes, Vivaldi Download Metadata, WBEM, WBEM, WER Files, WER Files, Crash Dumps, Crash Dumps, Crash Dumps, Webroot Program Data, WhatsApp Cache, WhatsApp Local Storage, Microsoft Store WhatsApp Cache, Microsoft Store WhatsApp Local Storage, Microsoft Store WhatsApp Desktop Profile Pictures, Microsoft Store WhatsApp Shared Media, DetectionHistory, WinSCP (.ini file), Recall folder"
 type: bool
 - name: WindowsIndexSearch
 description: "Windows Index Search (by Mark Hallman): Windows Defender Logs, Windows Defender Event Logs"
 type: bool
 - name: WindowsNetwork
 description: "Windows Networks settings (by Zawadi Done): Windows Defender Event Logs"
 type: bool
 - name: WindowsNotificationsDB
 description: "Windows 10 Notification DB (by Hadar Yudovich): Windows Defender Logs, Windows Defender Logs"
 type: bool
 - name: WindowsOSUpgradeArtifacts
 description: "Windows OS Upgrade Artifacts (by Andrew Rathbun): Windows Defender Logs, DetectionHistory, Windows Defender Quarantine, Windows Defender Detections.log, Windows Firewall Logs"
 type: bool
 - name: WindowsPowerDiagnostics
 description: "Windows Power Diagnostics (by Andrew Rathbun): Windows Firewall Logs"
 type: bool
 - name: WindowsServerDNSAndDHCP
 description: "Windows Server DNS and DHCP log files (by Zawadi Done): Cryptokeys, Masterkey, NGC"
 type: bool
 - name: WindowsSubsystemforAndroid
 description: "Windows Subsystem for Android (WSA) (by Andrew Rathbun): SECURITY registry transaction files, SECURITY registry transaction files, SOFTWARE registry transaction files, SOFTWARE registry transaction files, SYSTEM registry transaction files"
 type: bool
 - name: WindowsTelemetryDiagnosticsLegacy
 description: "Legacy Windows Telemetry and Diagnostics files (*.rbs) (by Andrew Rathbun and Josh Mitchell): SYSTEM registry transaction files, SECURITY registry hive"
 type: bool
 - name: WindowsTimeline
 description: "ActivitiesCache.db collector (by Lee Whitfield, Thomas DIOT (Qazeer)): SECURITY registry hive"
 type: bool
 - name: WindowsUpdate
 description: "Windows Update Logs (by Rick van Dreunen): SOFTWARE registry hive, SOFTWARE registry hive, SYSTEM registry hive"
 type: bool
 - name: WindowsYourPhone
 description: "Windows Your Phone (by Andrew Rathbun): SYSTEM registry hive"
 type: bool
 - name: XPRestorePoints
 description: "XP Restore Points - System Volume Information directory (by Phill Moore): SECURITY registry hive (RegBack)"
 type: bool
 - name: XYplorer
 description: "XYplorer (by Andrew Rathbun): SECURITY registry hive (RegBack), SOFTWARE registry hive (RegBack), SOFTWARE registry hive (RegBack), SYSTEM registry hive (RegBack)"
 type: bool
 - name: Xeox
 description: "Xeox Application Logs (by Andrew Skatoff @DFIR_TNT): SYSTEM registry hive (RegBack)"
 type: bool
 - name: Yandex
 description: "Yandex Artifacts (by Sebastian Søgaard): SYSTEM registry hive (RegBack), SYSTEM registry hive (RegBack), WindowsIndexSearch, GatherLogs, Network setting files, Windows 10 Notification DB, Windows 10 Notification DB, MigLog.xml, Setupact.log, HumanReadable.xml, FolderMoveLog.txt, Update Store.db, Windows Power Diagnostics, DNS Netlogon files, DNS files"
 type: bool
 - name: ZohoAssist
 description: "Zoho Assist artifacts (by Andrew Rathbun): DHCP files, Diagnostic Logs for WSA, App download artifacts (PNG), App download artifacts (ICO), Appcompatdb.json, userdata.vhdx, Legacy .rbs files relating to Windows Telemetry and Diagnostics"
 type: bool
 - name: Zoom
 description: "Zoom client artifacts (by Ryan McVicar): Legacy .rbs files relating to Windows Telemetry and Diagnostics, ActivitiesCache.db, Windows Update Session Orchestrator logs, Windows Update logs"
 type: bool
 - name: eMule
 description: "eMule (by Fábio Melo Pfeifer): Windows Component-Based Servicing logs, Windows Your Phone - All Databases"
 type: bool
 - name: iTunesBackup
 description: "iTunes Backups (by Tony Knutson): System Volume Information, XYplorer - .ini file, XYplorer - .ini file for each respective pane"
 type: bool
 - name: mIRC
 description: "mIRC (by Andrew Rathbun): XYplorer - AutoBackup folder, XYplorer - .dat files"
 type: bool
 - name: mRemoteNG
 description: "mRemoteNG (by Markus Einarsson (@einarssonm)): Xeox RMM Client Application logs, Yandex Cookies, Yandex Network Persistent State"
 type: bool
 - name: openSUSE
 description: "openSUSE on Windows Subsystem for Linux (by Matt Dawson): Yandex Favicons, Yandex History, Yandex Sessions Folder, Yandex Login Data, Yandex Network Action Predictor, Yandex Preferences, Yandex Top Sites, Yandex Bookmarks, Yandex Visited Links, Yandex Web Data, Yandex Autofill data, Yandex Passman logs, Yandex Shortcuts, Zoho Assist log files in AppData\Local"
 type: bool
 - name: pCloudDatabase
 description: "pCloud Database (by Josh Hickman): Zoho Assist .conf files in AppData\Local, Zoho Assist log files in ProgramData, Zoho Assist .conf files"
 type: bool
 - name: qBittorrent
 description: "qBittorrent (by Banaanhangwagen): Zoho Assist log files in Program Files*, Zoho Assist .conf files in Program Files*, Zoho Assist .txt files in Program Files*, Zoom client logs"
 type: bool
 - name: uTorrent
 description: "uTorrent (by Banaanhangwagen): Zoom client logs (Windows XP)"
 type: bool

 - name: KapeRules
 type: hidden
 description: A CSV file controlling the different Kape Target Rules
 default: |
 Id,Name,Category,Glob,Accessor,Comment
 1,$Boot,FileSystem,$Boot,ntfs,
 2,$J,FileSystem,$Extend\$UsnJrnl:$J,ntfs,
 3,$Max,FileSystem,$Extend\$UsnJrnl:$Max,ntfs,
 4,$J,FileSystem,$Extend\$J,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Targets are looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 5,$Max,FileSystem,$Extend\$Max,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Targets are looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 6,$LogFile,FileSystem,$LogFile,ntfs,
 7,$MFT,FileSystem,$MFT,ntfs,
 8,$MFTMirr,FileSystem,$MFTMirr,ntfs,$MFTMirr is a redundant copy of the first four (4) records of the MFT.
 9,$SDS,FileSystem,$Secure:$SDS,ntfs,
 10,$SDS,FileSystem,$Secure_$SDS,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Target is looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 11,$T,FileSystem,$Extend\$RmMetadata\$TxfLog\$Tops:$T,ntfs,
 12,$T,FileSystem,$Extend\$RmMetadata\$TxfLog\$T,ntfs,This is for the use case when you're running this Target against a mounted VHDX with these files already pulled from a live system. The above Target is looking for the files as an ADS whereas once they are already pulled they no longer match the ADS criteria and therefore are missed
 13,1Password Database,Apps,Users\*\AppData\Local\1password\data\1Password10.sqlite,lazy_ntfs,"Database which holds information about 1Password installation, such as accounts, categories, settings and more"
 14,1Password Backup Databases,Apps,Users\*\AppData\Local\1password\backups\1Password10.sqlite,lazy_ntfs,Backups of 1Password Database
 15,1Password Logs,Apps,Users\*\AppData\Local\1password\logs\*.log,lazy_ntfs,Log of usage of 1Password - can be useful for identifying periods of user activity
 16,4K Video Downloader,Apps,Users\*\AppData\Local\4kdownload.com\4K Video Downloader\4K Video Downloader\*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 17,4K Video Downloader+,Apps,Users\*\AppData\Local\4kdownload.com\4K Video Downloader+\4K Video Downloader+\*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 18,AVG AV Logs (XP),Antivirus,Documents and Settings\All Users\Application Data\AVG\Antivirus\log\**10,lazy_ntfs,
 19,AVG AV Report Logs (XP),Antivirus,Documents and Settings\All Users\Application Data\AVG\Antivirus\report\**10,lazy_ntfs,
 20,AVG AV Logs,Antivirus,ProgramData\AVG\Antivirus\log\**10,lazy_ntfs,
 21,AVG Report Logs,Antivirus,ProgramData\AVG\Antivirus\report\**10,lazy_ntfs,
 22,AVG Persistent Logs,Antivirus,ProgramData\AVG\Persistent Data\Antivirus\Logs\**10,lazy_ntfs,
 23,AVG FileInfo DB,Antivirus,ProgramData\AVG\Antivirus\**10\FileInfo2.db,lazy_ntfs,
 24,AVG lsdbj2 JSON,Antivirus,ProgramData\AVG\Antivirus\lsdb2.json,lazy_ntfs,
 25,AceText - Clipboard History,Apps,Users\*\Documents\*.atc,lazy_ntfs,Locates the Clipboard history for AceText
 26,Acronis True Image - Logs,Apps,ProgramData\Acronis\TrueImageHome\Logs\ti_demon\*,lazy_ntfs,Copies out all log files
 27,Acronis True Image - Database Files,Apps,ProgramData\Acronis\TrueImageHome\Database\archives.db*,lazy_ntfs,Copies out the Database folder which appears to have important information
 28,Acronis True Image - Scripts Folder,Apps,ProgramData\Acronis\TrueImageHome\Scripts\*,lazy_ntfs,Copies out all scripts files
 29,Action1 Client Application logs,ApplicationLogs,Windows\Action1\logs\*.log,lazy_ntfs,"Contains Application Log entries such as service start and incomming connections, and deployed scripts/jobs."
 30,NTDS,Active Directory,Windows\NTDS\**10,lazy_ntfs,
 31,SYSVOL,Active Directory,Windows\SYSVOL\**10,lazy_ntfs,
 32,Agent Ransack Config Logs,Software,Users\*\AppData\Roaming\Mythicsoft\AgentRansack\config\**10,lazy_ntfs,
 33,Agent Ransack CrashReports Logs,Software,Users\*\AppData\Roaming\Mythicsoft\AgentRansack\CrashReports\**10,lazy_ntfs,
 34,Agent Ransack IndexLog Logs,Software,Users\*\AppData\Roaming\Mythicsoft\AgentRansack\IndexLog\**10,lazy_ntfs,
 35,Agent Ransack Logs,Software,Users\*\AppData\Roaming\Mythicsoft\AgentRansack\logs\**10,lazy_ntfs,
 36,Amcache,ApplicationCompatibility,Windows\AppCompat\Programs\Amcache.hve,lazy_ntfs,
 37,Amcache,ApplicationCompatibility,Windows.old\Windows\AppCompat\Programs\Amcache.hve,lazy_ntfs,
 38,Amcache transaction files,ApplicationCompatibility,Windows\AppCompat\Programs\Amcache.hve.LOG*,lazy_ntfs,
 39,Amcache transaction files,ApplicationCompatibility,Windows.old\Windows\AppCompat\Programs\Amcache.hve.LOG*,lazy_ntfs,
 40,Ammyy Program Data,ApplicationLogs,ProgramData\Ammyy\**10,lazy_ntfs,"May not contain traditional log files, but presence of this folder may indicate historical usage"
 41,AnyDesk Logs - User Profile - *.trace,Communications,Users\*\AppData\Roaming\AnyDesk\*.trace,lazy_ntfs,Collects the trace logs for AnyDesk from a user profile
 42,AnyDesk Logs - ProgramData - *.trace,Communications,ProgramData\AnyDesk\*.trace,lazy_ntfs,Collects the trace logs for AnyDesk from ProgramData
 43,AnyDesk Logs - User Profile - *.conf,Communications,Users\*\AppData\Roaming\AnyDesk\*.conf,lazy_ntfs,Collects the conf logs for AnyDesk from a user profile
 44,AnyDesk Logs - ProgramData - *.conf,Communications,ProgramData\AnyDesk\*.conf,lazy_ntfs,Collects the conf logs for AnyDesk from ProgramData
 45,AnyDesk Videos,Communications,Users\*\Videos\AnyDesk\*.anydesk,lazy_ntfs,Collects any session recordings made by the user while using AnyDesk
 46,AnyDesk Logs - User Profile - connection_trace.txt,Communications,Users\*\AppData\Roaming\AnyDesk\connection_trace.txt,lazy_ntfs,Collects the connection trace log from user profile
 47,AnyDesk Logs - ProgramData - connection_trace.txt,Communications,ProgramData\AnyDesk\connection_trace.txt,lazy_ntfs,Collects the connection trace log from ProgramData
 48,AnyDesk Logs - System User Account,Communications,Windows\SysWOW64\config\systemprofile\AppData\Roaming\AnyDesk\*,lazy_ntfs,Collects the logs associated with the System user account
 49,AnyDesk Chat Logs - User Profile,Communications,Users\*\AppData\Roaming\AnyDesk\chat\*.txt,lazy_ntfs,Collects chat logs associated with the user profile
 50,Apache Access Log,Webservers,**10\access.log,lazy_ntfs,
 51,AppCompat PCA Folder,AppCompat,Windows\appcompat\pca,lazy_ntfs,
 52,AppData,UserData,Users\*\AppData\**10,lazy_ntfs,
 53,WindowsApps for AppX,Apps,Program Files\WindowsApps\Deleted*\**10,lazy_ntfs,Locates all the user AppX package directories which were installed through Microsoft Store and updated/uninstalled by the user.
 54,SystemApps for AppX,Apps,Windows\SystemApps\**10,lazy_ntfs,Locates all the system AppX package directories which were installed by the system.
 55,UserSpecificPackages for AppX,Apps,Users\*\AppData\Local\Packages\**10,lazy_ntfs,Locates all the user and system AppX package directories which are user specific on the system.
 56,AppRepository for AppX,Apps,ProgramData\Microsoft\Windows\AppRepository\Packages\**10\StateRepository-*.srd,lazy_ntfs,Locates the StateRepository .srd databases.
 57,ProgramData Packages for AppX,Apps,ProgramData\Packages\**10,lazy_ntfs,Locates the ProgramData AppX package directories.
 58,Application Event Log XP,EventLogs,Windows\System32\config\AppEvent.evt,lazy_ntfs,
 59,Application Event Log XP,EventLogs,Windows.old\Windows\System32\config\AppEvent.evt,lazy_ntfs,
 60,Application Event Log Win7+,EventLogs,Windows\System32\winevt\logs\application.evtx,lazy_ntfs,
 61,Application Event Log Win7+,EventLogs,Windows.old\Windows\System32\winevt\logs\application.evtx,lazy_ntfs,
 62,Aspera Client Logs,FileDownload,Users\*\AppData\Local\Aspera\Aspera Connect\var\log\**10\*.log,lazy_ntfs,
 63,Aspera Server Logs,FileDownload,Users\*\.aspera\connect\var\log\**10\*.log,lazy_ntfs,
 64,AteraAgent .ini files,Software,Program Files\ATERA Networks\AteraAgent\**10\*.ini,lazy_ntfs,Collects logs for AteraAgent
 65,AteraAgent Logs,Software,Program Files\ATERA Networks\AteraAgent\**10\*.txt,lazy_ntfs,Collects logs for AteraAgent
 66,AteraAgent Logs,Software,Program Files\ATERA Networks\AteraAgent\**10\*.db,lazy_ntfs,Collects logs for AteraAgent
 67,AteraAgent Logs,Software,Program Files\ATERA Networks\AteraAgent\**10\*.config,lazy_ntfs,Collects logs for AteraAgent
 68,AteraAgent Logs,Software,Program Files\ATERA Networks\AteraAgent\**10\*.cfg,lazy_ntfs,Collects logs for AteraAgent
 69,Avast AV Logs (XP),Antivirus,Documents And Settings\All Users\Application Data\Avast Software\Avast\Log\**10,lazy_ntfs,
 70,Avast AV Logs,Antivirus,ProgramData\Avast Software\Avast\Log\**10,lazy_ntfs,
 71,Avast AV User Logs,Antivirus,Users\*\Avast Software\Avast\Log\**10,lazy_ntfs,
 72,Avast AV Index,Antivirus,ProgramData\Avast Software\Avast\Chest\index.xml,lazy_ntfs,
 73,Avast Persistent Data Logs,Antivirus,ProgramData\Avast Software\Persistent Data\Avast\Logs\**10,lazy_ntfs,
 74,Avast Icarus Logs,Antivirus,ProgramData\Avast Software\Icarus\Logs\**10,lazy_ntfs,
 75,Avira Activity Logs,Antivirus,ProgramData\Avira\Antivirus\LOGFILES\**10,lazy_ntfs,Collects the scan logs of Avira Antivirus
 76,Avira Security Logs,Antivirus,ProgramData\Avira\Security\Logs\**10,lazy_ntfs,
 77,Avira VPN Logs,Antivirus,ProgramData\Avira\VPN\**10,lazy_ntfs,Collects the VPN logs
 78,BCD,Registry,Boot\BCD,lazy_ntfs,
 79,BCD Logs,Registry,Boot\BCD.LOG*,lazy_ntfs,
 80,BITS files,Persistence,ProgramData\Microsoft\Network\Downloader\**10,lazy_ntfs,
 81,TorrentClients - BitTorrent,FileDownload,Users\*\AppData\Roaming\BitTorrent\*.dat,lazy_ntfs,
 82,Bitdefender Endpoint Security Logs,Antivirus,ProgramData\Bitdefender\Endpoint Security\Logs\**10,lazy_ntfs,
 83,Bitdefender Internet Security Logs,Antivirus,ProgramData\Bitdefender\Desktop\Profiles\Logs\**10,lazy_ntfs,
 84,Bitdefender SQLite DB Files,Antivirus,"Program Files*\Bitdefender*\**10\*.{db,db-wal,db-shm}",lazy_ntfs,Bitdefender SQLite databases
 85,Box Drive Application Metadata,Apps,Users\*\AppData\Local\Box\Box\**10,lazy_ntfs,
 86,Box Sync Application Metadata,Apps,Users\*\AppData\Local\Box Sync\**10,lazy_ntfs,
 87,Box Drive User Files,Apps,Users\*\Box\**10,lazy_ntfs,Caution! This target will collect Box Drive contents from the local drive AND on-demand cloud files. Ensure your scope of authority permits cloud collections before use or isolate system from network
 88,Box Sync User Files,Apps,Users\*\Box Sync\**10,lazy_ntfs,
 89,Bookmarks,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Bookmarks*,lazy_ntfs,
 90,Cookies,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Cookies*,lazy_ntfs,
 91,Current Session,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Current Session,lazy_ntfs,
 92,Current Tabs,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Current Tabs,lazy_ntfs,
 93,Download Metadata,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\DownloadMetadata,lazy_ntfs,
 94,Favicons,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Favicons*,lazy_ntfs,
 95,History,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\History*,lazy_ntfs,
 96,Sessions Folder,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\Default\Sessions\*,lazy_ntfs,
 97,Login Data,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Login Data,lazy_ntfs,
 98,Network Action Predictor,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Network Action Predictor,lazy_ntfs,
 99,Network Persistent State,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Network Persistent State,lazy_ntfs,
 100,Preferences,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Preferences,lazy_ntfs,
 101,Quota Manager,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\QuotaManager,lazy_ntfs,
 102,Reporting and NEL,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Reporting and NEL,lazy_ntfs,
 103,Shortcuts,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Shortcuts*,lazy_ntfs,
 104,Publisher Info DB/Brave Rewards,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\publisher_info_db*,lazy_ntfs,"SQLite Database related to ""Brave Rewards"" containing an event_log table"
 105,Top Sites,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Top Sites*,lazy_ntfs,
 106,Visited Links,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Visited Links*,lazy_ntfs,
 107,Web Data,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Web Data*,lazy_ntfs,
 108,Secure Preferences,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\*\Secure Preferences*,lazy_ntfs,Contains additional preferences data
 109,Chrome Cache Folder,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Cache\**10,lazy_ntfs,
 110,Chromium Edge Cache Folder,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Cache\**10,lazy_ntfs,
 111,Firefox Cache Folder,Communications,Users\*\AppData\Local\Mozilla\Firefox\Profiles\*\**10,lazy_ntfs,
 112,IE 9/10 Cache,Communications,Users\*\AppData\Local\Microsoft\Windows\Temporary Internet Files\**10,lazy_ntfs,
 113,IE Index.dat temp internet files,Communications,Documents and Settings\*\Local Settings\Temporary Internet Files\Content.IE5\index.dat,lazy_ntfs,
 114,IE 11 Cache,Communications,Users\*\AppData\Local\Microsoft\Windows\INetCache\**10,lazy_ntfs,
 115,Edge WebcacheV01.dat,Communications,Users\*\AppData\Local\Microsoft\Windows\WebCache\*,lazy_ntfs,
 116,Brave Cache Folder,Communications,Users\*\AppData\Local\BraveSoftware\Brave-Browser\User Data\Default\Cache\Cache_Data\**10,lazy_ntfs,
 117,System CryptnetUrlCache,FileKnowledge,Windows\System32\config\systemprofile\AppData\LocalLow\Microsoft\CryptnetUrlCache\**10,lazy_ntfs,
 118,System WOW64 CryptnetUrlCache,FileKnowledge,Windows\SysWOW64\config\systemprofile\AppData\LocalLow\Microsoft\CryptnetUrlCache\**10,lazy_ntfs,
 119,User CryptnetUrlCache,FileKnowledge,Users\*\AppData\LocalLow\Microsoft\CryptnetUrlCache\**10,lazy_ntfs,
 120,INetCache,FileKnowledge,Users\*\AppData\Local\Microsoft\Windows\INetCache\IE\**10,lazy_ntfs,
 121,Chrome bookmarks XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 122,Chrome Cookies XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Cookies*,lazy_ntfs,
 123,Chrome Current Session XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 124,Chrome Current Tabs XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 125,Chrome Favicons XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 126,Chrome History XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\History*,lazy_ntfs,
 127,Chrome Last Session XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 128,Chrome Last Tabs XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 129,Chrome Login Data XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 130,Chrome Preferences XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 131,Chrome Shortcuts XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 132,Chrome Top Sites XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 133,Chrome Visited Links XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 134,Chrome Web Data XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 135,Chrome bookmarks,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 136,Chrome Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\**10\Cookies*,lazy_ntfs,
 137,Chrome Current Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 138,Chrome Current Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 139,Chrome Download Metadata,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\DownloadMetadata,lazy_ntfs,
 140,Chrome Extension Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Extension Cookies,lazy_ntfs,
 141,Chrome Favicons,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 142,Chrome History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\History*,lazy_ntfs,
 143,Chrome Last Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 144,Chrome Last Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 145,Chrome Sessions Folder,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sessions\*,lazy_ntfs,
 146,Chrome Login Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 147,Chrome Media History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Media History*,lazy_ntfs,
 148,Chrome Network Action Predictor,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Action Predictor,lazy_ntfs,
 149,Chrome Network Persistent State,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Persistent State,lazy_ntfs,
 150,Chrome Preferences,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 151,Chrome Quota Manager,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\QuotaManager,lazy_ntfs,
 152,Chrome Reporting and NEL,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Reporting and NEL,lazy_ntfs,
 153,Chrome Shortcuts,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 154,Chrome Top Sites,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 155,Chrome Trust Tokens,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Trust Tokens*,lazy_ntfs,
 156,Chrome SyncData Database,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 157,Chrome Visited Links,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 158,Chrome Web Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 159,Windows Protect Folder,FileSystem,Users\*\AppData\Roaming\Microsoft\Protect\*\**10,lazy_ntfs,Required for offline decryption
 160,Chrome Snapshots Folder,Communications,Users\*\AppData\Local\Google\Chrome\User Data\Snapshots\*\**10,lazy_ntfs,Grabs folder that appears to have snapshots of Chrome SQLite DBs organized by version #.
 161,SYSTEM Chrome History,Communications,Windows\system32\config\systemprofile\AppData\Local\Google\Chrome\User Data\*\History*,lazy_ntfs,
 162,Chrome Extension Files,Communication,Users\*\AppData\Local\Google\Chrome\User Data\*\Extensions\**10,lazy_ntfs,
 163,Chrome Extension Files XP,Communications,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Extensions\**10,lazy_ntfs,
 164,Chrome HTML5 File System Folder,Communication,Users\*\AppData\Local\Google\Chrome\User Data\*\File System\**10,lazy_ntfs,
 165,Cisco Jabber Database,Communications,Users\*\AppData\Local\Cisco\Unified Communications\Jabber\CSF\History\*.db,lazy_ntfs,The Cisco Jabber process needs to be killed before database can be copied.
 166,ClipboardMaster - Clipboard History - Text,Apps,Users\*\AppData\Roaming\Jumping Bytes\ClipboardMaster\Clipboard.clm4,lazy_ntfs,Locates the user’s clipboard history (text) for ClipboardMaster
 167,ClipboardMaster - Clipboard History - Images,Apps,Users\*\AppData\Roaming\Jumping Bytes\ClipboardMaster\pics\**10,lazy_ntfs,Locates the user’s clipboard history (images) for ClipboardMaster
 168,ClipboardMaster - Clipboard History - Backups,Apps,Users\*\AppData\Roaming\Jumping Bytes\ClipboardMaster\Clipboard.clm4.ba*,lazy_ntfs,Locates the user’s clipboard history (backups) for ClipboardMaster
 169,ComboFix,Antivirus,ComboFix.txt,lazy_ntfs,
 170,Confluence Wiki Log Files,Logs,Atlassian\Application Data\Confluence\logs\*.log*,lazy_ntfs,
 171,Confluence Wiki Log Files,Logs,Program Files\Atlassian\Confluence\logs\*.log,lazy_ntfs,
 172,Cybereason Anti-Ransomware Logs,Antivirus,ProgramData\crs1\Logs\**10,lazy_ntfs,
 173,Cybereason Sensor Communications and Anti-Malware Logs,Antivirus,ProgramData\apv2\Logs\**10,lazy_ntfs,
 174,Cybereason Application Control and NGAV Logs,Antivirus,ProgramData\crb1\Logs\**10,lazy_ntfs,
 175,Cylance ProgramData Logs,Antivirus,ProgramData\Cylance\Desktop\**10,lazy_ntfs,
 176,Cylance Optics Logs,Antivirus,ProgramData\Cylance\Optics\Log\**10,lazy_ntfs,
 177,Cylance Program Files Logs,Antivirus,Program Files\Cylance\Desktop\log\**10,lazy_ntfs,
 178,DC++ Chat Logs,FileDownload,Users\*\AppData\Local\DC++\Logs\**10,lazy_ntfs,Locates DC++ hub/chat logs and copies them. Current as of version 0.868.
 179,DWAgent Log Files,Logs,ProgramData\DWAgent*\*.log*,lazy_ntfs,
 180,Debian WSL /etc/debian_version,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\debian_version,lazy_ntfs,
 181,Debian WSL /etc/fstab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\fstab,lazy_ntfs,
 182,Debian WSL /etc/os-release,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\os-release,lazy_ntfs,
 183,Debian WSL /etc/passwd,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\passwd,lazy_ntfs,
 184,Debian WSL /etc/group,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\group,lazy_ntfs,
 185,Debian WSL /etc/shadow,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\shadow,lazy_ntfs,
 186,Debian WSL /etc/timezone,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\timezone,lazy_ntfs,
 187,Debian WSL /etc/hostname,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\hostname,lazy_ntfs,
 188,Debian WSL /etc/hosts,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\hosts,lazy_ntfs,
 189,Debian WSL /etc/crontab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\crontab,lazy_ntfs,
 190,Debian WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\bash.bashrc,lazy_ntfs,
 191,Debian WSL /etc/profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\etc\profile,lazy_ntfs,
 192,Debian WSL .bash_history,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\**10\.bash_history,lazy_ntfs,
 193,Debian WSL .bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\**10\.bashrc,lazy_ntfs,
 194,Debian WSL .profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\**10\.profile,lazy_ntfs,
 195,Debian WSL User Crontabs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\var\spool\cron\crontabs\**10,lazy_ntfs,
 196,Debian WSL Apt Logs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\rootfs\var\log\apt\**10\*.log,lazy_ntfs,
 197,Debian WSL ext4.vhdx,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\TheDebianProject.DebianGNULinux_*\LocalState\ext4.vhdx,lazy_ntfs,
 198,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\MRU\rename_folders.osd,lazy_ntfs,Locates .osd file which contains names of folders that have been renamed manually by the user.
 199,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\MRU\rename_files.osd,lazy_ntfs,Locates .osd file which contains names of files that have been renamed manually by the user.
 200,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\MRU\find_contains.osd,lazy_ntfs,Locates .osd file which contains search queries initiated by the user during a search for files with contents related to the search query.
 201,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\MRU\find_name.osd,lazy_ntfs,Locates .osd file which contains search queries initiated by the user during a search for files with a filename related to the search query.
 202,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\MRU\find_path.osd,lazy_ntfs,Locates .osd file which contains file paths related to user activity - not exactly sure how these are generated at this time.
 203,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\recent.osd,lazy_ntfs,Locates .osd file which contains file paths related to recent user activity. Effectively the DOpus Shellbags-equivalent. Appears to be for last 10 folder visited within the Lister.
 204,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\State Data\backupconfig.osd,lazy_ntfs,Locates .osd file which contains file paths related to the location of the backup settings files for Directory Opus.
 205,Directory Opus,Apps,Users\*\AppData\Local\GPSoftware\Directory Opus\Thumbnail Cache\*,lazy_ntfs,Locates .osd file which contains file paths related to the location of the backup settings files for Directory Opus.
 206,Directory Opus,Apps,Users\*\AppData\Roaming\GPSoftware\Directory Opus\Logs\*,lazy_ntfs,Locates .txt files that will be named with the IP address of the FTP server Directory Opus was used to connect to. All-activity.txt will simply be a combination of all other .txt files present in this directory.
 207,Audio files,Multimedia,"**10\*.{3gp,aa,aac,act,aiff,alac,amr,ape,au,awb,dss,dvf,flac,gsm,iklax,ivs,m4a,m4b,m4p,mmf,mp3,mpc,msv,nmf,ogg,oga,mogg,opus,ra,rm,raw,rf64,sln,tta,voc,vox,wav,wma,wv,webm}",lazy_ntfs,Covers most (if not all) audio file formats
 208,Excel and Excel-like Documents,Documents,"**10\*.{xls,xlsx,csv,tsv,xlt,xlm,xlsm,xltx,xltm,xlsb,xla,xlam,xll,xlw,ods,fodp,qpw}",lazy_ntfs,"Covers all document file formats for Excel, OpenOffice, LibreOffice, Apache OpenOffice, WPS Office, SoftMaker Office, and more"
 209,PDF and PDF-like Documents,Documents,"**10\*.{pdf,xps,oxps}",lazy_ntfs,Covers all PDF and PDF-like document formats
 210,Picture files,Multimedia,"**10\*.{ai,bmp,bpg,cdr,cpc,eps,exr,flif,gif,heif,ilbm,ima,jp2,j2k,jpf,jpm,jpg2,j2c,jpc,jpx,mj2jpeg,jpg,jxl,kra,ora,pcx,pgf,pgm,png,pnm,ppm,psb,psd,psp,svg,tga,tiff,webp,xaml,xcf}",lazy_ntfs,Covers most (if not all) picture file formats
 211,SQLite Files (.db* and .sqlite*),Databases,"**10\*.{db,sqlite}*)",lazy_ntfs,Covers all common file extensions for SQLite databases
 212,Video files,Multimedia,"**10\*.{3g2,3gp,amv,asf,avi,drc,flv,f4v,f4p,f4a,f4b,gif,gifv,m4v,mkv,mov,qt,mp4,m4p,mpg,mpeg,m2v,mp2,mpe,mpv,mts,m2ts,ts,mxf,nsv,ogv,ogg,rm,rmvb,roq,svi,viv,vob,webm,wmv,yuv}",lazy_ntfs,Covers most (if not all) video file formats
 213,Zips,Archives,**10\*.zip,lazy_ntfs,This is an example of how to walk a drive for a file mask. Probably do not want to use this one as is
 214,Word and Word-like Documents,Documents,"**10\*.{doc,docx,docm,dotx,dotm,docb,dot,wbk,odt,fodt,rtf,wp*,tmd}",lazy_ntfs,"Covers all document file formats for Word, OpenOffice, LibreOffice, Apache OpenOffice, WPS Office, SoftMaker Office, and more"
 215,Discord Cache Files,Communications,Users\*\AppData\Roaming\discord\cache\**10,lazy_ntfs,Gets cached data from Discord app
 216,Discord Local Storage LevelDB Files,Communications,Users\*\AppData\Roaming\discord\local storage\leveldb\**10,lazy_ntfs,Gets LevelDB database from Discord app
 217,Double Commander - history.xml,Apps,Users\*\AppData\Roaming\doublecmd\history.xml,lazy_ntfs,Locates an .xml file that contains Shellbags-equivalent artifacts that are sorted in temporal order from bottom to top.
 218,Double Commander - doublecmd.xml,Apps,Users\*\AppData\Roaming\doublecmd\doublecmd.xml,lazy_ntfs,Locates an .xml file that contains Shellbags-equivalent artifacts that are sorted in temporal order from top to bottom.
 219,Double Commander - FTP Log,Apps,Users\*\AppData\Roaming\doublecmd\doublecmd*.log,lazy_ntfs,Locates log files that'll be named with the following naming convention: doublecmd_2021-04-03.log.
 220,Double Commander - multiarc.ini,Apps,Users\*\AppData\Roaming\doublecmd\multiarc.ini,lazy_ntfs,
 221,Double Commander - session.ini,Apps,Users\*\AppData\Roaming\doublecmd\session.ini,lazy_ntfs,
 222,Double Commander - pixmaps.txt,Apps,Users\*\AppData\Roaming\doublecmd\pixmaps.txt,lazy_ntfs,
 223,Double Commander - shortcuts.scf,Apps,Users\*\AppData\Roaming\doublecmd\shortcuts.scf,lazy_ntfs,
 224,Drivers,Drivers,Windows\system32\drivers\**10\*.sys,lazy_ntfs,
 225,Dropbox Metadata,Apps,Users\*\AppData\Local\Dropbox\info.json,lazy_ntfs,Getting individual files because folder may contain very large extraneous files. Info.json contains user's Dropbox folder location
 226,Dropbox Metadata,Apps,Users\*\AppData\Local\Dropbox\host.db,lazy_ntfs,SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64.
 227,Dropbox Metadata,Apps,Users\*\AppData\Local\Dropbox\machine_storage\tray-thumbnails.db,lazy_ntfs,SQLite database containing references to image files at one time present in a user’s Dropbox instance.
 228,Dropbox Metadata,Apps,Users\*\AppData\Local\Dropbox\host.dbx,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 229,Windows Protect Folder,FileSystem,Users\*\AppData\Roaming\Microsoft\Protect\*\**10,lazy_ntfs,Required for offline decryption of Dropbox databases
 230,Dropbox Metadata,Apps,Users\*\AppData\Local\Dropbox\instance*\**10,lazy_ntfs,instance folder holds multiple SQLite databases related to Dropbox activity and contents
 231,Dropbox User Files,Apps,Users\*\Dropbox*\**10,lazy_ntfs,"Default storage location for Dropbox Personal and Business (when using wildcard), but can be user-defined. Check info.json file in user Dropbox metadata files to identify default folder."
 232,EF Commander - .ini File,Apps,Users\*\AppData\Roaming\EFSoftware\*,lazy_ntfs,Locates folder where all configuration files reside
 233,ESET NOD32 AV Logs (XP),Antivirus,Documents and Settings\All Users\Application Data\ESET\ESET NOD32 Antivirus\Logs\**10,lazy_ntfs,
 234,ESET NOD32 AV Logs,Antivirus,ProgramData\ESET\ESET NOD32 Antivirus\Logs\**10,lazy_ntfs,Parser available at https://github.com/laciKE/EsetLogParser
 235,ESET NOD32 AV Logs,Antivirus,ProgramData\ESET\ESET Security\Logs\**10,lazy_ntfs,
 236,ESET Remote Administrator Logs,Antivirus,ProgramData\ESET\RemoteAdministrator\Agent\EraAgentApplicationData\Logs,lazy_ntfs,Remote Administrator logs include information on tasks executed on the target.
 237,Local User Quarantine,Antivirus,Users\*\AppData\Local\ESET\ESET Security\Quarantine\**10,lazy_ntfs,
 238,SYSTEM user quarantine,Antivirus,Windows\System32\config\systemprofile\AppData\Local\ESET\ESET Security\Quarantine\**10,lazy_ntfs,
 239,Edge folder,Communications,Users\*\AppData\Local\Packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\**10,lazy_ntfs,
 240,Edge bookmarks,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Bookmarks*,lazy_ntfs,
 240,Edge Bookmarks,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Bookmarks*,lazy_ntfs,
 241,Edge Collections,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Collections\collectionsSQLite,lazy_ntfs,
 242,Edge Cookies,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Network\Cookies*,lazy_ntfs,
 243,Edge Current Session,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Current Session,lazy_ntfs,
 244,Edge Current Tabs,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Current Tabs,lazy_ntfs,
 245,Edge Favicons,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Favicons*,lazy_ntfs,
 246,Edge History,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\History*,lazy_ntfs,
 247,Edge Last Session,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Last Session,lazy_ntfs,
 248,Edge Last Tabs,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Last Tabs,lazy_ntfs,
 249,Edge Sessions Folder,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Sessions\*,lazy_ntfs,
 250,Edge Login Data,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Login Data,lazy_ntfs,
 251,Edge Media History,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Media History*,lazy_ntfs,
 252,Edge Network Action Predictor,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Network Action Predictor,lazy_ntfs,
 253,Edge Preferences,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Preferences,lazy_ntfs,
 254,Edge Shortcuts,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Shortcuts*,lazy_ntfs,
 255,Edge Top Sites,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Top Sites*,lazy_ntfs,
 256,Edge SyncData Database,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 257,Edge Visited Links,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Visited Links,lazy_ntfs,
 258,Edge Web Data,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Web Data*,lazy_ntfs,
 259,Edge WebAssistDatabase,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\*\WebAssistDatabase*,lazy_ntfs,
 260,Windows Protect Folder,FileSystem,Users\*\AppData\Roaming\Microsoft\Protect\*\**10,lazy_ntfs,Required for offline DPAPI decryption
 261,Edge Snapshots Folder,Communications,Users\*\AppData\Local\Microsoft\Edge\User Data\Snapshots\*\**10,lazy_ntfs,"Grabs folder that appears to have snapshots of Edge Chromium SQLite DBs organized by version #. In testing, there were 3 previous versions of Edge Chromium separated into different folders"
 262,Edge Chromium Extension Files,Communication,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Extensions\**10,lazy_ntfs,
 263,Emsisoft Scan Logs,ApplicationLogs,ProgramData\Emsisoft\Reports\scan*.txt,lazy_ntfs,Can contain file detection and quarantine info
 264,EncapsulationLogging,Executables,Windows\Appcompat\Programs\EncapsulationLogging.hve,lazy_ntfs,
 265,EncapsulationLogging,Executables,Windows.old\Windows\Appcompat\Programs\EncapsulationLogging.hve,lazy_ntfs,
 266,EncapsulationLogging Logs,Executables,Windows\Appcompat\Programs\EncapsulationLogging.hve.log*,lazy_ntfs,
 267,EncapsulationLogging Logs,Executables,Windows.old\Windows\Appcompat\Programs\EncapsulationLogging.hve.log*,lazy_ntfs,
 268,Event logs Win7+,EventLogs,Windows\System32\winevt\logs\System.evtx,lazy_ntfs,
 269,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\logs\System.evtx,lazy_ntfs,
 270,Event logs Win7+,EventLogs,Windows\System32\winevt\logs\Security.evtx,lazy_ntfs,
 271,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\logs\Security.evtx,lazy_ntfs,
 272,Event logs Win7+,EventLogs,Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx,lazy_ntfs,
 273,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx,lazy_ntfs,
 274,Event logs Win7+,EventLogs,Windows\System32\winevt\Logs\Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx,lazy_ntfs,
 275,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\Logs\Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx,lazy_ntfs,
 276,Event logs Win7+,EventLogs,Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx,lazy_ntfs,
 277,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx,lazy_ntfs,
 278,Event logs Win7+,EventLogs,Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx,lazy_ntfs,
 279,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\Logs\Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx,lazy_ntfs,
 280,Event logs XP,EventLogs,Windows\System32\config\*.evt,lazy_ntfs,
 281,Event logs Win7+,EventLogs,Windows\System32\winevt\logs\*.evtx,lazy_ntfs,
 282,Event logs Win7+,EventLogs,Windows.old\Windows\System32\winevt\logs\*.evtx,lazy_ntfs,
 283,WDI Trace Logs 1,Event Trace Logs,Windows\System32\WDI\LogFiles\*.etl*,lazy_ntfs,
 284,WDI Trace Logs 1,Event Trace Logs,Windows.old\Windows\System32\WDI\LogFiles\*.etl*,lazy_ntfs,
 285,WDI Trace Logs 2,Event Trace Logs,Windows\System32\WDI\{*\**10,lazy_ntfs,
 286,WDI Trace Logs 2,Event Trace Logs,Windows.old\Windows\System32\WDI\{*\**10,lazy_ntfs,
 287,WMI Trace Logs,Event Trace Logs,Windows\System32\LogFiles\WMI\**10,lazy_ntfs,
 288,WMI Trace Logs,Event Trace Logs,Windows.old\Windows\System32\LogFiles\WMI\**10,lazy_ntfs,
 289,SleepStudy Trace Logs,Event Trace Logs,Windows\System32\SleepStudy\**10,lazy_ntfs,
 290,SleepStudy Trace Logs,Event Trace Logs,Windows.old\Windows\System32\SleepStudy\**10,lazy_ntfs,
 291,Energy-NTKL Trace Logs,Event Trace Logs,ProgramData\Microsoft\Windows\PowerEfficiency Diagnostics\energy-ntkl.etl,lazy_ntfs,
 292,Delivery Optimization Trace Logs,Event Trace Logs,Windows\ServiceProfiles\NetworkService\AppData\Local\Microsoft\Windows\DeliveryOptimization\Logs\*.etl*,lazy_ntfs,
 293,EventTranscript.db,SystemEvents,ProgramData\Microsoft\Diagnosis\EventTranscript\EventTranscript.db*,lazy_ntfs,
 294,EventTranscript.db,SystemEvents,Windows.old\ProgramData\Microsoft\Diagnosis\EventTranscript\EventTranscript.db*,lazy_ntfs,
 295,Microsoft Office Diagnostic Logs,SystemEvents,Users\*\AppData\Local\Temp\Diagnostics\**10,lazy_ntfs,
 296,Evernote Accounts,App,Users\*\AppData\Local\Evernote\Evernote\Databases\**10\.accounts,lazy_ntfs,Holds username and email of accounts
 297,Evernote Notebooks,App,Users\*\AppData\Local\Evernote\Evernote\Databases\**10\*.exb,lazy_ntfs,SQLite Database of the notes
 298,Evernote Notebook Snippets,App,Users\*\AppData\Local\Evernote\Evernote\Databases\**10\*.exb.snippets,lazy_ntfs,Note 'Snippets'
 299,Everything (VoidTools),FileSystem,Users\*\AppData\Local\Everything\Everything.db,lazy_ntfs,Copies out Everything.db
 300,Everything (VoidTools) - Run History,FileSystem,Users\*\AppData\Roaming\Everything\Run History.csv,lazy_ntfs,Copies out a CSV containing the history of items ran from Everything's search results window
 301,Everything (VoidTools) - Search History,FileSystem,Users\*\AppData\Roaming\Everything\Search History.csv,lazy_ntfs,Copies out a CSV containing the history of items searched for within Everything with timestamps
 302,Everything (VoidTools) - .ini file,FileSystem,Users\*\AppData\Roaming\Everything\Everything.ini,lazy_ntfs,Copies out the .ini file for Everything
 303,Exchange client access log files,Logs,Program Files\Microsoft\Exchange Server\*\Logging\**10\*.log,lazy_ntfs,Highly dependent on Exchange configuration
 304,Exchange Server Modified Compiled Files,Apps,Windows\Microsoft.NET\Framework*\v*\Temporary ASP.NET Files\**10\*.compiled,lazy_ntfs,Highly dependent on Exchange configuration
 305,Exchange Server Modified Compiled Files,Apps,inetpub\wwwroot\aspnet_client\**10\*.compiled,lazy_ntfs,Highly dependent on Exchange configuration
 306,Exchange Server Modified Compiled Files,Apps,inetpub\wwwroot\aspnet_client\system_web\**10\*.compiled,lazy_ntfs,Highly dependent on Exchange configuration
 307,Exchange Server Modified Compiled Files,Apps,Program Files\Microsoft\Exchange Server\V15\FrontEnd\HttpProxy\owa\auth\**10\*.compiled,lazy_ntfs,Highly dependent on Exchange configuration
 308,Exchange Setup Log file,Logs,ExchangeSetupLogs\ExchangeSetup.log,lazy_ntfs,The Exchange Setup log tracks the progress of every task during the Exchange installation and configuration.
 309,Exchange TransportRoles log files,Logs,Program Files\Microsoft\Exchange Server\*\TransportRoles\Logs\**10\*.log,lazy_ntfs,Highly dependent on Exchange configuration
 310,F-Secure Logs,Antivirus,ProgramData\F-Secure\Log\**10,lazy_ntfs,
 311,F-Secure User Logs,Antivirus,Users\*\AppData\Local\F-Secure\Log\**10,lazy_ntfs,
 312,F-Secure Scheduled Scan Reports,Antivirus,ProgramData\F-Secure\Antivirus\ScheduledScanReports\**10,lazy_ntfs,
 313,Fences - Desktop Screenshots,Apps,Users\*\AppData\Roaming\Stardock\Fences\Backups,lazy_ntfs,Locates all screenshots taken automatically by the Fences application
 314,FileZilla XML Log Files,Logs,Users\*\AppData\Roaming\FileZilla\*.xml*,lazy_ntfs,
 315,FileZilla SQLite3 Log Files,Logs,Users\*\AppData\Roaming\FileZilla\*.sqlite3*,lazy_ntfs,
 316,FileZilla Server XML Log Files,Logs,Users\*\AppData\Roaming\FileZilla Server\*.xml*,lazy_ntfs,
 317,FileZilla Log Files,Logs,Program Files (x86)\FileZilla Server\Logs\*.log*,lazy_ntfs,
 318,Addons,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\addons.sqlite*,lazy_ntfs,
 319,Bookmarks,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\weave\bookmarks.sqlite*,lazy_ntfs,
 320,Bookmarks,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\bookmarkbackups\**10,lazy_ntfs,
 321,Cookies,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\cookies.sqlite*,lazy_ntfs,
 322,Cookies,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\firefox_cookies.sqlite*,lazy_ntfs,
 323,Downloads,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\downloads.sqlite*,lazy_ntfs,
 324,Extensions,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\extensions.json,lazy_ntfs,
 325,Favicons,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\favicons.sqlite*,lazy_ntfs,
 326,Form history,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\formhistory.sqlite*,lazy_ntfs,
 327,Permissions,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\permissions.sqlite*,lazy_ntfs,
 328,Places,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite*,lazy_ntfs,
 329,Protections,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\protections.sqlite*,lazy_ntfs,
 330,Search,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\search.sqlite*,lazy_ntfs,
 331,Signons,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\signons.sqlite*,lazy_ntfs,
 332,Storage Sync,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\storage-sync.sqlite*,lazy_ntfs,
 333,Webappstore,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\webappstore.sqlite*,lazy_ntfs,
 334,Password,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\key*.db,lazy_ntfs,
 335,Password,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\signon*.*,lazy_ntfs,
 336,Password,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\logins.json,lazy_ntfs,
 337,Preferences,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\prefs.js,lazy_ntfs,
 338,Sessionstore,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\sessionstore*,lazy_ntfs,
 339,Sessionstore Folder,Communications,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\sessionstore-backups\**10,lazy_ntfs,
 340,Places XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\places.sqlite*,lazy_ntfs,
 341,Downloads XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\downloads.sqlite*,lazy_ntfs,
 342,Form history XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\formhistory.sqlite*,lazy_ntfs,
 343,Cookies XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\cookies.sqlite*,lazy_ntfs,
 344,Signons XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\signons.sqlite*,lazy_ntfs,
 345,Webappstore XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\webappstore.sqlite*,lazy_ntfs,
 346,Favicons XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\favicons.sqlite*,lazy_ntfs,
 347,Addons XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\addons.sqlite*,lazy_ntfs,
 348,Search XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\search.sqlite*,lazy_ntfs,
 349,Password XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\key*.db,lazy_ntfs,
 350,Password XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\signon*.*,lazy_ntfs,
 351,Password XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\logins.json,lazy_ntfs,
 352,Sessionstore XP,Communications,Documents and Settings\*\Application Data\Mozilla\Firefox\Profiles\*\sessionstore*,lazy_ntfs,
 353,Free Commander - FreeCommander.ini,Apps,Users\*\AppData\Local\FreeCommanderXE\Settings\FreeCommander.ini,lazy_ntfs,Locates an .ini file that contains Shellbags-equivalent artifacts.
 354,Free Commander - FreeCommander.ftp.ini,Apps,Users\*\AppData\Local\FreeCommanderXE\Settings\FreeCommander.ftp.ini,lazy_ntfs,Locates an .ini file that contains the file path to the FTP log for Free Commander.
 355,Free Commander - FreeCommander.hist.ini,Apps,Users\*\AppData\Local\FreeCommanderXE\Settings\FreeCommander.hist.ini,lazy_ntfs,Locates an .ini file that contains Shellbags-equivalent artifacts that are sorted in temporal order from top to bottom for both left and right directory browsers.
 356,Free Commander - FreeCommander.fav.xml,Apps,Users\*\AppData\Local\FreeCommanderXE\Settings\FreeCommander.fav.xml,lazy_ntfs,Locates an .xml file that contains favorited files/folder by the user.
 357,Free Commander - Backup Settings,Apps,Users\*\AppData\Local\FreeCommanderXE\Settings\Bkp_Settings*\**10,lazy_ntfs,"Locates an exact copy of the above files which will have a timestamped folder name, i.e. Bkp_Settings-YYYY-MM-DD HH-MM-SS."
 358,Free Commander - FTP Log,Apps,Users\*\AppData\Local\Temp\fc*.log,lazy_ntfs,Locates log file(s) that have a default naming convention of fc_ftplog_20210403 but can be modified by the user.
 359,Free Commander - FTP Related Information,Apps,Users\*\AppData\Local\Temp\FreeCommander*\**10,lazy_ntfs,Locates a folder that may be named randomly that contains more FTP related information as well as .tmp files that are created while the user is traversing folders during an active FTP session. These files are deleted upon program exit.
 360,FDM Database,App,Users\*\AppData\Local\Free Download Manager\**10\fdm.sqlite,lazy_ntfs,"fdm.sqlite shows Torrents, downloads, folder history, auth credentials and more. Will also pull fdm.sqlite in db_backup/"
 361,FDM Backup Info,App,Users\*\AppData\Local\Free Download Manager\backup\backup.info,lazy_ntfs,"Backup info file - can change backup name from userdata.zip, so could give indication of file name"
 362,FDM Database (userdata.zip),App,Users\*\AppData\Local\Free Download Manager\backup\userdata.zip,lazy_ntfs,fdm.sqlite can also appear in the backup folder in a compressed userdata.zip file
 363,FreeFileSync,Apps,Users\*\AppData\Roaming\FreeFileSync\Logs,lazy_ntfs,Copies out all log files
 364,Freenet,File Downloads,Users\*\AppData\Local\Freenet\node*,lazy_ntfs,
 365,Freenet,File Downloads,Users\*\AppData\Local\Freenet\*completed.list.downloads,lazy_ntfs,
 366,Freenet,File Downloads,Users\*\AppData\Local\Freenet\*completed.list.uploads,lazy_ntfs,
 367,Freenet,File Downloads,Users\*\AppData\Local\Freenet\*.bak,lazy_ntfs,
 368,Freenet,File Downloads,Users\*\AppData\Local\Freenet\downloads\**10,lazy_ntfs,
 369,FrostWire Downloads,FileDownload,Users\*\Documents\FrostWire\Torrent Data\**10,lazy_ntfs,Locates files downloaded that land in the default location as specified by FrostWire
 370,FrostWire AppData,FileDownload,Users\*\.frostwire5\frostwire.props,lazy_ntfs,Locates a file that contains important information about the instance of FrostWire on the user's system
 371,FrostWire AppData,FileDownload,Users\*\.frostwire5\itunes.props,lazy_ntfs,Locates a file that contains important information about the instance of FrostWire on the user's system
 372,Gigatribe Files Windows Vista/7/8/10,FileDownload,Users\*\AppData\Local\Shalsoft\**10,lazy_ntfs,Locates Gigatribe files and copies them
 373,Gigatribe Files Windows XP,FileDownload,Documents and Settings\*\*\Application Data\Gigatribe\**10,lazy_ntfs,Locates Gigatribe files and copies them. Different path depending on the Operating System language. In Swedish the location is C:\Documents and Settings\&amp;lt;username&amp;gt;\Lokala Inställningar\Application Data\Gigatribe
 374,Gigatribe Files Windows XP,FileDownload,Documents and Settings\*\*\Application Data\Shalsoft\**10,lazy_ntfs,Locates Gigatribe files and copies them. Different path depending on the Operating System language. In Swedish the location is C:\Documents and Settings\&amp;lt;username&amp;gt;\Lokala Inställningar\Application Data\Shalsoft
 375,Google Drive Backup and Sync User Files,Apps,Users\*\Google Drive*\**10,lazy_ntfs,Older Google Drive Backup and Sync application only
 376,Google Drive Backup and Sync Metadata,Apps,Users\*\AppData\Local\Google\Drive\**10,lazy_ntfs,Older version of Google Drive
 377,Google Drive for Desktop Metadata,Apps,Users\*\AppData\Local\Google\DriveFS\**10,lazy_ntfs,Metadata folder the same for both newer Google Drive for Desktop and older Google File Stream application
 378,Google Earth My Places file,Apps,Users\*\AppData\LocalLow\Google\GoogleEarth\myplaces.kml,lazy_ntfs,File which holds favorited locations
 379,Google Earth My Places Backup file,Apps,Users\*\AppData\LocalLow\Google\GoogleEarth\myplaces.backup.kml,lazy_ntfs,Backup file which holds favorited locations
 380,Google Earth My Places file (XP),Apps,Documents and Settings\*\Application Data\Google\GoogleEarth\myplaces.kml,lazy_ntfs,File which holds favorited locations
 381,Google Earth My Places Backup file (XP),Apps,Documents and Settings\*\Application Data\Google\GoogleEarth\myplaces.backup.kml,lazy_ntfs,Backup file which holds favorited locations
 382,Group Policy Files,Communication,Windows\System32\grouppolicy\**10,lazy_ntfs,
 383,Computer Group Policy files,Communication,ProgramData\Microsoft\Group Policy\History\**10,lazy_ntfs,
 384,User Group Policy files,Communication,Users\*\AppData\Local\Microsoft\Group Policy\History\**10,lazy_ntfs,
 385,Local Group Policy INI Files,Communication,Windows.old\Windows\System32\grouppolicy\*.ini,lazy_ntfs,
 386,Local Group Policy Files - Registry Policy Files,Communication,Windows\System32\grouppolicy\*.pol,lazy_ntfs,
 387,Local Group Policy Files - Registry Policy Files,Communication,Windows.old\Windows\System32\grouppolicy\*.pol,lazy_ntfs,
 388,Local Group Policy Files - Startup/Shutdown Scripts,Communication,Windows\System32\grouppolicy\*\Scripts\**10,lazy_ntfs,
 389,Local Group Policy Files - Startup/Shutdown Scripts,Communication,Windows.old\Windows\System32\grouppolicy\*\Scripts\**10,lazy_ntfs,
 390,HeidiSQL Backup files (*.sql),Apps,Users\*\AppData\Roaming\HeidiSQL\Backups\*,lazy_ntfs,
 391,HeidiSQL (tabs.ini),Apps,Users\*\AppData\Roaming\HeidiSQL\tabs.ini,lazy_ntfs,
 392,HexChat Chat Logs,Communications,Users\*\AppData\Roaming\HexChat\logs\**10,lazy_ntfs,
 393,HitmanPro Logs,Antivirus,ProgramData\HitmanPro\Logs\**10,lazy_ntfs,
 394,HitmanPro Alert Logs,Antivirus,ProgramData\HitmanPro.Alert\Logs\**10,lazy_ntfs,
 395,HitmanPro Database,Antivirus,ProgramData\HitmanPro.Alert\excalibur.db,lazy_ntfs,SQLite DB
 396,HostsFile,HostsFile,Windows\System32\drivers\etc\Hosts,lazy_ntfs,
 397,IIS applicationHost.config,Apps,Windows\System32\inetsrv\config\applicationHost.config,lazy_ntfs,This configuration file stores the settings for all your Web sites and applications.
 398,IIS administration.config,Apps,Windows\System32\inetsrv\config\administration.config,lazy_ntfs,This configuration file stores the settings for IIS management.
 399,IIS redirection.config,Apps,Windows\System32\inetsrv\config\redirection.config,lazy_ntfs,This configuration file contains the settings that indicate the location where the centralized configuration files are stored.
 400,web.config,Apps,inetpub\wwwroot\**10\web.config,lazy_ntfs,The web.config is a file that is read by IIS and the ASP.NET Core Module to configure an app hosted with IIS.
 401,IIS log files,Logs,Windows\System32\LogFiles\W3SVC*\*.log,lazy_ntfs,
 402,IIS log files,Logs,Windows.old\Windows\System32\LogFiles\W3SVC*\*.log,lazy_ntfs,
 403,IIS log files,Logs,inetpub\logs\LogFiles\*.log,lazy_ntfs,
 404,IIS log files,Logs,inetpub\logs\LogFiles\W3SVC*\*.log,lazy_ntfs,
 405,IIS log files,Logs,Resources\Directory\*\LogFiles\Web\W3SVC*\*.log,lazy_ntfs,
 406,IIS log files,Logs,Windows\system32\LogFiles\HTTPERR\*.log,lazy_ntfs,
 407,ISLOnline Logs - Sessions - *.out,Communications,Users\*\AppData\Local\ISL Online Cache\ISL Light Client\*\ISLClient.out,lazy_ntfs,Collects client session logs for one or more sessions
 408,ISLOnline Logs - Session Configurations,Communications,Users\*\AppData\Local\ISL Online Cache\ISL Light Client\*\conf\*,lazy_ntfs,Configurations for ISL Light sessions
 409,ISL AlwaysOn Logs - Sessions List,Communications,Program Files (x86)\ISL Online\ISL AlwaysOn\session.xml,lazy_ntfs,Collects an xml file listing all sessions for ISL AlwaysOn (Unattended Access)
 410,ISL AlwaysOn Logs - Sessions,Communications,Program Files (x86)\ISL Online\ISL AlwaysOn\sessions\*\trace.out,lazy_ntfs,Detailed log for each session for ISL AlwaysOn (Unattended Access)
 411,ISL AlwaysOn - App Logs,Communications,Program Files (x86)\ISL Online\ISL AlwaysOn\*.out,lazy_ntfs,Application logs containg various artifacts.
 412,ISL Light Logs - Sessions,Communications,Users\*\AppData\Local\ISL Online Cache\ISL Light\*\trace.out,lazy_ntfs,Collects client session logs for one or more sessions
 413,ISL AlwaysOn - Email Configuration,Communications,Program Files (x86)\ISL Online\ISL AlwaysOn\status\tray,lazy_ntfs,This file includes the email of the logged in user for ISL AlwaysOn (Unattended Access)
 414,ISL AlwaysOn - Configuration,Communications,Program Files (x86)\ISL Online\ISL AlwaysOn\StaticConfiguration.ini,lazy_ntfs,"Configuration information (port, http/htpps) for ISL AlwaysOn (Unattended Access)"
 415,ITarian,Apps,Program Files\ITarian\Endpoint Manager\rmmlogs,lazy_ntfs,
 416,ITarian,Apps,Program Files (x86)\ITarian\Endpoint Manager\rmmlogs,lazy_ntfs,
 417,Comodo,Apps,Program Files\Comodo\Endpoint Manager\rmmlogs,lazy_ntfs,
 418,ITarian,Apps,Program Files (x86)\Comodo\Endpoint Manager\rmmlogs,lazy_ntfs,
 419,IceChat Chat Logs,Communications,Users\*\AppData\Local\IceChat Networks\IceChat\Logs\**10,lazy_ntfs,
 420,Windows IconCache DB,IconCache,Users\*\AppData\Local\IconCache.db,lazy_ntfs,
 421,Idrive Cleanup Operations,Apps,ProgramData\IDrive\IBCOMMON\*\Session\Archive Cleanup\**10\*,lazy_ntfs,Contains individual log files for each archive cleanup operation
 422,Idrive Backup Operations,Apps,ProgramData\IDrive\IBCOMMON\*\Session\Backup\**10\*,lazy_ntfs,Contains individual log files for each backup operation
 423,Idrive Delete Operations,Apps,ProgramData\IDrive\IBCOMMON\*\Session\Delete\**10\*,lazy_ntfs,Contains individual log files for each delete operation
 424,Idrive Restore Operations,Apps,ProgramData\IDrive\IBCOMMON\*\Session\Restore\*,lazy_ntfs,Contains individual log files for each restore operation
 425,Idrive Backup Summary,Apps,ProgramData\IDrive\IBCOMMON\*\Session\LOGXML\*xml,lazy_ntfs,Contains summary of each backup session
 426,Idrive Tracefile,Apps,ProgramData\IDrive\IBCOMMON\*\Tracefile.txt\Tracefile.txt,lazy_ntfs,Application log which includes error logs for failed uploads
 427,Idrive Mapped Drives,Apps,ProgramData\IDrive\IBCOMMON\IDMappedDrives.txt,lazy_ntfs,List of mapped drives for backup
 428,Idrive Backup Schedule,Apps,ProgramData\IDrive\IBCOMMON\schedule.xml,lazy_ntfs,Backup schedule configurations
 429,Idrive Schedule History,Apps,ProgramData\IDrive\IBCOMMON\Sch_Trace.txt,lazy_ntfs,History of schedule configurations
 430,Idrive Configuration,Apps,ProgramData\IDrive\IBCOMMON\idrive.ini,lazy_ntfs,List of Idrive configuration options
 431,Idrive Local Drives,Apps,ProgramData\IDrive\IBCOMMON\get_Alldrives.txt,lazy_ntfs,List of all local drives
 432,Idrive Exclusion Configurations,Apps,ProgramData\IDrive\IBCOMMON\Exclude*,lazy_ntfs,Files pertaining to exclusion configurations
 433,Idrive User Details,Apps,ProgramData\IDrive\IBCOMMON\AutoComp.ini,lazy_ntfs,"Idrive username, Scheduler notification emails, local username"
 434,Idrive SQL Databse,Apps,ProgramData\IDrive\IBCOMMON\*\LDBNEW\*\*.ibds,lazy_ntfs,Sql database of local files that are backed up
 435,ImgBurn - Application Log File,Apps,Users\*\AppData\Roaming\ImgBurn\Log Files\ImgBurn.log,lazy_ntfs,Contains the ImgBurn application log file.
 436,Index.dat History,Communications,Documents and Settings\*\Local Settings\History\History.IE5\index.dat,lazy_ntfs,
 437,Index.dat History subdirectory,Communications,Documents and Settings\*\Local Settings\History\History.IE5\*\index.dat,lazy_ntfs,
 438,Index.dat cookies,Communications,Documents and Settings\*\Cookies\index.dat,lazy_ntfs,
 439,Index.dat UserData,Communications,Documents and Settings\*\Application Data\Microsoft\Internet Explorer\UserData\index.dat,lazy_ntfs,
 440,Index.dat Office XP,Communications,Documents and Settings\*\Application Data\Microsoft\Office\Recent\index.dat,lazy_ntfs,
 441,Index.dat Office,Communications,Users\*\AppData\Roaming\Microsoft\Office\Recent\index.dat,lazy_ntfs,
 442,Local Internet Explorer folder,Communications,Users\*\AppData\Local\Microsoft\Internet Explorer\**10,lazy_ntfs,
 443,Roaming Internet Explorer folder,Communications,Users\*\AppData\Roaming\Microsoft\Internet Explorer\**10,lazy_ntfs,
 444,IE 9/10 History,Communications,Users\*\AppData\Local\Microsoft\Windows\History\**10,lazy_ntfs,
 445,IE 9/10 Cookies,Communications,Users\*\AppData\Local\Microsoft\Windows\Cookies\**10,lazy_ntfs,
 446,IE 9/10 Download History,Communications,Users\*\AppData\Local\Microsoft\Windows\IEDownloadHistory\**10,lazy_ntfs,
 447,IE 11 Metadata,Communications,Users\*\AppData\Local\Microsoft\Windows\WebCache\*,lazy_ntfs,
 448,IE 11 Cookies,Communications,Users\*\AppData\Local\Microsoft\Windows\INetCookies\**10,lazy_ntfs,
 449,IrfanView Configuration File,FileKnowledge,Users\*\AppData\Roaming\IrfanView\i_view32.ini,lazy_ntfs,
 450,JDownloader 2.0 Download Lists,App,Users\*\AppData\Local\JDownloader 2.0\cfg\**10\downloadList*.zip,lazy_ntfs,"Zip folder which contains several files (00,00_00 and extraInfo) which list the download folder, the time it was created, the name of the download, origin URL, referral URL and more"
 451,JDownloader 2.0 Link Collector,App,Users\*\AppData\Local\JDownloader 2.0\cfg\**10\linkcollector*.zip,lazy_ntfs,"Zip folder which contains several files (0X,0X_00 and extraInfo) which list the websites crawled for links, the referral URLs, timestamps and more"
 452,JDownloader 2.0 General Settings,App,Users\*\AppData\Local\JDownloader 2.0\cfg\**10\org.jdownloader.settings.GeneralSettings.json,lazy_ntfs,General user config for JDownloader 2.0. Holds default download folder.
 453,JDownloader 2.0 Link Grabber Settings,App,Users\*\AppData\Local\JDownloader 2.0\cfg\**10\org.jdownloader.gui.views.linkgrabber.addlinksdialog.LinkgrabberSettings.json,lazy_ntfs,Linkgrabber Settings for JDownloader 2.0. Holds latest download destination folder.
 454,JDownloader 2.0 Proxy Settings,App,Users\*\AppData\Local\JDownloader 2.0\cfg\**10\org.jdownloader.settings.InternetConnectionSettings.customproxylist.json,lazy_ntfs,Proxy configuration for JDownloader 2.0
 455,Java WebStart Cache User Level - Default,Communication,Users\*\AppData\Local\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 456,Java WebStart Cache User Level - IE Protected Mode,Communication,Users\*\AppData\LocalLow\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 457,Java WebStart Cache System level,Communication,Windows\System32\config\systemprofile\AppData\Local\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 458,Java WebStart Cache System level,Communication,Windows.old\Windows\System32\config\systemprofile\AppData\Local\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 459,Java WebStart Cache System level - IE Protected Mode,Communication,Windows\System32\config\systemprofile\AppData\LocalLow\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 460,Java WebStart Cache System level - IE Protected Mode,Communication,Windows.old\Windows\System32\config\systemprofile\AppData\LocalLow\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 461,Java WebStart Cache System level (SysWow64),Communication,Windows\SysWOW64\config\systemprofile\AppData\Local\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 462,Java WebStart Cache System level (SysWow64),Communication,Windows.old\Windows\SysWOW64\config\systemprofile\AppData\Local\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 463,Java WebStart Cache System level (SysWow64) - IE Protected Mode,Communication,Windows\SysWOW64\config\systemprofile\AppData\LocalLow\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 464,Java WebStart Cache System level (SysWow64) - IE Protected Mode,Communication,Windows.old\Windows\SysWOW64\config\systemprofile\AppData\LocalLow\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 465,Java WebStart Cache User Level - XP,Communications,Documents and Settings\*\Application Data\Sun\Java\Deployment\cache\*\*\*.idx,lazy_ntfs,
 466,JumpLists from CustomDestinations,JumpLists,Users\*\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations\**10,lazy_ntfs,
 467,JumpLists from CustomDestinations,JumpLists,Users\*\AppData\Roaming\Microsoft\Windows\Recent\CustomDestinations\**10,lazy_ntfs,
 468,Kali WSL /etc/debian_version,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\debian_version,lazy_ntfs,
 469,Kali WSL /etc/fstab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\fstab,lazy_ntfs,
 470,Kali WSL /etc/os-release,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\os-release,lazy_ntfs,
 471,Kali WSL /etc/passwd,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\passwd,lazy_ntfs,
 472,Kali WSL /etc/group,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\group,lazy_ntfs,
 473,Kali WSL /etc/shadow,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\shadow,lazy_ntfs,
 474,Kali WSL /etc/timezone,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\timezone,lazy_ntfs,
 475,Kali WSL /etc/hostname,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\hostname,lazy_ntfs,
 476,Kali WSL /etc/hosts,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\hosts,lazy_ntfs,
 477,Kali WSL /etc/crontab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\crontab,lazy_ntfs,
 478,Kali WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\bash.bashrc,lazy_ntfs,
 479,Kali WSL /etc/profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\etc\profile,lazy_ntfs,
 480,Kali WSL .bash_history,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\**10\.bash_history,lazy_ntfs,
 481,Kali WSL .bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\**10\.bashrc,lazy_ntfs,
 482,Kali WSL .profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\**10\.profile,lazy_ntfs,
 483,Kali WSL User Crontabs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\var\spool\cron\crontabs\**10,lazy_ntfs,
 484,Kali WSL Apt Logs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\rootfs\var\log\apt\**10\*.log,lazy_ntfs,
 485,Kali WSL ext4.vhdx,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\KaliLinux.54290C8133FEE_*\LocalState\ext4.vhdx,lazy_ntfs,
 486,Kaseya Live Connect Logs (XP),ApplicationLogs,Documents and Settings\*\Application Data\Kaseya\Log\**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 487,Kaseya Live Connect Logs,ApplicationLogs,Users\*\AppData\Local\Kaseya\Log\KaseyaLiveConnect\**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 488,Kaseya Agent Endpoint Service Logs (XP),ApplicationLogs,Documents and Settings\All Users\Application Data\Kaseya\Log\Endpoint\**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 489,Kaseya Agent Endpoint Service Logs,ApplicationLogs,ProgramData\Kaseya\Log\Endpoint\**10,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 490,Kaseya Agent Service Log,ApplicationLogs,Program Files*\Kaseya\*\agentmon.log*,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229009708-Live-Connect-Log-File-Locations
 491,Kaseya Setup Log,ApplicationLogs,Users\*\AppData\Local\Temp\KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 492,Kaseya Setup Log,ApplicationLogs,Windows\Temp\KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 493,Kaseya Setup Log,ApplicationLogs,Windows.old\Windows\Temp\KASetup.log,lazy_ntfs,https://helpdesk.kaseya.com/hc/en-gb/articles/229011448
 494,Kaseya Agent Edge Service Logs,ApplicationLogs,ProgramData\Kaseya\Log\KaseyaEdgeServices\**10,lazy_ntfs,https://www.huntress.com/blog/rapid-response-kaseya-vsa-mass-msp-ransomware-incident
 495,Keepass User Config,App,Users\*\AppData\Roaming\KeePass\*.xml,lazy_ntfs,Collecting Keepass User Configuration File
 496,Keepass Config Xml,App,Program Files\KeePass Password Safe*\*.xml,lazy_ntfs,Collecting Keepass Configuration File
 497,Keepass Application Details,App,Program Files\KeePass Password Safe*\*.config,lazy_ntfs,Collecting Keepass Application Details
 498,Keepass Local Ini,App,Users\*\AppData\Local\KeePassXC\*.ini,lazy_ntfs,
 499,Keepass Roaming Ini,App,Users\*\AppData\Roaming\KeePassXC\*.ini,lazy_ntfs,
 500,LNK Files from Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Windows\Recent\**10,lazy_ntfs,Also includes automatic and custom jumplist directories
 501,LNK Files from Microsoft Office Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Office\Recent\**10,lazy_ntfs,
 502,Start Menu LNK Files,LNKFiles,Users\*\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\*.LNK,lazy_ntfs,
 503,LNK Files from Recent (XP),LNKFiles,Documents and Settings\*\Recent\**10,lazy_ntfs,
 504,Desktop LNK Files XP,LNKFiles,Documents and Settings\*\Desktop\*.LNK,lazy_ntfs,
 505,Desktop LNK Files,LNKFiles,Users\*\Desktop\*.LNK,lazy_ntfs,
 506,Restore point LNK Files XP,LNKFiles,System Volume Information\_restore*\RP*\*.LNK,lazy_ntfs,
 507,LNK Files from C:\ProgramData,LNKFiles,ProgramData\Microsoft\Windows\Start Menu\Programs\*.LNK,lazy_ntfs,
 508,Level RMM Client Application logs,ApplicationLogs,Program Files\Level\*.log,lazy_ntfs,Contains Application Log entries such as service start and incoming connections.
 509,.bash_history,Windows Linux Profile,Users\*\AppData\Local\Packages\*\LocalState\rootfs\home\*\.bash_history,lazy_ntfs,
 510,.bash_logout,Windows Linux Profile,Users\*\AppData\Local\Packages\*\LocalState\rootfs\home\*\.bash_logout,lazy_ntfs,
 511,.bashrc,Windows Linux Profile,Users\*\AppData\Local\Packages\*\LocalState\rootfs\home\*\.bashrc,lazy_ntfs,
 512,.profile,Windows Linux Profile,Users\*\AppData\Local\Packages\*\LocalState\rootfs\home\*\.profile,lazy_ntfs,
 513,User Files - Desktop,LiveUserFiles,Users\*\Desktop\**10,lazy_ntfs,
 514,User Files - Documents,LiveUserFiles,Users\*\Documents\**10,lazy_ntfs,
 515,User Files - Downloads,LiveUserFiles,Users\*\Downloads\**10,lazy_ntfs,
 516,User Files - Dropbox,LiveUserFiles,Users\*\Dropbox*\**10,lazy_ntfs,
 517,LogFiles,Logs,Windows\System32\LogFiles\**10,lazy_ntfs,
 518,LogFiles,Logs,Windows.old\Windows\System32\LogFiles\**10,lazy_ntfs,
 519,Error logging,Misc,windows\PFRO.log,lazy_ntfs,
 520,LogMeIn ProgramData Logs,ApplicationLogs,ProgramData\LogMeIn\Logs\**10,lazy_ntfs,
 521,LogMeIn Application Logs,ApplicationLogs,Users\*\AppData\Local\temp\LogMeInLogs\**10,lazy_ntfs,"Contains RemoteAssist (formerly GoToAssist), GoToMeeting, and other GoTo* logs"
 522,MOF files,WMI,**10\*.MOF,lazy_ntfs,
 523,MS SQL Errorlog,SQL Exploitation,Program Files\Microsoft SQL Server\*\MSSQL\LOG\ERRORLOG,lazy_ntfs,
 524,MS SQL Errorlogs,SQL Exploitation,Program Files\Microsoft SQL Server\*\MSSQL\LOG\ERRORLOG.*,lazy_ntfs,
 525,Macrium Reflect,Apps,ProgramData\Macrium\Macrium Service\*,lazy_ntfs,Copies out all log files
 526,Macrium Reflect,Apps,ProgramData\Macrium\Reflect\*,lazy_ntfs,Copies out the Reflect folder which contains many important logs
 527,Macrium Reflect,Apps,ProgramData\Macrium\Reflect Launcher,lazy_ntfs,Copies out the Reflect folder which contains many important logs
 528,MalwareBytes Anti-Malware Logs,Antivirus,ProgramData\Malwarebytes\Malwarebytes Anti-Malware\Logs\mbam-log-*.xml,lazy_ntfs,
 529,MalwareBytes Anti-Malware Service Logs,Antivirus,ProgramData\Malwarebytes\MBAMService\logs\mbamservice.log*,lazy_ntfs,
 530,MalwareBytes Anti-Malware Scan Logs,Antivirus,Users\*\AppData\Roaming\Malwarebytes\Malwarebytes Anti-Malware\Logs\**10,lazy_ntfs,
 531,MalwareBytes Anti-Malware Scan Results Logs,Antivirus,ProgramData\Malwarebytes\MBAMService\ScanResults\**10,lazy_ntfs,
 532,ManageEngine Desktop Central Log Files,Logs,ManageEngine\DesktopCentral_Server\logs\**10,lazy_ntfs,
 533,ManageEngine ADSelfService Plus Log Files,Logs,ManageEngine\ADSelfService Plus\logs\**10,lazy_ntfs,
 534,Mattermost - Chat Logs,Apps,Users\*\AppData\Roaming\Mattermost\IndexedDB\**10,lazy_ntfs,Locates Mattermost logs and copies them
 535,McAfee Desktop Protection Logs XP,Antivirus,Users\All Users\Application Data\McAfee\DesktopProtection\**10,lazy_ntfs,
 536,McAfee Desktop Protection Logs,Antivirus,ProgramData\McAfee\DesktopProtection\**10,lazy_ntfs,
 537,McAfee Endpoint Security Logs,Antivirus,ProgramData\McAfee\Endpoint Security\Logs\**10,lazy_ntfs,
 538,McAfee Endpoint Security Logs,Antivirus,ProgramData\McAfee\Endpoint Security\Logs_Old\**10,lazy_ntfs,
 539,McAfee VirusScan Logs,Antivirus,ProgramData\Mcafee\VirusScan\**10,lazy_ntfs,
 540,McAfee ePO Logs,Antivirus,ProgramData\McAfee\Endpoint Security\Logs\**10,lazy_ntfs,
 541,MediaMonkey - Media SQLite Database,Apps,Users\*\AppData\Roaming\MediaMonkey\MM.DB,lazy_ntfs,Locates SQLite DB that contains a complete enumeration of the user's media collection within MediaMonkey
 542,MediaMonkey - MediaMonkey.ini,Apps,Users\*\AppData\Roaming\MediaMonkey\MediaMonkey.ini,lazy_ntfs,Locates .ini file which contains information about the user's MediaMonkey application instance
 543,MegaSync Folder,ApplicationLogs,Users\*\AppData\Local\Mega Limited\MEGAsync\**10,lazy_ntfs,
 544,hiberfil.sys,Memory,hiberfil.sys,lazy_ntfs,
 545,pagefile.sys,Memory,pagefile.sys,lazy_ntfs,
 546,swapfile.sys,Memory,swapfile.sys,lazy_ntfs,
 547,Small Memory Dump directory,Memory,Windows\Minidump\*.dmp,lazy_ntfs,https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/small-memory-dump
 548,Small Memory Dump directory,Memory,Windows.old\Windows\Minidump\*.dmp,lazy_ntfs,https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/small-memory-dump
 549,MeshAgent .msh (configuration) file,Apps,Program Files\Mesh Agent\**10\*.msh,lazy_ntfs,Grabs all .msh (config) files present in this folder
 550,MeshAgent log file,Logs,Program Files\Mesh Agent\**10\*.log,lazy_ntfs,Grabs all .log files present in this folder
 551,Microsoft Office Backstage,FileKnowledge,Users\*\AppData\Local\Microsoft\Office\*\BackstageinAppNavCache\**10,lazy_ntfs,
 552,Microsoft OneNote - FullTextSearchIndex,Apps,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\*\FullTextSearchIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's text content
 553,Microsoft OneNote - RecentNotebooks_SeenURLs,Apps,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\Notifications\RecentNotebooks_SeenURLs,lazy_ntfs,Grabs a file that appears to record recently seen OneNote notebooks
 554,Microsoft OneNote - AccessibilityCheckerIndex,Apps,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\AccessibilityCheckerIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's version sync error history
 555,Microsoft OneNote - User NoteTags,Apps,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\NoteTags\*LiveId.db,lazy_ntfs,Grabs a database that stores the user specified tags within OneNote to be used application-wide
 556,Microsoft OneNote - RecentSearches,Apps,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\RecentSearches\RecentSearches.db,lazy_ntfs,Grabs a database that stores the user's recent searches within OneNote
 557,Windows Safety Scanner Logs,Antivirus,Windows\Debug\msert.log,lazy_ntfs,
 558,"Microsoft Sticky Notes - Windows 7, 8, and 10 version 1511 and earlier",Apps,Users\*\AppData\Roaming\Microsoft\StickyNotes\StickyNotes.snt,lazy_ntfs,
 559,Microsoft Sticky Notes - 1607 and later,Apps,Users\*\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes*\LocalState\plum.sqlite*,lazy_ntfs,
 560,Microsoft Teams IndexedDB Cache,Apps,Users\*\AppData\Roaming\Microsoft\Teams\IndexedDB\https_teams.microsoft.com_0.indexeddb.leveldb\**10,lazy_ntfs,"LevelDB database which can contain inbound/outbound chat messages, call history and more"
 561,Microsoft Teams Local Storage Cache,Apps,Users\*\AppData\Roaming\Microsoft\Teams\Local Storage\leveldb\**10,lazy_ntfs,"LevelDB database which can contain meeting history, file transfer logs and more"
 562,Microsoft Teams Cache,Apps,Users\*\AppData\Roaming\Microsoft\Teams\Cache\**10,lazy_ntfs,Chromium cache which can be viewed with Nirsoft's ChromeCacheView
 563,Microsoft Teams Config,Apps,Users\*\AppData\Roaming\Microsoft\Teams\desktop-config.json,lazy_ntfs,JSON config file for Teams
 564,Microsoft Teams Logs (Windows 11),Apps,Users\*\AppData\Local\Packages\MicrosoftTeams_8wekyb3d8bbwe\LocalCache\Microsoft\MSTeams\Logs,lazy_ntfs,Lots of log files for MS Teams
 565,Microsoft To Do - SQLite Database of To Do tasks,Apps,Users\*\AppData\Local\Packages\Microsoft.Todos_8wekyb3d8bbwe\LocalState\AccountsRoot\*\todosqlite.db*,lazy_ntfs,
 566,Microsoft To Do - User Avatar,Apps,Users\*\AppData\Local\Packages\Microsoft.Todos_8wekyb3d8bbwe\LocalState\AccountsRoot\4c444a17ebb042fb92df97d00d1c802a\avatars\UserAvatar.jpg,lazy_ntfs,
 567,Midnight Commander -- All Configuation Files,Apps,Users\*\Midnight Commander\*,lazy_ntfs,Locates folder where all configuration files reside
 568,Multi Commander - Application Folder,Apps,Users\*\AppData\Local\MultiCommander*\**10,lazy_ntfs,Locates the contents of the Application folder.
 569,Multi Commander - Config Folder,Apps,Users\*\AppData\Roaming\MultiCommander*\Config\**10,lazy_ntfs,Locates the contents of the Config folder.
 570,Multi Commander - Log Folder,Apps,Users\*\AppData\Roaming\MultiCommander*\Logs\**10,lazy_ntfs,Locates log file(s) related to user activity within Multi Commander.
 571,Multi Commander - UserData Folder,Apps,Users\*\AppData\Roaming\MultiCommander*\UserData\**10,lazy_ntfs,Locates the contents of the UserData folder.
 572,Multi Commander - Log File,Apps,Users\*\AppData\Roaming\MultiCommander*\**10\*MultiCommander.log,lazy_ntfs,Locates log file(s) associated with Milti Commander. Commonly in YYYY-MM-DD (numbers)-MultiCommander.log naming convention.
 573,.NET CLR UsageLogs (user-scoped),.NET CLR UsageLogs,Users\*\AppData\Local\Microsoft\CLR_*\**10\*.log,lazy_ntfs,
 574,.NET CLR UsageLogs (system-scoped),.NET CLR UsageLogs,Windows*\System32\config\systemprofile\AppData\Local\Microsoft\CLR_*\**10\*.log,lazy_ntfs,
 575,NGINX Log Files,Logs,nginx\logs\*.log,lazy_ntfs,
 576,Usenet Clients - NZBGet Log File,FileDownload,ProgramData\NZBGet\nzbget.log,lazy_ntfs,Locates NZBGet download log file
 577,Usenet Clients - NZBGet NZBs,FileDownload,ProgramData\NZBGet\nzb\*,lazy_ntfs,Locates NZBGet NZB files that were used by the user
 578,Nessus Logs,Nessus,ProgramData\Tenable\Nessus\conf\**10,lazy_ntfs,
 579,Nessus Logs,Nessus Logs,ProgramData\Tenable\Nessus\nessus\logs\**10,lazy_ntfs,
 580,Net Monitor Server Logs,ApplicationLogs,ProgramData\Net Monitor for Employees Pro\log\*\**10,lazy_ntfs,Contains Net Monitor server logs
 581,Net Monitor Server Data,Communication,ProgramData\Net Monitor for Employees Pro\data\**10,lazy_ntfs,Contains Net Monitor server data - Indicates what have been seen as the attacker
 582,Net Monitor Server Config,Apps,ProgramData\Net Monitor for Employees Pro\config\**10,lazy_ntfs,Contains Net Monitor server config
 583,Net Monitor Server Temp Folder,Apps,ProgramData\Net Monitor for Employees Pro\tmp\**10,lazy_ntfs,
 584,Net Monitor Client Logs,ApplicationLogs,Program Files*\Net Monitor for Employees Pro\log\**10,lazy_ntfs,Contains Net Monitor client logs
 585,Net Monitor Client Config,ApplicationLogs,Program Files*\Net Monitor for Employees Pro\config\**10,lazy_ntfs,Contains Net Monitor client config
 586,Usenet Clients - Newsbin Pro,FileDownload,Users\*\AppData\Local\Newsbin\Downloaded.db3,lazy_ntfs,Locates Newsbin Pro download log database
 587,Usenet Clients - Newsleecher,FileDownload,Users\*\AppData\Roaming\NewsLeecher\downloaded.dat,lazy_ntfs,Locates Newsleecher download .dat file
 588,Nicotine++ Logs,FileDownload,Users\*\AppData\Roaming\nicotine\logs\**10,lazy_ntfs,"Locates Nicotine++ chat logs, room logs, transfer logs, and debug logs (if enabled)"
 589,Nicotine++ Incomplete Downloads,FileDownload,Users\*\AppData\Roaming\nicotine\incomplete\**10,lazy_ntfs,Locates files that did not finish downloading
 590,Nicotine++ Buddyfiles.db,FileDownload,Users\*\AppData\Roaming\nicotine\buddyfiles.db\**10,lazy_ntfs,Locates a DB that appears to include shared files from a user's buddy list
 591,Nicotine++ Buddystreams.db,FileDownload,Users\*\AppData\Roaming\nicotine\buddystreams.db\**10,lazy_ntfs,Locates a DB that appears to include shared files from a user's buddy list
 592,Nicotine++ Buddymtimes.db,FileDownload,Users\*\AppData\Roaming\nicotine\buddymtimes.db\**10,lazy_ntfs,"Locates a DB that appears to enumerate which files the user is sharing to their buddy list, from a folder level"
 593,Nicotine++ Buddyfileindex.db,FileDownload,Users\*\AppData\Roaming\nicotine\buddyfileindex.db\**10,lazy_ntfs,"Locates a DB that appears to enumerate which files the user is sharing to their buddy list, from a file level"
 594,Nicotine++ Buddywordindex.db,FileDownload,Users\*\AppData\Roaming\nicotine\buddywordindex.db\**10,lazy_ntfs,Unknown what this is for at this time
 595,Nicotine++ Config Files,FileDownload,Users\*\AppData\Roaming\nicotine\config\**10,lazy_ntfs,Locates config files
 596,Nicotine++ User Shares,FileDownload,Users\*\AppData\Roaming\nicotine\usershares\**10,lazy_ntfs,Locates a DB that appears to store a list of files per user that they are sharing within Nicotine++. Note: this requires the user to right-click -&amp;gt; browse files shared by that user
 597,Nicotine++ Downloads.json,FileDownload,Users\*\AppData\Roaming\nicotine\downloads.json*,lazy_ntfs,Locates downloads.json
 598,Nicotine++ Uploads.json,FileDownload,Users\*\AppData\Roaming\nicotine\uploads.json*,lazy_ntfs,Locates uploads.json
 599,Notepad++ Unsaved Edits,Text Editor,Users\*\AppData\Roaming\Notepad++\backup\**10,lazy_ntfs,Locates non-saved Notepad++ files and copies them.
 600,Notepad++ Config,Text Editor,Users\*\AppData\Roaming\Notepad++\config.xml,lazy_ntfs,"Retrieves config.xml which contains recently searched terms, replaced terms and recently opened documents"
 601,Notepad++ Session,Text Editor,Users\*\AppData\Roaming\Notepad++\session.xml,lazy_ntfs,Retrieves session.xml which contains session date
 602,Notepad Session Files,Windows Notepad,Users\*\AppData\Local\Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState\*.bin,lazy_ntfs,Contains .bin files which consist of the files opened in each tab in Windows Notepad
 603,Notion Local Storage,App,Users\*\AppData\Roaming\Notion\notion.db,lazy_ntfs,"Local storage file containing all pages, databases, users, etc."
 604,Notion Custom Dictionary,App,Users\*\AppData\Roaming\Notion\Partitions\notion\Custom Dictionary.txt,lazy_ntfs,
 605,Word Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Word\**10,lazy_ntfs,
 606,Excel Autosave Location,ApplicationCompatibility,Users\*\AppData\Roaming\Microsoft\Excel\**10,lazy_ntfs,
 607,Powerpoint Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Powerpoint\**10,lazy_ntfs,
 608,Publisher Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Publisher\**10,lazy_ntfs,
 609,Office Diagnostics,Execution,Users\*\AppData\Local\Diagnostics\PCW.debugreport.xml,lazy_ntfs,Payloads for CVE-2022-30190 ('Follina') will be in this log
 610,Office Elevated Diagnostics,Execution,Users\*\AppData\Local\ElevatedDiagnostics\PCW.debugreport.xml,lazy_ntfs,Payloads for CVE-2022-30190 ('Follina') will be in this log
 611,Office Document Cache,FileKnowledge,Users\*\AppData\Local\Microsoft\Office\*\OfficeFileCache\**10,lazy_ntfs,
 612,One Commander - All Configuration Files,Apps,Users\*\OneCommander\*,lazy_ntfs,Locates folder where all configuration files reside
 613,One Commander - Other Configuration Files,Apps,Users\*\AppData\Local\Apps\2.0\*\*\onec*\**10,lazy_ntfs,Locates folder where all configuration files reside
 614,OneDrive Metadata Logs,Apps,Users\*\AppData\Local\Microsoft\OneDrive\logs\**10,lazy_ntfs,
 615,OneDrive Metadata Settings,Apps,Users\*\AppData\Local\Microsoft\OneDrive\settings\**10,lazy_ntfs,
 616,OneDrive User Files,Apps,Users\*\OneDrive*\**10,lazy_ntfs,Caution -- This target will collect OneDrive contents from the local drive AND on-demand cloud files. Ensure your scope of authority permits cloud collections before use or isolate system from network.
 617,OpenSSH Config File,Apps,Users\*\.ssh\config,lazy_ntfs,"Config file can hold usernames, IP addresses and ports, key locations and configured shortcuts for servers e.g. ssh web-server"
 618,OpenSSH Known Hosts,Apps,Users\*\.ssh\known_hosts,lazy_ntfs,"Known hosts file can hold a list of connected FQDNs/IP Addresses and ports if they are non-default, as well as public key fingerprints"
 619,OpenSSH Public Keys,Apps,Users\*\.ssh\*.pub,lazy_ntfs,"Gets all public keys (*.pub). It is more difficult to find private keys as they typically do not have a file extension. However, the .pub files should be able to help find the private keys as they are typically named the same."
 620,OpenSSH Default RSA Private Key,Apps,Users\*\.ssh\id_rsa,lazy_ntfs,Default name for an auto-generated SSH RSA private key
 621,OpenSSH Default ECDSA Private Key,Apps,Users\*\.ssh\id_ecdsa,lazy_ntfs,Default name for an auto-generated SSH ECDSA private key
 622,OpenSSH Default ECDSA-SK Private Key,Apps,Users\*\.ssh\id_ecdsa_sk,lazy_ntfs,Default name for an auto-generated SSH ECDSA private key using a Security Key
 623,OpenSSH Default ED25519 Private Key,Apps,Users\*\.ssh\id_ed25519,lazy_ntfs,Default name for an auto-generated SSH ED25519 private key
 624,OpenSSH Default ED25519-SK Private Key,Apps,Users\*\.ssh\id_ed25519_sk,lazy_ntfs,Default name for an auto-generated SSH ED25519 private key using a Security Key
 625,OpenSSH Default DSA Private Key,Apps,Users\*\.ssh\id_dsa,lazy_ntfs,Default name for an auto-generated SSH DSA private key
 626,OpenSSH Server Config File,Apps,ProgramData\ssh\sshd_config,lazy_ntfs,Config file can hold information on allowed/denied users
 627,OpenSSH Server Logs,Apps,ProgramData\ssh\logs\*,lazy_ntfs,OpenSSH server logs
 628,OpenSSH Host ECDSA Key,Apps,ProgramData\ssh\ssh_host_ecdsa_key,lazy_ntfs,Retrieves the host ECDSA key
 629,OpenSSH Host ED25519 Key,Apps,ProgramData\ssh\ssh_host_ed25519_key,lazy_ntfs,Retrieves the host ED25519 key
 630,OpenSSH Host DSA Key,Apps,ProgramData\ssh\ssh_host_dsa_key,lazy_ntfs,Retrieves the host DSA key
 631,OpenSSH Host RSA Key,Apps,ProgramData\ssh\ssh_host_rsa_key,lazy_ntfs,Retrieves the host RSA key
 632,OpenSSH User Authorized Keys,Apps,Users\*\.ssh\authorized_keys,lazy_ntfs,Retrieves the user's authorised public keys
 633,OpenSSH User Authorized Keys 2,Apps,Users\*\.ssh\authorized_keys2,lazy_ntfs,Retrieves the user's authorised public keys from the second file
 634,OpenSSH Authorized Administrator Keys,Apps,ProgramData\ssh\administrators_authorized_keys,lazy_ntfs,Retrieves the administrator group's authorised public keys
 635,OpenVPN Client Config,ApplicationLogs,Users\*\OpenVPN\config\**10,lazy_ntfs,Contains OpenVPN Configs (Profiles)
 636,OpenVPN Client Config,ApplicationLogs,Program Files*\OpenVPN\config\**10,lazy_ntfs,Contains OpenVPN Configs(Profiles)
 637,OpenVPN Client Config,ApplicationLogs,Users\*\OpenVPN\log\*.log,lazy_ntfs,Contains OpenVPN Logs for each Config(Profile)
 638,Opera - Local Folder,Communications,Users\*\AppData\Local\Opera Software\Opera Stable\**10,lazy_ntfs,Grabs entire contents of the Opera AppData\Local folder
 639,Opera - Roaming Folder,Communications,Users\*\AppData\Roaming\Opera Software\Opera Stable\**10,lazy_ntfs,Grabs entire contents of the Opera AppData\Roaming folder
 640,PST XP,Communications,Documents and Settings\*\Local Settings\Application Data\Microsoft\Outlook\*.pst,lazy_ntfs,
 641,OST XP,Communications,Documents and Settings\*\Local Settings\Application Data\Microsoft\Outlook\*.ost,lazy_ntfs,
 642,PST (2013 or 2016),Communications,Users\*\Documents\Outlook Files\*.pst,lazy_ntfs,
 643,OST (2013 or 2016),Communications,Users\*\Documents\Outlook Files\*.ost,lazy_ntfs,
 644,PST,Communications,Users\*\AppData\Local\Microsoft\Outlook\*.pst,lazy_ntfs,"Outlook Data File: POP accounts, archives, older installations"
 645,OST,Communications,Users\*\AppData\Local\Microsoft\Outlook\*.ost,lazy_ntfs,"Offline Outlook Data File: M365, Exchange, IMAP"
 646,NST,Communications,Users\*\AppData\Local\Microsoft\Outlook\*.nst,lazy_ntfs,Outlook Group Storage File: Group conversations and calendar
 647,Outlook Attachment Temporary Storage,Communications,Users\*\AppData\Local\Microsoft\Windows\INetCache\Content.Outlook\**10,lazy_ntfs,Outlook temporary storage folder for user attachments
 648,PeaZip Configuration Files,FileKnowledge,Users\*\AppData\Roaming\PeaZip\**10,lazy_ntfs,
 649,Perflogs,Application,PerfLogs\**10,lazy_ntfs,
 650,PowerShell 7 Config JSON,PowerShell,Program Files\PowerShell\7\powershell.config.json,lazy_ntfs,
 651,PowerShell Console Log,PowerShellConsoleLog,Users\*\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\*_history.txt,lazy_ntfs,
 652,PowerShell Console Log Systemprofile,PowerShellConsoleLog,Windows\System32\config\systemprofile\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\*_history.txt,lazy_ntfs,
 653,PowerShell Console Log WOW64 Systemprofile,PowerShellConsoleLog,Windows\SysWOW64\config\systemprofile\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\*_history.txt,lazy_ntfs,
 654,PowerShell ISE - AutoSave Files,PowerShellConsoleLog,Users\*\AppData\Local\Microsoft_Corporation\powershell_ise.exe_StrongName*\*\AutoSaveFiles\*.ps1,lazy_ntfs,
 655,PowerShell ISE - User Config,PowerShellConsoleLog,Users\*\AppData\Local\Microsoft_Corporation\powershell_ise.exe_StrongName*\*\*.config,lazy_ntfs,
 656,PowerShell Transcripts - Default Location,PowerShellTranscripts,Users\*\Documents\PowerShell_transcript.*.txt,lazy_ntfs,
 657,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Users\*\Documents\20*\PowerShell_transcript.*.txt,lazy_ntfs,
 658,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Windows\SysWOW64\*\PowerShell_transcript.*.txt,lazy_ntfs,
 659,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Program Files\Amazon\Ec2ConfigService\Scripts\*\PowerShell_transcript.*.txt,lazy_ntfs,
 660,PowerShell Transcripts - Observed Location,PowerShellTranscripts,Windows\System32\*\PowerShell_transcript.*.txt,lazy_ntfs,
 661,Prefetch,Prefetch,Windows\prefetch\*.pf,lazy_ntfs,
 662,Prefetch,Prefetch,Windows.old\Windows\prefetch\*.pf,lazy_ntfs,
 663,ProgramData,Application Data,ProgramData\**10,lazy_ntfs,
 664,ProtonVPN - Connection Logs,ApplicationLogs,Users\*\AppData\Local\ProtonVPN\Logs,lazy_ntfs,Locates ProtonVPN connection logs.
 665,Puffin - data.db,Communications,Users\*\AppData\Local\PuffinSecureBrowser\data.db,lazy_ntfs,Grabs an important database file that contains browser history
 666,Puffin - Autocomplete Data,Communications,Users\*\AppData\Local\PuffinSecureBrowser\autocompletes.dat,lazy_ntfs,Grabs a file that stores autocomplete data
 667,Puffin - Password Forms Data,Communications,Users\*\AppData\Local\PuffinSecureBrowser\passwordForms.dat,lazy_ntfs,Grabs a file that stores some saved password data
 668,Puffin - Password (Encrypted),Communications,Users\*\AppData\Local\PuffinSecureBrowser\credential.dat,lazy_ntfs,Grabs a file that stores passwords in an encrypted format
 669,Puffin - Subscription Data,Communications,Users\*\AppData\Local\PuffinSecureBrowser\subscription,lazy_ntfs,Grabs a file that stores the user's email address that's associated with their Puffin subscription
 670,Puffin - Cookies,Communications,Users\*\AppData\Local\PuffinSecureBrowser\cookies.dat,lazy_ntfs,Grabs a file that stores information related to cookies
 671,Puffin - Image Cache,Communications,Users\*\AppData\Local\PuffinSecureBrowser\image_cache\**10,lazy_ntfs,Grabs a directory that caches images from websites visited
 672,WNS,WNS,Users\*\AppData\Local\Microsoft\Windows\Notifications\appdb.dat,lazy_ntfs,
 673,WNS,WNS,Users\*\AppData\Local\Microsoft\Windows\Notifications\wpndatabase.db,lazy_ntfs,
 674,Q-Dir - .ini File,Apps,Users\*\AppData\Roaming\Q-Dir\Q-Dir.ini,lazy_ntfs,Locates .ini file associated with Q-Dir which stores useful user activity information.
 675,Q-Dir - .qdr file,Apps,Users\*\AppData\Roaming\Q-Dir\start.qdr,lazy_ntfs,"Locates .qdr file associated with Q-Dir which stores useful user activity information, including the last 4 folders opened (encoded, unfortunately)."
 676,QFinderPro,Apps,Users\*\AppData\Local\QNAP\QfinderPro,lazy_ntfs,Locates a JSON file that provides network location information for any QNAP connected devices.
 677,Qlik Sense Logs,Software,ProgramData\Qlik\Sense\Log\Proxy\**10\*.txt,lazy_ntfs,Collects the proxy logs for Qlik Sense
 678,Qlik Sense Logs,Software,ProgramData\Qlik\Sense\Log\Proxy\**10\*.log,lazy_ntfs,Collects the proxy logs for Qlik Sense
 679,Qlik Sense Logs,Software,ProgramData\Qlik\Sense\Log\Scheduler\**10\*.txt,lazy_ntfs,Collects the scheduler logs for Qlik Sense
 680,Qlik Sense Logs,Software,ProgramData\Qlik\Sense\Log\Scheduler\**10\*.log,lazy_ntfs,Collects the scheduler logs for Qlik Sense
 681,RDP Cache Files,FileSystem,Users\*\AppData\Local\Microsoft\Terminal Server Client\Cache\*,lazy_ntfs,
 682,Windows.old RDP Cache Files,FileSystem,Windows.old\Users\*\AppData\Local\Microsoft\Terminal Server Client\Cache\*,lazy_ntfs,
 683,RDP Cache Files,FileSystem,Documents and Settings\*\Local Settings\Application Data\Microsoft\Terminal Server Client\Cache\*,lazy_ntfs,
 684,RDP Jumplist Files,FileSystem,Users\*\AppData\Local\Packages\Microsoft.RemoteDesktop_8wekyb3d8bbwe\**10,lazy_ntfs,
 685,RemoteConnectionManager Event Logs,EventLogs,Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager*,lazy_ntfs,
 686,RemoteConnectionManager Event Logs,EventLogs,Windows.old\Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager*,lazy_ntfs,
 687,LocalSessionManager Event Logs,EventLogs,Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-LocalSessionManager*,lazy_ntfs,
 688,LocalSessionManager Event Logs,EventLogs,Windows.old\Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-LocalSessionManager*,lazy_ntfs,
 689,RDPClient Event Logs,EventLogs,Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-RDPClient*,lazy_ntfs,
 690,RDPClient Event Logs,EventLogs,Windows.old\Windows\System32\winevt\logs\Microsoft-Windows-TerminalServices-RDPClient*,lazy_ntfs,
 691,RDPCoreTS Event Logs,EventLogs,Windows\System32\winevt\logs\Microsoft-Windows-RemoteDesktopServices-RdpCoreTS*,lazy_ntfs,Can be used to correlate RDP logon failures by originating IP
 692,RDPCoreTS Event Logs,EventLogs,Windows.old\Windows\System32\winevt\logs\Microsoft-Windows-RemoteDesktopServices-RdpCoreTS*,lazy_ntfs,Can be used to correlate RDP logon failures by originating IP
 693,Radmin Server 32bit Log,ApplicationLogs,Windows\SysWOW64\rserver30\Radm_log.htm,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 694,Radmin Server 64bit Log,ApplicationLogs,Windows\System32\rserver30\Radm_log.htm,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 695,Radmin Server 32bit Chats,ApplicationLogs,Windows\SysWOW64\rserver30\CHATLOGS\*\*.htm,lazy_ntfs,Previous chat logs
 696,Radmin Server 64bit Chats,ApplicationLogs,Windows\System32\rserver30\CHATLOGS\*\*.htm,lazy_ntfs,Previous chat logs
 697,Radmin Viewer Chats,ApplicationLogs,Users\*\Documents\ChatLogs\*\*.htm,lazy_ntfs,Previous chat logs
 698,Rclone Config,Apps,**10\rclone.conf,lazy_ntfs,
 699,RecentFileCache,ApplicationCompatability,Windows\AppCompat\Programs\RecentFileCache.bcf,lazy_ntfs,
 700,RecentFileCache,ApplicationCompatability,Windows.old\Windows\AppCompat\Programs\RecentFileCache.bcf,lazy_ntfs,
 701,LNK Files from Recent,File and Folder Usage,Users\*\AppData\Roaming\Microsoft\Windows\Recent\**10,lazy_ntfs,
 702,LNK Files from Microsoft Office Recent,File and Folder Usage,Users\*\AppData\Roaming\Microsoft\Office\Recent\**10,lazy_ntfs,
 703,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin\**10\$R*,lazy_ntfs,
 704,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin\*\$R*\**10,lazy_ntfs,
 705,RECYCLER - WinXP,FileDeletion,RECYCLE*\**10\D*,lazy_ntfs,
 706,Recycle Bin - Windows Vista+,FileDeletion,$Recycle.Bin\**10\$I*,lazy_ntfs,
 707,RECYCLER - WinXP,FileDeletion,RECYCLE*\**10\INFO2,lazy_ntfs,
 708,Registry.dat MSIX Hive,Registry,Users\*\AppData\Local\Packages\*\SystemAppData\Helium\Registry.dat*,lazy_ntfs,
 709,User.dat MSIX Hive,Registry,Users\*\AppData\Local\Packages\*\SystemAppData\Helium\User.dat*,lazy_ntfs,
 710,UserClasses.dat MSIX Hive,Registry,Users\*\AppData\Local\Packages\*\SystemAppData\Helium\UserClasses.dat*,lazy_ntfs,
 711,BBI registry hive,Registry,Windows\System32\config\BBI,lazy_ntfs,
 712,BBI registry hive,Registry,Windows.old\Windows\System32\config\BBI,lazy_ntfs,
 713,BBI registry transaction files,Registry,Windows\System32\config\BBI.LOG*,lazy_ntfs,
 714,BBI registry transaction files,Registry,Windows.old\System32\config\BBI.LOG*,lazy_ntfs,
 715,BCD-Template registry hive,Registry,Windows\System32\config\BCD-Template,lazy_ntfs,
 716,BCD-Template registry hive,Registry,Windows.old\Windows\System32\config\BCD-Template,lazy_ntfs,
 717,BCD-Template registry transaction files,Registry,Windows\System32\config\BCD-Template.LOG*,lazy_ntfs,
 718,BCD-Template registry transaction files,Registry,Windows.old\System32\config\BCD-Template.LOG*,lazy_ntfs,
 719,COMPONENTS registry hive,Registry,Windows\System32\config\COMPONENTS,lazy_ntfs,
 720,COMPONENTS registry hive,Registry,Windows.old\Windows\System32\config\COMPONENTS,lazy_ntfs,
 721,COMPONENTS registry transaction files,Registry,Windows\System32\config\COMPONENTS.LOG*,lazy_ntfs,
 722,COMPONENTS registry transaction files,Registry,Windows.old\System32\config\COMPONENTS.LOG*,lazy_ntfs,
 723,DRIVERS registry hive,Registry,Windows\System32\config\DRIVERS,lazy_ntfs,
 724,DRIVERS registry hive,Registry,Windows.old\Windows\System32\config\DRIVERS,lazy_ntfs,
 725,DRIVERS registry transaction files,Registry,Windows\System32\config\DRIVERS.LOG*,lazy_ntfs,
 726,DRIVERS registry transaction files,Registry,Windows.old\System32\config\DRIVERS.LOG*,lazy_ntfs,
 727,ELAM registry hive,Registry,Windows\System32\config\ELAM,lazy_ntfs,
 728,ELAM registry hive,Registry,Windows.old\Windows\System32\config\ELAM,lazy_ntfs,
 729,ELAM registry transaction files,Registry,Windows\System32\config\ELAM.LOG*,lazy_ntfs,
 730,ELAM registry transaction files,Registry,Windows.old\System32\config\ELAM.LOG*,lazy_ntfs,
 731,userdiff registry hive,Registry,Windows\System32\config\userdiff,lazy_ntfs,
 732,userdiff registry hive,Registry,Windows.old\Windows\System32\config\userdiff,lazy_ntfs,
 733,userdiff registry transaction files,Registry,Windows\System32\config\userdiff.LOG*,lazy_ntfs,
 734,userdiff registry transaction files,Registry,Windows.old\System32\config\userdiff.LOG*,lazy_ntfs,
 735,VSMIDK registry hive,Registry,Windows\System32\config\VSMIDK,lazy_ntfs,
 736,VSMIDK registry hive,Registry,Windows.old\Windows\System32\config\VSMIDK,lazy_ntfs,
 737,VSMIDK registry transaction files,Registry,Windows\System32\config\VSMIDK.LOG*,lazy_ntfs,
 738,VSMIDK registry transaction files,Registry,Windows.old\System32\config\VSMIDK.LOG*,lazy_ntfs,
 739,SAM registry transaction files,Registry,Windows\System32\config\SAM.LOG*,lazy_ntfs,
 740,SAM registry transaction files,Registry,Windows.old\Windows\System32\config\SAM.LOG*,lazy_ntfs,
 741,SECURITY registry transaction files,Registry,Windows\System32\config\SECURITY.LOG*,lazy_ntfs,
 742,SECURITY registry transaction files,Registry,Windows.old\Windows\System32\config\SECURITY.LOG*,lazy_ntfs,
 743,SOFTWARE registry transaction files,Registry,Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 744,SOFTWARE registry transaction files,Registry,Windows.old\Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 745,SYSTEM registry transaction files,Registry,Windows\System32\config\SYSTEM.LOG*,lazy_ntfs,
 746,SYSTEM registry transaction files,Registry,Windows.old\Windows\System32\config\SYSTEM.LOG*,lazy_ntfs,
 747,SAM registry hive,Registry,Windows\System32\config\SAM,lazy_ntfs,
 748,SAM registry hive,Registry,Windows.old\Windows\System32\config\SAM,lazy_ntfs,
 749,SECURITY registry hive,Registry,Windows\System32\config\SECURITY,lazy_ntfs,
 750,SECURITY registry hive,Registry,Windows.old\Windows\System32\config\SECURITY,lazy_ntfs,
 751,SOFTWARE registry hive,Registry,Windows\System32\config\SOFTWARE,lazy_ntfs,
 752,SOFTWARE registry hive,Registry,Windows.old\Windows\System32\config\SOFTWARE,lazy_ntfs,
 753,SYSTEM registry hive,Registry,Windows\System32\config\SYSTEM,lazy_ntfs,
 754,SYSTEM registry hive,Registry,Windows.old\Windows\System32\config\SYSTEM,lazy_ntfs,
 755,RegBack registry transaction files,Registry,Windows\System32\config\RegBack\*.LOG*,lazy_ntfs,
 756,RegBack registry transaction files,Registry,Windows.old\Windows\System32\config\RegBack\*.LOG*,lazy_ntfs,
 757,SAM registry hive (RegBack),Registry,Windows\System32\config\RegBack\SAM,lazy_ntfs,
 758,SAM registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SAM,lazy_ntfs,
 759,SECURITY registry hive (RegBack),Registry,Windows\System32\config\RegBack\SECURITY,lazy_ntfs,
 760,SECURITY registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SECURITY,lazy_ntfs,
 761,SOFTWARE registry hive (RegBack),Registry,Windows\System32\config\RegBack\SOFTWARE,lazy_ntfs,
 762,SOFTWARE registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SOFTWARE,lazy_ntfs,
 763,SYSTEM registry hive (RegBack),Registry,Windows\System32\config\RegBack\SYSTEM,lazy_ntfs,
 764,SYSTEM registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SYSTEM,lazy_ntfs,
 765,SYSTEM registry hive (RegBack),Registry,Windows\System32\config\RegBack\SYSTEM1,lazy_ntfs,
 766,SYSTEM registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SYSTEM1,lazy_ntfs,
 767,System Profile registry hive,Registry,Windows\System32\config\systemprofile\NTUSER.DAT,lazy_ntfs,
 768,System Profile registry hive,Registry,Windows.old\Windows\System32\config\systemprofile\NTUSER.DAT,lazy_ntfs,
 769,System Profile registry transaction files,Registry,Windows\System32\config\systemprofile\NTUSER.DAT.LOG*,lazy_ntfs,
 770,System Profile registry transaction files,Registry,Windows.old\Windows\System32\config\systemprofile\NTUSER.DAT.LOG*,lazy_ntfs,
 771,Local Service registry hive,Registry,Windows\ServiceProfiles\LocalService\NTUSER.DAT,lazy_ntfs,
 772,Local Service registry hive,Registry,Windows.old\Windows\ServiceProfiles\LocalService\NTUSER.DAT,lazy_ntfs,
 773,Local Service registry transaction files,Registry,Windows\ServiceProfiles\LocalService\NTUSER.DAT.LOG*,lazy_ntfs,
 774,Local Service registry transaction files,Registry,Windows.old\Windows\ServiceProfiles\LocalService\NTUSER.DAT.LOG*,lazy_ntfs,
 775,Network Service registry hive,Registry,Windows\ServiceProfiles\NetworkService\NTUSER.DAT,lazy_ntfs,
 776,Network Service registry hive,Registry,Windows.old\Windows\ServiceProfiles\NetworkService\NTUSER.DAT,lazy_ntfs,
 777,Network Service registry transaction files,Registry,Windows\ServiceProfiles\NetworkService\NTUSER.DAT.LOG*,lazy_ntfs,
 778,Network Service registry transaction files,Registry,Windows.old\Windows\ServiceProfiles\NetworkService\NTUSER.DAT.LOG*,lazy_ntfs,
 779,System Restore Points Registry Hives (XP),Registry,System Volume Information\_restore*\RP*\snapshot\_REGISTRY_*,lazy_ntfs,
 780,NTUSER.DAT registry hive XP,Registry,Documents and Settings\*\NTUSER.DAT,lazy_ntfs,
 781,NTUSER.DAT registry hive,Registry,Users\*\NTUSER.DAT,lazy_ntfs,
 782,NTUSER.DAT registry transaction files,Registry,Users\*\NTUSER.DAT.LOG*,lazy_ntfs,
 783,NTUSER.DAT DEFAULT registry hive,Registry,Windows\System32\config\DEFAULT,lazy_ntfs,
 784,NTUSER.DAT DEFAULT registry hive,Registry,Windows.old\Windows\System32\config\DEFAULT,lazy_ntfs,
 785,NTUSER.DAT DEFAULT transaction files,Registry,Windows\System32\config\DEFAULT.LOG*,lazy_ntfs,
 786,NTUSER.DAT DEFAULT transaction files,Registry,Windows.old\Windows\System32\config\DEFAULT.LOG*,lazy_ntfs,
 787,UsrClass.dat registry hive,Registry,Users\*\AppData\Local\Microsoft\Windows\UsrClass.dat,lazy_ntfs,
 788,UsrClass.dat registry transaction files,Registry,Users\*\AppData\Local\Microsoft\Windows\UsrClass.dat.LOG*,lazy_ntfs,
 789,RemoteUtilities Connection Logs,Remote Access,Program Files*\Remote Utilities - Host\Logs\rut_log_*.html,lazy_ntfs,Includes connection log files
 790,RemoteUtilities Install Log,Remote Access,ProgramData\Remote Utilities\install.log,lazy_ntfs,Includes Install log file
 791,NTUSER.DAT registry hive,Registry,**10\NTUSER.DAT,lazy_ntfs,
 792,NTUSER.DAT registry transaction files,Registry,**10\NTUSER.DAT.LOG*,lazy_ntfs,
 793,NTUSER.DAT DEFAULT registry hive,Registry,**10\DEFAULT,lazy_ntfs,
 794,NTUSER.DAT DEFAULT transaction files,Registry,**10\DEFAULT.LOG*,lazy_ntfs,
 795,UsrClass.dat registry hive,Registry,**10\UsrClass.dat,lazy_ntfs,
 796,UsrClass.dat registry transaction files,Registry,**10\UsrClass.dat.LOG*,lazy_ntfs,
 797,LNK Files,LNKFiles,**10\*.LNK,lazy_ntfs,
 797,Desktop LNK Files,LNKFiles,**10\*.LNK,lazy_ntfs,
 798,Word Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Word\*,lazy_ntfs,
 798,Publisher Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Word\*,lazy_ntfs,
 799,Excel Autosave Location,ApplicationCompatibility,Users\*\AppData\Roaming\Microsoft\Excel\*,lazy_ntfs,
 800,PowerPoint Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\PowerPoint\*,lazy_ntfs,
 801,Publisher Autosave Location,FileKnowledge,Users\*\AppData\Roaming\Microsoft\Publisher\*,lazy_ntfs,
 802,Office Document Cache,FileKnowledge,Users\*\AppData\Local\Microsoft\Office\*\OfficeFileCache\*,lazy_ntfs,
 802,Office Document Cache,FileKnowledge,Users\*\AppData\Local\Microsoft\Office\*\OfficeFileCache\*,lazy_ntfs,
 803,Chrome bookmarks,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 803,Chrome bookmarks,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 804,Chrome Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\**10\Cookies*,lazy_ntfs,
 804,Chrome Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\**10\Cookies*,lazy_ntfs,
 805,Chrome Current Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 805,Chrome Current Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 806,Chrome Current Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 806,Chrome Current Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 807,Chrome Download Metadata,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Download Metadata,lazy_ntfs,
 807,Chrome Download Metadata,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Download Metadata,lazy_ntfs,
 808,Chrome Extension Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Extension Cookies,lazy_ntfs,
 808,Chrome Extension Cookies,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Extension Cookies,lazy_ntfs,
 809,Chrome Favicons,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 809,Chrome Favicons,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 810,Chrome History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\History*,lazy_ntfs,
 810,Chrome History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\History*,lazy_ntfs,
 811,Chrome Last Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 811,Chrome Last Session,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 812,Chrome Last Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 812,Chrome Last Tabs,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 813,Chrome Sessions Folder,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sessions\*,lazy_ntfs,
 813,Chrome Sessions Folder,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sessions\*,lazy_ntfs,
 814,Chrome Login Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 814,Chrome Login Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 815,Chrome Media History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Media History*,lazy_ntfs,
 815,Chrome Media History,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Media History*,lazy_ntfs,
 816,Chrome Network Action Predictor,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Action Predictor,lazy_ntfs,
 816,Chrome Network Action Predictor,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Action Predictor,lazy_ntfs,
 817,Chrome Network Persistent State,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Persistent State,lazy_ntfs,
 817,Chrome Network Persistent State,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Persistent State,lazy_ntfs,
 818,Chrome Preferences,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 818,Chrome Preferences,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 819,Chrome Quota Manager,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\QuotaManager,lazy_ntfs,
 819,Chrome Quota Manager,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\QuotaManager,lazy_ntfs,
 820,Chrome Reporting and NEL,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Reporting and NEL,lazy_ntfs,
 820,Chrome Reporting and NEL,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Reporting and NEL,lazy_ntfs,
 821,Chrome Shortcuts,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 821,Chrome Shortcuts,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 822,Chrome Top Sites,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 822,Chrome Top Sites,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 823,Chrome Trust Tokens,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Trust Tokens*,lazy_ntfs,
 823,Chrome Trust Tokens,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Trust Tokens*,lazy_ntfs,
 824,Chrome SyncData Database,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 824,Chrome SyncData Database,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 825,Chrome Visited Links,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 825,Chrome Visited Links,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 826,Chrome Web Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 826,Chrome Web Data,Communications,Users\*\AppData\Local\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 827,Windows Protect Folder,FileSystem,Users\*\AppData\Roaming\Microsoft\Protect\*\**10,lazy_ntfs,Required for offline decryption
 827,Windows Protect Folder,FileSystem,Users\*\AppData\Roaming\Microsoft\Protect\*\**10,lazy_ntfs,Required for offline decryption
 828,Edge folder,Communications,Users\*\AppData\Local\Packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\**10,lazy_ntfs,
 828,Edge folder,Communications,Users\*\AppData\Local\Packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\**10,lazy_ntfs,
 829,Amcache,ApplicationCompatibility,**10\Amcache.hve,lazy_ntfs,
 830,Amcache transaction files,ApplicationCompatibility,**10\Amcache.hve.LOG*,lazy_ntfs,
 831,LNK Files from Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Windows\Recent\**10,lazy_ntfs,
 831,LNK Files from Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Windows\Recent\**10,lazy_ntfs,
 832,LNK Files from Microsoft Office Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Office\Recent\**10,lazy_ntfs,
 832,LNK Files from Microsoft Office Recent,LNKFiles,Users\*\AppData\Roaming\Microsoft\Office\Recent\**10,lazy_ntfs,
 833,Robo-FTP User Scripts,Apps,Program Files\Robo-FTP 3.12\UserData\*\Scripts\*.s,lazy_ntfs,Custom scripts created by each user
 834,Robo-FTP User Debug Logs,Apps,Program Files\Robo-FTP 3.12\UserData\*\Debug\*.log,lazy_ntfs,"Debug logs generated for each user, if enabled"
 835,Robo-FTP User Script/Trace Logs,Apps,Program Files\Robo-FTP 3.12\UserData\*\Logs\*,lazy_ntfs,Script and Trace logs generated for each user
 836,Robo-FTP User XML Config,Apps,Program Files\Robo-FTP 3.12\UserData\*\config.xml,lazy_ntfs,Config.xml unique to each user. Contains list of custom scripts and ftp sites
 837,Robo-FTP User SSH Keys,Apps,Program Files\Robo-FTP 3.12\UserData\*\SSH Keys\*,lazy_ntfs,Saved SSH keys for each user
 838,Robo-FTP User SSL Certificates,Apps,Program Files\Robo-FTP 3.12\UserData\*\SSL Certificates\*,lazy_ntfs,Saved SSL Certificates for each user
 839,Robo-FTP User PGP Keys,Apps,Program Files\Robo-FTP 3.12\UserData\*\PGP Keys\*,lazy_ntfs,Saved PGP Keys for each user
 840,Robo-FTP SSH Keys,Apps,Program Files\Robo-FTP 3.12\ProgramData\SSH Keys\*,lazy_ntfs,Shared SSH keys
 841,Robo-FTP SSL Certificates,Apps,Program Files\Robo-FTP 3.12\ProgramData\SSL Certificates\*,lazy_ntfs,Shared SSL Certificates
 842,Robo-FTP PGP Keys,Apps,Program Files\Robo-FTP 3.12\ProgramData\PGP Keys\*,lazy_ntfs,Shared PGP Keys
 843,Robo-FTP Debug Logs,Apps,Program Files\Robo-FTP 3.12\ProgramData\Debug\*,lazy_ntfs,Debug logs generated by Robo-FTP
 844,Robo-FTP Script/Trace Logs,Apps,Program Files\Robo-FTP 3.12\ProgramData\Logs\*,lazy_ntfs,Script and Trace logs generated by Robo-FTP
 845,Robo-FTP XML Config,Apps,Program Files\Robo-FTP 3.12\ProgramData\config.xml,lazy_ntfs,Config.xml. Contains list of custom scripts and ftp sites
 846,Robo-FTP Jobs,Apps,Program Files\Robo-FTP 3.12\ProgramData\SchedulerService.sqlite,lazy_ntfs,Contains details of scheduled jobs
 847,RogueKiller Reports,Antivirus,ProgramData\RogueKiller\logs\AdliceReport_*.json,lazy_ntfs,
 848,RustDesk logs,Communications,Users\*\AppData\Roaming\RustDesk\*,lazy_ntfs,Collects all log files related to RustDesk
 849,RustDesk logs,Communications,Windows\ServiceProfiles\LocalService\AppData\Roaming\RustDesk\log\server,lazy_ntfs,Collects all log files related to RustDesk
 850,Usenet Clients - SABnzbd Download Logs,FileDownload,Users\*\AppData\Local\sabnzbd\logs\sabnzbd.log,lazy_ntfs,Locates SABnzbd download log
 851,Usenet Clients - SABnzbd History.db,FileDownload,Users\*\AppData\Local\sabnzbd\admin\history1.db,lazy_ntfs,Locates SABnzbd history log
 852,SCCM Client Log Files,Logs,Windows\CCM\Logs,lazy_ntfs,
 853,SDB Files,Executables,Windows\apppatch\Custom\*.sdb,lazy_ntfs,
 854,SDB Files,Executables,Windows.old\Windows\apppatch\Custom\*.sdb,lazy_ntfs,
 855,SDB Files x64,Executables,Windows\apppatch\Custom\Custom64\*.sdb,lazy_ntfs,
 856,SDB Files x64,Executables,Windows.old\Windows\apppatch\Custom\Custom64\*.sdb,lazy_ntfs,
 857,4K Video Downloader,SQLDatabases,Users\*\AppData\Local\4kdownload.com\4K Video Downloader\4K Video Downloader\*.sqlite,lazy_ntfs,Grabs database(s) that stores user download history
 858,Microsoft OneNote - FullTextSearchIndex,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\*\FullTextSearchIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's text content
 859,Microsoft OneNote - RecentNotebooks_SeenURLs,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\Notifications\RecentNotebooks_SeenURLs,lazy_ntfs,Grabs a file that appears to record recently seen OneNote notebooks
 860,Microsoft OneNote - AccessibilityCheckerIndex,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\AccessibilityCheckerIndex,lazy_ntfs,Grabs database(s) comprising of each OneNote notebook's version sync error history
 861,Microsoft OneNote - User NoteTags,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\NoteTags\*LiveId.db,lazy_ntfs,Grabs a database that stores the user specified tags within OneNote to be used application-wide
 862,Microsoft OneNote - RecentSearches,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Office.OneNote_8wekyb3d8bbwe\LocalState\AppData\Local\OneNote\16.0\RecentSearches\RecentSearches.db,lazy_ntfs,Grabs a database that stores the user's recent searches within OneNote
 863,Microsoft Sticky Notes - 1607 and later,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes*\LocalState\plum.sqlite*,lazy_ntfs,
 864,Microsoft To Do - SQLite Database of To Do tasks,SQLDatabases,Users\*\AppData\Local\Packages\Microsoft.Todos_8wekyb3d8bbwe\LocalState\AccountsRoot\*\todosqlite.db*,lazy_ntfs,
 865,Robo-FTP Jobs,Apps,Program Files\Robo-FTP *\ProgramData\SchedulerService.sqlite,lazy_ntfs,
 866,TeraCopy - History Databases,SQLDatabases,Users\*\AppData\Roaming\TeraCopy\History\*.db,lazy_ntfs,
 867,TeraCopy - Main Database,SQLDatabases,Users\*\AppData\Roaming\TeraCopy\main.db,lazy_ntfs,
 868,Notion Local Storage,App,Users\*\AppData\Roaming\Notion\notion.db,lazy_ntfs,
 869,IDrive Backed Up Files,App,ProgramData\IDrive\IBCOMMON\*\LDBNEW\*\*.idbs,lazy_ntfs,
 870,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\filecache.db*,lazy_ntfs,Getting individual files because folder may contain very large extraneous files
 871,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\config.dbx,lazy_ntfs,Getting individual files because folder may contain very large extraneous files
 872,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\home.db,lazy_ntfs,SQlite database which appears to keep track of the user's recent Dropbox activity
 873,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\icon.db,lazy_ntfs,SQLite database which appears to keep track of icons in the user's Drobox sync history which can give an indication as to which files and folders are present
 874,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\sync_history.db,lazy_ntfs,SQLite database which appears to keep track of the user's Drobox sync history
 875,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\sync\nucleus.sqlite3*,lazy_ntfs,SQLite database which appears to contain a table for deleted files
 876,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\host.db,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 877,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\host.dbx,lazy_ntfs,"SQLite database which contains the local path of the user's Dropbox folder encoded in BASE64. Decode each line separately, not together."
 878,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\sync\aggregation.dbx,lazy_ntfs,SQLite database which appears to contain snapshot table of the user's Dropbox contents in JSON with timestamps in UNIX Epoch
 879,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\avatarcache.db,lazy_ntfs,SQLite database which appears to contain the ID's of account(s) on the user's system where Dropbox is installed
 879,Dropbox Metadata,SQLDatabases,Users\*\AppData\Local\Dropbox\*\avatarcache.db,lazy_ntfs,SQLite database which appears to contain the ID's of account(s) on the user's system where Dropbox is installed
 880,Google File Stream Metadata,SQLDatabases,Users\*\AppData\Local\Google\Drive\*\cloud_graph\cloud_graph.db,lazy_ntfs,Windows_GoogleDrive_CloudGraphDB.smap
 881,Google File Stream Metadata,SQLDatabases,Users\*\AppData\Local\Google\Drive\*\TempData\*\change_buffer\**10,lazy_ntfs,DB(s) with seemingly randomized filename(s) that track file system changes within Google Drive
 882,Google File Stream Metadata,SQLDatabases,Users\*\AppData\Local\Google\Drive\*\snapshot.db,lazy_ntfs,Windows_GoogleDrive_SnapshotDB.smap
 883,Google File Stream Metadata,SQLDatabases,Users\*\AppData\Local\Google\Drive\*\sync_config.db,lazy_ntfs,Windows_GoogleDrive_SyncConfigDB.smap
 884,FileZilla SQLite3 Log Files,SQLDatabases,Users\*\AppData\Roaming\FileZilla\*.sqlite3*,lazy_ntfs,
 885,Chrome bookmarks XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 886,Chrome Cookies XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Cookies*,lazy_ntfs,
 887,Chrome Current Session XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 888,Chrome Current Tabs XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 889,Chrome Favicons XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 890,Chrome History XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\History*,lazy_ntfs,
 891,Chrome Last Session XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 892,Chrome Last Tabs XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 893,Chrome Login Data XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 894,Chrome Preferences XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 895,Chrome Shortcuts XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 896,Chrome Top Sites XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 897,Chrome Visited Links XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 898,Chrome Web Data XP,SQLDatabases,Documents and Settings\*\Local Settings\Application Data\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 899,Chrome bookmarks,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Bookmarks*,lazy_ntfs,
 900,Chrome Cookies,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Cookies*,lazy_ntfs,
 901,Chrome Current Session,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Session,lazy_ntfs,
 902,Chrome Current Tabs,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Current Tabs,lazy_ntfs,
 903,Chrome Download Metadata,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Download Metadata,lazy_ntfs,
 904,Chrome Extension Cookies,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Extension Cookies,lazy_ntfs,
 905,Chrome Favicons,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Favicons*,lazy_ntfs,
 906,Chrome History,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\History*,lazy_ntfs,
 907,Chrome Last Session,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Session,lazy_ntfs,
 908,Chrome Last Tabs,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Last Tabs,lazy_ntfs,
 909,Chrome Login Data,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Login Data,lazy_ntfs,
 910,Chrome Media History,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Media History*,lazy_ntfs,
 911,Chrome Network Action Predictor,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Action Predictor,lazy_ntfs,
 912,Chrome Network Persistent State,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Network Persistent State,lazy_ntfs,
 913,Chrome Preferences,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Preferences,lazy_ntfs,
 914,Chrome Quota Manager,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\QuotaManager,lazy_ntfs,
 915,Chrome Reporting and NEL,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Reporting and NEL,lazy_ntfs,
 916,Chrome Shortcuts,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Shortcuts*,lazy_ntfs,
 917,Chrome Top Sites,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Top Sites*,lazy_ntfs,
 918,Chrome Trust Tokens,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Trust Tokens*,lazy_ntfs,
 919,Chrome SyncData Database,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 920,Chrome Visited Links,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Visited Links,lazy_ntfs,
 921,Chrome Web Data,SQLDatabases,Users\*\AppData\Local\Google\Chrome\User Data\*\Web Data*,lazy_ntfs,
 922,Edge bookmarks,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Bookmarks*,lazy_ntfs,
 922,Edge Bookmarks,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Bookmarks*,lazy_ntfs,
 923,Edge Collections,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Collections\collectionsSQLite,lazy_ntfs,
 924,Edge Cookies,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Cookies*,lazy_ntfs,
 925,Edge Current Session,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Current Session,lazy_ntfs,
 926,Edge Current Tabs,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Current Tabs,lazy_ntfs,
 927,Edge Favicons,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Favicons*,lazy_ntfs,
 928,Edge History,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\History*,lazy_ntfs,
 929,Edge Last Session,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Last Session,lazy_ntfs,
 930,Edge Last Tabs,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Last Tabs,lazy_ntfs,
 931,Edge Login Data,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Login Data,lazy_ntfs,
 932,Edge Media History,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Media History*,lazy_ntfs,
 933,Edge Network Action Predictor,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Network Action Predictor,lazy_ntfs,
 934,Edge Preferences,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Preferences,lazy_ntfs,
 935,Edge Shortcuts,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Shortcuts*,lazy_ntfs,
 936,Edge Top Sites,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Top Sites*,lazy_ntfs,
 937,Edge SyncData Database,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Sync Data\SyncData.sqlite3,lazy_ntfs,
 938,Edge Visited Links,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Visited Links,lazy_ntfs,
 939,Edge Web Data,SQLDatabases,Users\*\AppData\Local\Microsoft\Edge\User Data\*\Web Data*,lazy_ntfs,
 940,Addons,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\addons.sqlite*,lazy_ntfs,
 941,Bookmarks,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\weave\bookmarks.sqlite*,lazy_ntfs,
 942,Cookies,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\cookies.sqlite*,lazy_ntfs,
 943,Cookies,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\firefox_cookies.sqlite*,lazy_ntfs,
 944,Downloads,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\downloads.sqlite*,lazy_ntfs,
 945,Favicons,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\favicons.sqlite*,lazy_ntfs,
 946,Form history,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\formhistory.sqlite*,lazy_ntfs,
 947,Permissions,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\permissions.sqlite*,lazy_ntfs,
 948,Places,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\places.sqlite*,lazy_ntfs,
 949,Protections,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\protections.sqlite*,lazy_ntfs,
 950,Search,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\search.sqlite*,lazy_ntfs,
 951,Signons,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\signons.sqlite*,lazy_ntfs,
 952,Storage Sync,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\storage-sync.sqlite*,lazy_ntfs,
 953,Webappstore,SQLDatabases,Users\*\AppData\Roaming\Mozilla\Firefox\Profiles\*\webappstore.sqlite*,lazy_ntfs,
 954,Windows 10 Notification DB,SQLDatabases,Users\*\AppData\Local\Microsoft\Windows\Notifications\wpndatabase.db,lazy_ntfs,
 955,Windows 10 Notification DB,SQLDatabases,Users\*\AppData\Local\Microsoft\Windows\Notifications\appdb.dat,lazy_ntfs,
 956,ActivitiesCache.db,SQLDatabases,Users\*\AppData\Local\ConnectedDevicesPlatform\*\ActivitiesCache.db*,lazy_ntfs,
 957,Update Store.db,OS Upgrade,ProgramData\USOPrivate\UpdateStore\store.db,lazy_ntfs,
 958,Bitdefender SQLite DB Files,Antivirus,"Program Files*\Bitdefender*\**10\*.{db,db-wal,db-shm}",lazy_ntfs,Bitdefender SQLite databases
 959,EventTranscript.db,SystemEvents,ProgramData\Microsoft\Diagnosis\EventTranscript\EventTranscript.db*,lazy_ntfs,
 960,EventTranscript.db,SystemEvents,Windows.old\ProgramData\Microsoft\Diagnosis\EventTranscript\EventTranscript.db*,lazy_ntfs,
 961,SRUM,Execution,Windows\System32\SRU\**10,lazy_ntfs,
 962,SRUM,Execution,Windows.old\Windows\System32\SRU\**10,lazy_ntfs,
 963,SOFTWARE registry hive,Registry,Windows\System32\config\SOFTWARE,lazy_ntfs,
 964,SOFTWARE registry hive,Registry,Windows.old\Windows\System32\config\SOFTWARE,lazy_ntfs,
 965,SOFTWARE registry transaction files,Registry,Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 966,SOFTWARE registry transaction files,Registry,Windows.old\Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 967,SUM Database (.mdb files),Logs,Windows\System32\LogFiles\SUM\*.mdb,lazy_ntfs,"Grabs Current.mdb, SystemIdentity.mdb, and [GUID].mdb"
 968,SUPERAntiSpyware Logs,Antivirus,Users\*\AppData\Roaming\SUPERAntiSpyware\Logs\**10,lazy_ntfs,
 969,SUSE Linux Enterprise Server WSL /etc/os-release,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\os-release,lazy_ntfs,
 970,SUSE Linux Enterprise Server WSL /etc/fstab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\fstab,lazy_ntfs,
 971,SUSE Linux Enterprise Server WSL /etc/passwd,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\passwd,lazy_ntfs,
 972,SUSE Linux Enterprise Server WSL /etc/group,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\group,lazy_ntfs,
 973,SUSE Linux Enterprise Server WSL /etc/shadow,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\shadow,lazy_ntfs,
 974,SUSE Linux Enterprise Server WSL /etc/timezone,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\timezone,lazy_ntfs,
 975,SUSE Linux Enterprise Server WSL /etc/hostname,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\hostname,lazy_ntfs,
 976,SUSE Linux Enterprise Server WSL /etc/hosts,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\hosts,lazy_ntfs,
 977,SUSE Linux Enterprise Server WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\bash.bashrc,lazy_ntfs,
 978,SUSE Linux Enterprise Server WSL /etc/profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\etc\profile,lazy_ntfs,
 979,SUSE Linux Enterprise Server WSL .bash_history,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\**10\.bash_history,lazy_ntfs,
 980,SUSE Linux Enterprise Server WSL .bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\**10\.bashrc,lazy_ntfs,
 981,SUSE Linux Enterprise Server WSL .profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\rootfs\**10\.profile,lazy_ntfs,
 982,SUSE Linux Enterprise Server WSL ext4.vhdx,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.SUSELinuxEnterpriseServer*\LocalState\ext4.vhdx,lazy_ntfs,
 983,at .job,Persistence,Windows\Tasks\*.job,lazy_ntfs,
 984,at .job,Persistence,Windows.old\Windows\Tasks\*.job,lazy_ntfs,
 985,at SchedLgU.txt,Persistence,Windows\SchedLgU.txt,lazy_ntfs,
 986,at SchedLgU.txt,Persistence,Windows.old\Windows\SchedLgU.txt,lazy_ntfs,
 987,XML,Persistence,Windows\System32\Tasks\**10,lazy_ntfs,
 988,XML,Persistence,Windows\syswow64\Tasks\**10,lazy_ntfs,
 989,XML,Persistence,Windows.old\Windows\System32\Tasks\**10,lazy_ntfs,
 990,ScreenConnect Session Database,ApplicationLogs,Program Files*\ScreenConnect\App_Data\Session.db,lazy_ntfs,SQLite database with session information
 991,ScreenConnect Session Database,ApplicationLogs,Program Files*\ScreenConnect\App_Data\User.xml,lazy_ntfs,Contains each user's last authenticated time
 992,ScreenConnect User Config,ApplicationLogs,ProgramData\ScreenConnect Client*\user.config,lazy_ntfs,Contains server domain and IP info
 993,SecureAge Antvirus Logs,Antivirus,ProgramData\SecureAge Technology\SecureAge\log\**10,lazy_ntfs,
 994,SentinelOne EDR Log,Antivirus,programdata\sentinel\logs\**10,lazy_ntfs,Logs are in Binary Format (.binlog)
 995,Session App Folder,Apps,Users\*\AppData\Roaming\Session\**10,lazy_ntfs,Session App Folder
 996,ShareX,Apps,Users\*\Documents\ShareX\**10,lazy_ntfs,Locates and captures all files within the default ShareX folder path
 997,Shareaza Logs,FileDownload,Users\*\AppData\Roaming\Shareaza\**10,lazy_ntfs,Locates Shareaza logs and copies them.
 998,Siemens TIA Settings,ICS,Users\*\AppData\Roaming\Siemens\Automation\Portal*\Settings\**10,lazy_ntfs,
 999,Signal Attachments cache,Communications,Users\*\AppData\Roaming\Signal\attachments.noindex\**10,lazy_ntfs,Profile pictures (and possibly attachments) for users who this individual has as contacts or has communicated with
 1000,Signal Logs,Communications,Users\*\AppData\Roaming\Signal\logs\**10,lazy_ntfs,"Logs for Signal. Most recent has the extension .log while old ones will have extension .log.0, .log.1 etc."
 1001,Signal config.json,Communications,Users\*\AppData\Roaming\Signal\config.json,lazy_ntfs,config.json holds the db.sqlite SQLCipher raw key
 1002,Signal Database,Communications,Users\*\AppData\Roaming\Signal\sql\db.sqlite,lazy_ntfs,"Stores attachment details, conversations, messages, and more"
 1003,SignatureCatalog,FileMetadata,Windows\System32\CatRoot\**10,lazy_ntfs,
 1004,SignatureCatalog,FileMetadata,Windows.old\Windows\System32\CatRoot\**10,lazy_ntfs,
 1005,main.db (App &amp;lt;v12),Communications,Users\*\AppData\Local\Packages\Microsoft.SkypeApp_*\LocalState\*\main.db,lazy_ntfs,
 1006,skype.db (App +v12),Communications,Users\*\AppData\Local\Packages\Microsoft.SkypeApp_*\LocalState\*\skype.db,lazy_ntfs,
 1007,main.db XP,Communications,Documents and Settings\*\Application Data\Skype\*\main.db,lazy_ntfs,
 1008,main.db Win7+,Communications,Users\*\AppData\Roaming\Skype\*\main.db,lazy_ntfs,
 1009,s4l-[username].db (App +v8),Communications,Users\*\AppData\Local\Packages\Microsoft.SkypeApp_*\LocalState\s4l-*.db,lazy_ntfs,
 1010,leveldb (Skype for Desktop +v8),Communications,Users\*\AppData\Roaming\Microsoft\Skype for Desktop\IndexedDB\*.leveldb\**10,lazy_ntfs,
 1011,Skype for Destkop v8+ Chromium Cache,Communications,Users\*\AppData\Roaming\Microsoft\Skype for Desktop\Cache\**10,lazy_ntfs,Can be viewed with Nirsoft's ChromeCacheView
 1012,Slack - Chat Logs,Apps,Users\*\AppData\Roaming\Slack\IndexedDB\**10,lazy_ntfs,Locates Slack logs and copies them
 1013,Slack LevelDB Files,Apps,Users\*\AppData\Roaming\Slack\Local Storage\leveldb\**10,lazy_ntfs,
 1014,Slack Electron Logs,Apps,Users\*\AppData\Roaming\Slack\logs\**10,lazy_ntfs,Current Slack application is based on Electron and additional logging can be found here.
 1015,Slack Cache,Apps,Users\*\AppData\Roaming\Slack\Cache\**10,lazy_ntfs,Collects Slack cache files. This folder can be parsed like a Chrome Browser cache using a tool like Nirsoft ChromeCacheView
 1016,Slack Storage,Apps,Users\*\AppData\Roaming\Slack\storage\**10,lazy_ntfs,User activity logs can be present including slack-downloads log
 1017,Snagit - Captures,Apps,Users\*\AppData\Local\TechSmith\Snagit\DataStore,lazy_ntfs,Locates all Snagit captures
 1018,Snip &amp;amp; Sketch,FileKnowledge,Users\*\AppData\Local\Packages\Microsoft.ScreenSketch_8wekyb3d8bbwe\TempState\*.png,lazy_ntfs,Pulls all temporary .png images generated by the Snip &amp;amp; Sketch screen capture tool built into Windows
 1019,Sophos Logs (XP),Antivirus,Documents and Settings\All Users\Application Data\Sophos\Sophos *\Logs\**10,lazy_ntfs,"Includes Anti-Virus, Client Firewall, Data Control, Device Control, Endpoint Defense, Network Threat Detection, Management Communications System, Patch Control, Tamper Protection"
 1020,Sophos Logs,Antivirus,ProgramData\Sophos\*\Logs\**10,lazy_ntfs,"Includes Anti-Virus, Client Firewall, Data Control, Device Control, Endpoint Defense, Network Threat Detection, Management Communications System, Patch Control, Tamper Protection"
 1021,Sophos Logs,Antivirus,ProgramData\Sophos\Logs\**10,lazy_ntfs,Contains SophosUnifiedSupport.log
 1022,Soulseek Chat Logs,FileDownload,Users\*\AppData\Local\SoulseekQt\Soulseek Chat Logs\**10,lazy_ntfs,Locates Soulseek chat logs and copies them. Chat logs are in plaintext. Current as of version 2019.7.22.
 1023,Soulseek Search History/Shared Folders/Settings,FileDownload,Users\*\AppData\Local\SoulseekQt\1\*.dat,lazy_ntfs,"Locates .dat file(s) containing: search history, active searches (search_record), current shared folders (shared_file_folder), and wish list items (wish_list_item)."
 1024,SpeedCommander - .ini File,Apps,Users\*\AppData\Roaming\SpeedProject\SpeedCommander 19\*,lazy_ntfs,Locates folder where all configuration files reside
 1025,Splashtop Log Files,Software,Program Files*\Splashtop\Splashtop Remote\Server\log\**10,lazy_ntfs,Collects logs for Splashtop
 1026,Splashtop Log Files in ProgramData,Software,ProgramData\Splashtop\Temp\log\**10,lazy_ntfs,Collects logs for Splashtop
 1027,User startup folders,Persistence,Users\*\AppData\Roaming\Microsoft\Windows\Start Menu\Programs,lazy_ntfs,
 1028,System-wide startup folder,Persistence,ProgramData\Microsoft\Windows\Start Menu\Programs,lazy_ntfs,
 1029,StartupInfo XML Files,Persistence,Windows\System32\WDI\LogFiles\StartupInfo\*.xml,lazy_ntfs,
 1030,StartupInfo XML Files,Persistence,Windows.old\Windows\System32\WDI\LogFiles\StartupInfo\*.xml,lazy_ntfs,
 1031,Steam Game Image files,Apps,Program Files\Steam\appcache\librarycache\**10,lazy_ntfs,Locates the directory containing image resources of installed/uninstalled games.
 1032,Steam Login Metadata file,Apps,Program Files\Steam\config\**10\loginusers.vdf,lazy_ntfs,Locates file containing Steam username and persona name.
 1033,Steam Friend List and Username History file,Apps,Program Files\Steam\userdata\*\config\**10\localconfig.vdf,lazy_ntfs,Locates file containing Steam Friend List and Username History.
 1034,Steam User Avatar files,Apps,Program Files\Steam\config\avatarcache\**10,lazy_ntfs,Locates the directory containing avatar cache.
 1035,Steam Game Tray Icon files,Apps,Program Files\Steam\steam\games\**10,lazy_ntfs,Locates the directory containing game icons appearing from tray menu.
 1036,Steam Startup Times Log file,Apps,Program Files\Steam\logs\**10\bootstrap_log.txt,lazy_ntfs,Locates the directory containing log for Steam startup times.
 1037,Steam Game Image files,Apps,Program Files (x86)\Steam\appcache\librarycache\**10,lazy_ntfs,Locates the directory containing image resources of installed/uninstalled games.
 1038,Steam Login Metadata file,Apps,Program Files (x86)\Steam\config\**10\loginusers.vdf,lazy_ntfs,Locates file containing Steam username and persona name.
 1039,Steam Friend List and Username History file,Apps,Program Files (x86)\Steam\userdata\*\config\**10\localconfig.vdf,lazy_ntfs,Locates file containing Steam Friend List and Username History.
 1040,Steam User Avatar files,Apps,Program Files (x86)\Steam\config\avatarcache\**10,lazy_ntfs,Locates the directory containing avatar cache.
 1041,Steam Game Tray Icon files,Apps,Program Files (x86)\Steam\steam\games\**10,lazy_ntfs,Locates the directory containing game icons appearing from tray menu.
 1042,Steam Startup Times Log file,Apps,Program Files (x86)\Steam\logs\**10\bootstrap_log.txt,lazy_ntfs,Locates the directory containing log for Steam startup times.
 1043,SublimeText 2/3 Auto Save Session,Text Editor,Users\*\AppData\Roaming\Sublime Text*\Settings\Session.sublime_session,lazy_ntfs,Sublime Text 2/3 stores unsaved (temporary) files and its content in its Session.sublime_session file
 1044,SublimeText 4 Auto Save Session,Text Editor,Users\*\AppData\Roaming\Sublime Text*\Local\*.sublime_session,lazy_ntfs,Sublime Text 4 stores unsaved (temporary) files and its content in its .sublime_session files
 1045,SugarSync Log File,Apps,Users\*\AppData\Local\SugarSync\sc1.log,lazy_ntfs,Locates a log file the gives a play-by-play of what the user synced when.
 1046,SugarSync - Shared Folders (Default Location),Apps,Users\*\Documents\SugarSync Shared Folders\**10,lazy_ntfs,
 1047,SugarSync - My SugarSync (Default Location),Apps,Users\*\Documents\My SugarSync\**10,lazy_ntfs,
 1048,SumatraPDF Settings - SessionData,FileKnowledge,Users\*\AppData\Local\SumatraPDF\SumatraPDF-settings.txt,lazy_ntfs,Settings file which contains information about previous user session
 1049,SumatraPDF Cache,FileKnowledge,Users\*\AppData\Local\SumatraPDF\sumatrapdfcache,lazy_ntfs,Folder contains a PNG snapshot of each PDF file the user had open at the time of last application close
 1050,Supremo Connection Logs,Communications,ProgramData\SupremoRemoteDesktop\Log\*.log,lazy_ntfs,Includes Supremo.00.Client.log and Supremo.00.Incoming.log
 1051,Supremo File Transfer Inbox,Communications,ProgramData\SupremoRemoteDesktop\Inbox,lazy_ntfs,Includes files transferred to the inbox folder during a remote session. See Supremo.00.FileTransfer.log
 1052,Symantec Endpoint Protection Logs (XP),Antivirus,Documents and Settings\All Users\Application Data\Symantec\Symantec Endpoint Protection\Logs\AV\**10,lazy_ntfs,
 1053,Symantec Endpoint Protection Logs,Antivirus,ProgramData\Symantec\Symantec Endpoint Protection\*\Data\Logs\**10,lazy_ntfs,
 1054,Symantec Endpoint Protection User Logs,Antivirus,Users\*\AppData\Local\Symantec\Symantec Endpoint Protection\Logs\**10,lazy_ntfs,
 1055,Symantec Event Log Win7+,EventLogs,Windows\System32\winevt\logs\Symantec Endpoint Protection Client.evtx,lazy_ntfs,Symantec specific Windows event log
 1056,Symantec Event Log Win7+,EventLogs,Windows.old\Windows\System32\winevt\logs\Symantec Endpoint Protection Client.evtx,lazy_ntfs,Symantec specific Windows event log
 1057,Symantec Endpoint Protection Quarantine (XP),Antivirus,Documents and Settings\All Users\Application Data\Symantec\Symantec Endpoint Protection\Quarantine\**10,lazy_ntfs,
 1058,Symantec Endpoint Protection Quarantine,Antivirus,ProgramData\Symantec\Symantec Endpoint Protection\*\Data\Quarantine\**10,lazy_ntfs,
 1059,ccSubSDK Database,Antivirus,ProgramData\Symantec\Symantec Endpoint Protection\*\Data\CmnClnt\ccSubSDK\**10,lazy_ntfs,
 1060,registrationInfo.xml,Antivirus,ProgramData\Symantec\Symantec Endpoint Protection\*\Data\registrationInfo.xml,lazy_ntfs,
 1061,Syscache,Program Execution,System Volume Information\Syscache.hve,lazy_ntfs,
 1062,Syscache transaction files,Program Execution,System Volume Information\Syscache.hve.LOG*,lazy_ntfs,
 1063,Tablacus Explorer - remember.xml,Logs,Users\*\AppData\Local\Temp\*\config\**10\remember.xml,lazy_ntfs,
 1064,Tablacus Explorer - window.xml,Logs,Users\*\AppData\Local\Temp\*\config\**10\window.xml,lazy_ntfs,
 1065,Tablacus Explorer - window1.xml,Logs,Users\*\AppData\Local\Temp\*\config\**10\window1.xml,lazy_ntfs,
 1066,TeamViewer Connection Logs,Communications,Program Files*\TeamViewer\connections*.txt,lazy_ntfs,Includes connections_incoming.txt and connections.txt
 1067,TeamViewer Application Logs,ApplicationLogs,Program Files*\TeamViewer\TeamViewer*_Logfile*,lazy_ntfs,Includes TeamViewer&amp;lt;version&amp;gt;_Logfile.log and TeamViewer&amp;lt;version&amp;gt;_Logfile_OLD.log
 1068,TeamViewer Application User Logs,ApplicationLogs,Users\*\AppData\Roaming\TeamViewer\TeamViewer*_Logfile*,lazy_ntfs,Alternate location for TeamViewer&amp;lt;version&amp;gt;_Logfile.log
 1069,TeamViewer Configuration Files,ApplicationLogs,Users\*\AppData\Roaming\TeamViewer\MRU\RemoteSupport\**10,lazy_ntfs,Includes miscellaneous config files
 1070,Telegram app folder,Apps,Users\*\AppData\Roaming\Telegram Desktop\**10,lazy_ntfs,Telegram app folder structure
 1071,Telegram downloaded files,Apps,Users\*\Downloads\Telegram Desktop\**10,lazy_ntfs,Chat Attachments
 1072,TeraCopy,TeraCopy,Users\*\AppData\Roaming\TeraCopy\**10,lazy_ntfs,
 1073,Thumbcache DB,FileKnowledge,Users\*\AppData\Local\Microsoft\Windows\Explorer\thumbcache_*.db,lazy_ntfs,
 1074,Mozilla Thunderbird Install Date,Apps,Users\*\AppData\Roaming\Thunderbird\Crash Reports\InstallTime*,lazy_ntfs,Holds install time in Unix Seconds timestamp
 1075,Mozilla Thunderbird Profiles.ini,Apps,Users\*\AppData\Roaming\Thunderbird\profiles.ini,lazy_ntfs,Profiles list - can hold references to other profiles held elsewhere on the device
 1076,Mozilla Thunderbird prefs.js,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\prefs.js,lazy_ntfs,User Preferences for that profile
 1077,Mozilla Thunderbird Global Messages Database,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\global-messages-db.sqlite,lazy_ntfs,"Holds list of contacts, emails, and other potentially useful artifacts"
 1078,Mozilla Thunderbird logins.json,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\logins.json,lazy_ntfs,"Holds last time online login used, last time password changed, hostname, HTTP(s) URL and more"
 1079,Mozilla Thunderbird places.sqlite,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\places.sqlite,lazy_ntfs,"Holds history for Thunderbird - as it contains portions of Firefox embedded, it can be used to visit websites too"
 1080,Mozilla Thunderbird ImapMail INBOX,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\ImapMail\**10\INBOX,lazy_ntfs,"Holds all email files with headers, content etc"
 1081,Mozilla Thunderbird Mail INBOX,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\Mail\**10\INBOX,lazy_ntfs,"Holds all email files with headers, content etc"
 1082,Mozilla Thunderbird Calendar Data,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\calendar-data\local.sqlite,lazy_ntfs,Holds local calendar data
 1083,Mozilla Thunderbird Attachments,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\Attachments\*,lazy_ntfs,Holds attachments
 1084,Mozilla Thunderbird Address Book,Apps,Users\*\AppData\Roaming\Thunderbird\Profiles\*\abook.sqlite,lazy_ntfs,Holds local address book
 1085,Torrents,FileDownload,**10\*.torrent,lazy_ntfs,
 1086,TotalAV Logs,Antivirus,Program Files*\TotalAV\logs\**10,lazy_ntfs,
 1087,TotalAV Logs,Antivirus,ProgramData\TotalAV\logs\**10,lazy_ntfs,
 1088,Total Commander - .ini File,Apps,Users\*\AppData\Roaming\GHISLER\wincmd.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful user activity information.
 1089,Total Commander - Log File,Apps,**10\totalcmd.log,lazy_ntfs,Locates log file associated with Total Commander. NOTE: this log file is NOT enabled by default and the filename can be modified.
 1090,Total Commander - Temp Files Created During Folder Traversal,Apps,Users\*\AppData\Local\Temp\FTP*.tmp,lazy_ntfs,Locates .tmp files which are created during the user's folder traversal and provide insight into contents of each folder traversed.
 1091,Total Commander - FTP .ini File,Apps,Users\*\AppData\Roaming\GHISLER\wcx_ftp.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful FTP information.
 1092,Total Commander - File Tree,Apps,Users\*\AppData\Local\GHISLER\treeinfo*.wc,lazy_ntfs,Locates a file that contains an exhaustive file tree of a user's file system.
 1093,Total Commander - Frequent Directory Listing,Apps,Users\*\AppData\Local\GHISLER\tcDirFrq.txt,lazy_ntfs,Locates a file that contains a frequently accessed folder listing.
 1094,Total Commander - FTP Logs,Apps,Users\*\AppData\Local\Temp\tcftp.log,lazy_ntfs,Locates a file that contains the Total Commander FTP logs.
 1095,TreeSize - ScanHistory.XML,Apps,Users\*\AppData\Roaming\JAM Software\TreeSize\scanhistory.xml,lazy_ntfs,Locates XML file that provides a list of previously scanned directories by the user.
 1096,Trend Micro Logs,Antivirus,ProgramData\Trend Micro\**10,lazy_ntfs,
 1097,Trend Micro Security Agent Report Logs,Antivirus,Program Files*\Trend Micro\Security Agent\Report\*.log,lazy_ntfs,
 1098,Trend Micro Security Agent Connection Logs,Antivirus,Program Files*\Trend Micro\Security Agent\ConnLog\*.log,lazy_ntfs,
 1099,Unified endpoint management and security solutions from ManageEngine,RMM Tool,Program Files (x86)\ManageEngine\UEMS_Agent\logs\**10\*.log,lazy_ntfs,Collects all logs for UEMS
 1100,Unified endpoint management and security solutions from ManageEngine,RMM Tool,Users\*\AppData\Local\VirtualStore\Program Files (x86)\ManageEngine\UEMS_Agent\logs\**10\*.log,lazy_ntfs,Collects User logs for UEMS
 1101,Setupapi.log XP,USBDevices,Windows\setupapi.log,lazy_ntfs,
 1102,Setupapi.log Win7+,USBDevices,Windows\inf\setupapi.*.log,lazy_ntfs,
 1103,Setupapi.log Win7+,USBDevices,Windows.old\Windows\inf\setupapi.*.log,lazy_ntfs,
 1104,Ubuntu WSL /etc/os-release,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\os-release,lazy_ntfs,
 1105,Ubuntu WSL /etc/fstab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\fstab,lazy_ntfs,
 1106,Ubuntu WSL /etc/passwd,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\passwd,lazy_ntfs,
 1107,Ubuntu WSL /etc/group,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\group,lazy_ntfs,
 1108,Ubuntu WSL /etc/shadow,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\shadow,lazy_ntfs,
 1109,Ubuntu WSL /etc/timezone,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\timezone,lazy_ntfs,
 1110,Ubuntu WSL /etc/hostname,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\hostname,lazy_ntfs,
 1111,Ubuntu WSL /etc/hosts,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\hosts,lazy_ntfs,
 1112,Ubuntu WSL /etc/crontab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\crontab,lazy_ntfs,
 1113,Ubuntu WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\bash.bashrc,lazy_ntfs,
 1114,Ubuntu WSL /etc/profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\etc\profile,lazy_ntfs,
 1115,Ubuntu WSL .bash_history,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\**10\.bash_history,lazy_ntfs,
 1116,Ubuntu WSL .bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\**10\.bashrc,lazy_ntfs,
 1117,Ubuntu WSL .profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\**10\.profile,lazy_ntfs,
 1118,Ubuntu WSL User Crontabs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\var\spool\cron\crontabs\**10,lazy_ntfs,
 1119,Ubuntu WSL Apt Logs,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\rootfs\var\log\apt\**10\*.log,lazy_ntfs,
 1120,Ubuntu WSL ext4.vhdx,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu*\LocalState\ext4.vhdx,lazy_ntfs,
 1121,UltraViewer User Logs,Remote Access,Users\*\AppData\Roaming\UltraViewer\**10,lazy_ntfs,"Includes all files related to UltraViewer chat, connections, and recordings"
 1122,UltraViewer System Logs,Remote Access,Windows\SysWOW64\config\systemprofile\AppData\Roaming\UltraViewer\**10,lazy_ntfs,"Includes all files related to UltraViewer chat, connections, and recordings"
 1123,UltraViewer Service Log,Remote Access,Program Files*\UltraViewer\UltraViewerService_log.txt,lazy_ntfs,UltraViewer Service log file
 1124,UltraViewer Connection Log,Remote Access,Program Files*\UltraViewer\ConnectionLog.Log,lazy_ntfs,UltraViewer Service level connection log
 1125,Usenet (NZB) Files,FileDownload,**10\*.nzb,lazy_ntfs,
 1126,Users,Application,Users\*\**10,lazy_ntfs,
 1127,VIPRE Business Agent Logs,Antivirus,ProgramData\VIPRE Business Agent\Logs\**10,lazy_ntfs,
 1128,VIPRE Business User Logs (v7+),Antivirus,Users\*\AppData\Roaming\VIPRE Business\**10,lazy_ntfs,
 1129,VIPRE Business User Logs (v5-v6),Antivirus,Users\*\AppData\Roaming\GFI Software\AntiMalware\Logs\**10,lazy_ntfs,
 1130,VIPRE Business User Logs (up to v4),Antivirus,Users\*\AppData\Roaming\Sunbelt Software\AntiMalware\Logs\**10,lazy_ntfs,
 1131,VLC Recently Opened Files,Apps,Users\*\AppData\Roaming\vlc\vlc-qt-interface.ini,lazy_ntfs,Configuration file for VLC. Holds [RecentsMRL] key which lists recently opened files as well as sometimes retaining timestamps for file opening
 1132,VLC Recorded Files,Apps,Users\*\Videos\vlc-*.avi,lazy_ntfs,"Recorded files in VLC. Sometimes the Record button may be pressed instead of Play by suspects, which can record them watching content with VLC"
 1133,VMware - Virtual Machine Inventory,Apps,Users\*\AppData\Roaming\VMware,lazy_ntfs,Locates an inventory of all Virtual Machines on disk.
 1134,VMware (Fusion/Workstation/Server/Player),Memory,**10\*.vmem,lazy_ntfs,Captures all raw memory from VMware virtual machines.
 1135,VMware (Fusion/Workstation/Server/Player),Memory,**10\*.vmss,lazy_ntfs,Captures all memory images from VMware virtual machines.
 1136,VMware (Fusion/Workstation/Server/Player),Memory,**10\*.vmsn,lazy_ntfs,Captures all memory images from VMware virtual machines.
 1137,RealVNC Log,ApplicationLogs,Users\*\AppData\Local\RealVNC\vncserver.log,lazy_ntfs,https://www.realvnc.com/en/connect/docs/logging.html#logging
 1138,RealVNC Log,ApplicationLogs,ProgramData\RealVNC-Service\vncserver.log,lazy_ntfs,https://help.realvnc.com/hc/en-us/articles/360002254238-All-About-Logging-
 1139,TightVNC Application Logs,ApplicationLogs,ProgramData\TightVNC\Server\Logs,lazy_ntfs,https://ro.ecu.edu.au/cgi/viewcontent.cgi?article=1160&amp;amp;context=adf
 1140,Viber Config Database,Apps,Users\*\AppData\Roaming\ViberPC\config.db,lazy_ntfs,Configuration file for Viber
 1141,Viber Users Data Database,Apps,Users\*\AppData\Roaming\ViberPC\*\viber.db,lazy_ntfs,"Viber data for that user, containing Calls, Chat Messages, Contacts and more"
 1142,Viber Users Avatars Cache,Apps,Users\*\AppData\Roaming\ViberPC\*\Avatars,lazy_ntfs,Cache of the Avatars for other Viber users
 1143,Viber Users Backgrounds Cache,Apps,Users\*\AppData\Roaming\ViberPC\*\Backgrounds,lazy_ntfs,Store of the backgrounds
 1144,Viber Users Thumbnails Cache,Apps,Users\*\AppData\Roaming\ViberPC\*\Thumbnails,lazy_ntfs,Cache of the thumbnails for uploaded/downloaded images
 1145,VirtualBox VM configs,Apps,**10\*.vbox,lazy_ntfs,Locates all .vbox VM configuration files on disk
 1146,VirtualBox VM backup configs,Apps,**10\*.vbox-prev,lazy_ntfs,Locates all backup .vbox VM configuration files on disk
 1147,VirtualBox Logs,Apps,**10\VBox.log,lazy_ntfs,Locates all VBox.log files on disk
 1148,VirtualBox Backup Logs,Apps,**10\VBox.log.*,lazy_ntfs,Locates all backup VBox.log files on disk - these can show historic VM usage
 1149,VirtualBox Hardening Logs,Apps,**10\VBoxHardening.log,lazy_ntfs,Locates all VBoxHardening.log files on disk
 1150,VirtualBox,Memory,**10\*.sav,lazy_ntfs,Captures all partial memory images from VirtualBox.
 1151,VHD,Disk Images,**10\*.VHD,lazy_ntfs,
 1152,VHDX,Disk Images,**10\*.VHDX,lazy_ntfs,
 1153,VDI,Disk Images,**10\*.VDI,lazy_ntfs,
 1154,VMDK,Disk Images,**10\*.VMDK,lazy_ntfs,
 1155,VSCode Opened Files,Apps,Users\*\AppData\Roaming\Code\User\History\*\**10,lazy_ntfs,Grabs the files in the VSCode history. These are files the user has opened with VSCode
 1156,VSCode Workspaces,Apps,Users\*\AppData\Roaming\Code\User\globalStorage\storage.json*,lazy_ntfs,Grabs the file containing information about the users workspaces
 1157,VSCode User extensions,Apps,Users\*\AppData\Roaming\Code\CachedExtensions\user*,lazy_ntfs,Grabs the files relating to the users installed extensions
 1158,VSCode User settings,Apps,Users\*\AppData\Roaming\Code\User\settings.json*,lazy_ntfs,Grabs the file containing the settings the user has set.
 1159,VSCode User Preferences,Apps,Users\*\AppData\Roaming\Code\preferences*,lazy_ntfs,Grabs the file containing the preferences the user has set.
 1160,VSCode Network Cookies,Apps,Users\*\AppData\Roaming\Code\Network\Cookies*,lazy_ntfs,Grabs the cookie files. Same format as Chromium Cookies
 1161,VSCode Network Persistent State,Apps,Users\*\AppData\Roaming\Code\Network\Network Persistent State*,lazy_ntfs,Grabs the Network Persistent State file. Same format as in Chromium
 1162,VSCode Logs,Apps,Users\*\AppData\Roaming\Code\logs\**10,lazy_ntfs,"Grabs the VSCode logs. Further analysis is needed to determine which logs are junk, and which can be vital."
 1163,Vivaldi Cookies,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\**10\Cookies*,lazy_ntfs,
 1164,Vivaldi Network Persistent State,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\**10\Network Persistent State,lazy_ntfs,
 1165,Vivaldi Favicons,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Favicons*,lazy_ntfs,
 1166,Vivaldi History,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\History*,lazy_ntfs,
 1167,Vivaldi Sessions Folder,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Sessions\*,lazy_ntfs,
 1168,Vivaldi Login Data,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Login Data,lazy_ntfs,
 1169,Vivaldi Network Action Predictor,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Network Action Predictor,lazy_ntfs,
 1170,Vivaldi Preferences,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Preferences,lazy_ntfs,
 1171,Vivaldi Top Sites,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Top Sites*,lazy_ntfs,
 1172,Vivaldi Bookmarks,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Bookmarks*,lazy_ntfs,
 1173,Vivaldi Visited Links,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Visited Links,lazy_ntfs,
 1174,Vivaldi Web Data,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Web Data*,lazy_ntfs,
 1175,Vivaldi User Tracking,Communications,Users\*\.vivaldi_reporting_data*,lazy_ntfs,
 1176,Vivaldi Calendar,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Calendar*,lazy_ntfs,
 1177,Vivaldi Contacts,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Contacts*,lazy_ntfs,
 1178,Vivaldi Notes,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\Notes*,lazy_ntfs,
 1179,Vivaldi Download Metadata,Communications,Users\*\AppData\Local\Vivaldi\User Data\*\DownloadMetadata*,lazy_ntfs,
 1180,WBEM,WBEM,Windows\System32\wbem\Repository\**10,lazy_ntfs,
 1181,WBEM,WBEM,Windows.old\Windows\System32\wbem\Repository\**10,lazy_ntfs,
 1182,WER Files,Executables,ProgramData\Microsoft\Windows\WER\**10,lazy_ntfs,
 1183,WER Files,Executables,Users\*\AppData\Local\Microsoft\Windows\WER\**10,lazy_ntfs,
 1184,Crash Dumps,SQL Exploitation,Users\*\AppData\Local\CrashDumps\*.dmp,lazy_ntfs,
 1185,Crash Dumps,SQL Exploitation,Windows\*.dmp,lazy_ntfs,
 1186,Crash Dumps,SQL Exploitation,Windows.old\Windows\*.dmp,lazy_ntfs,
 1187,Webroot Program Data,Antivirus,ProgramData\WRData\WRLog.log,lazy_ntfs,
 1188,WhatsApp Cache,Apps,Users\*\AppData\Roaming\WhatsApp\Cache,lazy_ntfs,"Copies the cache of WhatsApp. Can be opened with Chrome Cache Viewer for viewing embedded thumbnails and other image artefacts, as well as extracting .enc message files or other files"
 1189,WhatsApp Local Storage,Apps,Users\*\AppData\Roaming\WhatsApp\Local Storage\leveldb,lazy_ntfs,"Copies the Local Storage leveldb of WhatsApp. Contains phone model and name of user, plus encrypted base64 strings which can be viewed with LevelDBDumper"
 1190,Microsoft Store WhatsApp Cache,Apps,Users\*\AppData\Local\Packages\*WhatsAppDesktop*\LocalCache\Roaming\WhatsApp\Cache,lazy_ntfs,"Copies the cache of WhatsApp. Can be opened with Chrome Cache Viewer for viewing embedded thumbnails and other image artefacts, as well as extracting .enc message files or other files"
 1191,Microsoft Store WhatsApp Local Storage,Apps,Users\*\AppData\Local\Packages\*WhatsAppDesktop*\LocalCache\Roaming\WhatsApp\Local Storage\leveldb,lazy_ntfs,"Copies the Local Storage leveldb of WhatsApp. Contains phone model and name of user, plus encrypted base64 strings which can be viewed with LevelDBDumper"
 1192,Microsoft Store WhatsApp Desktop Profile Pictures,Apps,Users\*\AppData\Local\Packages\*WhatsAppDesktop*\LocalState\profilePictures,lazy_ntfs,"Copies the local store of contacts profile pictures, simply open with a photos software"
 1193,Microsoft Store WhatsApp Shared Media,Apps,"Users\*\AppData\Local\Packages\*WhatsAppDesktop*\LocalState\shared\transfers\**10\*.{jpg,mp4,pdf,webp}",lazy_ntfs,"Copies the shared media, can get very large."
 1194,DetectionHistory,Antivirus,ProgramData\Microsoft\Windows Defender\Scans\History\Service\DetectionHistory\*\**10,lazy_ntfs,
 1195,WinSCP (.ini file),Logs,**10\WinSCP.ini,lazy_ntfs,
 1196,Recall folder,FileKnowledge,Users\*\AppData\Local\CoreAIPlatform.00\UKP\**10,lazy_ntfs,
 1197,Windows Defender Logs,Antivirus,ProgramData\Microsoft\Microsoft AntiMalware\Support\**10,lazy_ntfs,
 1198,Windows Defender Event Logs,EventLogs,Windows\System32\winevt\Logs\Microsoft-Windows-Windows Defender*.evtx,lazy_ntfs,
 1199,Windows Defender Event Logs,EventLogs,Windows.old\Windows\System32\winevt\Logs\Microsoft-Windows-Windows Defender*.evtx,lazy_ntfs,
 1200,Windows Defender Logs,Antivirus,ProgramData\Microsoft\Windows Defender\Support\**10,lazy_ntfs,
 1201,Windows Defender Logs,Antivirus,Windows\Temp\MpCmdRun.log,lazy_ntfs,
 1202,Windows Defender Logs,Antivirus,Windows.old\Windows\Temp\MpCmdRun.log,lazy_ntfs,
 1203,DetectionHistory,Antivirus,ProgramData\Microsoft\Windows Defender\Scans\History\Service\DetectionHistory\*\**10,lazy_ntfs,
 1204,Windows Defender Quarantine,Antivirus,ProgramData\Microsoft\Windows Defender\Quarantine\**10,lazy_ntfs,
 1205,Windows Defender Detections.log,Antivirus,ProgramData\Microsoft\Windows Defender\Scans\History\Service\Detections.log,lazy_ntfs,
 1206,Windows Firewall Logs,WindowsFirewallLogs,Windows\System32\LogFiles\Firewall\pfirewall.*,lazy_ntfs,
 1207,Windows Firewall Logs,WindowsFirewallLogs,Windows.old\Windows\System32\LogFiles\Firewall\pfirewall.*,lazy_ntfs,
 1208,Cryptokeys,Windows Hello,Windows\ServiceProfiles\LocalService\AppData\Roaming\Microsoft\Crypto\Keys\**10,lazy_ntfs,
 1209,Masterkey,Windows Hello,Windows\System32\Microsoft\Protect\S-1-5-18\User\**10,lazy_ntfs,
 1210,NGC,Windows Hello,Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\Ngc\**10,lazy_ntfs,
 1211,SECURITY registry transaction files,Registry,Windows\System32\config\SECURITY.LOG*,lazy_ntfs,
 1212,SECURITY registry transaction files,Registry,Windows.old\Windows\System32\config\SECURITY.LOG*,lazy_ntfs,
 1213,SOFTWARE registry transaction files,Registry,Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 1214,SOFTWARE registry transaction files,Registry,Windows.old\Windows\System32\config\SOFTWARE.LOG*,lazy_ntfs,
 1215,SYSTEM registry transaction files,Registry,Windows\System32\config\SYSTEM.LOG*,lazy_ntfs,
 1216,SYSTEM registry transaction files,Registry,Windows.old\Windows\System32\config\SYSTEM.LOG*,lazy_ntfs,
 1217,SECURITY registry hive,Registry,Windows\System32\config\SECURITY,lazy_ntfs,
 1218,SECURITY registry hive,Registry,Windows.old\Windows\System32\config\SECURITY,lazy_ntfs,
 1219,SOFTWARE registry hive,Registry,Windows\System32\config\SOFTWARE,lazy_ntfs,
 1220,SOFTWARE registry hive,Registry,Windows.old\Windows\System32\config\SOFTWARE,lazy_ntfs,
 1221,SYSTEM registry hive,Registry,Windows\System32\config\SYSTEM,lazy_ntfs,
 1222,SYSTEM registry hive,Registry,Windows.old\Windows\System32\config\SYSTEM,lazy_ntfs,
 1223,SECURITY registry hive (RegBack),Registry,Windows\System32\config\RegBack\SECURITY,lazy_ntfs,
 1224,SECURITY registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SECURITY,lazy_ntfs,
 1225,SOFTWARE registry hive (RegBack),Registry,Windows\System32\config\RegBack\SOFTWARE,lazy_ntfs,
 1226,SOFTWARE registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SOFTWARE,lazy_ntfs,
 1227,SYSTEM registry hive (RegBack),Registry,Windows\System32\config\RegBack\SYSTEM,lazy_ntfs,
 1228,SYSTEM registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SYSTEM,lazy_ntfs,
 1229,SYSTEM registry hive (RegBack),Registry,Windows\System32\config\RegBack\SYSTEM1,lazy_ntfs,
 1230,SYSTEM registry hive (RegBack),Registry,Windows.old\Windows\System32\config\RegBack\SYSTEM1,lazy_ntfs,
 1231,WindowsIndexSearch,FileKnowledge,programdata\microsoft\search\data\applications\windows\*,lazy_ntfs,
 1232,GatherLogs,FileKnowledge,programdata\microsoft\search\data\applications\windows\GatherLogs\**10,lazy_ntfs,
 1233,Network setting files,Misc,windows\system32\drivers\etc\**10,lazy_ntfs,
 1234,Windows 10 Notification DB,Notifications,Users\*\AppData\Local\Microsoft\Windows\Notifications\wpndatabase.db,lazy_ntfs,
 1235,Windows 10 Notification DB,Notifications,Users\*\AppData\Local\Microsoft\Windows\Notifications\appdb.dat,lazy_ntfs,
 1236,MigLog.xml,OS Upgrade,Windows\Panther\MigLog.xml,lazy_ntfs,
 1237,Setupact.log,OS Upgrade,Windows\Panther\Setupact.log,lazy_ntfs,
 1238,HumanReadable.xml,OS Upgrade,Windows\Panther\*HumanReadable.xml,lazy_ntfs,
 1239,FolderMoveLog.txt,OS Upgrade,Windows\Panther\Rollback\FolderMoveLog.txt,lazy_ntfs,
 1240,Update Store.db,OS Upgrade,ProgramData\USOPrivate\UpdateStore\store.db,lazy_ntfs,
 1241,Windows Power Diagnostics,Diagnostics,ProgramData\Microsoft\Windows\Power Efficiency Diagnostics\**10,lazy_ntfs,
 1242,DNS Netlogon files,DNS,Windows\System32\config\**10\netlogon.*,lazy_ntfs,
 1243,DNS files,DNS,Windows\System32\dns\**10,lazy_ntfs,
 1244,DHCP files,DHCP,Windows\System32\dhcp\**10,lazy_ntfs,
 1245,Diagnostic Logs for WSA,Windows Subsystem for Android,Users\*\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalState\diagnostics\logcat\*.log,lazy_ntfs,Filenames should be %timestamp%.log
 1246,App download artifacts (PNG),Windows Subsystem for Android,Users\*\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\*.png,lazy_ntfs,Will provide examiners with indicators of which apps were downloaded
 1247,App download artifacts (ICO),Windows Subsystem for Android,Users\*\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\*.ico,lazy_ntfs,Will provide examiners with indicators of which apps were downloaded WHEN since .ico files appear immediately when download of an application completes
 1248,Appcompatdb.json,Windows Subsystem for Android,Users\*\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalState\appcompatdb.json,lazy_ntfs,"Grabs the appcompatdb.json, unknown exactly what this is but further relevance could be uncovered after more research is conducted"
 1249,userdata.vhdx,Windows Subsystem for Android,Users\*\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\userdata.vhdx,lazy_ntfs,Grabs the user's data which appears to be stored in a VHDX
 1250,Legacy .rbs files relating to Windows Telemetry and Diagnostics,SystemEvents,ProgramData\Microsoft\Diagnosis\events*.rbs,lazy_ntfs,
 1251,Legacy .rbs files relating to Windows Telemetry and Diagnostics,SystemEvents,Windows.old\ProgramData\Microsoft\Diagnosis\events*.rbs,lazy_ntfs,
 1252,ActivitiesCache.db,FileFolderAccess,Users\*\AppData\Local\ConnectedDevicesPlatform\**10\ActivitiesCache.db*,lazy_ntfs,
 1253,Windows Update Session Orchestrator logs,EventLogs,ProgramData\USOShared\Logs\System\**10\*.etl,lazy_ntfs,
 1254,Windows Update logs,EventLogs,Windows\Logs\WindowsUpdate\**10\WindowsUpdate*.etl,lazy_ntfs,
 1255,Windows Component-Based Servicing logs,EventLogs,Windows\Logs\CBS\**10\CBS*.log,lazy_ntfs,
 1256,Windows Your Phone - All Databases,Apps,Users\*\AppData\Local\Packages\Microsoft.YourPhone_8wekyb3d8bbwe\LocalCache\Indexed\**10,lazy_ntfs,Locates all Your Phone database files
 1257,System Volume Information,Folder capture,System Volume Information\**10,lazy_ntfs,
 1258,XYplorer - .ini file,Apps,Users\*\AppData\Roaming\XYplorer\XYplorer.ini,lazy_ntfs,Locates .ini file associated with Total Commander which stores useful user activity information.
 1259,XYplorer - .ini file for each respective pane,Apps,Users\*\AppData\Roaming\XYplorer\Panes\*\**10\pane.ini,lazy_ntfs,Locates the .ini file for the left and right pane.
 1260,XYplorer - AutoBackup folder,Apps,Users\*\AppData\Roaming\XYplorer\AutoBackup\**10,lazy_ntfs,Locates the AutoBackup folder and copies its contents.
 1261,XYplorer - .dat files,Apps,Users\*\AppData\Roaming\XYplorer\**10\*.dat,lazy_ntfs,"Locates the .dat files in the XYplorer's AppData folder, all of which are updated upon program's exit."
 1262,Xeox RMM Client Application logs,ApplicationLogs,Program Files\Xeox\*.log,lazy_ntfs,Contains Application Log entries such as service start and incomming connections.
 1263,Yandex Cookies,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\**10\Cookies*,lazy_ntfs,
 1264,Yandex Network Persistent State,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\**10\Network Persistent State,lazy_ntfs,
 1265,Yandex Favicons,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Favicons*,lazy_ntfs,
 1266,Yandex History,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\History*,lazy_ntfs,
 1267,Yandex Sessions Folder,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Sessions\*,lazy_ntfs,
 1268,Yandex Login Data,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Ya Passman Data*,lazy_ntfs,
 1269,Yandex Network Action Predictor,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Network Action Predictor,lazy_ntfs,
 1270,Yandex Preferences,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Preferences,lazy_ntfs,
 1271,Yandex Top Sites,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Top Sites*,lazy_ntfs,
 1272,Yandex Bookmarks,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Bookmarks*,lazy_ntfs,
 1273,Yandex Visited Links,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Visited Links,lazy_ntfs,
 1274,Yandex Web Data,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Web Data*,lazy_ntfs,
 1275,Yandex Autofill data,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Ya Autofill Data*,lazy_ntfs,
 1276,Yandex Passman logs,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Passman Logs*,lazy_ntfs,
 1277,Yandex Shortcuts,Communications,Users\*\AppData\Local\Yandex\YandexBrowser\User Data\*\Shortcuts*,lazy_ntfs,
 1278,Zoho Assist log files in AppData\Local,Apps,Users\*\AppData\Local\ZohoMeeting\log\**10,lazy_ntfs,Zoho Assist log files in AppData
 ocal
 1279,Zoho Assist .conf files in AppData\Local,Apps,Users\*\AppData\Local\ZohoMeeting\*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Connection/Settings)
 1280,Zoho Assist log files in ProgramData,Apps,ProgramData\ZohoMeeting\log\**10,lazy_ntfs,Zoho Assist log files in ProgramData
 1281,Zoho Assist .conf files,Apps,ProgramData\ZohoMeeting\**10\*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Connection/Proxy/Settings)
 1282,Zoho Assist log files in Program Files*,Apps,Program Files*\ZohoMeeting\UnAttended\ZohoMeeting\logs\**10,lazy_ntfs,Zoho Assist log files in Program Files*
 1283,Zoho Assist .conf files in Program Files*,Apps,Program Files*\ZohoMeeting\UnAttended\ZohoMeeting\*.conf,lazy_ntfs,Grabs all .conf files present in this folder (Service/Settings)
 1284,Zoho Assist .txt files in Program Files*,Apps,Program Files*\ZohoMeeting\UnAttended\ZohoMeeting\*.txt,lazy_ntfs,Grabs all .txt files present in this folder (Service/Settings)
 1285,Zoom client logs,Apps,Users\*\AppData\Roaming\Zoom\logs\**10\*,lazy_ntfs,Zoom client artifacts
 1286,Zoom client logs (Windows XP),Apps,Documents and Settings\*\Application Data\Zoom\**10\*,lazy_ntfs,Zoom client artifacts (Windows XP)
 1287,Zoom client recordings,Apps,Users\*\Documents\Zoom\**10\*,lazy_ntfs,Zoom recording artifacts
 1288,Zoom plugin (Outlook),Apps,Users\*\AppData\Roaming\Zoom Plugin\*.json,lazy_ntfs,Zoom plugin artifacts
 1289,eMule Logs and Configuration Files,FileDownload,Users\*\AppData\Local\eMule\**10,lazy_ntfs,Locates eMule logs and configuration files and copies them.
 1290,eMule part.met files,FileDownload,**10\*.part.met,lazy_ntfs,Locates eMule *.part.met files and copies them.
 1291,iTunes Backup Folder,Communications,Users\*\AppData\Roaming\Apple\Mobilesync\Backup\**10,lazy_ntfs,
 1292,iTunes Backup Folder,Communications,Users\*\AppData\Roaming\Apple Computer\Mobilesync\Backup\**10,lazy_ntfs,
 1293,iTunes Backup Folder - iOS13,Communications,Users\*\Apple\Mobilesync\Backup\**10,lazy_ntfs,
 1294,mIRC Chat Logs (Vista+),Communications,Users\*\AppData\Roaming\mIRC\logs\**10,lazy_ntfs,
 1295,mIRC Chat Logs (2000/XP),Communications,Documents and Settings\*\Application Data\mIRC\logs\**10,lazy_ntfs,
 1296,mRemoteNG Logs,Communications,Users\*\AppData\Roaming\mRemoteNG\mRemoteNG.log,lazy_ntfs,Contains log entries for remote connections
 1297,mRemoteNG Connection Configuration and Backups,Communications,Users\*\AppData\Roaming\mRemoteNG\confCons.xml*,lazy_ntfs,"Contains connection config, often with obfuscated credentials"
 1298,mRemoteNG Program Settings,Communications,Users\*\AppData\*\mRemoteNG\**10\user.config,lazy_ntfs,Contains user-specific program settings
 1299,openSUSE WSL /etc/os-release,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\os-release,lazy_ntfs,
 1300,openSUSE WSL /etc/fstab,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\fstab,lazy_ntfs,
 1301,openSUSE WSL /etc/passwd,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\passwd,lazy_ntfs,
 1302,openSUSE WSL /etc/group,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\group,lazy_ntfs,
 1303,openSUSE WSL /etc/shadow,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\shadow,lazy_ntfs,
 1304,openSUSE WSL /etc/timezone,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\timezone,lazy_ntfs,
 1305,openSUSE WSL /etc/hostname,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\hostname,lazy_ntfs,
 1306,openSUSE WSL /etc/hosts,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\hosts,lazy_ntfs,
 1307,openSUSE WSL /etc/bash.bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\bash.bashrc,lazy_ntfs,
 1308,openSUSE WSL /etc/profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\etc\profile,lazy_ntfs,
 1309,openSUSE WSL .bash_history,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\**10\.bash_history,lazy_ntfs,
 1310,openSUSE WSL .bashrc,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\**10\.bashrc,lazy_ntfs,
 1311,openSUSE WSL .profile,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\rootfs\**10\.profile,lazy_ntfs,
 1312,openSUSE WSL ext4.vhdx,Windows Subsystem for Linux,Users\*\AppData\Local\Packages\46932SUSE.openSUSE*Leap*\LocalState\ext4.vhdx,lazy_ntfs,
 1313,pCloud Database,Apps,Users\*\AppData\Local\pCloud\*.db,lazy_ntfs,Database contains all files sync'd with pCloud account.
 1314,pCloud Database WAL File,Apps,Users\*\AppData\Local\pCloud\*.db-wal,lazy_ntfs,Write-Ahead Log for pCloud database file.
 1315,pCloud Database Shared Memory File,Apps,Users\*\AppData\Local\pCloud\*.db-shm,lazy_ntfs,Shared Memory for the pCloud database file.
 1316,TorrentClients - qBittorrent,FileDownload,Users\*\AppData\Roaming\qBittorrent\*.ini,lazy_ntfs,
 1317,TorrentClients - qBittorrent,FileDownload,Users\*\AppData\Local\qBittorrent\logs\*,lazy_ntfs,
 1318,TorrentClients - qBittorrent,FileDownload,Users\*\AppData\Local\qBittorrent\GeoDB\*,lazy_ntfs,Locate .mmdb file for network peer connection analysis.
 1319,TorrentClients - qBittorrent,FileDownload,Users\*\AppData\Local\qBittorrent\BT_backup\*,lazy_ntfs,Locate active (in-progress) torrent files.
 1320,TorrentClients - uTorrent,FileDownload,Users\*\AppData\Roaming\uTorrent\*.dat,lazy_ntfs,
 1322,PowerShell Scheduled_Jobs,Persistence,Users\*\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\**10,lazy_ntfs,
 1323,PowerShell Scheduled_Jobs Output,Persistence,Users\*\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\*\Output\*\**10,lazy_ntfs,
 1324,PowerShell Scheduled_Jobs Systemprofile,Persistence,Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\**10,lazy_ntfs,
 1325,PowerShell Scheduled_Jobs Output Systemprofile,Persistence,Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\*\Output\*\**10,lazy_ntfs,
 1326,PowerShell Scheduled_Jobs WOW64 Systemprofile,Persistence,Windows\SysWOW64\config\systemprofile\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\**10,lazy_ntfs,
 1327,PowerShell Scheduled_Jobs Output WOW64 Systemprofile,Persistence,Windows\SysWOW64\config\systemprofile\AppData\Local\Microsoft\Windows\PowerShell\ScheduledJobs\*\Output\*\**10,lazy_ntfs,
 - name: KapeTargets
 type: hidden
 description: |
 Each parameter above represents a group of rules to be
 triggered. This table specifies which rule IDs will be included
 when the parameter is checked.
 default: |
 Group,RuleIds
 _BasicCollection,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 36, 37, 38, 39, 51, 280, 281, 282, 500, 501, 502, 503, 504, 505, 506, 507, 651, 652, 653, 654, 655, 661, 662, 699, 700, 706, 707, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 961, 962, 963, 964, 965, 966, 983, 984, 985, 986, 987, 988, 989, 1061, 1062, 1073, 1101, 1102, 1103, 1231, 1232, 1322, 1323, 1324, 1325, 1326, 1327]"
 _KapeTriage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 172, 173, 174, 175, 176, 177, 179, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 280, 281, 282, 310, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 376, 377, 393, 394, 395, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 486, 487, 488, 489, 490, 491, 492, 493, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 520, 521, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 549, 550, 557, 580, 581, 582, 583, 584, 585, 614, 615, 638, 639, 651, 652, 653, 654, 655, 661, 662, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 707, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 847, 848, 849, 961, 962, 963, 964, 965, 966, 967, 968, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1019, 1020, 1021, 1025, 1026, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1067, 1068, 1069, 1086, 1087, 1096, 1097, 1098, 1099, 1100, 1121, 1122, 1123, 1124, 1127, 1128, 1129, 1130, 1137, 1138, 1139, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1252, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1296, 1297, 1298, 1322, 1323, 1324, 1325, 1326, 1327]"
 _SANS_Triage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 169, 172, 173, 174, 175, 176, 177, 179, 215, 216, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 310, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 486, 487, 488, 489, 490, 491, 492, 493, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 520, 521, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 549, 550, 557, 560, 561, 562, 563, 564, 573, 574, 580, 581, 582, 583, 584, 585, 614, 615, 638, 639, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 707, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 847, 848, 849, 961, 962, 963, 964, 965, 966, 967, 968, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1025, 1026, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1086, 1087, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1121, 1122, 1123, 1124, 1127, 1128, 1129, 1130, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1231, 1232, 1252, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1294, 1295, 1296, 1297, 1298, 1322, 1323, 1324, 1325, 1326, 1327]"
 _Boot,[1]
 _J,"[2, 3, 4, 5]"
 _LogFile,[6]
 _MFT,[7]
 _MFTMirr,[8]
 _SDS,"[9, 10]"
 _T,"[11, 12]"
 1Password,"[13, 14, 15]"
 4KVideoDownloader,"[16, 17]"
 AVG,"[18, 19, 20, 21, 22, 23, 24]"
 AceText,[25]
 AcronisTrueImage,"[26, 27, 28]"
 Action1,[29]
 ActiveDirectoryNTDS,[30]
 ActiveDirectorySysvol,[31]
 AgentRansack,"[32, 33, 34, 35]"
 Amcache,"[36, 37, 38, 39]"
 Ammyy,[40]
 Antivirus,"[18, 19, 20, 21, 22, 23, 24, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 169, 172, 173, 174, 175, 176, 177, 233, 234, 235, 236, 237, 238, 263, 310, 311, 312, 393, 394, 395, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 557, 847, 968, 993, 994, 1019, 1020, 1021, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1086, 1087, 1096, 1097, 1098, 1127, 1128, 1129, 1130, 1187, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205]"
 AnyDesk,"[41, 42, 43, 44, 45, 46, 47, 48, 49]"
 ApacheAccessLog,[50]
 AppCompatPCA,[51]
 AppData,[52]
 AppXPackages,"[53, 54, 55, 56, 57]"
 ApplicationEvents,"[58, 59, 60, 61]"
 AsperaConnect,"[62, 63]"
 AteraAgent,"[64, 65, 66, 67, 68]"
 Avast,"[69, 70, 71, 72, 73, 74]"
 AviraAVLogs,"[75, 76, 77]"
 BCD,"[78, 79]"
 BITS,[80]
 BitTorrent,[81]
 Bitdefender,"[82, 83, 84]"
 BoxDrive_Metadata,"[85, 86]"
 BoxDrive_UserFiles,"[87, 88]"
 BraveBrowser,"[89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108]"
 BrowserCache,"[109, 110, 111, 112, 113, 114, 115, 116]"
 CertUtil,"[117, 118, 119, 120]"
 Chrome,"[121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161]"
 ChromeExtensions,"[162, 163]"
 ChromeFileSystem,[164]
 CiscoJabber,[165]
 ClipboardMaster,"[166, 167, 168]"
 CloudStorage_All,"[85, 86, 87, 88, 225, 226, 227, 228, 229, 230, 231, 375, 376, 377, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 614, 615, 616, 698, 1045, 1046, 1047, 1313, 1314, 1315]"
 CloudStorage_Metadata,"[85, 86, 225, 226, 227, 228, 229, 230, 376, 377, 614, 615, 698]"
 CloudStorage_OneDriveExplorer,"[614, 615, 703, 704, 705, 706, 707, 780, 781, 782, 783, 784, 785, 786, 787, 788]"
 CombinedLogs,"[280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 573, 574, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 1101, 1102, 1103, 1206, 1207]"
 Combofix,[169]
 ConfluenceLogs,"[170, 171]"
 Cybereason,"[172, 173, 174]"
 Cylance,"[175, 176, 177]"
 DC__,[178]
 DWAgent,[179]
 Debian,"[180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197]"
 DirectoryOpus,"[198, 199, 200, 201, 202, 203, 204, 205, 206]"
 DirectoryTraversal_AudioFiles,[207]
 DirectoryTraversal_ExcelDocuments,[208]
 DirectoryTraversal_PDFDocuments,[209]
 DirectoryTraversal_PictureFiles,[210]
 DirectoryTraversal_SQLiteDatabases,[211]
 DirectoryTraversal_VideoFiles,[212]
 DirectoryTraversal_WildCardExample,[213]
 DirectoryTraversal_WordDocuments,[214]
 Discord,"[215, 216]"
 DoubleCommander,"[217, 218, 219, 220, 221, 222, 223]"
 Drivers,[224]
 Dropbox_Metadata,"[225, 226, 227, 228, 229, 230]"
 Dropbox_UserFiles,[231]
 EFCommander,[232]
 ESET,"[233, 234, 235, 236, 237, 238]"
 Edge,[239]
 EdgeChromium,"[240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261]"
 EdgeChromiumExtensions,[262]
 Emsisoft,[263]
 EncapsulationLogging,"[264, 265, 266, 267]"
 EventLogs_RDP,"[268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]"
 EventLogs,"[280, 281, 282]"
 EventTraceLogs,"[283, 284, 285, 286, 287, 288, 289, 290, 291, 292]"
 EventTranscriptDB,"[293, 294, 295]"
 Evernote,"[296, 297, 298]"
 Everything__VoidTools_,"[299, 300, 301, 302]"
 EvidenceOfExecution,"[36, 37, 38, 39, 51, 661, 662, 699, 700, 1061, 1062]"
 Exchange,"[303, 308, 309]"
 ExchangeClientAccess,[303]
 ExchangeCve_2021_26855,"[304, 305, 306, 307]"
 ExchangeSetupLog,[308]
 ExchangeTransport,[309]
 FSecure,"[310, 311, 312]"
 FTPClients,"[314, 315, 316, 317, 1195]"
 Fences,[313]
 FileExplorerReplacements,"[198, 199, 200, 201, 202, 203, 204, 205, 206, 217, 218, 219, 220, 221, 222, 223, 232, 353, 354, 355, 356, 357, 358, 359, 567, 568, 569, 570, 571, 572, 612, 613, 674, 675, 1024, 1063, 1064, 1065, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1258, 1259, 1260, 1261]"
 FileSystem,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]"
 FileZillaClient,"[314, 315]"
 FileZillaServer,"[316, 317]"
 Firefox,"[318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352]"
 FreeCommander,"[353, 354, 355, 356, 357, 358, 359]"
 FreeDownloadManager,"[360, 361, 362]"
 FreeFileSync,[363]
 Freenet,"[364, 365, 366, 367, 368]"
 FrostWire,"[369, 370, 371]"
 Gigatribe,"[372, 373, 374]"
 GoogleDriveBackupSync_UserFiles,[375]
 GoogleDrive_Metadata,"[376, 377]"
 GoogleEarth,"[378, 379, 380, 381]"
 GroupPolicy,"[382, 383, 384, 385, 386, 387, 388, 389]"
 HeidiSQL,"[390, 391]"
 HexChat,[392]
 HitmanPro,"[393, 394, 395]"
 HostsFile,[396]
 IISConfiguration,"[397, 398, 399, 400]"
 IISLogFiles,"[401, 402, 403, 404, 405, 406]"
 IRCClients,"[392, 419, 1294, 1295]"
 ISLOnline,"[407, 408, 409, 410, 411, 412, 413, 414]"
 ITarian,"[415, 416, 417, 418]"
 IceChat,[419]
 IconCacheDB,[420]
 Idrive,"[421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434]"
 ImgBurn,[435]
 InternetExplorer,"[436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448]"
 IrfanView,[449]
 JDownloader2,"[450, 451, 452, 453, 454]"
 JavaWebCache,"[455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465]"
 JumpLists,"[466, 467]"
 Kali,"[468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485]"
 KapeTriage,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 172, 173, 174, 175, 176, 177, 179, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 280, 281, 282, 310, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 376, 377, 393, 394, 395, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 486, 487, 488, 489, 490, 491, 492, 493, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 520, 521, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 549, 550, 557, 580, 581, 582, 583, 584, 585, 614, 615, 638, 639, 651, 652, 653, 654, 655, 661, 662, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 707, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 847, 848, 849, 961, 962, 963, 964, 965, 966, 967, 968, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1019, 1020, 1021, 1025, 1026, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1067, 1068, 1069, 1086, 1087, 1096, 1097, 1098, 1099, 1100, 1121, 1122, 1123, 1124, 1127, 1128, 1129, 1130, 1137, 1138, 1139, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1252, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1296, 1297, 1298, 1322, 1323, 1324, 1325, 1326, 1327]"
 Kaseya,"[486, 487, 488, 489, 490, 491, 492, 493, 494]"
 Keepass,"[495, 496, 497]"
 KeepassXC,"[498, 499]"
 LNKFilesAndJumpLists,"[500, 501, 502, 503, 504, 505, 506, 507]"
 Level,[508]
 LinuxOnWindowsProfileFiles,"[509, 510, 511, 512]"
 LiveUserFiles,"[513, 514, 515, 516]"
 LogFiles,"[517, 518, 519]"
 LogMeIn,"[58, 59, 60, 61, 520, 521]"
 MOF,[522]
 MSSQLErrorLog,"[523, 524]"
 MacriumReflect,"[525, 526, 527]"
 Malwarebytes,"[528, 529, 530, 531]"
 ManageEngineLogs,"[532, 533]"
 Mattermost,[534]
 McAfee,"[535, 536, 537, 538, 539]"
 McAfee_ePO,[540]
 MediaMonkey,"[541, 542]"
 Megasync,[543]
 MemoryFiles,"[544, 545, 546, 547, 548]"
 MeshAgent,"[549, 550]"
 MessagingClients,"[165, 215, 216, 392, 419, 534, 560, 561, 562, 563, 564, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1070, 1071, 1140, 1141, 1142, 1143, 1144, 1188, 1189, 1190, 1191, 1294, 1295]"
 MicrosoftOfficeBackstage,[551]
 MicrosoftOneNote,"[552, 553, 554, 555, 556]"
 MicrosoftSafetyScanner,[557]
 MicrosoftStickyNotes,"[558, 559]"
 MicrosoftTeams,"[560, 561, 562, 563, 564]"
 MicrosoftToDo,"[565, 566]"
 MidnightCommander,[567]
 MiniTimelineCollection,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 280, 281, 282, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788]"
 MultiCommander,"[568, 569, 570, 571, 572]"
 NETCLRUsageLogs,"[573, 574]"
 NGINXLogs,[575]
 NZBGet,"[576, 577]"
 Nessus,"[578, 579]"
 NetMonitorforEmployeesProfessional,"[580, 581, 582, 583, 584, 585]"
 NewsbinPro,[586]
 Newsleecher,[587]
 Nicotine__,"[588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598]"
 Notepad__,"[599, 600, 601]"
 Notepad,[602]
 Notion,"[603, 604]"
 OfficeAutosave,"[605, 606, 607, 608]"
 OfficeDiagnostics,"[609, 610]"
 OfficeDocumentCache,[611]
 OneCommander,"[612, 613]"
 OneDrive_Metadata,"[614, 615]"
 OneDrive_UserFiles,[616]
 OpenSSHClient,"[617, 618, 619, 620, 621, 622, 623, 624, 625]"
 OpenSSHServer,"[626, 627, 628, 629, 630, 631, 632, 633, 634]"
 OpenVPNClient,"[635, 636, 637]"
 Opera,"[638, 639]"
 OutlookPSTOST,"[640, 641, 642, 643, 644, 645, 646, 647]"
 P2PClients,"[178, 369, 370, 371, 372, 373, 374, 997, 1022, 1023, 1289, 1290]"
 PeaZip,[648]
 PerfLogs,[649]
 PowerShell7Config,[650]
 PowerShellConsole,"[651, 652, 653, 654, 655]"
 PowerShellTranscripts,"[656, 657, 658, 659, 660]"
 Prefetch,"[661, 662]"
 ProgramData,[663]
 ProgramExecution,"[36, 37, 38, 39, 51, 466, 467, 573, 574, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 699, 700, 1061, 1062, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1252]"
 ProtonVPN,[664]
 PuffinSecureBrowser,"[665, 666, 667, 668, 669, 670, 671]"
 PushNotification,"[672, 673]"
 Q_Dir,"[674, 675]"
 QFinderPro__QNAP_,[676]
 QlikSense,"[677, 678, 679, 680]"
 RDPCache,"[681, 682, 683]"
 RDPJumplist,[684]
 RDPLogs,"[685, 686, 687, 688, 689, 690, 691, 692]"
 Radmin,"[693, 694, 695, 696, 697]"
 RcloneConf,[698]
 RecentFileCache,"[699, 700]"
 RecentFolders,"[701, 702]"
 RecycleBin,"[703, 704, 705, 706, 707]"
 RecycleBin_DataFiles,"[703, 704, 705]"
 RecycleBin_InfoFiles,"[706, 707]"
 RegistryHives,"[708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788]"
 RegistryHivesMSIXApps,"[708, 709, 710]"
 RegistryHivesOther,"[711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738]"
 RegistryHivesSystem,"[739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779]"
 RegistryHivesUser,"[780, 781, 782, 783, 784, 785, 786, 787, 788]"
 RemoteAdmin,"[29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 60, 61, 179, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 486, 487, 488, 489, 490, 491, 492, 493, 494, 508, 520, 521, 549, 550, 580, 581, 582, 583, 584, 585, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 789, 790, 848, 849, 990, 991, 992, 1025, 1026, 1050, 1051, 1066, 1067, 1068, 1069, 1099, 1100, 1121, 1122, 1123, 1124, 1137, 1138, 1139, 1262, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1296, 1297, 1298]"
 RemoteUtilities_app,"[789, 790]"
 RoamingProfile,"[791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832]"
 Robo_FTP,"[833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846]"
 RogueKiller,[847]
 RustDesk,"[848, 849]"
 SABnbzd,"[850, 851]"
 SCCMClientLogs,[852]
 SDB,"[853, 854, 855, 856]"
 SOFELK,"[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 36, 37, 38, 39, 51, 280, 281, 282, 500, 501, 502, 503, 504, 505, 506, 507, 661, 662, 699, 700, 1061, 1062]"
 SQLiteDatabases,"[857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960]"
 SRUM,"[961, 962, 963, 964, 965, 966]"
 SUM,[967]
 SUPERAntiSpyware,[968]
 SUSELinuxEnterpriseServer,"[969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982]"
 ScheduledTasks,"[983, 984, 985, 986, 987, 988, 989, 1322, 1323, 1324, 1325, 1326, 1327]"
 ScreenConnect,"[58, 59, 60, 61, 990, 991, 992]"
 SecureAge,[993]
 SentinelOne,[994]
 ServerTriage,"[50, 170, 171, 303, 308, 309, 316, 317, 401, 402, 403, 404, 405, 406, 523, 524, 532, 533, 575, 626, 627, 628, 629, 630, 631, 632, 633, 634]"
 Session,[995]
 ShareX,[996]
 Shareaza,[997]
 SiemensTIA,[998]
 Signal,"[999, 1000, 1001, 1002]"
 SignatureCatalog,"[1003, 1004]"
 Skype,"[1005, 1006, 1007, 1008, 1009, 1010, 1011]"
 Slack,"[1012, 1013, 1014, 1015, 1016]"
 Snagit,[1017]
 SnipAndSketch,[1018]
 Sophos,"[58, 59, 60, 61, 1019, 1020, 1021]"
 Soulseek,"[1022, 1023]"
 SpeedCommander,[1024]
 Splashtop,"[1025, 1026]"
 StartupFolders,"[1027, 1028]"
 StartupInfo,"[1029, 1030]"
 Steam,"[1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042]"
 SublimeText,"[1043, 1044]"
 SugarSync,"[1045, 1046, 1047]"
 SumatraPDF,"[1048, 1049]"
 SupremoRemoteDesktop,"[1050, 1051]"
 Symantec_AV_Logs,"[58, 59, 60, 61, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060]"
 Syscache,"[1061, 1062]"
 TablacusExplorer,"[1063, 1064, 1065]"
 TeamViewerLogs,"[1066, 1067, 1068, 1069]"
 Telegram,"[1070, 1071]"
 TeraCopy,[1072]
 ThumbCache,[1073]
 Thunderbird,"[1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084]"
 TorrentClients,"[81, 1316, 1317, 1318, 1319, 1320]"
 Torrents,[1085]
 TotalAV,"[1086, 1087]"
 TotalCommander,"[1088, 1089, 1090, 1091, 1092, 1093, 1094]"
 TreeSize,[1095]
 TrendMicro,"[1096, 1097, 1098]"
 UEMS,"[1099, 1100]"
 USBDetective,"[36, 37, 38, 39, 280, 281, 282, 500, 501, 502, 503, 504, 505, 506, 507, 708, 709, 710, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 1101, 1102, 1103]"
 USBDevicesLogs,"[1101, 1102, 1103]"
 Ubuntu,"[1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120]"
 Ultraviewer,"[1121, 1122, 1123, 1124]"
 Usenet,[1125]
 UsenetClients,"[576, 577, 586, 587, 850, 851]"
 UsersFolders,[1126]
 VIPRE,"[1127, 1128, 1129, 1130]"
 VLC_Media_Player,"[1131, 1132]"
 VMware,"[1133, 1134, 1135, 1136, 1151, 1152, 1153, 1154]"
 VMwareInventory,[1133]
 VMwareMemory,"[1134, 1135, 1136]"
 VNCLogs,"[58, 59, 60, 61, 1137, 1138, 1139]"
 Viber,"[1140, 1141, 1142, 1143, 1144]"
 VirtualBox,"[1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154]"
 VirtualBoxConfig,"[1145, 1146]"
 VirtualBoxLogs,"[1147, 1148, 1149]"
 VirtualBoxMemory,[1150]
 VirtualDisks,"[1151, 1152, 1153, 1154]"
 VisualStudioCode,"[1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162]"
 Vivaldi,"[1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179]"
 WBEM,"[1180, 1181]"
 WER,"[1182, 1183, 1184, 1185, 1186]"
 WSL,"[180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312]"
 WebBrowsers,"[89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 638, 639, 665, 666, 667, 668, 669, 670, 671, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277]"
 WebServers,"[50, 401, 402, 403, 404, 405, 406, 523, 524, 575]"
 Webroot,[1187]
 WhatsApp,"[1188, 1189, 1190, 1191]"
 WhatsApp_Media,"[1192, 1193]"
 WinDefendDetectionHist,[1194]
 WinSCP,[1195]
 WindowsCopilotRecall,[1196]
 WindowsDefender,"[1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205]"
 WindowsFirewall,"[1206, 1207]"
 WindowsHello,"[1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230]"
 WindowsIndexSearch,"[1231, 1232]"
 WindowsNetwork,[1233]
 WindowsNotificationsDB,"[1234, 1235]"
 WindowsOSUpgradeArtifacts,"[1236, 1237, 1238, 1239, 1240]"
 WindowsPowerDiagnostics,[1241]
 WindowsServerDNSAndDHCP,"[1242, 1243, 1244]"
 WindowsSubsystemforAndroid,"[1245, 1246, 1247, 1248, 1249]"
 WindowsTelemetryDiagnosticsLegacy,"[1250, 1251]"
 WindowsTimeline,[1252]
 WindowsUpdate,"[1253, 1254, 1255]"
 WindowsYourPhone,[1256]
 XPRestorePoints,[1257]
 XYplorer,"[1258, 1259, 1260, 1261]"
 Xeox,[1262]
 Yandex,"[1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277]"
 ZohoAssist,"[1278, 1279, 1280, 1281, 1282, 1283, 1284]"
 Zoom,"[1285, 1286, 1287, 1288]"
 eMule,"[1289, 1290]"
 iTunesBackup,"[1291, 1292, 1293]"
 mIRC,"[1294, 1295]"
 mRemoteNG,"[1296, 1297, 1298]"
 openSUSE,"[1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312]"
 pCloudDatabase,"[1313, 1314, 1315]"
 qBittorrent,"[1316, 1317, 1318, 1319]"
 uTorrent,[1320]

 - name: NTFS_CACHE_TIME
 type: int
 description: How often to flush the NTFS cache. (Default is never).
 default: "1000000"

sources:
 - name: All File Metadata
 query: |
 LET VSS_MAX_AGE_DAYS &amp;lt;= VSSAnalysisAge

 -- Filter the KapeTargets list by the groups that are enabled in
 -- the scope. Only the rows which contain a Group name defined
 -- as TRUE in the scope (parameter) will be included. We then
 -- merge all the Ids into a single flattened list we can check
 -- against.
 LET targets &amp;lt;= SELECT * FROM foreach(row={
 SELECT * FROM parse_csv(accessor="data", filename=KapeTargets)
 WHERE get(member=Group) AND log(message="Selecting " + Group)
 }, query={
 SELECT _value AS Id FROM foreach(row=RuleIds)
 })

 LET EnabledIds &amp;lt;= targets.Id

 -- Filter only the rules in the rule table that have an Id we
 -- want. Targets with $ in their name probably refer to ntfs
 -- special files and so they are designated as ntfs
 -- accessor. Other targets may need ntfs parsing but not
 -- necessary - they are designated with the lazy_ntfs accessor.
 LET rule_specs_ntfs &amp;lt;= SELECT Id, Glob
 FROM parse_csv(filename=KapeRules, accessor="data")
 WHERE Id in EnabledIds AND Accessor='ntfs'
 AND log(message="ntfs: Selecting glob " + Glob)

 LET rule_specs_lazy_ntfs &amp;lt;= SELECT Id, Glob
 FROM parse_csv(filename=KapeRules, accessor="data")
 WHERE Id in EnabledIds AND Accessor='lazy_ntfs'
 AND log(message="auto: Selecting glob " + Glob)

 -- Call the generic VSS file collector with the globs we want in
 -- a new CSV file.
 LET all_results_from_device(Device) = SELECT * FROM if(
 condition=VSSAnalysisAge &amp;gt; 0,
 then={
 -- Process everything with the ntfs_vss accessor.
 SELECT * FROM Artifact.Generic.Collectors.File(
 Root=Device,
 Accessor="ntfs_vss",
 collectionSpec=rule_specs_ntfs + rule_specs_lazy_ntfs)
 }, else={
 SELECT * FROM chain(async=TRUE,
 a={

 -- Special files we access with the ntfs parser.
 SELECT * FROM Artifact.Generic.Collectors.File(
 Root=Device,
 Accessor="ntfs",
 collectionSpec=rule_specs_ntfs)
 }, b={

 -- Prefer the auto accessor if possible since it
 -- will fall back to ntfs if required but otherwise
 -- will be faster.
 SELECT * FROM Artifact.Generic.Collectors.File(
 Root=Device,
 Accessor=if(condition=UseAutoAccessor,
 then="auto", else="lazy_ntfs"),
 collectionSpec=rule_specs_lazy_ntfs)
 })
 })

 // This materializes all the files into memory and then into
 // a tempfile if the list is too long.
 LET all_results &amp;lt;= SELECT * FROM foreach(
 row=split(string=Device, sep="\\s*,\\s*"),
 query={
 SELECT * FROM all_results_from_device(Device=_value)
 })

 SELECT * FROM all_results WHERE _Source =~ "Metadata"

 - name: Uploads
 query: |
 SELECT * FROM all_results WHERE _Source =~ "Uploads"

 notebook:
 - type: vql_suggestion
 name: Post process collection
 template: |
 /*

 # Post process this collection.

 Uncomment the following and evaluate the cell to create new
 collections based on the files collected from this artifact.

 The below VQL will apply remapping so standard artifacts will
 see the KapeFiles.Targets collection below as a virtual
 Windows Client. The artifacts will be collected to a temporary
 container and then re-imported as new collections into this
 client.

 NOTE: This is only a stop gap in case the proper artifacts
 were not collected in the first place. Parsing artifacts
 through a remapped collection is not as accurate as parsing
 directly on the endpoint. See
 https://docs.velociraptor.app/training/playbooks/preservation/
 for more info.

 */
 LET _ &amp;lt;= import(artifact="Windows.KapeFiles.Remapping")

 LET tmp &amp;lt;= tempfile()

 LET Results = SELECT import_collection(filename=Container, client_id=ClientId) AS Import
 FROM collect(artifacts=[
 "Windows.Forensics.Usn",
 "Windows.NTFS.MFT",
 ],
 args=dict(`Windows.Forensics.Usn`=dict(),
 `Windows.NTFS.MFT`=dict()),
 output=tmp,
 remapping=GetRemapping(FlowId=FlowId, ClientId=ClientId))

 // SELECT * FROM Results


&lt;/code>&lt;/pre></description></item><item><title>Windows.Memory.Acquisition</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.memory.acquisition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.memory.acquisition/</guid><description>&lt;p>Acquires a full memory image using the built in WinPmem driver.&lt;/p>
&lt;p>NOTE: This artifact usually transfers a lot of data. You should
increase the default timeout to allow it to complete.&lt;/p>
&lt;p>Memory images are typically susceptible to a lot of smear. To
minimize this we need to acquire memory as quickly as possible. This
artifact offers a few compression methods for the output
file. Reducing the size of the file will decrease time needed for IO
but will increase CPU requirements so this is a
tradeoff. Empirically we found that using S2 compression gives a
reasonable compression and very high speed reducing acquisition time
from the no compression options significantly.&lt;/p>
&lt;p>To decompress the image you can use the &lt;a href="https://github.com/Velocidex/WinPmem/releases/download/v4.0.rc1/go-winpmem_amd64_1.0-rc1.exe" target="_blank" >Go Winpmem binary&lt;/a>
&lt;/p>
&lt;pre>&lt;code>go-winpmem.exe expand image.compressed image.raw
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Memory.Acquisition
description: |
 Acquires a full memory image using the built in WinPmem driver.

 NOTE: This artifact usually transfers a lot of data. You should
 increase the default timeout to allow it to complete.

 Memory images are typically susceptible to a lot of smear. To
 minimize this we need to acquire memory as quickly as possible. This
 artifact offers a few compression methods for the output
 file. Reducing the size of the file will decrease time needed for IO
 but will increase CPU requirements so this is a
 tradeoff. Empirically we found that using S2 compression gives a
 reasonable compression and very high speed reducing acquisition time
 from the no compression options significantly.

 To decompress the image you can use the [Go Winpmem binary](https://github.com/Velocidex/WinPmem/releases/download/v4.0.rc1/go-winpmem_amd64_1.0-rc1.exe)

 ```
 go-winpmem.exe expand image.compressed image.raw
 ```

precondition: |
 SELECT OS FROM info()
 WHERE OS = 'windows'
 AND Architecture = "amd64"
 AND version(function='winpmem') &amp;gt;= 0

parameters:
 - name: ServiceName
 description: Override the name of the driver service to install.
 - name: Compression
 default: None
 type: choices
 description: Type of compression to use (Recommended None, S2 or Snappy).
 choices:
 - None
 - S2
 - Snappy
 - Gzip

sources:
 - query: |
 LET Tempfile &amp;lt;= tempfile(extension=".pmem")

 LET ImageInfo &amp;lt;= winpmem(
 service=ServiceName,
 image_path=Tempfile,
 compression=Compression)

 SELECT ImageInfo, upload(file=Tempfile, name="PhysicalMemory.dd") AS Upload
 FROM stat(filename=Tempfile)
 WHERE log(message="Uploading %v bytes", args=Size)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Memory.Intezer</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.memory.intezer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.memory.intezer/</guid><description>&lt;p>This artifact will trigger an intezer agent scan on the endpoint.&lt;/p>
&lt;p>Scan: The scanner collects running code from memory and sends it to Intezer Analyze.
Scans take approximately five to ten minutes. The first scan may take additional time.
Please note: The scanner only collects executable code, not documents or any other
data that is not binary code.
Analyze: The collected modules are analyzed using Genetic Malware Analysis technology.
View results: &lt;a href="https://analyze.intezer.com/" target="_blank" >https://analyze.intezer.com/&lt;/a>
 endpoint analysis report.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Memory.Intezer
description: |
 This artifact will trigger an intezer agent scan on the endpoint.

 Scan: The scanner collects running code from memory and sends it to Intezer Analyze.
 Scans take approximately five to ten minutes. The first scan may take additional time.
 Please note: The scanner only collects executable code, not documents or any other
 data that is not binary code.
 Analyze: The collected modules are analyzed using Genetic Malware Analysis technology.
 View results: https://analyze.intezer.com/ endpoint analysis report.

author: Matt Green - @mgreen27

required_permissions:
 - EXECVE

tools:
 - name: Intezer
 url: https://analyze.intezer.com/api/scans/download

type: CLIENT

parameters:
 - name: ApiKey
 description: Intezer API key to scan with
 default:

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- first get context on target binary
 LET bin &amp;lt;= SELECT *
 FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="Intezer")

 -- execute payload
 SELECT * FROM execve(argv=[ bin.OSPath[0], '-k', ApiKey ])

&lt;/code>&lt;/pre></description></item><item><title>Windows.Memory.PEDump</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.memory.pedump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.memory.pedump/</guid><description>&lt;p>This artifact dumps a PE file from memory and uploads the file to
the server.&lt;/p>
&lt;p>NOTE: The output is not exactly the same as the original binary:&lt;/p>
&lt;ol>
&lt;li>Relocations are not fixed&lt;/li>
&lt;li>Due to ASLR the base address of the binary will not be the same as the original.&lt;/li>
&lt;/ol>
&lt;p>The result is usully much better than the binaries dumped from a
physical memory image (using e.g. Volatility) because reading
process memory will page in any mmaped pages as we copy them
out. Therefore we do not expect to have holes in the produced binary
as is often the case in memory analysis.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Memory.PEDump
description: |
 This artifact dumps a PE file from memory and uploads the file to
 the server.

 NOTE: The output is not exactly the same as the original binary:
 1. Relocations are not fixed
 2. Due to ASLR the base address of the binary will not be the same as the original.

 The result is usully much better than the binaries dumped from a
 physical memory image (using e.g. Volatility) because reading
 process memory will page in any mmaped pages as we copy them
 out. Therefore we do not expect to have holes in the produced binary
 as is often the case in memory analysis.

parameters:
 - name: Pid
 type: int
 description: The pid to dump
 - name: BaseOffset
 type: int
 description: |
 The base offset to dump from memory. If not provided, we dump
 all pe files from the PID.
 - name: FilenameRegex
 default: .+exe$
 description: Applies to the PE mapping filename to upload

sources:
 - query: |
 LET GetFilename(MappingName, BaseOffset) = if(
 condition=MappingName,
 then=format(format="dump_%#x_%s", args=[BaseOffset, basename(path=MappingName)]),
 else=format(format="dump_%#x", args=BaseOffset))

 SELECT format(format="%#x", args=Address) AS Address, Size, MappingName,
 State, Type, Protection, ProtectionMsg, read_file(
 accessor="process",
 filename=format(format="/%d", args=Pid),
 offset=Address,
 length=10) AS Header,
 upload(file=pe_dump(pid=Pid, base_offset=Address),
 name=GetFilename(MappingName=MappingName, BaseOffset=Address)) AS Upload
 FROM vad(pid=9604)
 WHERE Header =~ "^MZ" AND MappingName =~ FilenameRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Memory.ProcessDump</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.memory.processdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.memory.processdump/</guid><description>&lt;p>Dump process memory and upload to the server.&lt;/p>
&lt;p>Previously named Windows.Triage.ProcessMemory&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Memory.ProcessDump
description: |
 Dump process memory and upload to the server.

 Previously named Windows.Triage.ProcessMemory

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: ProcessRegex
 default: notepad
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: VelociraptorCompatible
 type: bool
 description: |
 If specified we upload a Velociraptor Compatible sparse file
 upload instead of a crash dump. This makes it easier to run
 postprocessing using Velociraptor

sources:
 - query: |
 LET processes = SELECT Name as ProcessName, CommandLine, Pid
 FROM pslist()
 WHERE Name =~ ProcessRegex
 AND str(str=Pid) =~ PidRegex

 LET Regions(Pid) = SELECT dict(Offset=Address, Length=Size) AS Sparse
 FROM vad(pid=Pid)
 WHERE Protection =~ "r"

 LET UploadDump(Pid, ProcessName, CommandLine) =
 SELECT * FROM if(condition= VelociraptorCompatible,
 then={
 SELECT ProcessName, CommandLine, Pid,
 upload(accessor="sparse",
 file=pathspec(
 Path=serialize(item=Regions(Pid=Pid).Sparse),
 DelegateAccessor="process",
 DelegatePath=format(format="/%d", args=Pid)),
 name=pathspec(Path=format(format="%d.dd", args=Pid))) AS ProcessMemory
 FROM scope()
 }, else={
 SELECT ProcessName, CommandLine, Pid, OSPath,
 upload(file=OSPath) as CrashDump
 FROM proc_dump(pid=Pid)
 })

 SELECT * FROM foreach(
 row=processes,
 query={
 SELECT * FROM UploadDump(Pid=Pid, ProcessName = ProcessName, CommandLine = CommandLine)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Memory.ProcessInfo</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.memory.processinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.memory.processinfo/</guid><description>&lt;p>This artifact returns process information obtained by parsing the PEB directly.&lt;/p>
&lt;p>Renamed Windows.Forensics.ProcessInfo&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Memory.ProcessInfo
description: |
 This artifact returns process information obtained by parsing the PEB directly.

 Renamed Windows.Forensics.ProcessInfo

parameters:
 - name: ProcessNameRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: ImagePathRegex
 default: .
 type: regex
 - name: CommandLineRegex
 default: .
 type: regex

sources:
- query: |
 LET profile = '''[
 ["PEB",0 , [
 # https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb
 ["ProcessParameters", 32, "Pointer", {
 "type": "ProcessParameters",
 }],
 ]],
 ["ProcessParameters", 0, [
 ["ImagePathName", 96, "UNICODE_STRING"],
 ["CommandLine", 112, "UNICODE_STRING"],
 ["CurrentDirectory", 56, "CURDIR"],
 ["EnvironmentSize", 1008, "uint64"],
 ["Environment", 128, "Pointer", {
 "type": "String",
 "type_options": {
 "length": "x=&amp;gt;x.EnvironmentSize",
 "encoding": "utf16",
 "max_length": 10000,
 "term": "",
 }}]
 ]],
 ["CURDIR", 0, [
 ["DosPath", 0, "UNICODE_STRING"],
 ]],
 ["UNICODE_STRING", 16, [
 ["Length", 0, "uint16"],
 ["Buffer", 8, "Pointer", {
 "type": "String",
 "type_options": {
 "encoding": "utf16",
 "length": "x=&amp;gt;x.Length",
 "term": "",
 }}],
 ]]
 ]'''

 LET ParsePeb(PID) = SELECT Name,
 format(format="%0#x", args=PebBaseAddress) AS PebBaseAddress, Pid,
 parse_binary(accessor="process",
 filename=format(format="/%v", args=PID),
 profile=profile,
 struct="PEB",
 offset=PebBaseAddress) AS Data
 FROM pslist(pid=PID)

 -- The Environment string consists of null terminated
 -- lines. Each line contains the variable name followed by an =
 -- sign and then the variable value.
 LET SplitEnv(EnvString) = SELECT parse_string_with_regex(
 string=_value, regex="^(?P&amp;lt;Name&amp;gt;[^=]*)=(?P&amp;lt;Value&amp;gt;.+)") AS Line
 FROM foreach(row=split(string=EnvString, sep="\x00"))
 WHERE Line

 -- Massage the parsed data into a structured table
 LET Calculate(PID) = SELECT Name, PebBaseAddress, Pid,
 Data.ProcessParameters.ImagePathName.Buffer AS ImagePathName,
 Data.ProcessParameters.CommandLine.Buffer AS CommandLine,
 Data.ProcessParameters.CurrentDirectory.DosPath.Buffer AS CurrentDirectory,
 -- Build an Env dict out of the parsed string.
 to_dict(item={
 SELECT Line.Name AS _key, Line.Value AS _value
 FROM SplitEnv(EnvString=Data.ProcessParameters.Environment)
 }) AS Env
 FROM ParsePeb(PID=PID)

 SELECT * FROM foreach(row={
 SELECT Pid FROM pslist()
 WHERE Name =~ ProcessNameRegex
 AND str(str=Pid) =~ PidRegex
 AND str(str=ImagePathName) =~ ImagePathRegex
 AND str(str=CommandLine) =~ CommandLineRegex
 }, query={
 SELECT * FROM Calculate(PID=Pid)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.ArpCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.arpcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.arpcache/</guid><description>&lt;p>Address resolution cache, both static and dynamic (from ARP, NDP).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Network.ArpCache
description: Address resolution cache, both static and dynamic (from ARP, NDP).
parameters:
 - name: wmiQuery
 default: |
 SELECT AddressFamily, Store, State, InterfaceIndex, IPAddress,
 InterfaceAlias, LinkLayerAddress
 from MSFT_NetNeighbor
 - name: wmiNamespace
 default: ROOT\StandardCimv2

 - name: kMapOfState
 default: |
 {
 "0": "Unreachable",
 "1": "Incomplete",
 "2": "Probe",
 "3": "Delay",
 "4": "Stale",
 "5": "Reachable",
 "6": "Permanent",
 "7": "TBD"
 }

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET interfaces &amp;lt;=
 SELECT Index, HardwareAddr, IP
 FROM Artifact.Windows.Network.InterfaceAddresses()

 LET arp_cache = SELECT if(condition=AddressFamily=23,
 then="IPv6",
 else=if(condition=AddressFamily=2,
 then="IPv4",
 else=AddressFamily)) as AddressFamily,

 if(condition=Store=0,
 then="Persistent",
 else=if(condition=(Store=1),
 then="Active",
 else="?")) as Store,

 get(item=parse_json(data=kMapOfState),
 member=encode(string=State, type='string')) AS State,
 InterfaceIndex, IPAddress,
 InterfaceAlias, LinkLayerAddress
 FROM wmi(query=wmiQuery, namespace=wmiNamespace)

 SELECT * FROM foreach(
 row=arp_cache,
 query={
 SELECT AddressFamily, Store, State, InterfaceIndex,
 IP AS LocalAddress, HardwareAddr, IPAddress as RemoteAddress,
 InterfaceAlias, LinkLayerAddress AS RemoteMACAddress
 FROM interfaces
 WHERE InterfaceIndex = Index
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.InterfaceAddresses</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.interfaceaddresses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.interfaceaddresses/</guid><description>&lt;p>Network interfaces and relevant metadata.&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Network.InterfaceAddresses
description: Network interfaces and relevant metadata.
sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET interface_address =
 SELECT Index, MTU, Name, HardwareAddr, Flags, Addrs
 from interfaces()

 SELECT Index, MTU, Name, HardwareAddr.String As HardwareAddr,
 Flags, Addrs.IP as IP, Addrs.Mask.String as Mask
 FROM flatten(query=interface_address)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.ListeningPorts</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.listeningports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.listeningports/</guid><description>&lt;p>Processes with listening (bound) network sockets/ports.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Network.ListeningPorts
description: Processes with listening (bound) network sockets/ports.
sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET process &amp;lt;= SELECT Name, Pid from pslist()

 SELECT * from foreach(
 row={
 SELECT Pid AS PortPid, Laddr.Port AS Port,
 TypeString as Protocol, FamilyString as Family,
 Laddr.IP as Address
 FROM netstat() where Status = 'LISTEN'
 },
 query={
 SELECT Pid, Name, Port, Protocol, Family, Address
 FROM process where Pid = PortPid
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.Netstat</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.netstat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.netstat/</guid><description>&lt;p>Show information about open sockets. On windows the time when the
socket was first bound is also shown.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Network.Netstat
description: |
 Show information about open sockets. On windows the time when the
 socket was first bound is also shown.

sources:
- precondition: SELECT OS From info() where OS = 'windows'
 query: |
 LET processes &amp;lt;= SELECT Name, Pid AS ProcPid FROM pslist()
 SELECT Pid, {
 SELECT Name from processes
 WHERE Pid = ProcPid
 } AS Name, FamilyString as Family,
 TypeString as Type,
 Status,
 Laddr.IP, Laddr.Port,
 Raddr.IP, Raddr.Port,
 Timestamp
 FROM netstat()

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.NetstatEnriched</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.netstatenriched/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.netstatenriched/</guid><description>&lt;p>NetstatEnhanced adds additional data points to the Netstat artifact and
enables verbose search options.&lt;/p>
&lt;p>Examples include: Process name and path, authenticode information or
network connection details.&lt;/p>
&lt;p>WARNING:
KillProcess - attempts to use Taskill to kill the processes returned.
DumpProcess - dumps the process as a sparse file for post processing.&lt;/p>
&lt;p>Please only use these switches after scoping as there are no guardrails on
shooting yourself in the foot.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Network.NetstatEnriched
author: "Matt Green - @mgreen27"
description: |
 NetstatEnhanced adds additional data points to the Netstat artifact and
 enables verbose search options.

 Examples include: Process name and path, authenticode information or
 network connection details.

 WARNING:
 KillProcess - attempts to use Taskill to kill the processes returned.
 DumpProcess - dumps the process as a sparse file for post processing.

 Please only use these switches after scoping as there are no guardrails on
 shooting yourself in the foot.

required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: IPRegex
 description: "regex search over IP address fields."
 default: .
 type: regex
 - name: PortRegex
 description: "regex search over port fields."
 default: .
 type: regex
 - name: Family
 description: "IP version family selection"
 type: choices
 default: ALL
 choices:
 - ALL
 - IPv4
 - IPv6
 - name: FamilyMap
 type: hidden
 default: |
 Choice,Regex
 ALL,"."
 IPv4,"^IPv4$"
 IPv6,"^IPv6$"

 - name: Type
 description: "Transport protocol type selection"
 type: choices
 default: ALL
 choices:
 - ALL
 - TCP
 - UDP
 - name: TypeMap
 type: hidden
 default: |
 Choice,Regex
 ALL,"."
 TCP,"^TCP$"
 UDP,"^UDP$"

 - name: Status
 description: "TCP status selection"
 type: choices
 default: ALL
 choices:
 - ALL
 - ESTABLISHED
 - LISTENING
 - OTHER
 - name: StatusMap
 type: hidden
 default: |
 Choice,Regex
 ALL,"."
 ESTABLISHED,"^ESTAB$"
 LISTENING,"^LISTEN$"
 OTHER,"CLOS|SENT|RCVD|LAST|WAIT|DELETE"

 - name: ProcessNameRegex
 description: "regex search over source process name"
 default: ^(malware\.exe|.*)$
 type: regex
 - name: ProcessPathRegex
 description: "regex search over source process path"
 default: .
 type: regex
 - name: CommandLineRegex
 description: "regex search over source process commandline"
 default: .
 type: regex
 - name: HashRegex
 description: "regex search over source process hash"
 default: .
 type: regex
 - name: UsernameRegex
 description: "regex search over source process user context"
 default: .
 type: regex
 - name: AuthenticodeSubjectRegex
 description: "regex search over source Authenticode Subject"
 default: .
 type: regex
 - name: AuthenticodeIssuerRegex
 description: "regex search over source Authenticode Issuer"
 default: .
 type: regex
 - name: AuthenticodeVerified
 description: "Authenticode signiture selection"
 type: choices
 default: ALL
 choices:
 - ALL
 - TRUSTED
 - UNSIGNED
 - NOT TRUSTED
 - name: AuthenticodeVerifiedMap
 type: hidden
 default: |
 Choice,Regex
 ALL,"."
 TRUSTED,"^trusted$"
 UNSIGNED,"^unsigned$"
 NOT TRUSTED,"unsigned|disallowed|untrusted|error"
 - name: DumpProcess
 description: "WARNING: If selected will attempt to dump process from all results."
 type: bool
 - name: KillProcess
 description: "WARNING: If selected will attempt to kill process from all results."
 type: bool
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - name: Netstat
 query: |
 LET VerifiedRegex &amp;lt;= SELECT Regex
 FROM parse_csv(filename=AuthenticodeVerifiedMap, accessor="data")
 WHERE Choice=AuthenticodeVerified LIMIT 1
 LET StatusRegex &amp;lt;= SELECT Regex
 FROM parse_csv(filename=StatusMap, accessor="data")
 WHERE Choice=Status LIMIT 1
 LET FamilyRegex &amp;lt;= SELECT Regex
 FROM parse_csv(filename=FamilyMap, accessor="data")
 WHERE Choice=Family LIMIT 1
 LET TypeRegex &amp;lt;= SELECT Regex
 FROM parse_csv(filename=TypeMap, accessor="data")
 WHERE Choice=Type LIMIT 1

 LET process &amp;lt;= SELECT Pid as PsId,
 Ppid,
 Name,
 CommandLine,
 Exe,
 Hash,
 Authenticode,
 Username
 FROM Artifact.Windows.System.Pslist(
 DISABLE_DANGEROUS_API_CALLS=DISABLE_DANGEROUS_API_CALLS)
 WHERE Name =~ ProcessNameRegex
 AND Exe =~ ProcessPathRegex
 AND CommandLine =~ CommandLineRegex

 LET results = SELECT Pid,
 { SELECT Ppid FROM process WHERE PsId = Pid } as Ppid,
 { SELECT Name FROM process WHERE PsId = Pid } as Name,
 { SELECT Exe FROM process WHERE PsId = Pid } as Path,
 { SELECT CommandLine FROM process WHERE PsId = Pid } as CommandLine,
 { SELECT Hash FROM process WHERE PsId = Pid } as Hash,
 { SELECT Username FROM process WHERE PsId = Pid } as Username,
 { SELECT Authenticode FROM process WHERE PsId = Pid } as Authenticode,
 FamilyString as Family,
 TypeString as Type,
 Status,
 Laddr.IP as Laddr,
 Laddr.Port as Lport,
 Raddr.IP as Raddr,
 Raddr.Port as Rport,
 Timestamp
 FROM netstat()
 WHERE
 Name =~ ProcessNameRegex
 AND Path =~ ProcessPathRegex
 and CommandLine =~ CommandLineRegex
 and Username =~ UsernameRegex
 and ( Hash.MD5 =~ HashRegex
 or Hash.SHA1 =~ HashRegex
 or Hash.SHA256 =~ HashRegex
 or not Hash )
 and ( Authenticode.IssuerName =~ AuthenticodeIssuerRegex or not Authenticode )
 and ( Authenticode.SubjectName =~ AuthenticodeSubjectRegex or not Authenticode )
 and ( Authenticode.Trusted =~ VerifiedRegex.Regex[0] or not Authenticode )
 and Status =~ StatusRegex.Regex[0]
 and Family =~ FamilyRegex.Regex[0]
 and Type =~ TypeRegex.Regex[0]
 and ( format(format="%v", args=Laddr) =~ IPRegex
 or format(format="%v", args=Raddr) =~ IPRegex )
 and ( format(format="%v", args=Lport) =~ PortRegex
 or format(format="%v", args=Rport) =~ PortRegex )

 LET Regions(Pid) = SELECT dict(Offset=Address, Length=Size) AS Sparse
 FROM vad(pid=Pid)
 WHERE Protection =~ "r"
 LET dump = SELECT *,
 upload(accessor="sparse",
 file=pathspec(
 Path=serialize(item=Regions(Pid=Pid).Sparse),
 DelegateAccessor="process",
 DelegatePath=format(format="/%d", args=Pid)),
 name=pathspec(Path=format(format="%d.dd", args=Pid))) AS ProcessMemory
 FROM results
 LET kill = SELECT *, pskill(pid=Pid) AS KillProcess
 FROM results
 LET dumpandkill = SELECT *, pskill(pid=Pid) AS KillProcess
 FROM dump

 SELECT * FROM switch(
 a = {
 SELECT *, if(condition= KillProcess=Null,then='Success',else=KillProcess) AS KillProcess
 FROM if(condition= DumpProcess AND KillProcess, then= dumpandkill )},
 b = { SELECT * FROM if(condition= DumpProcess, then= dump )},
 c = {
 SELECT *, if(condition= KillProcess=Null,then='Success',else=KillProcess) AS KillProcess
 FROM if(condition= KillProcess, then= kill)
 },
 catch = results
 )

&lt;/code>&lt;/pre></description></item><item><title>Windows.Network.PacketCapture</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.network.packetcapture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.network.packetcapture/</guid><description>&lt;p>Run this artifact twice, the first time, set the StartTrace flag to
True to start the PCAP collection, this will have the VQL return a
single row (the TraceFile generated) When you want to stop
collecting, and transform this TraceFile to a PCAP, re-run this
artifact with StartTrace as false, and put path of the .etl file
created in the previous step in the TraceFile. This will then
convert the .etl to a PCAP and upload it.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Network.PacketCapture
author: Cybereason &amp;lt;omer.yampel@cybereason.com&amp;gt;
description: |
 Run this artifact twice, the first time, set the StartTrace flag to
 True to start the PCAP collection, this will have the VQL return a
 single row (the TraceFile generated) When you want to stop
 collecting, and transform this TraceFile to a PCAP, re-run this
 artifact with StartTrace as false, and put path of the .etl file
 created in the previous step in the TraceFile. This will then
 convert the .etl to a PCAP and upload it.

precondition: SELECT OS From info() where OS = 'windows'

tools:
 - name: etl2pcapng
 url: https://github.com/microsoft/etl2pcapng/releases/download/v1.4.0/etl2pcapng.zip

parameters:
 - name: StartTrace
 type: bool
 default: Y
 - name: TraceFile
 type: string
 default:

sources:
 - query: |
 LET tool_zip = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="etl2pcapng", IsExecutable=FALSE)

 LET ExePath &amp;lt;= tempfile(extension='.exe')

 LET etl2pcapbin &amp;lt;= SELECT
 copy(
 filename=pathspec(
 DelegatePath=tool_zip[0].OSPath,
 Path="etl2pcapng/x64/etl2pcapng.exe"),
 dest=ExePath,
 accessor='zip'
 ) AS file
 FROM scope()

 LET outfile &amp;lt;= tempfile(extension=".pcapng")

 LET stop_trace = SELECT * FROM execve(
 argv=['netsh', 'trace', 'stop'])

 LET convert_pcap = SELECT * FROM execve(
 argv=[etl2pcapbin[0].file, TraceFile, outfile])

 LET end_trace = SELECT * FROM chain(
 a=stop_trace,
 b=convert_pcap,
 c={SELECT upload(file=outfile) AS Upload FROM scope()},
 d={SELECT upload(file=TraceFile) AS Upload FROM scope()}
 )

 LET launch_trace =
 SELECT
 split(string=split(
 string=Stdout,
 sep="Trace File: ")[1],
 sep="\r\nAppend:")[0] as etl_file
 FROM execve(argv=["netsh", "trace", "start", "capture=yes"])
 WHERE log(message="stderr: " + Stderr), log(message="stdout: " + Stdout)

 SELECT * FROM if(
 condition=StartTrace,
 then={ SELECT * FROM launch_trace},
 else={ SELECT * FROM end_trace }
 )

&lt;/code>&lt;/pre></description></item><item><title>Windows.NTFS.ADSHunter</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.adshunter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.adshunter/</guid><description>&lt;p>This artifact hunts
for Alternate Data Streams on NTFS file systems.
Adversaries may use NTFS file attributes for covert storage in order to evade
detection.
Alternate Data Streams (ADS) are additional $DATA attributes for an MFT entry in
NTFS file systems. In NTFS, the primary $DATA attribute is
never named but subsequent $DATA attributes must be named.&lt;/p>
&lt;p>Targeting is via mix of path globs and include / exclude regex.&lt;/p>
&lt;ul>
&lt;li>TargetGlob is a glob to target for ADS. NOTE *** is recursive. To hit C drive we need to search for C:*&lt;/li>
&lt;li>AdsName is name in glob format: e.g &lt;em>, Zone.Identifier or Zone.&lt;/em>.&lt;/li>
&lt;li>AdsNameExclusion - A regex value, common ADS added to exclusions have been
added by default. The artifact also excludes NTFS system files by default.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.NTFS.ADSHunter
author: "Matt Green - @mgreen27"
description: |
 This artifact hunts
 for Alternate Data Streams on NTFS file systems. 
 Adversaries may use NTFS file attributes for covert storage in order to evade 
 detection. 
 Alternate Data Streams (ADS) are additional $DATA attributes for an MFT entry in 
 NTFS file systems. In NTFS, the primary $DATA attribute is 
 never named but subsequent $DATA attributes must be named.
 
 Targeting is via mix of path globs and include / exclude regex. 
 
 - TargetGlob is a glob to target for ADS. NOTE **\* is recursive. To hit C drive we need to search for C:\*
 - AdsName is name in glob format: e.g *, Zone.Identifier or Zone.*. 
 - AdsNameExclusion - A regex value, common ADS added to exclusions have been 
 added by default. The artifact also excludes NTFS system files by default.

reference:
 - https://attack.mitre.org/techniques/T1564/004/
 
type: CLIENT

parameters:
 - name: TargetGlob
 description: A Glob to search for target files. **\* is recursive. To hit C drive we need to search for C:\*
 default: C:\{*,**\*}
 - name: AdsNameGlob
 description: AdsName in glob format. e.g *, Zone.Identifier or Zone.*
 default: '*'
 - name: AdsNameExclusion
 description: Regex of ADS name to exclude.
 default: 'SmartScreen|WofCompressedData|encryptable|favicon|AFP_AfpInfo|OECustomProperty|Win32App_1|com\.dropbox|icasource|\{\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\}\.(MetaData|SyncRootIdentity)'
 type: regex
 - name: AdsContentRegex
 description: ADS content to search for by regex.
 default: .
 type: regex
 - name: AdsContentExclusion
 description: ADS content to exclude by regex.
 type: regex
 - name: MinSize
 description: Optional - only include alternate data streams above this size in bytes.
 type: int
 - name: MaxSize
 description: Optional - only include alternate data streams below this size in bytes.
 type: int
 - name: UploadDataStream
 description: If selected wil upload non-resident data streams.
 type: bool
 
sources:
 - query: |
 -- Collect ADS entries using glob but exclude ntfs objects that contain ads
 LET ads_entries = SELECT OSPath,
 split(string=Name,sep=':')[1] as AdsName,
 Data.mft as Inode,
 Size,
 OSPath.Dirname + split(string=Name,sep=':')[0] as HostObject,
 dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as HostTimestampsSI
 FROM glob(globs=TargetGlob + ":" + AdsNameGlob, 
 accessor="ntfs",
 nosymlink='Y')
 WHERE
 NOT OSPath =~ '''[a-z]:\\(\$Extend\\|\$Secure|\$UpCase|\$BadClus|\$Bitmap|\$Repair)'''
 AND if(condition=MinSize,
 then= Size &amp;gt; MinSize,
 else= True )
 AND if(condition= MaxSize,
 then= Size &amp;lt; MaxSize,
 else= True )
 AND NOT if(condition=AdsNameExclusion,
 then= AdsName =~ AdsNameExclusion,
 else= False )
 
 -- Extract content and filter
 LET hits = SELECT *,
 read_file(filename=OSPath[0]+Inode, accessor="mft",offset=0,length=1024) as AdsContent -- only upload first 1k of each hit
 FROM ads_entries
 WHERE AdsContent =~ AdsContentRegex
 AND NOT if(condition=AdsContentExclusion,
 then= AdsContent =~ AdsContentExclusion,
 else= False )
 
 -- upload hits
 LET upload_hits = SELECT *, 
 upload(file=OSPath,accessor='ntfs') as Upload
 FROM hits
 
 -- output rows 
 SELECT * FROM if(condition=UploadDataStream,
 then= upload_hits,
 else= hits)
&lt;/code>&lt;/pre></description></item><item><title>Windows.NTFS.ExtendedAttributes</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.extendedattributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.extendedattributes/</guid><description>&lt;p>Adversaries may use NTFS file attributes for defence evasion to hide malicious
data. This artifact parses NTFS Extended attributes ($EA).
The artifact firstly queries the MFT, then enriches NTFS data to check for
Extended Attributes. Several filters can be applied such as file search,
Extended Attribute size, name or content.&lt;/p>
&lt;p>NOTE:
By default an EAName exclusion has been applied to filter some common $EA names
found on Windows System. Recommended hunt would be by rare name or $EA size.
By default we only parse $EA and discard $EA_INFORMATION. $EA_INFORMATION
typically is very small and available in NtfsMetadata field of output.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.NTFS.ExtendedAttributes
author: "Matt Green - @mgreen27"
description: |
 Adversaries may use NTFS file attributes for defence evasion to hide malicious
 data. This artifact parses NTFS Extended attributes ($EA).
 The artifact firstly queries the MFT, then enriches NTFS data to check for
 Extended Attributes. Several filters can be applied such as file search,
 Extended Attribute size, name or content.

 NOTE:
 By default an EAName exclusion has been applied to filter some common $EA names
 found on Windows System. Recommended hunt would be by rare name or $EA size.
 By default we only parse $EA and discard $EA_INFORMATION. $EA_INFORMATION
 typically is very small and available in NtfsMetadata field of output.


reference:
 - https://attack.mitre.org/techniques/T1564/004/
 - https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea
 - http://inform.pucp.edu.pe/~inf232/Ntfs/ntfs_doc_v0.5/attributes/ea.html

parameters:
 - name: MFTDrive
 default: "C:"
 - name: HostPathRegex
 description: "Regex search over OSPath."
 default: "."
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for host files with timestamps after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for host files with timestamps before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: AllDrives
 type: bool
 description: "Select MFT search on all attached ntfs drives."
 - name: EANameRegex
 description: "$EA Name regex filter to include in results."
 default: .
 type: regex
 - name: EANameExclusion
 description: Regex of ADS name to exclude.
 default: ^(\$KERNEL\.PURGE\.(ESBCACHE|APPXFICACHE)|\$CI\.CATALOGHINT|\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\.CSC\.\w+)$
 type: regex
 - name: EAContentRegex
 description: "$EA content to search for by regex."
 default: .
 type: regex
 - name: SizeMax
 type: int64
 description: "Total $EA attributes in the MFT under this size in bytes."
 default: 100000
 - name: SizeMin
 type: int64
 description: "Total $EA attributes in the MFT over this size in bytes."
 default: 0
 - name: UploadHits
 type: bool
 description: "Upload complete complete attribute data."

sources:
 - query: |
 LET Profile = '''[
 ["EAData", 0, [
 ["Entries", 0, "Array",{
 "type": "EA",
 "count": 99 }],
 ]],
 ["EA", "x=&amp;gt;x.__NextOffset", [
 ["__NextOffset", 0, "uint32"],
 ["__NameLength", 5, "uint8"],
 ["__ValueLength", 6, "uint16"],
 ["Name", 8, String, {
 length: "x=&amp;gt;x.__NameLength" }],
 ["Flags", 4, "uint8"],
 ["ValueLength", 6, "uint16"],
 ["Value", "x=&amp;gt;9 + x.__NameLength", "String",{
 term: "********** NO TERM **********",
 length: "x=&amp;gt;x.__ValueLength",
 max_length: 10000 }],
 ]]
 ]'''

 -- find all MFT entries with an $EA - ignore VSS
 LET mft_entries = SELECT *,
 parse_ntfs(mft=EntryNumber, device=MFTDrive ) as NtfsMetadata
 FROM Artifact.Windows.NTFS.MFT(
 MFTDrive=MFTDrive,
 Accessor='ntfs',
 PathRegex=HostPathRegex,
 DateAfter=DateAfter,
 DateBefore=DateBefore,
 AllDrives=AllDrives)
 WHERE -- NOT OSPath =~ 'HarddiskVolumeShadowCopy' AND
 NtfsMetadata.Attributes.Type =~ '^\\$EA'

 -- enrich results for size filter, dropping metadata field output as this attribute is viewable in Ntfs field.
 LET enriched_results = SELECT OSPath,NtfsMetadata,
 --{ SELECT * FROM NtfsMetadata.Attributes WHERE Type = '$EA_INFORMATION'} as _EA_INFORMATION_Metadata,
 { SELECT * FROM NtfsMetadata.Attributes WHERE Type = '$EA'} as _EA_Metadata
 FROM mft_entries
 WHERE _EA_Metadata.Size &amp;gt; SizeMin AND _EA_Metadata.Size &amp;lt; SizeMax

 -- parse EA attribute
 LET parse_ea = SELECT OSPath, NtfsMetadata, _EA_Metadata,
 parse_binary(accessor="mft",
 filename=NtfsMetadata.Device + _EA_Metadata.Inode,
 profile=Profile, struct="EAData").Entries AS EA
 FROM enriched_results

 -- flattern results and output a row for each EA parsed
 LET flatten_results = SELECT OSPath, NtfsMetadata, EA, _EA_Metadata
 FROM flatten(
 query={
 SELECT *
 {
 SELECT Name,Value,Flags,ValueLength
 FROM foreach(row=EA)
 } as EA
 FROM parse_ea
 WHERE EA.Name =~ EANameRegex
 AND NOT if(condition=EANameExclusion,
 then= EA.Name =~ EANameExclusion,
 else= False )
 AND EA.Value =~ EAContentRegex
 })

 -- upload extended EA data
 LET upload_hits=SELECT OSPath, NtfsMetadata, EA,
 upload(file=NtfsMetadata.Device + _EA_Metadata.Inode,accessor='mft') AS Upload
 --upload(file=Ntfs.Device + _EA_INFORMATION_Metadata.Inode,accessor='mft') AS EA_INFORMATION_Upload
 FROM flatten_results

 -- return rows
 SELECT *
 FROM if(condition=UploadHits,
 then=upload_hits,
 else=flatten_results)

&lt;/code>&lt;/pre></description></item><item><title>Windows.NTFS.I30</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.i30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.i30/</guid><description>&lt;p>Carve the $I30 index stream for a directory.&lt;/p>
&lt;p>This can reveal previously deleted files. Optionally upload the I30
stream to the server as well.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.NTFS.I30
description: |
 Carve the $I30 index stream for a directory.

 This can reveal previously deleted files. Optionally upload the I30
 stream to the server as well.

parameters:
 - name: DirectoryGlobs
 default: C:\Users\*

 - name: SlackOnly
 description: "Select to return only entries from Slack space."
 type: bool

 - name: AlsoUpload
 description: Select to also upload the raw $I30 stream.
 type: bool

sources:
 - name: UploadI30Streams
 precondition:
 SELECT * FROM info() where OS = 'windows' AND AlsoUpload

 query: |
 LET inodes = SELECT OSPath, Data.mft AS MFT,
 parse_ntfs(device=OSPath, inode=Data.mft) AS MFTInfo
 FROM glob(globs=DirectoryGlobs, accessor="ntfs")
 WHERE IsDir

 LET upload_streams = SELECT * FROM foreach(
 row=MFTInfo.Attributes,
 query={
 SELECT _value.Type AS Type,
 _value.TypeId AS TypeId,
 _value.Id AS Id,
 _value.Inode AS Inode,
 _value.Size AS Size,
 _value.Name AS Name,
 _value.OSPath AS OSPath,
 upload(accessor="mft",
 file=MFTInfo.Device + _value.Inode,
 name=pathspec(Path=_value.OSPath + "/" + _value.Inode)) AS IndexUpload
 FROM scope()
 WHERE Type =~ "INDEX_"
 })

 SELECT * FROM foreach(row=inodes, query=upload_streams)

 - name: AnalyzeI30
 precondition:
 SELECT * FROM info() where OS = 'windows'

 query: |
 LET inodes = SELECT OSPath, Data.mft AS MFT,
 parse_ntfs(device=OSPath, inode=Data.mft) AS MFTInfo
 FROM glob(globs=DirectoryGlobs, accessor="ntfs")
 WHERE IsDir

 SELECT * FROM foreach(
 row=inodes,
 query={
 SELECT OSPath, Name, NameType, Size, AllocatedSize,
 IsSlack, SlackOffset, Mtime, Atime, Ctime, Btime, MFTId
 FROM parse_ntfs_i30(device=MFTInfo.Device, inode=MFT)
 WHERE IsSlack = true or NOT SlackOnly
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.NTFS.MFT</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.mft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.mft/</guid><description>&lt;p>This artifact parses $MFT files and returns rows of each in scope MFT record.
This artifact can be used as the basis for other artifacts where the MFT needs
to be queried or for deleted file recovery.&lt;/p>
&lt;p>For deleted file recovery: Take the MFT ID of a file of interest and provide
it to the Windows.NTFS.Recover artifact.&lt;/p>
&lt;p>To query all attached ntfs drives: check the AllDrives switch.&lt;/p>
&lt;p>I have added several filters to uplift search capabilities from the original
MFT artifact. Due to the multi-drive features, the MFTPath will output the MFT
path of the entry.&lt;/p>
&lt;p>Available filters include:&lt;/p>
&lt;ul>
&lt;li>PathRegex (OSPath): e.g &lt;code>^C:\\folder\\file\.ext$&lt;/code> or partial &lt;code>\\folder\\folder2\\&lt;/code> or &lt;code>string|string2|string3&lt;/code>&lt;/li>
&lt;li>Fileregex: &lt;code>^filename.ext$&lt;/code> or partial &lt;code>string1|string2&lt;/code>&lt;/li>
&lt;li>Time bounds to select files with a timestamp within time ranges&lt;/li>
&lt;li>FileSize bounds&lt;/li>
&lt;li>MFTDrive: drive to target collection and show as source in results during offline pricessing.&lt;/li>
&lt;li>MFTPath: optional filter for offline MFT processing.&lt;/li>
&lt;/ul>
&lt;p>NOTE: Generally more efficient to filter on filename.
Multiple filters are cumulative.
OSPath output now uses expected Windows backslash &amp;ldquo;&lt;code>\&lt;/code>&amp;rdquo;.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.NTFS.MFT
author: "Matt Green - @mgreen27"
description: |
 This artifact parses $MFT files and returns rows of each in scope MFT record.
 This artifact can be used as the basis for other artifacts where the MFT needs
 to be queried or for deleted file recovery.

 For deleted file recovery: Take the MFT ID of a file of interest and provide
 it to the Windows.NTFS.Recover artifact.

 To query all attached ntfs drives: check the AllDrives switch.

 I have added several filters to uplift search capabilities from the original
 MFT artifact. Due to the multi-drive features, the MFTPath will output the MFT
 path of the entry.

 Available filters include:

 - PathRegex (OSPath): e.g `^C:\\folder\\file\.ext$` or partial `\\folder\\folder2\\` or `string|string2|string3`
 - Fileregex: `^filename.ext$` or partial `string1|string2`
 - Time bounds to select files with a timestamp within time ranges
 - FileSize bounds
 - MFTDrive: drive to target collection and show as source in results during offline pricessing.
 - MFTPath: optional filter for offline MFT processing.

 NOTE: Generally more efficient to filter on filename.
 Multiple filters are cumulative.
 OSPath output now uses expected Windows backslash "`\`".

parameters:
 - name: MFTDrive
 description: |
 The path to to the drive that holds the MFT file (can be a pathspec). This
 drive is also used for results for offline processing.
 default: "C:"
 - name: MFTPath
 description: Optional path to MFT file for offline processing.
 default:
 - name: Accessor
 default: ntfs
 - name: AllNtfs
 type: bool
 description: "Return all NTFS metadata with results."
 - name: PathRegex
 description: "Regex search over OSPath."
 default: "."
 type: regex
 - name: FileRegex
 description: "Regex search over File Name"
 default: "."
 type: regex
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: SizeMax
 type: int64
 description: "Entries in the MFT under this size in bytes."
 - name: SizeMin
 type: int64
 description: "Entries in the MFT over this size in bytes."
 - name: AllDrives
 type: bool
 description: "Select MFT search on all attached ntfs drives."
 - name: NTFS_INCLUDE_SHORT_NAMES
 description: See all names referencing the file including short names.
 type: bool

sources:
 - query: |
 -- Cater for older clients which do not have the Links column.
 LET parse_mft_version(filename, accessor, prefix) = SELECT *
 FROM if(condition=version(plugin="parse_mft") &amp;gt; 1,
 then={ SELECT *
 FROM parse_mft(
 filename=filename, accessor=accessor, prefix=prefix)
 },

 -- Older versions do not have the prefix parameter in
 -- the plugin and need the prefix prepended to the
 -- OSPath
 else={ SELECT *,
 prefix + OSPath AS Links,
 prefix + OSPath AS OSPath
 FROM parse_mft(
 filename=filename, accessor=accessor)
 })

 -- The path to to the drive that holds the MFT file (can be a pathspec)
 LET Drive &amp;lt;= pathspec(parse=MFTDrive, path_type="ntfs")

 -- time testing
 LET time_test(stamp) =
 if(condition= DateBefore AND DateAfter,
 then= stamp &amp;lt; DateBefore AND stamp &amp;gt; DateAfter,
 else=
 if(condition=DateBefore,
 then= stamp &amp;lt; DateBefore,
 else=
 if(condition= DateAfter,
 then= stamp &amp;gt; DateAfter,
 else= True
 )))

 -- find all ntfs drives
 LET ntfs_drives = SELECT
 OSPath AS Drive,
 OSPath + '$MFT' AS MFTFilename
 FROM glob(globs="/*", accessor="ntfs")
 WHERE log(message="Processing " + MFTFilename)

 -- function returning MFT entries
 -- Only check the filename - should be very quick
 LET mftsearch_with_filename(Drive, MFTPath) =
 SELECT EntryNumber, InUse, ParentEntryNumber,
 OSPath,
 Links AS _Links,
 FileName, FileSize, ReferenceCount, IsDir,
 Created0x10, Created0x30,
 LastModified0x10, LastModified0x30,
 LastRecordChange0x10, LastRecordChange0x30,
 LastAccess0x10,LastAccess0x30,
 HasADS, SI_Lt_FN, uSecZeros, Copied,
 FileNames, FileNameTypes
 FROM parse_mft_version(filename=MFTPath,
 accessor=Accessor, prefix=Drive)
 WHERE FileName =~ FileRegex
 AND Links =~ PathRegex

 -- Check only one date bound
 LET mftsearch_after_date(Drive, MFTPath) =
 SELECT
 EntryNumber, InUse, ParentEntryNumber,
 OSPath,
 Links AS _Links,
 FileName, FileSize, ReferenceCount, IsDir,
 Created0x10, Created0x30,
 LastModified0x10, LastModified0x30,
 LastRecordChange0x10, LastRecordChange0x30,
 LastAccess0x10,LastAccess0x30,
 HasADS, SI_Lt_FN, uSecZeros, Copied,
 FileNames, FileNameTypes
 FROM parse_mft_version(filename=MFTPath,
 accessor=Accessor, prefix=Drive)
 WHERE
 ( Created0x10 &amp;gt; DateAfter
 OR Created0x30 &amp;gt; DateAfter
 OR LastModified0x10 &amp;gt; DateAfter
 OR LastModified0x30 &amp;gt; DateAfter
 OR LastRecordChange0x10 &amp;gt; DateAfter
 OR LastRecordChange0x30 &amp;gt; DateAfter)
 AND FileName =~ FileRegex
 AND Links =~ PathRegex

 LET mftsearch_before_date(Drive, MFTPath) =
 SELECT EntryNumber, InUse, ParentEntryNumber,
 OSPath,
 Links AS _Links,
 FileName, FileSize, ReferenceCount, IsDir,
 Created0x10, Created0x30,
 LastModified0x10, LastModified0x30,
 LastRecordChange0x10, LastRecordChange0x30,
 LastAccess0x10,LastAccess0x30,
 HasADS, SI_Lt_FN, uSecZeros, Copied,
 FileNames, FileNameTypes
 FROM parse_mft_version(filename=MFTPath,
 accessor=Accessor, prefix=Drive)
 WHERE
 ( Created0x10 &amp;lt; DateBefore
 OR Created0x30 &amp;lt; DateBefore
 OR LastModified0x10 &amp;lt; DateBefore
 OR LastModified0x30 &amp;lt; DateBefore
 OR LastRecordChange0x10 &amp;lt; DateBefore
 OR LastRecordChange0x30 &amp;lt; DateBefore)
 AND FileName =~ FileRegex
 AND Links =~ PathRegex

 -- Check everything can be slow.
 LET mftsearch_full(Drive, MFTPath) =
 SELECT EntryNumber, InUse, ParentEntryNumber,
 OSPath,
 Links AS _Links,
 FileName, FileSize, ReferenceCount, IsDir,
 Created0x10, Created0x30,
 LastModified0x10, LastModified0x30,
 LastRecordChange0x10, LastRecordChange0x30,
 LastAccess0x10,LastAccess0x30,
 HasADS, SI_Lt_FN, uSecZeros, Copied,
 FileNames, FileNameTypes
 FROM parse_mft_version(filename=MFTPath,
 accessor=Accessor, prefix=Drive)
 WHERE FileName =~ FileRegex
 AND Links =~ PathRegex
 AND if(condition=SizeMax,
 then=FileSize &amp;lt; atoi(string=SizeMax),
 else=TRUE)
 AND if(condition=SizeMin,
 then=FileSize &amp;gt; atoi(string=SizeMin),
 else=TRUE)
 AND
 ( time_test(stamp=Created0x10)
 OR time_test(stamp=Created0x30)
 OR time_test(stamp=LastModified0x10)
 OR time_test(stamp=LastModified0x30)
 OR time_test(stamp=LastRecordChange0x10)
 OR time_test(stamp=LastRecordChange0x30)
 OR time_test(stamp=LastAccess0x10)
 OR time_test(stamp=LastAccess0x30))

 -- Choose a query to run depending on the user's choices.
 LET mftsearch(Drive, MFTPath) = SELECT * FROM if(
 -- only need to do a filename comparison
 condition=NOT DateAfter AND NOT DateBefore AND NOT SizeMin AND NOT SizeMax,
 then={ SELECT *
 FROM mftsearch_with_filename(Drive=Drive, MFTPath=MFTPath) },
 else={ SELECT * FROM if(

 -- Only DateAfter is set
 condition=NOT DateBefore AND NOT SizeMin AND NOT SizeMax,
 then={ SELECT *
 FROM mftsearch_after_date(Drive=Drive, MFTPath=MFTPath)},
 else={ SELECT * FROM if(

 -- Only Date Before is set
 condition=NOT DateAfter AND NOT SizeMin AND NOT SizeMax,
 then={ SELECT *
 FROM mftsearch_before_date(Drive=Drive, MFTPath=MFTPath)},
 else={ SELECT *
 FROM mftsearch_full(Drive=Drive, MFTPath=MFTPath)})
 })
 })

 -- include all attached drives
 LET all_drives = SELECT * FROM foreach(row={
 SELECT * FROM ntfs_drives
 },
 query={
 SELECT *, Drive
 FROM mftsearch(
 Drive=Drive,
 MFTPath=MFTFilename)
 })

 -- return results
 LET results = SELECT *
 FROM if(condition=AllDrives,
 then={
 SELECT * FROM all_drives
 },
 else={
 SELECT * FROM mftsearch(Drive=Drive,
 MFTPath=if(condition= MFTPath ,
 then= MFTPath,
 else= Drive + "$MFT"))
 })
 -- enrich results with NtfsMetadata is requests
 LET enriched_results = SELECT *,
 parse_ntfs(mft=EntryNumber, device=Drive ) as NtfsMetadata
 FROM results

 -- return rows
 SELECT * FROM if(condition=AllNtfs,
 then= enriched_results,
 else= results)

&lt;/code>&lt;/pre></description></item><item><title>Windows.NTFS.Recover</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.recover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.ntfs.recover/</guid><description>&lt;p>Attempt to recover deleted files.&lt;/p>
&lt;p>This artifact uploads all streams from an MFTId. If the MFT entry is
not allocated there is a chance that the cluster that contain the
actual data of the file will be intact still on the disk. Therefore
this artifact can be used to attempt to recover a deleted file.&lt;/p>
&lt;p>A common use is to recover deleted directory entries using the
Windows.NTFS.I30 artifact and identify MFT entries of interest. This
is artifact can be used to attempt to recover some data.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.NTFS.Recover
description: |
 Attempt to recover deleted files.

 This artifact uploads all streams from an MFTId. If the MFT entry is
 not allocated there is a chance that the cluster that contain the
 actual data of the file will be intact still on the disk. Therefore
 this artifact can be used to attempt to recover a deleted file.

 A common use is to recover deleted directory entries using the
 Windows.NTFS.I30 artifact and identify MFT entries of interest. This
 is artifact can be used to attempt to recover some data.

parameters:
 - name: MFTId
 default: "81978"
 - name: Drive
 default: '\\.\C:'

precondition:
 SELECT * FROM info() where OS = 'windows'

sources:
 - name: Upload
 query: |
 LET Parsed &amp;lt;= parse_ntfs(device=Drive, inode=MFTId)

 SELECT *, upload(accessor="mft", file=Drive + Inode,
 name=Parsed.OSPath + Inode) AS IndexUpload
 FROM foreach(
 row=Parsed.Attributes,
 query={
 SELECT _value.Type AS Type,
 _value.TypeId AS TypeId,
 _value.Id AS Id,
 _value.Inode AS Inode,
 _value.Size AS Size,
 _value.Name AS Name
 FROM scope()
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.OSQuery.Generic</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.osquery.generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.osquery.generic/</guid><description>&lt;p>OSQuery is an excellent tool for querying system state across the
three supported Velociraptor platform (Windows/Linux/MacOS).&lt;/p>
&lt;p>You can read more about OSQuery on &lt;a href="https://osquery.io/" target="_blank" >https://osquery.io/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.OSQuery.Generic
description: |
 OSQuery is an excellent tool for querying system state across the
 three supported Velociraptor platform (Windows/Linux/MacOS).

 You can read more about OSQuery on https://osquery.io/

reference:
 - https://osquery.io/
 - https://github.com/osquery/osquery

# I am not actually sure if OSQuery allows arbitrary command execution via SQL?
required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'windows'

tools:
 - name: OSQueryWindows
 github_project: Velocidex/OSQuery-Releases
 github_asset_regex: windows-amd64.exe

parameters:
 - name: Query
 default: "SELECT * FROM osquery_info"

sources:
 - query: |
 LET binary &amp;lt;= SELECT OSPath
 FROM Artifact.Generic.Utils.FetchBinary(ToolName="OSQueryWindows")

 LET result = SELECT * FROM execve(
 argv=[binary[0].OSPath, "--json", Query],
 length=1000000)

 SELECT * FROM foreach(row=result,
 query={
 SELECT * FROM parse_json_array(data=Stdout)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Packs.LateralMovement</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.packs.lateralmovement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.packs.lateralmovement/</guid><description>&lt;p>Detect evidence of lateral movement.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Packs.LateralMovement
description: |
 Detect evidence of lateral movement.

precondition: SELECT OS From info() where OS = 'windows'

reference:
 - https://digital-forensics.sans.org/media/SANS_Poster_2018_Hunt_Evil_FINAL.pdf

sources:
 - name: AlternateLogon
 query: |
 SELECT * FROM Artifact.Windows.EventLogs.AlternateLogon()

 - name: WMIC
 query: |
 SELECT * FROM Artifact.Windows.Forensics.Prefetch()
 WHERE Executable =~ "wmic.exe"
 - name: ShimCache
 query: |
 SELECT * FROM Artifact.Windows.Registry.AppCompatCache()
 WHERE Name =~ "wmic.exe"
 - name: BAM
 query: |
 SELECT * FROM Artifact.Windows.Forensics.Bam()
 WHERE Binary =~ "wmic.exe"
 - name: AmCache
 query: |
 SELECT * FROM Artifact.Windows.System.Amcache()
 WHERE Binary =~ "wmic.exe"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Packs.Persistence</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.packs.persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.packs.persistence/</guid><description>&lt;p>This artifact pack collects various persistence mechanisms in Windows.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Packs.Persistence
description: |
 This artifact pack collects various persistence mechanisms in Windows.

precondition:
 SELECT OS from info() where OS = "windows"

sources:
 - name: WMI Event Filters
 query: |
 SELECT * FROM Artifact.Windows.Persistence.PermanentWMIEvents()

 - name: Startup Items
 query: |
 SELECT * FROM Artifact.Windows.Sys.StartupItems()

 - name: Debug Bootstraping
 query: |
 SELECT * FROM Artifact.Windows.Persistence.Debug()

&lt;/code>&lt;/pre></description></item><item><title>Windows.Persistence.Debug</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.debug/</guid><description>&lt;p>Windows allows specific configuration of various executables via a
registry key. Some keys allow defining a debugger to attach to a
program as it is run. If this debugger is launched for commonly used
programs (e.g. notepad) then another program can be launched at the
same time (with the same privileges).&lt;/p>
&lt;p>There is an additional key for x86 executables HKEY_LOCAL_MACHINE&lt;br>
SOFTWARE\wow6432node\Microsoft\Windows NT\CurrentVersion\Image File
Execution Options* however this is kept inlign with the x64 key and
therefore does not need to be processed.&lt;/p>
&lt;p>Limitations: This queries the live registry and therefore does not
parse data in Windows.old or Regback folders, or VSS.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Persistence.Debug
description: |
 Windows allows specific configuration of various executables via a
 registry key. Some keys allow defining a debugger to attach to a
 program as it is run. If this debugger is launched for commonly used
 programs (e.g. notepad) then another program can be launched at the
 same time (with the same privileges).

 There is an additional key for x86 executables HKEY_LOCAL_MACHINE\
 SOFTWARE\wow6432node\Microsoft\Windows NT\CurrentVersion\Image File
 Execution Options\* however this is kept inlign with the x64 key and
 therefore does not need to be processed.

 Limitations: This queries the live registry and therefore does not
 parse data in Windows.old or Regback folders, or VSS.

reference:
 - https://attack.mitre.org/techniques/T1183/

parameters:
 - name: imageFileExecutionOptions
 default: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\*

sources:
 - query: |
 LET X = scope()
 SELECT Key.ModTime as KeyLastWriteTimestamp,
 Key.OSPath as _Key,
 Key.Name AS Program,
 X.Debugger AS Debugger
 FROM read_reg_key(globs=imageFileExecutionOptions)
 WHERE Debugger
 Order By KeyLastWriteTimestamp

&lt;/code>&lt;/pre></description></item><item><title>Windows.Persistence.PermanentWMIEvents</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.permanentwmievents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.permanentwmievents/</guid><description>&lt;p>This artifact reports currently deployed permanent WMI Event Consumers. The
artifact collects Binding information, then presents associated Filters
and Consumers.&lt;/p>
&lt;p>NOTE: the artifact does not report on individual eventing classes. A seperate
wmi query will need to be made for unlinked components that may reside in the
WMI datastore.&lt;/p>
&lt;p>WMI Eventing components:&lt;/p>
&lt;ul>
&lt;li>__FilterToConsumerBinding - ties together Filter + Consumer&lt;/li>
&lt;li>__EventFilter - trigger condition&lt;/li>
&lt;li>__EventConsumer - payload&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Persistence.PermanentWMIEvents
author: Matt Green - @mgreen27
description: |
 This artifact reports currently deployed permanent WMI Event Consumers. The 
 artifact collects Binding information, then presents associated Filters 
 and Consumers.
 
 NOTE: the artifact does not report on individual eventing classes. A seperate 
 wmi query will need to be made for unlinked components that may reside in the 
 WMI datastore. 

 WMI Eventing components: 
 
 - __FilterToConsumerBinding - ties together Filter + Consumer
 - __EventFilter - trigger condition
 - __EventConsumer - payload

reference:
 - https://attack.mitre.org/techniques/T1546/003/

parameters:
 - name: AllRootNamespaces
 description: Select to scan all ROOT namespaces. This setting over rides specific namespaces configured below.
 type: bool
 - name: Namespaces
 description: Add a list of target namespaces.
 type: csv
 default: |
 namespace
 root/subscription
 root/default

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET namespaces &amp;lt;= SELECT * FROM if(condition=AllRootNamespaces, 
 then= { 
 SELECT 'root/' + Name as namespace 
 FROM wmi(namespace='ROOT',query='SELECT * FROM __namespace' )
 WHERE namespace
 },
 else= Namespaces )
 
 LET FilterToConsumerBinding &amp;lt;= SELECT * FROM foreach(
 row=namespaces,
 query={
 SELECT parse_string_with_regex(string=Consumer,
 regex=['((?P&amp;lt;namespace&amp;gt;^[^:]+):)?(?P&amp;lt;Type&amp;gt;.+?)\\.Name="(?P&amp;lt;Name&amp;gt;.+)"']) as Consumer,
 parse_string_with_regex(string=Filter,regex=['((?P&amp;lt;namespace&amp;gt;^[^:]+):)?(?P&amp;lt;Type&amp;gt;.+?)\\.Name="(?P&amp;lt;Name&amp;gt;.+)"']) as Filter
 FROM wmi(
 query="SELECT * FROM __FilterToConsumerBinding",namespace=namespace)
 },workers=len(list=namespaces))
 
 SELECT * FROM foreach(
 row=namespaces,
 query={
 SELECT {
 SELECT * FROM wmi(
 query="SELECT * FROM " + Consumer.Type,
 namespace=if(condition=Consumer.namespace,
 then=Consumer.namespace,
 else=namespace)) WHERE Name = Consumer.Name
 } AS ConsumerDetails,
 {
 SELECT * FROM wmi(
 query="SELECT * FROM " + Filter.Type,
 namespace=if(condition=Filter.namespace,
 then=Filter.namespace,
 else=namespace)) WHERE Name = Filter.Name
 } AS FilterDetails,
 namespace as Namespace
 FROM FilterToConsumerBinding
 WHERE (FilterDetails OR ConsumerDetails)
 },workers=len(list=namespaces))
&lt;/code>&lt;/pre></description></item><item><title>Windows.Persistence.PowershellProfile</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.powershellprofile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.powershellprofile/</guid><description>&lt;p>This Artifact will search and parse Powershell profile scripts.&lt;/p>
&lt;p>PowerShell supports several profiles depending on the user or host program.
Adversaries may create or modify these profiles to include arbitrary commands,
functions, modules, and/or PowerShell drives to gain persistence. When a
backdoored PowerShell session is opened the modified script will be executed
unless the -NoProfile flag is used when it is launched.&lt;/p>
&lt;p>The artifact will by default search both User profiles and System-wide
configured profiles. The user can also targert and exclude specific content
with relevant regex filters&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Persistence.PowershellProfile
author: Matt Green - @mgreen27
description: |
 This Artifact will search and parse Powershell profile scripts.

 PowerShell supports several profiles depending on the user or host program.
 Adversaries may create or modify these profiles to include arbitrary commands,
 functions, modules, and/or PowerShell drives to gain persistence. When a
 backdoored PowerShell session is opened the modified script will be executed
 unless the -NoProfile flag is used when it is launched.

 The artifact will by default search both User profiles and System-wide
 configured profiles. The user can also targert and exclude specific content
 with relevant regex filters

reference:
 - https://attack.mitre.org/techniques/T1546/013/

type: CLIENT

parameters:
 - name: UserProfileGlob
 default: '\Documents\{WindowsPowerShell,Powershell}\{Profile,Microsoft.*_profile}.ps1'
 description: Glob for Powershell user profiles.
 - name: PSHomeProfileGlob
 default: 'C:\Windows\System32\{WindowsPowerShell,Powershell}\v1.0\{Profile,Microsoft.*_profile}.ps1'
 description: Glob for Powershell PSHome profiles.
 - name: SearchStrings
 default: .
 type: regex
 description: regex to filter for in profile content
 - name: StringWhiteList
 default:
 type: regex
 description: regex to filter out in profile content

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- First extract potential glob path for each user
 LET UserTargets = SELECT Name as Username,
 expand(path=Directory) + UserProfileGlob as ProfileGlob
 FROM Artifact.Windows.Sys.Users()
 WHERE Directory

 -- Search for both Powershell System and User profiles.
 SELECT OSPath, Size,
 read_file(filename=OSPath) as Content,
 dict( Mtime=Mtime,
 Atime=Atime,
 Ctime=Ctime,
 Btime=Btime ) as Timestamps,
 hash(path=OSPath) as Hash
 FROM glob(globs=UserTargets.ProfileGlob + PSHomeProfileGlob)
 WHERE
 Content =~ SearchStrings
 AND NOT if(condition=StringWhiteList,
 then= Content=~StringWhiteList,
 else= False)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Persistence.PowershellRegistry</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.powershellregistry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.powershellregistry/</guid><description>&lt;p>A common way of persistence is to install a hook into a user profile
registry hive, using powershell. When the user logs in, the
powershell script downloads a payload and executes it.&lt;/p>
&lt;p>This artifact searches the user&amp;rsquo;s profile registry hive for
signatures related to general Powershell execution. We use a yara
signature specifically targeting the user&amp;rsquo;s profile which we extract
using raw NTFS parsing (in case the user is currently logged on and
the registry hive is locked).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Persistence.PowershellRegistry
description: |
 A common way of persistence is to install a hook into a user profile
 registry hive, using powershell. When the user logs in, the
 powershell script downloads a payload and executes it.

 This artifact searches the user's profile registry hive for
 signatures related to general Powershell execution. We use a yara
 signature specifically targeting the user's profile which we extract
 using raw NTFS parsing (in case the user is currently logged on and
 the registry hive is locked).

parameters:
 - name: yaraRule
 type: yara
 default: |
 rule PowerShell {
 strings:
 $a = /ActiveXObject.{,500}eval/ wide nocase

 condition:
 any of them
 }
 - name: userRegex
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 SELECT * from foreach(
 row={
 SELECT Name,
 expand(path=Directory) AS HomeDir
 FROM Artifact.Windows.Sys.Users()
 WHERE HomeDir and Gid AND Name =~ userRegex
 },
 query={
 SELECT File.OSPath As OSPath,
 String.Offset AS Off,
 String.HexData As Hex,
 upload(file=File.FullPath, accessor="auto") AS Upload
 FROM yara(
 files=HomeDir + "\\ntuser.dat",
 rules=yaraRule, context=50)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Persistence.Wow64cpu</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.wow64cpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.persistence.wow64cpu/</guid><description>&lt;p>Checks for wow64cpu.dll replacement Autorun in Windows 10.
&lt;a href="http://www.hexacorn.com/blog/2019/07/11/beyond-good-ol-run-key-part-108-2/" target="_blank" >http://www.hexacorn.com/blog/2019/07/11/beyond-good-ol-run-key-part-108-2/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Persistence.Wow64cpu
description: |
 Checks for wow64cpu.dll replacement Autorun in Windows 10.
 http://www.hexacorn.com/blog/2019/07/11/beyond-good-ol-run-key-part-108-2/

author: Matt Green - @mgreen27

parameters:
 - name: TargetRegKey
 default: HKEY_LOCAL_MACHINE\Software\Microsoft\Wow64\**
sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 SELECT OSPath.Dirname as KeyPath,
 Name as KeyName,
 Data.value as Value,
 Mtime AS LastModified
 FROM glob(globs=split(string=TargetRegKey, sep=","), accessor="registry")
 WHERE Data.value and
 not (Name = "@" and (Data.value =~ "(wow64cpu.dll|wowarmhw.dll|xtajit.dll)"))

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.AppCompatCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.appcompatcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.appcompatcache/</guid><description>&lt;p>This artifact parses AppCompatCache (shimcache) from target hives.&lt;/p>
&lt;p>AppCompatCache, also known as Shimcache, is a component of the Application
Compatibility Database, which was created by Microsoft and used by the Windows
operating system to identify application compatibility issues. This helps
developers troubleshoot legacy functions and contains data related to Windows
features.&lt;/p>
&lt;p>Note:&lt;/p>
&lt;ul>
&lt;li>Windows 10+ systems Execution flag of 1 indicates execution.&lt;/li>
&lt;li>The appcompatcache artifact does not currently support execution flag in
Windows 7 and 8 / 8.1 Systems.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.AppCompatCache
author: Matt Green - @mgreen27
description: |
 This artifact parses AppCompatCache (shimcache) from target hives.

 AppCompatCache, also known as Shimcache, is a component of the Application
 Compatibility Database, which was created by Microsoft and used by the Windows
 operating system to identify application compatibility issues. This helps
 developers troubleshoot legacy functions and contains data related to Windows
 features.

 Note: 
 
 - Windows 10+ systems Execution flag of 1 indicates execution.
 - The appcompatcache artifact does not currently support execution flag in
 Windows 7 and 8 / 8.1 Systems.
 

reference:
 - https://www.mandiant.com/resources/caching-out-the-val

parameters:
 - name: AppCompatCacheKey
 default: HKEY_LOCAL_MACHINE/System/ControlSet*/Control/Session Manager/AppCompatCache/AppCompatCache

precondition: SELECT OS From info() where OS = 'windows'

export: |
 LET AppCompatCacheParser &amp;lt;= '''[
 ["HeaderWin10", "x=&amp;gt;x.HeaderSize", [
 ["HeaderSize", 0, "unsigned int"],
 ["Entries", "x=&amp;gt;x.HeaderSize", Array, {
 type: "Entry",
 sentinel: "x=&amp;gt;x.Size = 0",
 count: 10000,
 }]
 ]],
 ["HeaderWin8", 128, [
 ["Entries", 128, Array, {
 type: "EntryWin8",
 sentinel: "x=&amp;gt;x.EntrySize = 0",
 count: 10000,
 }]
 ]],

 ["EntryWin8", "x=&amp;gt;x.EntrySize + 12", [
 ["Signature", 0, "String", {
 length: 4,
 }],
 ["EntrySize", 8, "unsigned int"],
 ["PathSize", 12, "uint16"],
 ["Path", 14, "String", {
 length: "x=&amp;gt;x.PathSize",
 encoding: "utf16",
 }],
 ["LastMod", "x=&amp;gt;x.PathSize + 14 + 10", "WinFileTime"],
 ["Execution", 0, "Value",{"value":"N/A"}],
 ]],

 ["Entry", "x=&amp;gt;x.Size + 12", [
 ["Signature", 0, "String", {
 length: 4,
 }],
 ["Size", 8, "unsigned int"],
 ["PathSize", 12, "uint16"],
 ["Path", 14, "String", {
 length: "x=&amp;gt;x.PathSize",
 encoding: "utf16",
 }],
 ["LastMod", "x=&amp;gt;x.PathSize + 14", "WinFileTime"],
 ["DataSize", "x=&amp;gt;x.PathSize + 14 + 8", "uint32"],
 ["Data", "x=&amp;gt;x.PathSize + 14 + 8 + 4" , "String", {
 length: "x=&amp;gt;x.DataSize",
 }],

 # The last byte of the Data block is 1 for execution
 ["Execution", "x=&amp;gt;x.PathSize + 14 + 8 + 4 + x.DataSize - 4", "uint32"]
 ]],

 # This is the Win7 parser but we dont use it right now.
 ["HeaderWin7x64", 128, [
 ["Signature", 0, "uint32"],
 ["Entries", 128, "Array", {
 count: 10000,
 sentinel: "x=&amp;gt;x.PathSize = 0",
 type: EntryWin7x64,
 }]
 ]],
 ["EntryWin7x64", 48, [
 ["PathSize", 0, "uint16"],
 ["PathOffset", 8, "uint32"],
 ["Path", "x=&amp;gt;x.PathOffset - x.StartOf", "String", {
 encoding: "utf16",
 length: "x=&amp;gt;x.PathSize",
 }],
 ["LastMod", 16, "WinFileTime"],
 ["Execution", 0, "Value",{"value":"N/A"}],

 ]]

 ]'''

 LET AppCompatCacheWin10(Blob) = parse_binary(
 accessor="data",
 filename=Blob,
 profile=AppCompatCacheParser,
 struct="HeaderWin10")

 LET AppCompatCacheWin8(Blob) = parse_binary(
 accessor="data",
 filename=Blob,
 profile=AppCompatCacheParser,
 struct="HeaderWin8")

 LET AppCompatCache(Blob) = SELECT *
 FROM foreach(
 row=if(
 condition=AppCompatCacheWin10(Blob=Blob).HeaderSize IN (52, 48),
 then=AppCompatCacheWin10(Blob=Blob).Entries,
 else=AppCompatCacheWin8(Blob=Blob).Entries))


sources:
 - query: |
 -- first find all ControlSet Keys in scope
 LET AppCompatKeys &amp;lt;= SELECT OSPath FROM glob(globs=AppCompatCacheKey, accessor='registry')

 -- when greater than one key we need to extract results and order later
 LET results &amp;lt;= SELECT
 ModificationTime,
 Name as Path,
 ExecutionFlag,
 ControlSet,
 Key
 FROM foreach(
 row={
 SELECT OSPath FROM glob(accessor='registry',
 globs=AppCompatCacheKey)
 }, query={
 SELECT OSPath AS Key, Path AS Name,
 LastMod AS ModificationTime,
 Execution as ExecutionFlag,
 OSPath[2] as ControlSet
 FROM AppCompatCache(Blob=read_file(
 accessor='registry', filename=OSPath))
 })

 -- find position of entry for each ControlSet. Lower numbers more recent
 LET ControlSetPosition(cs) = SELECT *, count() - 1 as Position
 FROM results WHERE ControlSet = cs
 LET position = SELECT ControlSetPosition(cs=ControlSet) as Results
 FROM foreach(
 row={
 SELECT ControlSet, count(items=ControlSet) as Entries
 FROM results GROUP BY ControlSet
 })

 LET mutli_controlset = SELECT *
 FROM foreach(
 row=position.Results,
 query={
 SELECT * FROM foreach(row=_value)
 })

 -- output results
 SELECT 
 Position,
 ModificationTime,
 Path,
 ExecutionFlag,
 ControlSet,
 Key
 FROM if(condition= len(list=AppCompatKeys.OSPath)=1,
 then={
 SELECT *, count() - 1 as Position FROM results
 },
 else= mutli_controlset )
&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.BackupRestore</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.backuprestore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.backuprestore/</guid><description>&lt;p>This artifact will return BackupRestore configuration.&lt;/p>
&lt;p>Applications that request or perform backup and restore operations can use
these keys to communicate with each other or with features such as the
Volume Shadow Copy Service (VSS) and Windows Backup.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.BackupRestore
author: Matt Green - @mgreen27
description: |
 This artifact will return BackupRestore configuration.

 Applications that request or perform backup and restore operations can use
 these keys to communicate with each other or with features such as the
 Volume Shadow Copy Service (VSS) and Windows Backup.

reference:
 - https://andreafortuna.org/2017/10/02/volume-shadow-copies-in-forensic-analysis/
 - https://docs.microsoft.com/en-us/windows/win32/backup/registry-keys-for-backup-and-restore

parameters:
 - name: KeyGlob
 default: HKEY_LOCAL_MACHINE\SYSTEM\*ControlSet*\Control\BackupRestore\**

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- output rows and dedup on unique values for each
 SELECT ModTime,OSPath,
 Name as KeyName,
 Data.value as KeyValue,
 Data.type as KeyType
 FROM glob(globs=KeyGlob, accessor="registry")
 WHERE NOT KeyType ='key'
 GROUP BY ModTime, KeyName,KeyValue,KeyType

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.EnabledMacro</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.enabledmacro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.enabledmacro/</guid><description>&lt;p>Checks for Registry key indicating macro was enabled by user.&lt;/p>
&lt;p>HKEY_USERS*\Software\Microsoft\Office*\Security\Trusted Documents\TrustRecords reg keys for values ending in FFFFFF7F
&lt;a href="http://az4n6.blogspot.com/2016/02/more-on-trust-records-macros-and.html" target="_blank" >http://az4n6.blogspot.com/2016/02/more-on-trust-records-macros-and.html&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.EnabledMacro
description: |
 Checks for Registry key indicating macro was enabled by user.

 HKEY_USERS\*\Software\Microsoft\Office\*\Security\Trusted Documents\TrustRecords reg keys for values ending in FFFFFF7F
 http://az4n6.blogspot.com/2016/02/more-on-trust-records-macros-and.html

author: "@mgreen27"

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 default: Software\Microsoft\Office\*\*\Security\Trusted Documents\TrustRecords\*
 - name: userRegex
 default: .
 type: regex

sources:
 - query: |
 LET UserProfiles = Select Name as Username,
 {
 SELECT OSPath FROM glob(
 root=expand(path=Directory),
 globs="/NTUSER.DAT",
 accessor="auto")
 } as NTUser,
 expand(path=Directory) as Directory
 FROM Artifact.Windows.Sys.Users()
 WHERE Directory and NTUser and Name =~ userRegex

 SELECT * FROM foreach(
 row={
 SELECT Username,NTUser FROM UserProfiles
 },
 query={
 SELECT Name as Document,
 Username,
 NTUser as Userhive,
 OSPath.Dirname AS Key,
 Mtime AS LastModified
 FROM glob(
 globs=KeyGlob,
 root=pathspec(DelegatePath=NTUser),
 accessor="raw_reg")
 WHERE Data.type =~ "BINARY"
 and encode(string=Data.value, type="hex") =~ "ffffff7f$"
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.EnableUnsafeClientMailRules</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.enableunsafeclientmailrules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.enableunsafeclientmailrules/</guid><description>&lt;p>Checks for Outlook EnableUnsafeClientMailRules = 1 (turned on).
This registry key enables execution from Outlook inbox rules which can be used as a persistence mechanism.
Microsoft has released a patch to disable execution but attackers can reenable by changing this value to 1.&lt;/p>
&lt;p>HKEY_USERS*\Software\Microsoft\Office*\Outlook\Security\EnableUnsafeClientMailRules = 0 (expected)
&lt;a href="https://support.microsoft.com/en-us/help/3191893/how-to-control-the-rule-actions-to-start-an-application-or-run-a-macro" target="_blank" >https://support.microsoft.com/en-us/help/3191893/how-to-control-the-rule-actions-to-start-an-application-or-run-a-macro&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.EnableUnsafeClientMailRules
description: |
 Checks for Outlook EnableUnsafeClientMailRules = 1 (turned on).
 This registry key enables execution from Outlook inbox rules which can be used as a persistence mechanism.
 Microsoft has released a patch to disable execution but attackers can reenable by changing this value to 1.

 HKEY_USERS\*\Software\Microsoft\Office\*\Outlook\Security\EnableUnsafeClientMailRules = 0 (expected)
 https://support.microsoft.com/en-us/help/3191893/how-to-control-the-rule-actions-to-start-an-application-or-run-a-macro

author: "@mgreen27"

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 default: Software\Microsoft\Office\*\Outlook\Security\
 - name: userRegex
 default: .
 type: regex

sources:
 - query: |
 LET UserProfiles = Select Name as Username,
 {
 SELECT OSPath FROM glob(root=expand(path=Directory),
 globs="/NTUSER.DAT", accessor="auto")
 } as NTUser,
 expand(path=Directory) as Directory
 FROM Artifact.Windows.Sys.Users()
 WHERE Directory and NTUser and Name =~ userRegex

 SELECT * FROM foreach(
 row={
 SELECT Username, NTUser FROM UserProfiles
 },
 query={
 SELECT Username,
 NTUser as Userhive,
 OSPath.Path as Key,
 key.Mtime AS LastModified,
 EnableUnsafeClientMailRules,
 OutlookSecureTempFolder
 FROM read_reg_key(
 globs=KeyGlob,
 root=pathspec(DelegatePath=OSPath),
 accessor="raw_reg")
 WHERE EnableUnsafeClientMailRules = 1
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.MountPoints2</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.mountpoints2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.mountpoints2/</guid><description>&lt;p>This detection will collect any items in the MountPoints2 registry key.
With a &amp;ldquo;$&amp;rdquo; in the share path. This key will store all remotely mapped
drives unless removed so is a great hunt for simple admin $ mapping based
lateral movement.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.MountPoints2
description: |
 This detection will collect any items in the MountPoints2 registry key.
 With a "$" in the share path. This key will store all remotely mapped
 drives unless removed so is a great hunt for simple admin $ mapping based
 lateral movement.

author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 default: Software\Microsoft\Windows\CurrentVersion\Explorer\MountPoints2\*
 - name: MountPointFilterRegex
 type: regex
 default: "\\$"

sources:
 - query: |
 SELECT regex_replace(
 source=OSPath.Basename,
 re="#",
 replace="\\") as MountPoint,
 Mtime as ModifiedTime,
 Username,
 OSPath.DelegatePath as Hive,
 OSPath.Path as Key
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob)
 WHERE OSPath =~ MountPointFilterRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.NTUser</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.ntuser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.ntuser/</guid><description>&lt;p>This artifact searches for keys or values within the user&amp;rsquo;s
NTUser.dat registry hives.&lt;/p>
&lt;p>When a user logs into a windows machine the system creates their own
&amp;ldquo;profile&amp;rdquo; which consists of a registry hive mapped into the
HKEY_USERS hive. This hive file is locked as long as the user is
logged in. If the user is not logged in, the file is not mapped at
all.&lt;/p>
&lt;p>This artifact bypasses the locking mechanism by parsing the raw NTFS
filesystem to recover the registry hives. We then parse the registry
hives to search for the glob provided.&lt;/p>
&lt;p>This artifact is designed to be reused by other artifacts that need
to access user data.&lt;/p>

&lt;div class="mynotices note">
 &lt;div heading="note">&lt;p>Any artifacts that look into the HKEY_USERS registry hive should
be using the &lt;code>Windows.Registry.NTUser&lt;/code> artifact instead of
accessing the hive via the API. The API only makes the currently
logged in users available in that hive and so if we rely on the
windows API we will likely miss any settings for users not
currently logged on.&lt;/p>
&lt;/div>
&lt;/div>


&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.NTUser
description: |
 This artifact searches for keys or values within the user's
 NTUser.dat registry hives.

 When a user logs into a windows machine the system creates their own
 "profile" which consists of a registry hive mapped into the
 HKEY_USERS hive. This hive file is locked as long as the user is
 logged in. If the user is not logged in, the file is not mapped at
 all.

 This artifact bypasses the locking mechanism by parsing the raw NTFS
 filesystem to recover the registry hives. We then parse the registry
 hives to search for the glob provided.

 This artifact is designed to be reused by other artifacts that need
 to access user data.

 
&lt;div class="mynotices note">
 &lt;div heading="note">&lt;pre>&lt;code>Any artifacts that look into the HKEY_USERS registry hive should
be using the `Windows.Registry.NTUser` artifact instead of
accessing the hive via the API. The API only makes the currently
logged in users available in that hive and so if we rely on the
windows API we will likely miss any settings for users not
currently logged on.
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>



precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 default: Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\**
 - name: userRegex
 default: .
 type: regex

export: |
 -- HivePath: The path to the hive on disk
 -- RegistryPath: The path in the registry to mount the hive
 -- RegMountPoint: The path inside the hive to mount (usually /)
 LET _map_file_to_reg_path(HivePath, RegistryPath, RegMountPoint, Accessor, Description) = dict(
 type="mount", description=Description,
 `from`=dict(accessor='raw_reg',
 prefix=pathspec(
 Path=RegMountPoint,
 DelegateAccessor=Accessor,
 DelegatePath=HivePath),
 path_type='registry'),
 `on`=dict(accessor='registry',
 prefix=RegistryPath,
 path_type='registry'))

 -- This needs to always be mapped because it is normally denied through the API
 LET _required_mappings = (
 _map_file_to_reg_path(
 HivePath="C:/Windows/System32/Config/SECURITY",
 RegistryPath="HKEY_LOCAL_MACHINE\\Security",
 RegMountPoint="/",
 Accessor='ntfs',
 Description="Map SECURITY Hive to HKEY_LOCAL_MACHINE"),
 )

 LET _standard_mappings = (
 _map_file_to_reg_path(
 HivePath="C:/Windows/System32/Config/SYSTEM",
 RegistryPath="HKEY_LOCAL_MACHINE\\System\\CurrentControlSet",
 RegMountPoint="/ControlSet001",
 Accessor='ntfs',
 Description="Map SYSTEM Hive to CurrentControlSet"),
 _map_file_to_reg_path(
 HivePath="C:/Windows/System32/Config/SOFTWARE",
 RegistryPath="HKEY_LOCAL_MACHINE\\Software",
 RegMountPoint="/",
 Accessor='ntfs',
 Description="Map Software hive to HKEY_LOCAL_MACHINE"),
 _map_file_to_reg_path(
 HivePath="C:/Windows/System32/Config/System",
 RegistryPath="HKEY_LOCAL_MACHINE\\System",
 RegMountPoint="/",
 Accessor='ntfs',
 Description="Map System hive to HKEY_LOCAL_MACHINE")
 )

 LET _make_ntuser_mappings(Accessor, Hive, Subpath) = SELECT _map_file_to_reg_path(
 HivePath=NTUserPath,
 RegMountPoint="/",
 Accessor=Accessor,
 Description=format(format="Map NTUSER.dat from User %v to HKEY_USERS", args=NTUserPath[2]),
 -- This is technically the SID but it is clearer to just use the username
 RegistryPath="HKEY_USERS\\" + NTUserPath[2] + Subpath) AS Mapping
 FROM foreach(row={
 SELECT pathspec(parse=expand(path=Directory),
 path_type="windows") + Hive AS NTUserPath
 FROM Artifact.Windows.Sys.Users()
 }, query={
 -- Verify the file actually exists
 SELECT NTUserPath FROM stat(filename=NTUserPath)
 })

 LET _user_mappings =
 _make_ntuser_mappings(Accessor='auto', Hive="NTUser.dat", Subpath="").Mapping +
 _make_ntuser_mappings(Accessor='auto',
 Hive="\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat",
 Subpath="\\Software\\Classes", Subpath="\\Software\\Classes").Mapping

 // Use this like `LET _ &amp;lt;= MapRawRegistryHives`
 LET MapRawRegistryHives =remap(config=dict(
 remappings=_user_mappings + _standard_mappings + _required_mappings))

sources:
 - query: |
 LET UserProfiles = SELECT Uid,
 Gid,
 Name || "" as Username,
 Description,
 UUID,
 {
 SELECT OSPath FROM glob(
 root=expand(path=Directory),
 globs="/NTUSER.DAT",
 accessor="auto")
 } as OSPath,
 expand(path=Directory) as Directory
 FROM Artifact.Windows.Sys.Users()
 WHERE Directory and OSPath AND Username =~ userRegex

 SELECT * FROM foreach(
 row={
 SELECT * FROM UserProfiles
 },
 query={
 SELECT OSPath, OSPath, Data, Mtime AS Mtime,
 Username, Description, Uid, Gid, UUID, Directory
 FROM glob(
 globs=KeyGlob,
 root=pathspec(
 DelegateAccessor="ntfs",
 DelegatePath=OSPath,
 Path="/"),
 accessor="raw_reg")
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.NTUser.Upload</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.ntuser.upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.ntuser.upload/</guid><description>&lt;p>This artifact collects all the user&amp;rsquo;s NTUser.dat registry hives.&lt;/p>
&lt;p>When a user logs into a windows machine the system creates their own
&amp;ldquo;profile&amp;rdquo; which consists of a registry hive mapped into the
HKEY_USERS hive. This hive file is locked as long as the user is
logged in.&lt;/p>
&lt;p>This artifact bypasses the locking mechanism by extracting the
registry hives using raw NTFS parsing. We then just upload all hives
to the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.NTUser.Upload
description: |
 This artifact collects all the user's NTUser.dat registry hives.

 When a user logs into a windows machine the system creates their own
 "profile" which consists of a registry hive mapped into the
 HKEY_USERS hive. This hive file is locked as long as the user is
 logged in.

 This artifact bypasses the locking mechanism by extracting the
 registry hives using raw NTFS parsing. We then just upload all hives
 to the server.

parameters:
 - name: userRegex
 default: .
 type: regex

sources:
 - precondition: |
 SELECT OS From info() where OS = 'windows'
 query: |
 LET users = SELECT
 Name,
 expand(path=Directory) AS HomeDir
 FROM Artifact.Windows.Sys.Users()
 WHERE HomeDir AND Name =~ userRegex

 SELECT upload(file=HomeDir + "\\ntuser.dat",
 accessor="auto") as Upload
 FROM users

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.PortProxy</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.portproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.portproxy/</guid><description>&lt;p>This artifact will return any items in the Windows PortProxy service
registry path. The most common configuration of this service is via the
lolbin netsh.exe; Metaspoit and other common attack tools also have
configuration modules.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.PortProxy
description: |
 This artifact will return any items in the Windows PortProxy service
 registry path. The most common configuration of this service is via the
 lolbin netsh.exe; Metaspoit and other common attack tools also have
 configuration modules.

reference:
 - Port Proxy detection(http://www.dfirnotes.net/portproxy_detection/)
 - ATT&amp;amp;CK T1090 - Connection Proxy(https://attack.mitre.org/techniques/T1090/)
 Adversaries may use a connection proxy to direct network traffic between
 systems or act as an intermediary for network communications to a command
 and control server to avoid direct connections to their infrastructure.

author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 default: HKEY_LOCAL_MACHINE\SYSTEM\*ControlSet*\services\PortProxy\**

sources:
 - name: PortProxy
 query: |
 SELECT OSPath,
 OSPath[-3] AS ProxyType,
 OSPath[-2] AS Protocol,
 regex_replace(source=OSPath.Basename, re="/", replace=":") as Listening,
 regex_replace(source=Data.value, re="/", replace=":") as Destination,
 Mtime as ModifiedTime,
 Type
 FROM glob(globs=KeyGlob, accessor="registry")
 WHERE Type


reports:
 - type: CLIENT
 template: |

 Port Forwarding: PortProxy
 ==========================
 {{ .Description }}

 {{ define "report" }}
 LET report = SELECT Protocol,
 ProxyType,
 Listening,
 Destination,
 ModifiedTime,
 ProxyType + Protocol + Listening + Destination as ServiceKey
 FROM source(source='PortProxy')
 GROUP BY ServiceKey
 {{ end }}

 {{ Query "report" "SELECT ProxyType, Protocol, Listening, Destination, ModifiedTime FROM report" | Table }}

 - type: HUNT
 template: |

 Port Forwarding: PortProxy
 ==========================
 {{ .Description }}

 {{ define "report" }}
 LET report = SELECT Fqdn,
 Protocol,
 ProxyType,
 Listening,
 Destination,
 ModifiedTime,
 ProxyType + Protocol + Listening + Destination as ServiceKey
 FROM source(source='PortProxy')
 GROUP BY ServiceKey
 {{ end }}

 {{ Query "report" "SELECT Fqdn, ProxyType, Protocol, Listening, Destination, ModifiedTime FROM report" | Table }}

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.PuttyHostKeys</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.puttyhostkeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.puttyhostkeys/</guid><description>&lt;p>This artifact extracts PuTTY SSH host keys.&lt;/p>
&lt;p>As a security measure PuTTY and its companion utilities PSCP, PSFTP, and Plink
records the host key for each server connected to, in the Windows Registry.&lt;/p>
&lt;ul>
&lt;li>Output KeyName: ssh-ed12345@22:27.27.27.27&lt;/li>
&lt;li>To search for a specific IP: TargetKeyName =~ &amp;lsquo;:&amp;lt;IP&amp;gt;$&amp;rsquo;&lt;/li>
&lt;li>To search for a specific PORT: TargetKeyName =~ &amp;lsquo;@&amp;lt;PORT&amp;gt;:.+$&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.PuttyHostKeys
author: Matt Green - @mgreen27
description: |
 This artifact extracts PuTTY SSH host keys.
 
 As a security measure PuTTY and its companion utilities PSCP, PSFTP, and Plink 
 records the host key for each server connected to, in the Windows Registry.
 
 - Output KeyName: ssh-ed12345@22:27.27.27.27
 - To search for a specific IP: TargetKeyName =~ ':\&amp;lt;IP\&amp;gt;$'
 - To search for a specific PORT: TargetKeyName =~ '@\&amp;lt;PORT\&amp;gt;:.+$'
 
 
type: CLIENT

parameters:
 - name: KeyGlob
 default: Software\SimonTatham\Putty\SshHostKeys\**
 - name: TargetUser
 default: .
 - name: TargetKeyName
 default: .
 - name: TargetKeyValue
 default: .

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows' 

 query: |
 LET HKEY_USERS &amp;lt;= pathspec(path_type="registry", Path="HKEY_USERS")

 SELECT 
 Mtime,
 Username,
 OSPath.Basename AS KeyName,
 Data.value AS KeyValue,
 HKEY_USERS + UUID + OSPath.Dirname AS Key,
 OSPath.DelegatePath AS SourcePath
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob,userRegex=TargetUser)
 WHERE KeyName =~ TargetKeyName
 AND KeyValue =~ TargetKeyValue


&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.RDP</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.rdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.rdp/</guid><description>&lt;p>This artifact will collect historical RDP server names and MRU items stored
in each users NTUser.dat&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Servers - list of all RDP connections that have ever been established by
this user.&lt;br>
UsernameHint shows the username used to connect to the RDP/RDS host.&lt;br>
CertHash variable contains the RDP server SSL certificate thumbprint.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MRU 10 - Most recently used RDP connections&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>UserRegex and SidRegex can be used to target a specific user.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.RDP
author: Matt Green - @mgreen27
description: |
 This artifact will collect historical RDP server names and MRU items stored 
 in each users NTUser.dat
 
 1. Servers - list of all RDP connections that have ever been established by 
 this user. 
 UsernameHint shows the username used to connect to the RDP/RDS host. 
 CertHash variable contains the RDP server SSL certificate thumbprint.

 2. MRU 10 - Most recently used RDP connections 
 
 UserRegex and SidRegex can be used to target a specific user.

type: CLIENT

parameters:
 - name: KeyGlob
 default: Software\Microsoft\Terminal Server Client\{Default,Servers}\**
 - name: UserRegex
 default: .
 description: Regex filter to select a target username
 type: regex
 - name: SidRegex
 default: .
 description: Regex filter to select a target SID
 type: regex
 

precondition: SELECT OS From info() where OS = 'windows'
 
sources:
 - name: Servers
 query: |
 LET servers &amp;lt;= SELECT 
 Mtime as LastWriteTime,
 basename(path=OSPath.Dirname) as Server,
 OSPath.Basename as KeyName,
 Data.value as KeyValue,
 Data.data_len as ValueLength,
 OSPath.Dirname.Path as Key,
 OSPath.DelegatePath as HiveName,
 OSPath,
 Username,
 UUID as SID
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob)
 WHERE NOT Data.type = 'Key'
 AND OSPath =~ '''Terminal Server Client\\\\Servers\\'''

 LET find_value(path, sid, keyname ) = SELECT KeyValue,
 format(format='%x',args=read_file(accessor='data',filename=KeyValue,length=ValueLength)) as CertHash
 FROM servers 
 WHERE KeyName = keyname AND Key=path AND SID=sid
 
 LET results = SELECT 
 Username || dirname(path=HiveName).Basename as Username, 
 SID,
 HiveName,
 Key, 
 LastWriteTime,
 Server
 FROM servers
 WHERE Username =~ UserRegex AND SID =~ SidRegex
 GROUP BY SID,Key,HiveName,LastWriteTime
 
 
 SELECT *
 find_value(path=Key,sid=SID,keyname='UsernameHint')[0].KeyValue as UsernameHint,
 find_value(path=Key,sid=SID,keyname='CertHash')[0].CertHash as CertHash
 FROM results

 - name: Mru
 query: |
 LET mru &amp;lt;= SELECT 
 Mtime as LastWriteTime,
 OSPath.Basename as KeyName,
 Data.value as KeyValue,
 OSPath.Dirname.Path as Key,
 OSPath.DelegatePath as HiveName,
 Username,
 UUID as SID
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob)
 WHERE NOT Data.type = 'Key'
 AND OSPath =~ '''Terminal Server Client\\\\Default\\\\MRU'''
 
 LET find_mru(sid) = SELECT KeyValue FROM mru 
 WHERE SID=sid
 
 LET results = SELECT *,
 Username || dirname(path=HiveName).Basename as Username
 FROM mru 
 WHERE Username =~ UserRegex AND SID =~ SidRegex
 GROUP BY Sid,HiveName
 
 SELECT 
 Username,
 SID, 
 HiveName,
 Key,
 LastWriteTime,
 find_mru(sid=SID).KeyValue as Mru
 FROM results
&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.RecentDocs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.recentdocs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.recentdocs/</guid><description>&lt;p>This artifact extracts RecentDocs MRU from the target.&lt;/p>
&lt;p>By default the artifact will target all users on the machine when run in
live mode but can be targeted directly using the HiveGlob parameter.&lt;/p>
&lt;p>Output includes LastWriteTime of key and a list of MRU items in the
order specified in the MRUListEx key value.
MruEntries has the format: [KeyName] := [Parsed Key value]&lt;/p>
&lt;p>Available filters include:
- Time bounds to select LastWrite timestamp within time ranges.
- EntryRegex to target specific entry values
- UserRegex to target specific users. Note: this filter does not work
when using HiveGlob.
- SidRegex to target a specific SID.&lt;/p>
&lt;p>Note: both UserRegex and SidRegex does not work when using HiveGlob
and all MRU will be returned.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.RecentDocs
author: Matt Green - @mgreen27
description: |
 This artifact extracts RecentDocs MRU from the target.

 By default the artifact will target all users on the machine when run in
 live mode but can be targeted directly using the HiveGlob parameter.

 Output includes LastWriteTime of key and a list of MRU items in the
 order specified in the MRUListEx key value.
 MruEntries has the format: [KeyName] := [Parsed Key value]

 Available filters include:
 - Time bounds to select LastWrite timestamp within time ranges.
 - EntryRegex to target specific entry values
 - UserRegex to target specific users. Note: this filter does not work
 when using HiveGlob.
 - SidRegex to target a specific SID.

 Note: both UserRegex and SidRegex does not work when using HiveGlob
 and all MRU will be returned.

parameters:
 - name: KeyGlob
 type: hidden
 default: Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\**
 - name: HiveGlob
 description: "optional hive glob to target for offline processing."
 - name: DateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: DateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: EntryRegex
 default: .
 description: "regex filter for document/entry name."
 - name: UserRegex
 default: .
 description: "regex filter for username over standard query."
 - name: SidRegex
 default: .
 description: "regex filter for user SID over standard query."
 - name: Profile
 type: hidden
 default: |
 [
 ["Target", 0, [
 ["Filename", 0, "String", {
 encoding: "utf16",
 }],
 ]]
 ]

sources:
 - query: |
 -- time testing
 LET time_test(stamp) =
 if(condition= DateBefore AND DateAfter,
 then= stamp &amp;lt; DateBefore AND stamp &amp;gt; DateAfter,
 else=
 if(condition=DateBefore,
 then= stamp &amp;lt; DateBefore,
 else=
 if(condition= DateAfter,
 then= stamp &amp;gt; DateAfter,
 else= True
 )))


 -- dynamic function to extract RecentDocs order from MRUListEx data value
 LET find_order(value) = SELECT
 parse_binary(accessor='data',
 filename=substr(str=value,start=_value,end=_value + 4),
 struct='uint32') as Int
 FROM range(end=len(list=value),start=0,step=4)
 WHERE NOT Int = 4294967295

 -- NTUser method is most accurate
 LET NTUserValues = SELECT
 Mtime,
 OSPath.Components[-2] AS Type,
 OSPath.Components[-1] AS Name,
 if(condition= OSPath.Basename = 'MRUListEx',
 then= find_order(value=Data.value).Int,
 else= parse_binary(
 accessor="data",
 filename=Data.value,
 profile=Profile, struct="Target").Filename ) as Value,
 Data,
 OSPath.DelegatePath as HiveName,
 OSPath,
 Username,
 UUID
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob)
 WHERE Username =~ UserRegex
 AND UUID =~ SidRegex
 AND Data.type =~ 'BINARY'


 -- Glob method allows offline processing but can not filter by user
 LET GlobValues = SELECT
 Mtime,
 OSPath.Components[-2] AS Type,
 OSPath.Components[-1] AS Name,
 if(condition= OSPath.Basename = 'MRUListEx',
 then= find_order(value=Data.value).Int,
 else= parse_binary(
 accessor="data",
 filename=Data.value,
 profile=Profile,
 struct="Target").Filename ) as Value,
 Data,
 OSPath.DelegatePath as HiveName,
 OSPath
 FROM glob(
 globs=KeyGlob,
 root=pathspec(DelegatePath=HiveGlob),
 accessor="raw_reg")
 WHERE Data.type =~ 'BINARY'

 -- precalculate all hive values for performance
 LET AllValues &amp;lt;= SELECT * FROM if(condition= HiveGlob,
 then={ SELECT * FROM GlobValues},
 else={ SELECT * FROM NTUserValues} )
 WHERE time_test(stamp=Mtime)


 -- memorise for lookup / performance
 LET Items &amp;lt;= memoize(query={
 SELECT Type, Name, Value,
 Type + ':' + Name + ':' + HiveName AS Key
 FROM AllValues
 }, key="Key")


 -- flattern output then add lookup of processed data
 LET flat_data(type,hivename) = SELECT *,
 str(str=Value) + ' := ' +
 get(item=Items, field=str(str=Type) + ':' +
 str(str=Value) + ':' + str(str=hivename) ).Value AS Value
 FROM flatten(query={
 SELECT Mtime, Type, Name, Value,HiveName
 FROM AllValues
 WHERE Name = 'MRUListEx'
 AND Type = type AND HiveName = hivename
 })
 GROUP BY Value


 -- prep results
 LET results = SELECT Mtime as LastWriteTime, Type,
 flat_data(type=Type, hivename=HiveName).Value as MruEntries,
 OSPath.Path as Key,
 HiveName,
 if(condition=HiveGlob,
 then='', else=Username) as Username,
 if(condition=HiveGlob,
 then='', else=UUID) as UUID
 FROM AllValues
 WHERE Name = 'MRUListEx'


 -- print rows, remove Username/SID from offline
 SELECT * FROM if(condition=HiveGlob,
 then = {
 SELECT LastWriteTime, Type,
 if(condition= NOT MruEntries[0],
 then= Null,
 else= MruEntries) as MruEntries,
 Key, HiveName
 FROM results
 },
 else={
 SELECT LastWriteTime, Type,
 if(condition= NOT MruEntries[0],
 then= Null,
 else= MruEntries) as MruEntries,
 Key, HiveName, Username, UUID
 FROM results
 })
 WHERE format(format='%v', args=MruEntries) =~ EntryRegex

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.Sysinternals.Eulacheck</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.sysinternals.eulacheck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.sysinternals.eulacheck/</guid><description>&lt;p>Checks for the Accepted Sysinternals EULA from the registry key
&amp;ldquo;HKCU\Software\Sysinternals[TOOL]&amp;quot;. When a Sysinternals tool is
first run on a system, the EULA must be accepted. This writes a
value called EulaAccepted under that key.&lt;/p>
&lt;p>Note: This artifact uses HKEY_USERS and therefore will not detect
users that are not currently logged on.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.Sysinternals.Eulacheck
description: |
 Checks for the Accepted Sysinternals EULA from the registry key
 "HKCU\Software\Sysinternals\[TOOL]\". When a Sysinternals tool is
 first run on a system, the EULA must be accepted. This writes a
 value called EulaAccepted under that key.

 Note: This artifact uses HKEY_USERS and therefore will not detect
 users that are not currently logged on.

parameters:
 - name: Sysinternals_Reg_Key
 default: HKEY_USERS\*\Software\Sysinternals\*
 - name: userRegex
 default: .
 type: regex

imports:
 - Windows.Registry.NTUser

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 name: RegistryAPI
 query: |
 LET users &amp;lt;= SELECT Name, UUID
 FROM Artifact.Windows.Sys.Users()
 WHERE Name =~ userRegex

 SELECT Key.Name as ProgramName,
 Key.OSPath as Key,
 Key.Mtime AS TimeAccepted,
 {
 SELECT Name FROM users WHERE UUID=regex_replace(
 source=Key.OSPath, re=".+\\\\(S-[^\\\\]+)\\\\.+", replace="$1")
 } as User,
 EulaAccepted
 FROM read_reg_key(globs=split(string=Sysinternals_Reg_Key, sep=',[\\s]*'))

 - name: RawRegistry
 description: Detect keys using Raw Registry Analysis
 query: |
 -- Apply Raw Registry Mappings
 LET _ &amp;lt;= MapRawRegistryHives

 -- Make sure to call the other sources otherwise we get recursion errors!
 SELECT *
 FROM Artifact.Windows.Registry.Sysinternals.Eulacheck(source="RegistryAPI")

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.UserAssist</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.userassist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.userassist/</guid><description>&lt;p>Windows systems maintain a set of keys in the registry database
(UserAssist keys) to keep track of programs that executed. The
number of executions and last execution date and time are available
in these keys.&lt;/p>
&lt;p>The information within the binary UserAssist values contains only
statistical data on the applications launched by the user via
Windows Explorer. Programs launched via the command­line (cmd.exe)
do not appear in these registry keys.&lt;/p>
&lt;p>From a forensics perspective, being able to decode this information
can be very useful.&lt;/p>
&lt;p>Limitations: Additional data not parsed by Velociraptor is the FocusTime
and FocusCount however these are not reliable.
Also please note that some methods of viewing an executable will update
the associated UserAssist key, and some methods of accessing an executable
will not update the execution counter or time. Therefore there may be
some executions that have a 0 time and 0 runcount.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.UserAssist
description: |
 Windows systems maintain a set of keys in the registry database
 (UserAssist keys) to keep track of programs that executed. The
 number of executions and last execution date and time are available
 in these keys.

 The information within the binary UserAssist values contains only
 statistical data on the applications launched by the user via
 Windows Explorer. Programs launched via the command­line (cmd.exe)
 do not appear in these registry keys.

 From a forensics perspective, being able to decode this information
 can be very useful.

 Limitations: Additional data not parsed by Velociraptor is the FocusTime
 and FocusCount however these are not reliable.
 Also please note that some methods of viewing an executable will update
 the associated UserAssist key, and some methods of accessing an executable
 will not update the execution counter or time. Therefore there may be
 some executions that have a 0 time and 0 runcount.

reference:
 - https://www.aldeid.com/wiki/Windows-userassist-keys

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: UserFilter
 default: ""
 description: If specified we filter by this username.
 type: regex

 - name: ExecutionTimeAfter
 default: ""
 type: timestamp
 description: If specified only show executions after this time.

 - name: UserAssistKey
 default: Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\*\Count\*

export:
 LET userAssistProfile = '''
 [
 ["Header", 0, [
 ["NumberOfExecutions", 4, "uint32"],
 ["LastExecution", 60, "uint64"]
 ]]
 ]
 '''

sources:
 - query: |
 LET TMP = SELECT OSPath.Path AS _KeyPath,
 parse_string_with_regex(
 string=OSPath.Path,
 regex="^.+Count\\\\\"?(?P&amp;lt;Name&amp;gt;.+?)\"?$") AS Name,
 OSPath,
 parse_binary(
 filename=Data.value,
 accessor="data",
 profile=userAssistProfile,
 struct="Header"
 ) As ParsedUserAssist,
 Username AS User
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=UserAssistKey)

 LET UserAssist = SELECT _KeyPath,
 if(condition=Name.Name,
 then=rot13(string=Name.Name),
 else=OSPath.Path) AS Name,
 User,
 timestamp(winfiletime=ParsedUserAssist.LastExecution) As LastExecution,
 timestamp(winfiletime=ParsedUserAssist.LastExecution).Unix AS LastExecutionTS,
 ParsedUserAssist.NumberOfExecutions AS NumberOfExecutions
 FROM TMP
 ORDER BY LastExecution
 LET A1 = SELECT * FROM if(
 condition=UserFilter,
 then={
 SELECT * FROM UserAssist WHERE User =~ UserFilter
 },
 else={ SELECT * FROM UserAssist})

 SELECT * FROM if(
 condition=ExecutionTimeAfter,
 then={
 SELECT * FROM A1 WHERE LastExecutionTS &amp;gt; ExecutionTimeAfter
 },
 else={ SELECT * FROM A1})

&lt;/code>&lt;/pre></description></item><item><title>Windows.Registry.WDigest</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.registry.wdigest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.registry.wdigest/</guid><description>&lt;p>Find WDigest registry values on the filesystem. The artifact will also use
GROUP BY to limit all ControlSet output to a single row.&lt;/p>
&lt;p>In order to prevent a clear-text password from being placed in
LSASS, the following registry key needs to be set to “0” (Digest
Disabled):&lt;/p>
&lt;ul>
&lt;li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest
“UseLogonCredential”(DWORD)
“Negotiate”(DWORD)&lt;/li>
&lt;/ul>
&lt;p>These registry keys are worth monitoring in an environment as an
attacker may wish to set it to 1 to enable Digest password support
which forces “clear-text” passwords to be placed in LSASS on any
version of Windows from Windows 7 / 2008R2 up to Windows 10 /
2012R2. Furthermore, Windows 8.1 / 2012 R2 and newer do not have a
“UseLogonCredential” DWORD value, so the key needs to be
added. The existence of the key is suspicious, if not expected.&lt;/p>
&lt;ul>
&lt;li>ATT&amp;amp;CK tactic: Defense Evasion, Credential Access&lt;/li>
&lt;li>ATT&amp;amp;CK technique: T1112, T1003.001&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Registry.WDigest
author: Eduardo Mattos - @eduardfir, Matt Green - @mgreen27
description: |
 Find WDigest registry values on the filesystem. The artifact will also use
 GROUP BY to limit all ControlSet output to a single row.

 In order to prevent a clear-text password from being placed in
 LSASS, the following registry key needs to be set to “0” (Digest
 Disabled):

 - HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest
 “UseLogonCredential”(DWORD)
 “Negotiate”(DWORD)

 These registry keys are worth monitoring in an environment as an
 attacker may wish to set it to 1 to enable Digest password support
 which forces “clear-text” passwords to be placed in LSASS on any
 version of Windows from Windows 7 / 2008R2 up to Windows 10 /
 2012R2. Furthermore, Windows 8.1 / 2012 R2 and newer do not have a
 “UseLogonCredential” DWORD value, so the key needs to be
 added. The existence of the key is suspicious, if not expected.

 * ATT&amp;amp;CK tactic: Defense Evasion, Credential Access
 * ATT&amp;amp;CK technique: T1112, T1003.001

reference:
 - https://medium.com/blue-team/preventing-mimikatz-attacks-ed283e7ebdd5

type: CLIENT
precondition:
 SELECT * FROM info() where OS = 'windows'

parameters:
 - name: WDigestGlob
 default: HKEY_LOCAL_MACHINE\SYSTEM\*ControlSet*\Control\SecurityProviders\WDigest\**
 description: Use a glob to define the files that will be searched.
 - name: ShowAllValues
 type: bool
 description: Show all key values. It may be suspicious if these keys exist.


sources:
 - query: |
 SELECT
 ModTime as LastModified,
 OSPath as KeyPath,
 Name as KeyName,
 Data.type as KeyType,
 Data.value as KeyValue
 FROM glob(globs=WDigestGlob, accessor="registry")
 WHERE KeyType = "DWORD"
 AND KeyName =~ "UseLogonCredential|Negotiate"
 AND NOT if(condition= ShowAllValues,
 then= False,
 else= KeyValue = 0)
 GROUP BY LastModified, KeyName, KeyType, KeyValue,
 regex_replace(source=OSPath,
 re='''[^\\]+ControlSet[^\\]+''',replace='CurrentControlSet')

column_types:
 - name: LastModified
 type: timestamp

&lt;/code>&lt;/pre></description></item><item><title>Windows.Remediation.Quarantine</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.quarantine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.quarantine/</guid><description>&lt;p>&lt;strong>Apply quarantine via Windows local IPSec policy&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By default the current client configuration is applied as an
exclusion using resolved IP address at time of application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A configurable lookup table is also used to generate
additional entries using the same syntax as netsh ipsec
configuration.&lt;/p>
&lt;ul>
&lt;li>DNS and DHCP are entires here allowed by default.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>An optional MessageBox may also be configured to alert all
logged in users.&lt;/p>
&lt;ul>
&lt;li>The message will be truncated to 256 characters.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>After policy application, connection back to the Velociraptor
frontend is tested and the policy removed if connection
unavailable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To remove policy, select the RemovePolicy checkbox.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To update policy, simply rerun the artifact.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Remember DNS resolution may change. It is highly recommended
to plan policy accordingly and not rely on DNS lookups.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Local IPSec policy can not be applied when Domain IPSec policy
is already enforced. Please configure at GPO level in this case.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This artifact deliberately does not support connecting back on
plain http! We only support the https or wss protocols because
this is the recommended connectivity mechanism between server
and client.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Remediation.Quarantine
description: |
 **Apply quarantine via Windows local IPSec policy**

 - By default the current client configuration is applied as an
 exclusion using resolved IP address at time of application.

 - A configurable lookup table is also used to generate
 additional entries using the same syntax as netsh ipsec
 configuration.

 - DNS and DHCP are entires here allowed by default.

 - An optional MessageBox may also be configured to alert all
 logged in users.

 - The message will be truncated to 256 characters.

 - After policy application, connection back to the Velociraptor
 frontend is tested and the policy removed if connection
 unavailable.

 - To remove policy, select the RemovePolicy checkbox.

 - To update policy, simply rerun the artifact.

 NOTE:

 - Remember DNS resolution may change. It is highly recommended
 to plan policy accordingly and not rely on DNS lookups.

 - Local IPSec policy can not be applied when Domain IPSec policy
 is already enforced. Please configure at GPO level in this case.

 - This artifact deliberately does not support connecting back on
 plain http! We only support the https or wss protocols because
 this is the recommended connectivity mechanism between server
 and client.

author: Matt Green - @mgreen27

reference:
 - https://mgreen27.github.io/posts/2020/07/23/IPSEC.html

required_permissions:
 - EXECVE

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: PolicyName
 default: "VelociraptorQuarantine"
 - name: RuleLookupTable
 type: csv
 default: |
 Action,SrcAddr,SrcMask,SrcPort,DstAddr,DstMask,DstPort,Protocol,Mirrored,Description
 Permit,me,,0,any,,53,udp,yes,DNS
 Permit,me,,0,any,,53,tcp,yes,DNS TCP
 Permit,me,,68,any,,67,udp,yes,DHCP
 Block,any,,,any,,,,yes,All other traffic

 - name: MessageBox
 description: |
 Optional message box notification to send to logged in users. 256
 character limit.

 - name: RemovePolicy
 type: bool
 description: Tickbox to remove policy.

 - name: VelociraptorURL
 description: |
 A URL for allowing connections back to the
 Velociraptor server. If not specified we use the first URL in the
 client's configuration file.

sources:
 - query: |
 LET AllURLs &amp;lt;= filter(list=config.server_urls + VelociraptorURL, regex='.+')

 // If a MessageBox configured truncate to 256 character limit
 LET MessageBox &amp;lt;= parse_string_with_regex(
 regex='^(?P&amp;lt;Message&amp;gt;.{0,255}).*',
 string=MessageBox).Message

 // Normalise Action
 LET normalise_action(Action)=if(condition= lowcase(string=Action)= 'permit',
 then= 'Permit',
 else= if(condition= lowcase(string=Action)= 'block',
 then= 'Block'))

 // extract configurable policy from lookuptable
 LET configurable_policy &amp;lt;= SELECT
 normalise_action(Action=Action) AS Action,
 SrcAddr,SrcMask,SrcPort,
 DstAddr,DstMask,DstPort,
 Protocol,Mirrored,Description
 FROM RuleLookupTable

 // Parse a URL to get domain name.
 LET get_domain(URL) = split(string=url(parse=URL).Host, sep=":")[0]

 // Parse a URL to get the port or use 443. We deliberately do
 // not support plain http!
 LET get_port(URL) = if(condition=url(parse=URL).Host =~ ":",
 then=split(string=url(parse=URL).Host, sep=":")[1],
 else="443")

 // extract Velociraptor config for policy
 LET extracted_config &amp;lt;= SELECT * FROM foreach(
 row= AllURLs,
 query={
 SELECT
 'Permit' AS Action,
 'me' AS SrcAddr,
 '' As SrcMask,
 '0' AS SrcPort,
 get_domain(URL=_value) AS DstAddr,
 '' As DstMask,
 get_port(URL=_value) AS DstPort,
 'tcp' AS Protocol,
 'yes' AS Mirrored,
 'VelociraptorFrontEnd' AS Description,
 _value AS URL
 FROM scope()
 })

 // build policy with extracted config and lookuptable
 LET policy &amp;lt;= SELECT *
 FROM chain(
 a=extracted_config,
 b=configurable_policy
 )
 WHERE Action =~ '^(Permit|Block)$'

 // Removes empty options from the command line
 LET clean_cmdline(CMD) = filter(list=CMD, regex='^(\\w+|\\w+=.+)$')

 LET delete_cmdline = clean_cmdline(
 CMD=('netsh','ipsec','static','delete','policy', 'name=' + PolicyName))

 LET create_cmdline = clean_cmdline(
 CMD=('netsh','ipsec','static','add','policy', 'name=' + PolicyName))

 LET action_cmdline(Action) = clean_cmdline(
 CMD=('netsh','ipsec','static','add','filteraction',
 'name=' + PolicyName + ' ' + Action + 'Action',
 'action=' + Action))

 LET rule_cmdline(Action) = clean_cmdline(
 CMD=('netsh','ipsec','static','add','rule',
 'name=' + PolicyName + ' ' + Action + 'Rule',
 'policy=' + PolicyName,
 'filterlist=' + PolicyName + ' ' + Action + 'FilterList',
 'filteraction=' + PolicyName + ' ' + Action + 'Action'))

 LET enable_cmdline = clean_cmdline(
 CMD=('netsh','ipsec','static','set','policy',
 'name=' + PolicyName, 'assign=y'))

 // Emit the message if no output is emitted, otherwise emit the output.
 LET combine_results(Stdout, Stderr, ReturnCode, Message) = if(
 condition=Stdout =~ "[^\\s]", then=Stdout,
 else= if(condition=Stderr =~ "[^\\s]", then=Stderr,
 else= if(condition= ReturnCode=0,
 then=Message )))

 // delete old or unwanted policy
 LET delete_policy = SELECT
 timestamp(epoch=now()) as Time,
 PolicyName + ' IPSec policy removed.' AS Result
 FROM execve(argv=delete_cmdline, length=10000)

 // first step is creating IPSec policy
 LET create_policy = SELECT
 timestamp(epoch=now()) as Time,
 combine_results(Stdout=Stdout, Stderr=Stderr,
 ReturnCode=ReturnCode,
 Message=PolicyName + ' IPSec policy created.') AS Result
 FROM execve(argv=create_cmdline, length=10000)

 LET entry_cmdline(Action, SrcAddr, SrcPort, SrcMask,
 DstAddr, DstPort, DstMask, Protocol,
 Mirrored, Description) = clean_cmdline(
 CMD=('netsh','ipsec','static','add','filter',
 format(format='filterlist=%s %sFilterList', args=[PolicyName, Action]),
 format(format='srcaddr=%v', args=SrcAddr),
 format(format='srcmask=%v', args=SrcMask),
 format(format='srcport=%v', args=SrcPort),
 format(format='dstaddr=%v', args=DstAddr),
 format(format='dstmask=%v', args=DstMask),
 format(format='dstport=%v', args=DstPort),
 format(format='protocol=%v', args=Protocol),
 format(format='mirrored=%v', args=Mirrored),
 format(format='description=%v', args=Description)))

 // second step is to create policy filters
 LET create_filters = SELECT * FROM foreach(row=policy,
 query={
 SELECT
 timestamp(epoch=now()) as Time,
 combine_results(Stdout=Stdout, Stderr=Stderr,
 ReturnCode=ReturnCode,
 Message='Entry added: ' +
 join(array=entry_cmdline(Action=Action,
 SrcAddr=SrcAddr, SrcPort=SrcPort, SrcMask=SrcMask,
 DstAddr=DstAddr, DstPort=DstPort, DstMask=DstMask,
 Protocol=Protocol, Mirrored=Mirrored,
 Description=Description), sep=" ")) AS Result
 FROM execve(argv=entry_cmdline(Action=Action,
 SrcAddr=SrcAddr, SrcPort=SrcPort, SrcMask=SrcMask,
 DstAddr=DstAddr, DstPort=DstPort, DstMask=DstMask,
 Protocol=Protocol, Mirrored=Mirrored,
 Description=Description), length=10000)
 })

 // third step is to create policy filter actions
 LET create_actions = SELECT * FROM foreach(
 row= {
 SELECT Action
 FROM policy
 GROUP BY Action
 },
 query={
 SELECT
 timestamp(epoch=now()) as Time,
 combine_results(Stdout=Stdout, Stderr=Stderr,
 ReturnCode=ReturnCode,
 Message='FilterAction added: ' +
 join(array=action_cmdline(Action=Action), sep=" ")) AS Result
 FROM execve(argv=action_cmdline(Action=Action), length=10000)
 })

 // fourth step combines action lists and actions in a Rule
 LET create_rules = SELECT * FROM foreach(
 row= {
 SELECT Action
 FROM policy
 GROUP BY Action
 },
 query={
 SELECT
 timestamp(epoch=now()) as Time,
 combine_results(Stdout=Stdout, Stderr=Stderr,
 ReturnCode=ReturnCode,
 Message='Rule added: ' +
 join(array=rule_cmdline(Action=Action), sep=" ")) AS Result
 FROM execve(argv=rule_cmdline(Action=Action), length=10000)
 })

 // fith step is to enable our IPSec policy
 LET enable_policy = SELECT
 timestamp(epoch=now()) as Time,
 combine_results(Stdout=Stdout, Stderr=Stderr,
 ReturnCode=ReturnCode,
 Message=PolicyName + ' IPSec policy applied.') AS Result
 FROM execve(argv=enable_cmdline, length=10000)

 // test connection to a frontend server
 LET test_connection = SELECT * FROM foreach(
 row={
 SELECT * FROM policy
 WHERE Description = 'VelociraptorFrontEnd'
 },
 query={
 SELECT *
 Url,
 response
 FROM
 -- Always use https even when configured for wss
 http_client(url=url(
 scheme='https',
 host=DstAddr + ':' + DstPort,
 path='/server.pem').String)

 WHERE Response = 200
 LIMIT 1
 })

 // final check to keep or remove policy
 LET final_check = SELECT * FROM if(condition= test_connection,
 then={
 SELECT
 timestamp(epoch=now()) as Time,
 if(condition=MessageBox,
 then= PolicyName + ' connection test successful. MessageBox sent.',
 else= PolicyName + ' connection test successful.'
 ) AS Result
 FROM if(condition=MessageBox,
 then= {
 SELECT * FROM execve(argv=['msg','*',MessageBox])
 },
 else={
 SELECT * FROM scope()
 })
 },
 else={
 SELECT
 timestamp(epoch=now()) as Time,
 PolicyName + ' failed connection test. Removing IPSec policy.' AS Result
 FROM delete_policy
 })

 // Execute content
 SELECT * FROM if(condition=RemovePolicy,
 then=delete_policy,
 else={
 SELECT * FROM chain(
 a=delete_policy,
 b=create_policy,
 c=create_filters,
 d=create_actions,
 e=create_rules,
 g=enable_policy,
 h=final_check)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Remediation.QuarantineMonitor</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.quarantinemonitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.quarantinemonitor/</guid><description>&lt;p>An event query that will ensure the client is quarantined.&lt;/p>
&lt;p>We re-calculate the quarantine every 10 minutes by default to
account for changes in DNS/connectivity details. When the query is
terminated, we undo the quarantine.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Remediation.QuarantineMonitor
description: |
 An event query that will ensure the client is quarantined.

 We re-calculate the quarantine every 10 minutes by default to
 account for changes in DNS/connectivity details. When the query is
 terminated, we undo the quarantine.

type: CLIENT_EVENT

required_permissions:
 - EXECVE

parameters:
 - name: PolicyName
 default: "VelociraptorQuarantine"
 - name: RuleLookupTable
 type: csv
 default: |
 Action,SrcAddr,SrcMask,SrcPort,DstAddr,DstMask,DstPort,Protocol,Mirrored,Description
 Permit,me,,0,any,,53,udp,yes,DNS
 Permit,me,,0,any,,53,tcp,yes,DNS TCP
 Permit,me,,68,any,,67,udp,yes,DHCP
 Block,any,,,any,,,,yes,All other traffic
 - name: MessageBox
 description: |
 Optional message box notification to send to logged in users. 256
 character limit.
 - name: ReloadPeriod
 description: Reload the ipsec policy every this many seconds on the endpoint.
 default: "600"
 type: int

precondition:
 SELECT OS FROM info() WHERE OS = "windows"
 AND version(function="atexit") &amp;gt;= 0

sources:
 - query: |
 -- When the query is done we unset the policy.
 LET _ &amp;lt;= atexit(query={
 SELECT * FROM Artifact.Windows.Remediation.Quarantine(
 PolicyName=PolicyName, RemovePolicy=TRUE)
 })

 SELECT * FROM foreach(
 row={
 SELECT * FROM clock(period=ReloadPeriod, start=now())
 WHERE log(message="Setting quarantine policy")
 },
 query={
 SELECT * FROM Artifact.Windows.Remediation.Quarantine(
 PolicyName=PolicyName, RuleLookupTable=RuleLookupTable,
 MessageBox=MessageBox)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Remediation.ScheduledTasks</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.scheduledtasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.scheduledtasks/</guid><description>&lt;p>Remove malicious task from the Windows scheduled task list.&lt;/p>
&lt;p>Danger: You need to make sure to test this before running.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Remediation.ScheduledTasks
description: |
 Remove malicious task from the Windows scheduled task list.

 Danger: You need to make sure to test this before running.

type: CLIENT

required_permissions:
 - EXECVE

parameters:
 - name: script
 default: |
 Unregister-ScheduledTask -TaskName "%s" -Confirm:$false
 - name: TasksPath
 default: c:/Windows/System32/Tasks/**
 - name: ArgumentRegex
 default: ThisIsAUniqueName
 type: regex
 - name: CommandRegEx
 default: ThisIsAUniqueName
 type: regex
 - name: PowerShellExe
 default: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
 - name: ReallyDoIt
 type: bool
 default: N

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET task_paths = SELECT Name, OSPath
 FROM glob(globs=TasksPath)
 WHERE NOT IsDir

 LET parse_task = select OSPath, Name, parse_xml(
 accessor='data',
 file=regex_replace(
 source=utf16(string=Data),
 re='&amp;lt;[?].+?&amp;gt;',
 replace='')) AS XML
 FROM read_file(filenames=OSPath)

 LET tasks = SELECT OSPath, Name,
 XML.Task.Actions.Exec.Command as Command,
 XML.Task.Actions.Exec.Arguments as Arguments,
 XML.Task.Actions.ComHandler.ClassId as ComHandler,
 XML.Task.Principals.Principal.UserId as UserId,
 XML as _XML
 FROM foreach(row=task_paths, query=parse_task)
 WHERE (Arguments =~ ArgumentRegex AND Command =~ CommandRegEx) AND
 log(message="Removing task " + Name)

 SELECT * FROM foreach(row=tasks,
 query={
 SELECT * FROM if(condition= ReallyDoIt='Y',
 then={
 SELECT OSPath, Name, Command, Arguments, ComHandler, UserId, _XML
 FROM execve(argv=[PowerShellExe,
 "-ExecutionPolicy", "Unrestricted", "-encodedCommand",
 base64encode(string=utf16_encode(
 string=format(format=script, args=[Name])))
 ])
 }, else={
 SELECT OSPath, Name, Command, Arguments, ComHandler, UserId, _XML
 FROM scope()
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Remediation.Sinkhole</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.sinkhole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.remediation.sinkhole/</guid><description>&lt;p>&lt;strong>Apply a Sinkhole via Windows hosts file modification&lt;/strong>
This content will modify the Windows hosts file by a configurable
lookup table.&lt;/p>
&lt;p>On application, the original configuration is backed up.
When reapplying a sinkhole, the original configuration is restored then
changes applied to maintain integrity of the restore process.
If RestoreBackup is selected the artifact will restore the backup
configuration, then delete the backup with no further processing.&lt;/p>
&lt;p>NOTE:
Modifying the hosts file may cause network communication issues. I have
disabled any sinkhole settings on the Velociraptor agent configuration
but there are no rail guards on other domains. Use with caution.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Remediation.Sinkhole
description: |
 **Apply a Sinkhole via Windows hosts file modification**
 This content will modify the Windows hosts file by a configurable
 lookup table.

 On application, the original configuration is backed up.
 When reapplying a sinkhole, the original configuration is restored then
 changes applied to maintain integrity of the restore process.
 If RestoreBackup is selected the artifact will restore the backup
 configuration, then delete the backup with no further processing.

 NOTE:
 Modifying the hosts file may cause network communication issues. I have
 disabled any sinkhole settings on the Velociraptor agent configuration
 but there are no rail guards on other domains. Use with caution.

author: Matt Green - @mgreen27

required_permissions:
 - EXECVE

type: CLIENT

parameters:
 - name: HostsFile
 description: Path to hosts file
 default: C:\Windows\System32\drivers\etc\hosts
 - name: HostsFileBackup
 description: Name to backup original hosts file. If reapplying the artifact this file is used as the base.
 default: C:\Windows\System32\drivers\etc\hosts.velociraptor.backup
 - name: CommentPrefix
 description: Prefix to add to description in hosts file comments.
 default: "Velociraptor sinkhole"
 - name: RestoreBackup
 description: "Restore hosts file backup"
 type: bool
 - name: SinkholeTable
 description: Table of Domains to add to or modify in hosts file.
 type: csv
 default: |
 Domain,Sinkhole,Description
 evil.com,127.0.0.1,Evilcorp C2 domain


sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- Extract sink hole requirements from table
 LET changes &amp;lt;= SELECT
 Domain,
 Sinkhole,
 if(condition=Description,
 then= CommentPrefix + ': ' + Description,
 else= CommentPrefix) as Description
 FROM SinkholeTable

 -- Check for backup to determine if sinkhole applied
 LET check_backup = SELECT OSPath FROM stat(filename=HostsFileBackup)
 WHERE log(message="Found backup at " + OSPath)

 -- Backup old config
 LET backup = copy(filename=HostsFile,dest=HostsFileBackup)

 -- Restore old config
 LET restore = SELECT * FROM chain(
 z=log(message="Will restore from backup"),
 a=copy(filename=HostsFileBackup,dest=HostsFile),
 b={
 SELECT *
 FROM if(condition=RestoreBackup,
 then={
 SELECT *
 FROM execve(argv=['cmd.exe', '/c',
 'del','/F',HostsFileBackup])
 })
 })

 -- Write hosts file
 LET write(DataBlob) = copy(filename=DataBlob,dest=HostsFile,accessor='data')

 -- FlushDNS
 LET flushdns = SELECT *
 FROM execve(argv=['cmd.exe', '/c','ipconfig','/flushdns'])

 -- Find existing entries to modify
 LET existing &amp;lt;= SELECT
 parse_string_with_regex(
 string=Line,
 regex=[
 "^\\s+(?P&amp;lt;Resolution&amp;gt;[^\\s]+)\\s+" +
 "(?P&amp;lt;Hostname&amp;gt;[^\\s]+)\\s*\\S*$"
 ]) as Record,
 Line
 FROM parse_lines(filename=HostsFile)
 WHERE
 Record AND Line
 AND NOT Line =~ '^#'

 -- Parse a URL to get domain name.
 LET get_domain(URL) = parse_string_with_regex(
 string=URL, regex='^https?://(?P&amp;lt;Domain&amp;gt;[^:/]+)').Domain

 -- extract Velociraptor config for policy
 LET extracted_config &amp;lt;= SELECT * FROM foreach(
 row=config.server_urls,
 query={
 SELECT get_domain(URL=_value) AS Domain
 FROM scope()
 })

 -- Set existing entries to sinkholed values
 LET find_modline &amp;lt;= SELECT * FROM foreach(row=changes,
 query={
 SELECT
 format(format='\t%v\t\t%v\t\t# %v',
 args=[Sinkhole,Domain,Description]) as Line,
 Domain,
 'modification' as Type
 FROM existing
 WHERE
 Record.Hostname = Domain
 AND NOT Domain in extracted_config.Domain
 GROUP BY Line
 })

 -- Add new hostsfile entries
 LET find_newline &amp;lt;= SELECT * FROM foreach(row=changes,
 query={
 SELECT
 format(format='\t%v\t\t%v\t\t# %v',
 args=[Sinkhole,Domain,Description]) as Line,
 Domain,
 'new entry' as Type
 FROM scope()
 WHERE
 NOT Domain in find_modline.Domain
 AND NOT Domain in extracted_config.Domain
 })

 -- Determine which lines should stay the same
 LET find_line &amp;lt;= SELECT
 Line,
 Record.Hostname as Domain,
 'old entry' as Type
 FROM existing
 WHERE
 NOT Domain in find_modline.Domain
 AND NOT Domain in find_newline.Domain

 -- Add all lines to staging object
 LET build_lines &amp;lt;= SELECT Line FROM chain(
 a=find_modline,
 b=find_newline,
 c=find_line
 )

 -- Join lines from staging object
 LET HostsData = join(array=build_lines.Line,sep='\r\n')

 -- Force start of backup or restore if applicable
 LET backup_restore &amp;lt;= if(
 condition= RestoreBackup AND log(message="Will attempt to restore backup"),
 then= if(
 condition= check_backup,
 then= restore,
 -- then= { SELECT * FROM restore },
 else= log(message='Can not restore hosts file as backup does not exist.')),

 else= if(
 condition= check_backup,
 then={
 SELECT * FROM chain(
 a= log(message='Backup hosts file already exists.'),
 b= restore)
 },
 else= backup)
 )

 -- Do kick off logic
 LET do_it &amp;lt;= SELECT * FROM if(condition= NOT RestoreBackup,
 then= {
 SELECT * FROM chain(
 a= log(message='Adding hosts entries.'),
 b= write(DataBlob=HostsData),
 c= flushdns
 )})

 -- Finally show resultant HostsFile
 SELECT * FROM Artifact.Windows.System.HostsFile(HostsFile=HostsFile)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Search.FileFinder</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.search.filefinder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.search.filefinder/</guid><description>&lt;p>Find files on the filesystem using the filename or content.&lt;/p>
&lt;h2 id="performance-note">Performance Note&lt;/h2>
&lt;p>This artifact can be quite expensive, especially if we search file
content. It will require opening each file and reading its entire
content. To minimize the impact on the endpoint we recommend this
artifact is collected with a rate limited way (about 20-50 ops per
second).&lt;/p>
&lt;p>This artifact is useful in the following scenarios:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We need to locate all the places on our network where customer
data has been copied.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We’ve identified malware in a data breach, named using short
random strings in specific folders and need to search for other
instances across the network.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We believe our user account credentials have been dumped and
need to locate them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to search for exposed credit card data to satisfy PCI
requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We have a sample of data that has been disclosed and need to
locate other similar files&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Search.FileFinder
description: |
 Find files on the filesystem using the filename or content.


 ## Performance Note

 This artifact can be quite expensive, especially if we search file
 content. It will require opening each file and reading its entire
 content. To minimize the impact on the endpoint we recommend this
 artifact is collected with a rate limited way (about 20-50 ops per
 second).

 This artifact is useful in the following scenarios:

 * We need to locate all the places on our network where customer
 data has been copied.

 * We’ve identified malware in a data breach, named using short
 random strings in specific folders and need to search for other
 instances across the network.

 * We believe our user account credentials have been dumped and
 need to locate them.

 * We need to search for exposed credit card data to satisfy PCI
 requirements.

 * We have a sample of data that has been disclosed and need to
 locate other similar files


precondition:
 SELECT * FROM info() where OS = 'windows'

parameters:
 - name: SearchFilesGlob
 default: C:\Users\*
 description: Use a glob to define the files that will be searched.

 - name: SearchFilesGlobTable
 type: csv
 default: |
 Glob
 C:/Users/SomeUser/*
 description: Alternative specify multiple globs in a table

 - name: Accessor
 default: auto
 description: The accessor to use
 type: choices
 choices:
 - auto
 - registry
 - file
 - ntfs
 - ntfs_vss

 - name: YaraRule
 type: yara
 default:
 description: A yara rule to search for matching files.

 - name: Upload_File
 default: N
 type: bool

 - name: Calculate_Hash
 default: N
 type: bool

 - name: MoreRecentThan
 default: ""
 type: timestamp

 - name: ModifiedBefore
 default: ""
 type: timestamp

 - name: VSS_MAX_AGE_DAYS
 type: int
 description: |
 If larger than 0 we restrict VSS age to this many days
 ago. Otherwise we find all VSS.

sources:
 - query: |
 LET file_search = SELECT OSPath,
 get(item=Data, field="mft") as Inode,
 Mode.String AS Mode, Size,
 Mtime AS MTime,
 Atime AS ATime,
 Btime AS BTime,
 Ctime AS CTime, "" AS Keywords,
 IsDir, Data
 FROM glob(globs=SearchFilesGlobTable.Glob + SearchFilesGlob,
 accessor=Accessor)

 LET more_recent = SELECT * FROM if(
 condition=MoreRecentThan,
 then={
 SELECT * FROM file_search
 WHERE MTime &amp;gt; MoreRecentThan
 }, else=file_search)

 LET modified_before = SELECT * FROM if(
 condition=ModifiedBefore,
 then={
 SELECT * FROM more_recent
 WHERE MTime &amp;lt; ModifiedBefore
 AND MTime &amp;gt; MoreRecentThan
 }, else=more_recent)

 LET keyword_search = SELECT * FROM if(
 condition=YaraRule,
 then={
 SELECT * FROM foreach(
 row={
 SELECT * FROM modified_before
 WHERE NOT IsDir
 },
 query={
 SELECT OSPath, Inode, Mode,
 Size, MTime, ATime, CTime, BTime,
 str(str=String.Data) As Keywords, IsDir, Data

 FROM yara(files=OSPath,
 key="A",
 rules=YaraRule,
 accessor=Accessor)
 })
 }, else=modified_before)

 SELECT OSPath, Inode, Mode, Size, MTime, ATime,
 CTime, BTime, Keywords, IsDir,
 if(condition=Upload_File and NOT IsDir,
 then=upload(file=OSPath, accessor=Accessor)) AS Upload,
 if(condition=Calculate_Hash and NOT IsDir,
 then=hash(path=OSPath, accessor=Accessor)) AS Hash,
 Data
 FROM keyword_search

column_types:
 - name: Modified
 type: timestamp
 - name: ATime
 type: timestamp
 - name: MTime
 type: timestamp
 - name: CTime
 type: timestamp
 - name: Upload
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Search.SMBFileFinder</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.search.smbfilefinder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.search.smbfilefinder/</guid><description>&lt;p>Find files on a remote filesystem using the filename or content.&lt;/p>
&lt;h2 id="security-note">Security Note&lt;/h2>
&lt;p>In order to access a remote share we require the credentials of a
domain user. Currently only username/password are supported (i.e. no
Kerberose). You should use Group Policy to create a user with read
only access to the remote share.&lt;/p>
&lt;h2 id="performance-note">Performance Note&lt;/h2>
&lt;p>This artifact can be quite expensive slow and generate a lot of
network data, especially if we search file content. It will require
opening each file and reading its entire content. To minimize the
impact on the endpoint we recommend this artifact is collected with
a rate limited way (about 20-50 ops per second).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Search.SMBFileFinder
description: |
 Find files on a remote filesystem using the filename or content.

 ## Security Note

 In order to access a remote share we require the credentials of a
 domain user. Currently only username/password are supported (i.e. no
 Kerberose). You should use Group Policy to create a user with read
 only access to the remote share.

 ## Performance Note

 This artifact can be quite expensive slow and generate a lot of
 network data, especially if we search file content. It will require
 opening each file and reading its entire content. To minimize the
 impact on the endpoint we recommend this artifact is collected with
 a rate limited way (about 20-50 ops per second).

parameters:
 - name: ServerName
 default: 127.0.0.1:445
 description: |
 The name of the server to contact. If a port is not specified we
 use port 445

 - name: Username
 default: Guest
 type: redacted
 description: The name of a network user to access the remote share with.

 - name: Password
 default: password
 type: redacted
 description: The password to use for accessing the remote share.

 - name: SearchFilesGlob
 default: C$\Users\*
 description: |
 Use a glob to define the files that will be searched. The glob
 must contain the share name as the first component.

 - name: SearchFilesGlobTable
 type: csv
 default: |
 Glob
 C$/Users/SomeUser/*
 description: Alternative specify multiple globs in a table

 - name: YaraRule
 type: yara
 default:
 description: A yara rule to search for matching files.

 - name: Upload_File
 default: N
 type: bool

 - name: Calculate_Hash
 default: N
 type: bool

 - name: MoreRecentThan
 default: ""
 type: timestamp

 - name: ModifiedBefore
 default: ""
 type: timestamp


sources:
 - query: |
 LET SMB_CREDENTIALS &amp;lt;= set(item=dict(), field=ServerName,
 value=format(format="%s:%s", args=[Username, Password]))

 LET file_search = SELECT OSPath,
 get(item=Data, field="mft") as Inode,
 Mode.String AS Mode, Size,
 Mtime AS MTime,
 Atime AS ATime,
 Btime AS BTime,
 Ctime AS CTime, "" AS Keywords,
 IsDir, Data
 FROM glob(globs=SearchFilesGlobTable.Glob + SearchFilesGlob,
 root=ServerName,
 accessor="smb")

 LET more_recent = SELECT * FROM if(
 condition=MoreRecentThan,
 then={
 SELECT * FROM file_search
 WHERE MTime &amp;gt; MoreRecentThan
 }, else=file_search)

 LET modified_before = SELECT * FROM if(
 condition=ModifiedBefore,
 then={
 SELECT * FROM more_recent
 WHERE MTime &amp;lt; ModifiedBefore
 AND MTime &amp;gt; MoreRecentThan
 }, else=more_recent)

 LET keyword_search = SELECT * FROM if(
 condition=YaraRule,
 then={
 SELECT * FROM foreach(
 row={
 SELECT * FROM modified_before
 WHERE NOT IsDir
 },
 query={
 SELECT OSPath, Inode, Mode,
 Size, MTime, ATime, CTime, BTime,
 str(str=String.Data) As Keywords, IsDir, Data

 FROM yara(files=OSPath,
 key="A",
 rules=YaraRule,
 accessor="smb")
 })
 }, else=modified_before)

 SELECT OSPath, Inode, Mode, Size, MTime, ATime,
 CTime, BTime, Keywords, IsDir,
 if(condition=Upload_File and NOT IsDir,
 then=upload(file=OSPath, accessor="smb")) AS Upload,
 if(condition=Calculate_Hash and NOT IsDir,
 then=hash(path=OSPath, accessor="smb")) AS Hash,
 Data
 FROM keyword_search

column_types:
 - name: Modified
 type: timestamp
 - name: ATime
 type: timestamp
 - name: MTime
 type: timestamp
 - name: CTime
 type: timestamp
 - name: Upload
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.Search.VSS</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.search.vss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.search.vss/</guid><description>&lt;p>This artifact will find all relevant files in the VSS. Typically
used to out deduplicated paths for processing by other artifacts.&lt;/p>
&lt;p>NOTE: This used to be more complicated but now delegates to the
&amp;ldquo;ntfs_vss&amp;rdquo; accessor to do all the work.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Search.VSS
description: |
 This artifact will find all relevant files in the VSS. Typically
 used to out deduplicated paths for processing by other artifacts.

 NOTE: This used to be more complicated but now delegates to the
 "ntfs_vss" accessor to do all the work.

author: Matt Green - @mgreen27

precondition: SELECT * FROM info() where OS = 'windows'

parameters:
 - name: SearchFilesGlob
 default: C:\Windows\System32\winevt\Logs\Security.evtx
 description: Use a glob to define the files that will be searched.

 - name: VSS_MAX_AGE_DAYS
 type: int
 description: |
 If larger than 0 we restrict VSS age to this many days
 ago. Otherwise we find all VSS.

sources:
 - query: |
 SELECT * FROM glob(globs=SearchFilesGlob, accessor="ntfs_vss")
 ORDER BY OSPath

&lt;/code>&lt;/pre></description></item><item><title>Windows.Search.Yara</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.search.yara/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.search.yara/</guid><description>&lt;p>Searches for a specific malicious file or set of files by a Yara rule.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Search.Yara
description: |
 Searches for a specific malicious file or set of files by a Yara rule.

parameters:
 - name: nameRegex
 description: Only file names that match this regular expression will be scanned.
 default: "(exe|txt|dll|php)$"
 type: regex
 - name: AlsoUpload
 type: bool
 description: Also upload matching files.
 - name: yaraRule
 type: yara
 description: The Yara Rule to search for.
 default: |
 rule Hit {
 strings:
 $a = "Keyword" nocase wide ascii
 condition:
 any of them
 }

 - name: NTFS_CACHE_TIME
 type: int
 description: How often to flush the NTFS cache. (Default is never).
 default: "1000000"

precondition:
 SELECT * FROM info() WHERE OS =~ "windows"

sources:
 - query: |
 LET Root = pathspec(parse="C:", path_type="ntfs")

 -- Progress logging for newer clients
 LET fileList = SELECT * FROM if(condition=version(function="log") &amp;gt; 1,
 then={
 SELECT Root + OSPath AS OSPath
 FROM parse_mft(accessor="ntfs",filename=Root+"$MFT")
 WHERE InUse
 AND log(message="Processing entry %v", args=EntryNumber, dedup=5)
 AND FileName =~ nameRegex
 AND NOT OSPath =~ "WinSXS"
 AND log(message="Scanning file %v", args=OSPath, dedup=5)

 }, else={
 SELECT Root + OSPath AS OSPath
 FROM parse_mft(accessor="ntfs",filename=Root+"$MFT")
 WHERE InUse
 AND FileName =~ nameRegex
 AND NOT OSPath =~ "WinSXS"
 })

 -- These files are typically short - only report a single hit.
 LET search = SELECT Rule, String.Offset AS HitOffset,
 str(str=String.Data) AS HitContext,
 FileName,
 File.Size AS Size,
 File.ModTime AS ModTime
 FROM yara(
 rules=yaraRule, key="A",
 files= OSPath)
 LIMIT 1

 SELECT *, if(condition=AlsoUpload, then=upload(file=FileName)) AS Upload
 FROM foreach(row=fileList, query=search)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sigma.EventLogs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sigma.eventlogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sigma.eventlogs/</guid><description>&lt;p>Parse Windows event logs and matches then against Sigma Rules.&lt;/p>
&lt;p>NOTE: This is a very simple artifact for demonstration only. For
more extensive Sigma rules use the &lt;code>Server.Import.CuratedSigma&lt;/code>
artifact to import a curated set of Sigma rules from
&lt;a href="https://sigma.velocidex.com/" target="_blank" >https://sigma.velocidex.com/&lt;/a>
&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sigma.EventLogs
description: |
 Parse Windows event logs and matches then against Sigma Rules.

 NOTE: This is a very simple artifact for demonstration only. For
 more extensive Sigma rules use the `Server.Import.CuratedSigma`
 artifact to import a curated set of Sigma rules from
 https://sigma.velocidex.com/

parameters:
- name: EventLogDirectory
 default: C:/Windows/System32/WinEvt/Logs/
- name: InlineSigmaRules
 description: A single string of sigma rules separated by --- lines
- name: SigmaRuleFile
 type: upload
 description: A file containing sigma rules separated by --- lines
- name: Debug
 type: bool
 description: Enable full debug trace

export: |
 LET StandardSigmaLogSource &amp;lt;= sigma_log_sources(
 `process_creation/windows` = {
 SELECT *
 FROM parse_evtx(
 filename= EventLogDirectory + "/Microsoft-Windows-Sysmon%4Operational.evtx")
 },
 `*/windows/sysmon` = {
 SELECT *
 FROM parse_evtx(
 filename= EventLogDirectory + "/Microsoft-Windows-Sysmon%4Operational.evtx")
 })

 LET StandardSigmaFieldMapping &amp;lt;= dict(
 AccessList="x=&amp;gt;x.EventData.AccessList",
 AccessMask="x=&amp;gt;x.EventData.AccessMask",
 Accesses="x=&amp;gt;x.EventData.Accesses",
 AccountDomain="x=&amp;gt;x.EventData.AccountDomain",
 AccountName="x=&amp;gt;x.EventData.AccountName",
 Account_Name="x=&amp;gt;x.EventData.Account_Name",
 Action="x=&amp;gt;x.EventData.Action",
 AllowedToDelegateTo="x=&amp;gt;x.EventData.AllowedToDelegateTo",
 ApplicationPath="x=&amp;gt;x.EventData.ApplicationPath",
 AttributeLDAPDisplayName="x=&amp;gt;x.EventData.AttributeLDAPDisplayName",
 AttributeValue="x=&amp;gt;x.EventData.AttributeValue",
 AuditPolicyChanges="x=&amp;gt;x.EventData.AuditPolicyChanges",
 AuditSourceName="x=&amp;gt;x.EventData.AuditSourceName",
 AuthenticationPackageName="x=&amp;gt;x.EventData.AuthenticationPackageName",
 CallTrace="x=&amp;gt;x.EventData.CallTrace",
 CallerProcessName="x=&amp;gt;x.EventData.CallerProcessName",
 Caller_Process_Name="x=&amp;gt;x.EventData.Caller_Process_Name",
 CallingProcessName="x=&amp;gt;x.EventData.CallingProcessName",
 CategoryName="x=&amp;gt;x.EventData.`Category Name`",
 CertThumbprint="x=&amp;gt;x.EventData.CertThumbprint",
 Channel="x=&amp;gt;x.System.Channel",
 ClassName="x=&amp;gt;x.EventData.ClassName",
 ClientAddress="x=&amp;gt;x.EventData.ClientAddress",
 Client_Address="x=&amp;gt;x.EventData.Client_Address",
 ClientName="x=&amp;gt;x.EventData.ClientName",
 CommandLine="x=&amp;gt;x.EventData.CommandLine",
 Company="x=&amp;gt;x.EventData.Company",
 Computer="x=&amp;gt;x.System.Computer",
 ComputerName="x=&amp;gt;x.System.Computer",
 ContextInfo="x=&amp;gt;x.EventData.ContextInfo",
 CurrentDirectory="x=&amp;gt;x.EventData.CurrentDirectory",
 Description="x=&amp;gt;x.EventData.Description",
 DestAddress="x=&amp;gt;x.EventData.DestAddress",
 DestPort="x=&amp;gt;x.EventData.DestPort",
 Destination="x=&amp;gt;x.EventData.Destination",
 DestinationAddress="x=&amp;gt;x.EventData.DestinationAddress",
 DestinationHostname="x=&amp;gt;x.EventData.DestinationHostname",
 DestinationIp="x=&amp;gt;x.EventData.DestinationIp",
 DestinationIsIpv6="x=&amp;gt;x.EventData.DestinationIsIpv6",
 DestinationPort="x=&amp;gt;x.EventData.DestinationPort",
 Details="x=&amp;gt;x.EventData.Details",
 DetectionSource="x=&amp;gt;x.EventData.DetectionSource",
 DetectionUser="x=&amp;gt;x.EventData.`Detection User`",
 Device="x=&amp;gt;x.EventData.Device",
 DeviceClassName="x=&amp;gt;x.EventData.DeviceClassName",
 DeviceDescription="x=&amp;gt;x.EventData.DeviceDescription",
 DeviceInstanceID="x=&amp;gt;x.UserData.InstallDeviceID.DeviceInstanceID",
 DeviceName="x=&amp;gt;x.EventData.DeviceName",
 DomainName="x=&amp;gt;x.EventData.SubjectDomainName",
 DriverDescription="x=&amp;gt;x.UserData.InstallDeviceID.DriverDescription",
 DriverProvider="x=&amp;gt;x.UserData.InstallDeviceID.DriverProvider",
 InstallStatus="x=&amp;gt;x.UserData.InstallDeviceID.InstallStatus",
 EngineVersion="x=&amp;gt;x.EventData.EngineVersion",
 ErrorCode="x=&amp;gt;x.EventData.ErrorCode",
 EventID="x=&amp;gt;x.System.EventID.Value",
 EventType="x=&amp;gt;x.EventData.EventType",
 ExecutionProcessID="x=&amp;gt;x.System.Execution_attributes.ProcessID",
 FailureCode="x=&amp;gt;x.EventData.FailureCode",
 FilePath="x=&amp;gt;x.EventData.FilePath",
 FileVersion="x=&amp;gt;x.EventData.FileVersion",
 Filename="x=&amp;gt;x.EventData.Filename",
 GrantedAccess="x=&amp;gt;x.EventData.GrantedAccess",
 GroupName="x=&amp;gt;x.EventData.GroupName",
 GroupSid="x=&amp;gt;x.EventData.GroupSid",
 Hashes="x=&amp;gt;x.EventData.Hashes",
 HiveName="x=&amp;gt;x.EventData.HiveName",
 HostApplication="x=&amp;gt;x.EventData.HostApplication",
 HostName="x=&amp;gt;x.EventData.HostName",
 HostVersion="x=&amp;gt;x.EventData.HostVersion",
 Image="x=&amp;gt;x.EventData.Image",
 image="x=&amp;gt;x.EventData.Image",
 ImageLoaded="x=&amp;gt;x.EventData.ImageLoaded",
 ImagePath="x=&amp;gt;x.EventData.ImagePath",
 Imphash="x=&amp;gt;x.EventData.Hashes",
 Initiated="x=&amp;gt;x.EventData.Initiated",
 InstanceID="x=&amp;gt;x.UserData.UMDFHostDeviceArrivalBegin.InstanceId",
 IntegrityLevel="x=&amp;gt;x.EventData.IntegrityLevel",
 IpAddress="x=&amp;gt;x.EventData.IpAddress",
 IpPort="x=&amp;gt;x.EventData.IpPort",
 JobTitle="x=&amp;gt;x.EventData.name",
 KeyLength="x=&amp;gt;x.EventData.KeyLength",
 Keywords="x=&amp;gt;x.System.Keywords",
 LDAPDisplayName="x=&amp;gt;x.EventData.LDAPDisplayName",
 LayerRTID="x=&amp;gt;x.EventData.LayerRTID",
 Level="x=&amp;gt;x.System.Level",
 LogFileClearedChannel="x=&amp;gt;x.UserData.LogFileCleared.Channel",
 LogFileClearedSubjectUserName="x=&amp;gt;x.UserData.LogFileCleared.SubjectUserName",
 LogonId="x=&amp;gt;x.EventData.LogonId",
 LogonID="x=&amp;gt;x.EventData.LogonID",
 LogonProcessName="x=&amp;gt;x.EventData.LogonProcessName",
 LogonType="x=&amp;gt;x.EventData.LogonType",
 Logon_Account="x=&amp;gt;x.EventData.Logon_Account",
 MachineName="x=&amp;gt;x.EventData.MachineName",
 MemberName="x=&amp;gt;x.EventData.MemberName",
 MemberSid="x=&amp;gt;x.EventData.MemberSid",
 Message="x=&amp;gt;x.EventData",
 ModifyingApplication="x=&amp;gt;x.EventData.ModifyingApplication",
 NewName="x=&amp;gt;x.EventData.NewName",
 NewTemplateContent="x=&amp;gt; Event.EventData.NewTemplateContent",
 NewUacValue="x=&amp;gt;x.EventData.NewUacValue",
 NewValue="x=&amp;gt;x.EventData.NewValue",
 New_Value="x=&amp;gt;x.EventData.`New Value`",
 NewProcessName="x=&amp;gt;x.EventData.NewProcessName",
 NewProcessId="x=&amp;gt;x.EventData.NewProcessId",
 ObjectClass="x=&amp;gt;x.EventData.ObjectClass",
 ObjectName="x=&amp;gt;x.EventData.ObjectName",
 ObjectServer="x=&amp;gt;x.EventData.ObjectServer",
 ObjectType="x=&amp;gt;x.EventData.ObjectType",
 ObjectValueName="x=&amp;gt;x.EventData.ObjectValueName",
 OldUacValue="x=&amp;gt;x.EventData.OldUacValue",
 Origin="x=&amp;gt;x.EventData.Origin",
 OriginalFileName="x=&amp;gt;x.EventData.OriginalFileName",
 OriginalFilename="x=&amp;gt;x.EventData.OriginalFileName",
 param1="x=&amp;gt;x.EventData.param1",
 param2="x=&amp;gt;x.EventData.param2",
 param3="x=&amp;gt;x.EventData.param3",
 param4="x=&amp;gt;x.EventData.param4",
 param5="x=&amp;gt;x.EventData.param5",
 ParentCommandLine="x=&amp;gt;x.EventData.ParentCommandLine",
 ParentImage="x=&amp;gt;x.EventData.ParentImage",
 ParentIntegrityLevel="x=&amp;gt;x.EventData.ParentIntegrityLevel",
 ParentProcessName="x=&amp;gt;x.EventData.ParentProcessName",
 ParentUser="x=&amp;gt;x.EventData.ParentUser",
 PasswordLastSet="x=&amp;gt;x.EventData.PasswordLastSet",
 Path="x=&amp;gt;x.EventData.Path",
 Payload="x=&amp;gt;x.EventData.Payload",
 PipeName="x=&amp;gt;x.EventData.PipeName",
 PossibleCause="x=&amp;gt;x.UserData.PossibleCause",
 PreAuthType="x=&amp;gt;x.EventData.PreAuthType",
 PrivilegeList="x=&amp;gt;x.EventData.PrivilegeList",
 ProcessCommandLine="x=&amp;gt;x.EventData.ProcessCommandLine",
 ProcessGuid="x=&amp;gt;x.EventData.ProcessGuid",
 ProcessId="x=&amp;gt;x.EventData.ProcessId",
 ProcessName="x=&amp;gt;x.EventData.ProcessName",
 Product="x=&amp;gt;x.EventData.Product",
 Properties="x=&amp;gt;x.EventData.Properties",
 Provider="x=&amp;gt;x.UserData.Provider",
 ProviderName="x=&amp;gt;x.System.Provider_attributes.Name",
 Provider_Name="x=&amp;gt;x.System.Provider_attributes.Name",
 QNAME="x=&amp;gt;x.EventData.QNAME",
 query="x=&amp;gt;x.EventData.Query",
 Query="x=&amp;gt;x.UserData.Query",
 QueryName="x=&amp;gt;x.EventData.QueryName",
 QueryResults="x=&amp;gt;x.EventData.QueryResults",
 QueryStatus="x=&amp;gt;x.EventData.QueryStatus",
 RelativeTargetName="x=&amp;gt;x.EventData.RelativeTargetName",
 RuleName="x=&amp;gt;x.EventData.RuleName",
 SAMAccountName="x=&amp;gt;x.EventData.SamAccountName",
 ScriptBlockText="x=&amp;gt;x.EventData.ScriptBlockText",
 SearchFilter="x=&amp;gt;x.System.SearchFilter",
 SecurityUserID="x=&amp;gt;x.System.Security_attributes.UserID",
 ServerName="x=&amp;gt;x.System.ServerName",
 Service="x=&amp;gt;x.EventData.Service",
 ServiceFileName="x=&amp;gt;x.EventData.ServiceFileName",
 ServiceName="x=&amp;gt;x.EventData.ServiceName",
 ServicePrincipalNames="x=&amp;gt;x.EventData.ServicePrincipalNames",
 ServiceStartType="x=&amp;gt;x.EventData.ServiceStartType",
 ServiceType="x=&amp;gt;x.EventData.ServiceType",
 SeverityID="x=&amp;gt;x.EventData.`Severity ID`",
 SeverityName="x=&amp;gt;x.EventData.`Severity Name`",
 ShareLocalPath="x=&amp;gt;x.EventData.ShareLocalPath",
 ShareName="x=&amp;gt;x.EventData.ShareName",
 SidHistory="x=&amp;gt;x.EventData.SidHistory",
 Signature="x=&amp;gt;x.EventData.Signature",
 SignatureStatus="x=&amp;gt;x.EventData.SignatureStatus",
 Signed="x=&amp;gt;x.EventData.Signed",
 Source="x=&amp;gt;x.System.Provider_Name",
 SourceAddress="x=&amp;gt;x.EventData.SourceAddress",
 SourceImage="x=&amp;gt;x.EventData.SourceImage",
 SourceNetworkAddress="x=&amp;gt;x.EventData.SourceNetworkAddress",
 SourcePort="x=&amp;gt;x.EventData.SourcePort",
 Source_Name="x=&amp;gt;x.EventData.`Source Name`",
 Source_Network_Address="x=&amp;gt;x.EventData.Source_Network_Address",
 Source_WorkStation="x=&amp;gt;x.EventData.Source_WorkStation",
 StartAddress="x=&amp;gt;x.EventData.StartAddress",
 StartFunction="x=&amp;gt;x.EventData.StartFunction",
 StartModule="x=&amp;gt;x.EventData.StartModule",
 StartType="x=&amp;gt;x.EventData.StartType",
 State="x=&amp;gt;x.EventData.State",
 Status="x=&amp;gt;x.EventData.Status",
 SubStatus="x=&amp;gt;x.EventData.SubStatus",
 SubjectDomainName="x=&amp;gt;x.EventData.SubjectDomainName",
 SubjectLogonId="x=&amp;gt;x.EventData.SubjectLogonId",
 SubjectUserName="x=&amp;gt;x.EventData.SubjectUserName",
 SubjectUserSid="x=&amp;gt;x.EventData.SubjectUserSid",
 TargetDomainName="x=&amp;gt;x.EventData.TargetDomainName",
 TargetFilename="x=&amp;gt;x.EventData.TargetFilename",
 TargetInfo="x=&amp;gt;x.EventData.TargetInfo",
 TargetImage="x=&amp;gt;x.EventData.TargetImage",
 TargetLogonId="x=&amp;gt;x.EventData.TargetLogonId",
 TargetObject="x=&amp;gt;x.EventData.TargetObject",
 TargetProcessAddress="x=&amp;gt;x.EventData.TargetProcessAddress",
 TargetServerName="x=&amp;gt;x.EventData.TargetServerName",
 TargetSid="x=&amp;gt;x.EventData.TargetSid",
 TargetUserName="x=&amp;gt;x.EventData.TargetUserName",
 TaskDate="x=&amp;gt;x.EventData.TaskContent",
 TaskName="x=&amp;gt;x.EventData.TaskName",
 TemplateContent="x=&amp;gt;x.EventData.TemplateContent",
 ThreatName="x=&amp;gt;x.EventData.`Threat Name`",
 TicketEncryptionType="x=&amp;gt;x.EventData.TicketEncryptionType",
 TicketOptions="x=&amp;gt;x.EventData.TicketOptions",
 Url="x=&amp;gt;x.EventData.url",
 User="x=&amp;gt;x.EventData.User",
 UserName="x=&amp;gt;x.EventData.UserName",
 Value="x=&amp;gt;x.EventData.Value",
 Version="x=&amp;gt;x.System.Version",
 WindowsDefenderProcessName="x=&amp;gt;x.EventData.`Process Name`",
 Workstation="x=&amp;gt;x.EventData.Workstation",
 WorkstationName="x=&amp;gt;x.EventData.WorkstationName",
 param1="x=&amp;gt;x.EventData.param1",
 param2="x=&amp;gt;x.EventData.param2",
 service="x=&amp;gt;x.EventData.Service",
 sha1="x=&amp;gt;x.EventData.Hashes_sha1",
 UserDataProviderName="x=&amp;gt;x.UserData.Operation_StartedOperational.ProviderName",
 UserDataCode="x=&amp;gt;x.UserData.Operation_StartedOperational.Code",
 UserDataHostProcess="x=&amp;gt;x.UserData.Operation_StartedOperational.HostProcess",
 UserDataProviderPath="x=&amp;gt;x.UserData.Operation_StartedOperational.ProviderPath",
 UserDataProcessID="x=&amp;gt;x.UserData.Operation_StartedOperational.ProcessID",
 UserDataNamespace="x=&amp;gt;x.UserData.Operation_ESStoConsumerBinding.Namespace",
 UserDataNamespaceName="x=&amp;gt;x.UserData.Operation_TemporaryEssStarted.NamespaceName",
 UserDataQuery="x=&amp;gt;x.UserData.Operation_TemporaryEssStarted.Query",
 UserDataUser="x=&amp;gt;x.UserData.Operation_TemporaryEssStarted.User",
 UserDataProcessid="x=&amp;gt;x.UserData.Operation_TemporaryEssStarted.Processid",
 UserDataConsumer="x=&amp;gt;x.UserData.Operation_ESStoConsumerBinding.CONSUMER",
 UserDataESS="x=&amp;gt;x.UserData.Operation_ESStoConsumerBinding.ESS",
 UserDataPossibleCause="x=&amp;gt;x.UserData.Operation_ESStoConsumerBinding.PossibleCause",
 UserDataParam1="x=&amp;gt;x.UserData.EventXML.Param1",
 UserDataParam2="x=&amp;gt;x.UserData.EventXML.Param2",
 UserDataParam3="x=&amp;gt;x.UserData.EventXML.Param3",
 UserDataUser="x=&amp;gt;x.UserData.EventXML.User",
 UserDataSessionID="x=&amp;gt;x.UserData.EventXML.SessionID",
 UserDataAddress="x=&amp;gt;x.UserData.EventXML.Address",
 SysmonVersion="x=&amp;gt;x.EventData.SysmonVersion",
 OperationEssStartedNamespaceName="x=&amp;gt;x.UserData.Operation_EssStarted.NamespaceName",
 OperationEssStartedQuery="x=&amp;gt;x.UserData.Operation_EssStarted.Query",
 OperationEssStartedUser="x=&amp;gt;x.UserData.Operation_EssStarted.User",
 OperationEssStartedProcessid="x=&amp;gt;x.UserData.Operation_EssStarted.Processid",
 OperationEssStartedProvider="x=&amp;gt;x.UserData.Operation_EssStarted.Provider",
 OperationEssStartedPossibleCause="x=&amp;gt;x.UserData.Operation_EssStarted.PossibleCause",
 DvrFmwkInstanceId="x=&amp;gt;x.UserData.UMDFHostDeviceRequest.InstanceId",
 DvrFmwk2003InstanceId="x=&amp;gt;x.UserData.UMDFHostDeviceArrivalBegin.InstanceId"
 )

sources:
- query: |
 LET Rules = InlineSigmaRules ||
 if(condition=SigmaRuleFile, then=SigmaRuleFile)

 SELECT * FROM sigma(
 rules=split(string= Rules, sep_string="\n---\n"),
 log_sources= StandardSigmaLogSource, debug=Debug,
 field_mapping= StandardSigmaFieldMapping)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.AllUsers</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.allusers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.allusers/</guid><description>&lt;p>List User accounts. We combine two data sources - the output from
the &lt;code>NetUserEnum&lt;/code> API (termed &lt;code>local&lt;/code> users) and the list of SIDs in
the registry (termed &lt;code>remote&lt;/code> users).&lt;/p>
&lt;p>In this artifact, &amp;lsquo;remote&amp;rsquo; means that user profile was cached in the
registry, but the user does not appear in the output of the
&lt;code>NetUserEnum&lt;/code> API - this normally happens for users remotely logging
into the system using domain credentials.&lt;/p>
&lt;p>On Domain Controllers the &lt;code>NetUserEnum&lt;/code> API will return the contents
of the entire ActiveDirectory as a list of &amp;rsquo;local&amp;rsquo; users, however
this does not mean that the users have logged into the DC
locally. In this artifact we limit the number of users to 1000. If
you need to obtain the full list from the AD, customize this
artifact.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.AllUsers
description: |
 List User accounts. We combine two data sources - the output from
 the `NetUserEnum` API (termed `local` users) and the list of SIDs in
 the registry (termed `remote` users).

 In this artifact, 'remote' means that user profile was cached in the
 registry, but the user does not appear in the output of the
 `NetUserEnum` API - this normally happens for users remotely logging
 into the system using domain credentials.

 On Domain Controllers the `NetUserEnum` API will return the contents
 of the entire ActiveDirectory as a list of 'local' users, however
 this does not mean that the users have logged into the DC
 locally. In this artifact we limit the number of users to 1000. If
 you need to obtain the full list from the AD, customize this
 artifact.

parameters:
 - name: remoteRegKey
 default: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\*

export: |
 -- Cache function for lookupSID
 LET LookupSIDCache(SID) = cache(name="SID", key=SID,
 func=lookupSID(sid=SID) ||

 -- resolve usernames via registry if lookupSID is not available
 -- or yields no results

 pathspec(parse=stat(accessor="registry",
 filename="HKEY_LOCAL_MACHINE/Software/Microsoft/Windows NT/CurrentVersion/ProfileList/" +
 SID + "/ProfileImagePath").Data.value).Basename || "")

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET GetTimestamp(High, Low) = if(condition=High,
 then=timestamp(winfiletime=High * 4294967296 + Low))

 -- lookupSID() may not be available on deaddisk analysis
 LET roaming_users &amp;lt;=
 SELECT
 split(string=Key.OSPath.Basename, sep="-")[-1] as Uid,
 "" AS Gid,
 LookupSIDCache(SID=Key.OSPath.Basename || "") AS Name,
 Key.OSPath as Description,
 ProfileImagePath as Directory,
 Key.OSPath.Basename as UUID,
 Key.Mtime as Mtime,
 {
 SELECT Mtime
 FROM stat(filename=expand(path=ProfileImagePath))
 } AS HomedirMtime,
 dict(ProfileLoadTime=GetTimestamp(
 High=LocalProfileLoadTimeHigh, Low=LocalProfileLoadTimeLow),
 ProfileUnloadTime=GetTimestamp(
 High=LocalProfileUnloadTimeHigh, Low=LocalProfileUnloadTimeLow),
 ProfileImagePath=ProfileImagePath,
 ProfileKey=Key.OSPath
 ) AS Data
 FROM read_reg_key(globs=remoteRegKey, accessor="registry")


 LET roaming_users_lookup &amp;lt;= memoize(query=roaming_users, key="UUID")

 -- On a DC the NetUserEnum API will return the entire domain!
 LET local_users &amp;lt;= select User_id as Uid,
 Primary_group_id as Gid, Name,
 Comment as Description,
 get(item=roaming_users_lookup, field=User_sid) AS RoamingData,
 User_sid as UUID
 FROM users()
 LIMIT 1000

 LET local_users_lookup &amp;lt;= memoize(query={
 SELECT UUID FROM local_users
 }, key="UUID")

 -- Populate the mtime from the user's home directory.
 LET local_users_with_mtime = SELECT Uid, Gid, Name, Description,
 RoamingData.Directory AS Directory,
 UUID,
 RoamingData.Mtime As Mtime,
 RoamingData.HomedirMtime AS HomedirMtime,
 RoamingData.Data || dict() AS Data
 FROM local_users

 SELECT * from chain(
 q1=local_users_with_mtime,
 q2={
 SELECT * FROM roaming_users
 -- Only show records who were not shown before
 WHERE NOT get(item=local_users_lookup, field=UUID)
 })
 --ORDER BY Gid DESC
 notebook:
 - type: VQL
 template: |
 /*
 # Users Hunt

 Enumerating all the users on all endpoints can reveal machines
 which had an unexpected login activity. For example, if a user
 from an unrelated department is logging into an endpoint by
 virtue of domain credentials, this could mean their account is
 compromised and the attackers are laterally moving through the
 network.
 */
 LET s = scope()
 SELECT Name, UUID, s.Fqdn AS Fqdn, HomedirMtime as LastMod, Data FROM source()
 WHERE NOT UUID =~ "(-5..$|S-1-5-18|S-1-5-19|S-1-5-20)"

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.AppcompatShims</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.appcompatshims/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.appcompatshims/</guid><description>&lt;p>Application Compatibility shims are a way to persist malware. This
table presents the AppCompat Shim information from the registry in a
nice format.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.AppcompatShims
description: |
 Application Compatibility shims are a way to persist malware. This
 table presents the AppCompat Shim information from the registry in a
 nice format.

reference:
 - http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf

parameters:
 - name: shimKeys
 default: &amp;gt;-
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB\*
 - name: customKeys
 default: &amp;gt;-
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\*\*

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET installed_sdb &amp;lt;=
 SELECT Key, Key.Name as SdbGUID, DatabasePath,
 DatabaseType, DatabaseDescription,
 -- Convert windows file time to unix epoch.
 (DatabaseInstallTimeStamp / 10000000) - 11644473600 AS DatabaseInstallTimeStamp
 FROM read_reg_key(
 globs=split(string=shimKeys, sep=",[\\s]*"),
 accessor="registry")

 LET result = SELECT * from foreach(
 row={
 SELECT regex_replace(
 source=OSPath,
 replace="$1",
 re="^.+\\\\([^\\\\]+)\\\\[^\\\\]+$") as Executable,
 regex_replace(
 source=Name,
 replace="$1",
 re="(\\{[^}]+\\}).*$") as SdbGUIDRef,
 Name as ExeName
 FROM glob(
 globs=split(string=customKeys, sep=",[\\s]*"),
 accessor="registry")
 },
 query={
 SELECT Executable, DatabasePath, DatabaseType,
 DatabaseDescription, DatabaseInstallTimeStamp, SdbGUID
 FROM installed_sdb
 WHERE SdbGUID = SdbGUIDRef
 })

 SELECT * from result

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.CertificateAuthorities</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.certificateauthorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.certificateauthorities/</guid><description>&lt;p>Certificate Authorities installed in Keychains/ca-bundles.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.CertificateAuthorities
description: Certificate Authorities installed in Keychains/ca-bundles.
sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 SELECT Store, IsCA, Subject,
 encode(string=SubjectKeyId, type='hex') AS SubjectKeyId,
 encode(string=AuthorityKeyId, type='hex') AS AuthorityKeyId,
 Issuer, KeyUsageString,
 IsSelfSigned, SHA1, SignatureAlgorithm, PublicKeyAlgorithm, KeyStrength,
 NotBefore, NotAfter, HexSerialNumber
 FROM certificates()

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.DiskInfo</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.diskinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.diskinfo/</guid><description>&lt;p>Retrieve basic information about the physical disks of a system.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.DiskInfo
description: Retrieve basic information about the physical disks of a system.
sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 SELECT Partitions,
 Index as DiskIndex,
 InterfaceType as Type,
 PNPDeviceID,
 DeviceID,
 Size,
 Manufacturer,
 Model,
 Name,
 SerialNumber,
 Description
 FROM wmi(
 query="SELECT * from Win32_DiskDrive",
 namespace="ROOT\\CIMV2")

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.Drivers</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.drivers/</guid><description>&lt;p>Details for in-use Windows device drivers. This does not display
installed but unused drivers.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.Drivers
description: |
 Details for in-use Windows device drivers. This does not display
 installed but unused drivers.

precondition:
 SELECT OS From info() where OS = 'windows'

parameters:
 - name: AlsoCheckAuthenticode
 type: bool
 description: If selected we also check the authenticode information.
 default: "Y"

 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - name: SignedDrivers
 query: |
 SELECT *
 FROM wmi(
 query="select * from Win32_PnPSignedDriver",
 namespace="ROOT\\CIMV2")

 - name: RunningDrivers
 query: |
 SELECT *, if(
 condition=AlsoCheckAuthenticode,
 then=authenticode(filename=PathName)) AS Authenticode,
 hash(path=PathName) AS Hashes
 FROM wmi(
 query="select * from Win32_SystemDriver",
 namespace="ROOT\\CIMV2")
 notebook:
 - type: vql_suggestion
 name: Unique issuers
 template: |
 /*
 # Unique Issuers of drivers

 These are the unique signers of drivers on a system
 (excluding microsoft drivers).

 */
 SELECT count() AS Count,
 enumerate(items=Name) AS Names,
 Authenticode.IssuerName AS Issuer, Hashes
 FROM source(artifact="Windows.Sys.Drivers/RunningDrivers")
 WHERE NOT Issuer =~ "Microsoft"
 GROUP BY Issuer

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.FirewallRules</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.firewallrules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.firewallrules/</guid><description>&lt;p>List Windows firewall rules.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.FirewallRules
description: List Windows firewall rules.
reference:
 - https://social.technet.microsoft.com/Forums/azure/en-US/aaed9c6a-fb8b-4d43-8b69-9f4e0f619a8c/how-to-check-the-windows-firewall-settings-from-netsh-command?forum=winserverGP

parameters:
 - name: regKey
 default: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\**\FirewallRules\*

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 LET rules = SELECT Name as Value,
 parse_string_with_regex(string=Data,
 regex=["Action=(?P&amp;lt;Action&amp;gt;[^|]+)",
 "Active=(?P&amp;lt;Active&amp;gt;[^|]+)",
 "Dir=(?P&amp;lt;Dir&amp;gt;[^|]+)",
 "Protocol=(?P&amp;lt;Protocol&amp;gt;[^|]+)",
 "LPort=(?P&amp;lt;LPort&amp;gt;[^|]+)",
 "Name=(?P&amp;lt;Name&amp;gt;[^|]+)",
 "Desc=(?P&amp;lt;Desc&amp;gt;[^|]+)",
 "App=(?P&amp;lt;App&amp;gt;[^|]+)"]) as Record,
 Data,
 OSPath
 FROM glob(globs=regKey, accessor="registry")

 SELECT Value,
 Record.Name as Name,
 get(item=Record, field="Desc") as Description,
 Record.App as App,
 if(condition=Record.Active =~ "TRUE", then="Yes", else="No") as Active,
 Record.Action as Action,
 Record.Dir as Dir,
 if(condition=Record.Protocol = "6",
 then="TCP",
 else=if(condition=Record.Protocol = "17",
 then="UDP",
 else=Record.Protocol)) as Protocol,
 if(condition=Record.LPort = NULL,
 then="Any",
 else=Record.LPort) as LPort,
 Record.Name as Name
 FROM rules

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.Interfaces</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.interfaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.interfaces/</guid><description>&lt;p>Report information about the systems interfaces. This artifact
simply parses the output from ipconfig /all.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.Interfaces
description: |
 Report information about the systems interfaces. This artifact
 simply parses the output from ipconfig /all.

sources:
 - precondition:
 SELECT OS from info() where OS = "windows"
 query: |
 // Run ipconfig to get all information about interfaces.
 LET ipconfig = SELECT * FROM execve(argv=['ipconfig', '/all'])

 // This produces a single row per interface.
 LET interfaces = SELECT Name, Data FROM parse_records_with_regex(
 file=ipconfig.Stdout,
 accessor='data', // This makes the data appear as a file.
 regex='(?s)Ethernet adapter (?P&amp;lt;Name&amp;gt;[^:]+?):\r\n\r\n(?P&amp;lt;Data&amp;gt;.+?)\r\n(\r\n|$)')

 // Now extract interesting things from each interface definition.
 SELECT Name, parse_string_with_regex(
 string=Data,
 regex=[
 "Description[^:]+: (?P&amp;lt;Description&amp;gt;.+)\r\n",
 "Physical Address[^:]+: (?P&amp;lt;MAC&amp;gt;.+)\r\n",
 "IPv4 Address[^:]+: (?P&amp;lt;IP&amp;gt;[0-9.]+)",
 "Default Gateway[^:]+: (?P&amp;lt;Gateway&amp;gt;.+)\r\n",
 "DNS Servers[^:]+: (?P&amp;lt;DNS&amp;gt;.+)\r\n [^ ]",
 "DHCP Server[^:]+: (?P&amp;lt;DHCP&amp;gt;.+)\r\n"
 ]
 ) As Details FROM interfaces

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.PhysicalMemoryRanges</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.physicalmemoryranges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.physicalmemoryranges/</guid><description>&lt;p>List Windows physical memory ranges.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.PhysicalMemoryRanges
description: List Windows physical memory ranges.
reference:
 - https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/ns-wdm-_cm_resource_list

parameters:
 - name: physicalMemoryKey
 default: HKEY_LOCAL_MACHINE\HARDWARE\RESOURCEMAP\System Resources\Physical Memory\.Translated

export: |
 LET Profile = '''
 [
 ["CM_RESOURCE_LIST", 0, [
 ["Count", 0, "uint32"],
 ["List", 4, "CM_FULL_RESOURCE_DESCRIPTOR"]
 ]],
 ["CM_FULL_RESOURCE_DESCRIPTOR", 0, [
 ["PartialResourceList", 8, "CM_PARTIAL_RESOURCE_LIST"]
 ]],

 ["CM_PARTIAL_RESOURCE_LIST", 0, [
 ["Version", 0, "uint16"],
 ["Revision", 2, "uint16"],
 ["Count", 4, "uint32"],
 ["PartialDescriptors", 8, "Array", {
 "type": "CM_PARTIAL_RESOURCE_DESCRIPTOR",
 "count": "x=&amp;gt;x.Count"
 }]
 ]],

 ["CM_PARTIAL_RESOURCE_DESCRIPTOR", 20, [
 ["Type", 0, "char"],
 ["ShareDisposition", 1, "char"],
 ["Flags",2, "uint16"],
 ["Start",4, "int64"],
 ["Length",12, "uint32"]
 ]]
 ]
 '''

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 query: |
 SELECT * FROM foreach(
 row={SELECT Data from stat(filename=physicalMemoryKey, accessor="registry")},
 query={
 SELECT * FROM foreach(
 row=parse_binary(
 filename=Data.value,
 accessor="data",
 profile=Profile,
 struct="CM_RESOURCE_LIST").List.PartialResourceList.PartialDescriptors,
 query={
 SELECT Type,
 format(format="%#0x", args=Start) AS Start,
 format(format="%#0x", args=Length) AS Length
 FROM scope()
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.Programs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.programs/</guid><description>&lt;p>Represents products as they are installed by Windows Installer. A product generally
correlates to one installation package on Windows. Some fields may be blank as Windows
installation details are left to the discretion of the product author.&lt;/p>
&lt;p>Limitations: This key parses the live registry hives - if a user is not logged in then their data will not be resident in HKU and therefore you should parse the hives on disk (including within VSS/Regback).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.Programs
description: |
 Represents products as they are installed by Windows Installer. A product generally
 correlates to one installation package on Windows. Some fields may be blank as Windows
 installation details are left to the discretion of the product author.

 Limitations: This key parses the live registry hives - if a user is not logged in then their data will not be resident in HKU and therefore you should parse the hives on disk (including within VSS/Regback).

reference:
 - https://github.com/facebook/osquery/blob/master/specs/windows/programs.table

parameters:
 - name: programKeys
 default: &amp;gt;-
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*,
 HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*,
 HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Uninstall\*

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'
 queries:
 - |
 SELECT Key.Name as KeyName,
 Key.Mtime AS KeyLastWriteTimestamp,
 DisplayName,
 DisplayVersion,
 InstallLocation,
 InstallSource,
 Language,
 Publisher,
 UninstallString,
 InstallDate,
 Key.OSPath as KeyPath
 FROM read_reg_key(globs=split(string=programKeys, sep=',[\\s]*'),
 accessor="registry")

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.StartupItems</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.startupitems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.startupitems/</guid><description>&lt;p>Applications that will be started up from the various run key
locations.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.StartupItems
description: |
 Applications that will be started up from the various run key
 locations.

reference:
 - https://docs.microsoft.com/en-us/windows/desktop/setupapi/run-and-runonce-registry-keys

parameters:
 - name: AlsoUpload
 type: bool
 description: If set we also upload the files in the startup folders

 - name: runKeyGlobs
 type: csv
 default: |
 KeyGlobs
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run*\*
 HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run*\*
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run*\*
 HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Run*\*
 HKEY_USERS\*\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run*\*
 HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run*\*

 - name: startupApprovedGlobs
 type: csv
 default: |
 KeyGlobs
 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\**
 HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\**

 - name: startupFolderDirectories
 type: csv
 default: |
 FileGlobs
 C:/ProgramData/Microsoft/Windows/Start Menu/Programs/Startup/**
 C:/Users/*/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/**

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET approved &amp;lt;=
 SELECT Name as ApprovedName,
 encode(string=Data, type="hex") as Enabled
 FROM glob(globs=startupApprovedGlobs.KeyGlobs,
 accessor="registry")
 WHERE Enabled =~ "^0[0-9]0+$"

 LET registry_runners = SELECT Name,
 OSPath, Data.value as Details,
 if(
 condition={
 SELECT Enabled from approved
 WHERE Name = ApprovedName
 },
 then="enabled", else="disabled") as Enabled,
 "" AS Upload
 FROM glob(
 globs=runKeyGlobs.KeyGlobs,
 accessor="registry")

 LET enrich_file(OSPath) = SELECT * FROM switch(
 ini={
 SELECT regex_replace(re="[^0-9a-z_]", replace=".",
 source=read_file(filename=OSPath, length=1024)) AS Details
 FROM scope()
 WHERE OSPath.Basename =~ ".(bat|ini|ps1)$"
 }, lnk={
 SELECT { 
 SELECT SourceFile, ShellLinkHeader, LinkInfo, LinkTarget, StringData, ExtraData 
 FROM Artifact.Windows.Forensics.Lnk(TargetGlob=OSPath)
 } as Details
 FROM scope()
 }, default={
 SELECT hash(path=OSPath) AS Details
 FROM scope()
 })

 LET file_runners =
 SELECT Name, OSPath,
 enrich_file(OSPath=OSPath)[0].Details AS Details,
 "enable" as Enabled,
 if(condition=AlsoUpload, then=upload(file=OSPath)) AS Upload
 FROM glob(globs=startupFolderDirectories.FileGlobs)

 SELECT *
 FROM chain(
 first=registry_runners,
 second=file_runners)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sys.Users</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sys.users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sys.users/</guid><description>&lt;p>List User accounts by inspecting registry keys. This method is a
reliable indicator for users who have physically logged into the
system and thereby created local profiles.&lt;/p>
&lt;p>This will not include domain users or the output from &lt;code>NetUserEnum&lt;/code>&lt;/p>
&lt;ul>
&lt;li>you should collect the &lt;code>Windows.Sys.AllUsers&lt;/code> artifact to get all
possible users on the system.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sys.Users
description: |
 List User accounts by inspecting registry keys. This method is a
 reliable indicator for users who have physically logged into the
 system and thereby created local profiles.

 This will not include domain users or the output from `NetUserEnum`
 - you should collect the `Windows.Sys.AllUsers` artifact to get all
 possible users on the system.

parameters:
 - name: remoteRegKey
 default: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\*

imports:
 - Windows.Sys.AllUsers

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET GetTimestamp(High, Low) = if(condition=High,
 then=timestamp(winfiletime=High * 4294967296 + Low))

 -- lookupSID() may not be available on deaddisk analysis
 SELECT split(string=Key.OSPath.Basename, sep="-")[-1] as Uid,
 "" AS Gid,
 LookupSIDCache(SID=Key.OSPath.Basename || "") AS Name,
 Key.OSPath as Description,
 ProfileImagePath as Directory,
 Key.OSPath.Basename as UUID,
 Key.Mtime as Mtime,
 {
 SELECT Mtime
 FROM stat(filename=expand(path=ProfileImagePath))
 } AS HomedirMtime,
 dict(ProfileLoadTime=GetTimestamp(
 High=LocalProfileLoadTimeHigh, Low=LocalProfileLoadTimeLow),
 ProfileUnloadTime=GetTimestamp(
 High=LocalProfileUnloadTimeHigh, Low=LocalProfileUnloadTimeLow)
 ) AS Data
 FROM read_reg_key(globs=remoteRegKey, accessor="registry")

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sysinternals.Autoruns</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.autoruns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.autoruns/</guid><description>&lt;p>Uses Sysinternals autoruns to scan the host.&lt;/p>
&lt;p>Note this requires syncing the sysinternals binary from the host.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sysinternals.Autoruns
description: |
 Uses Sysinternals autoruns to scan the host.

 Note this requires syncing the sysinternals binary from the host.

tools:
 - name: Autorun_386
 url: https://live.sysinternals.com/tools/autorunsc.exe
 serve_locally: true

 - name: Autorun_amd64
 url: https://live.sysinternals.com/tools/autorunsc64.exe
 serve_locally: true

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: All
 type: bool
 default: Y
 - name: Boot execute
 type: bool
 - name: Codecs
 type: bool
 - name: Appinit DLLs
 type: bool
 - name: Explorer addons
 type: bool
 - name: Sidebar gadgets (Vista and higher)
 type: bool
 - name: Image hijacks
 type: bool
 - name: Internet Explorer addons
 type: bool
 - name: Known DLLs
 type: bool
 - name: Logon startups (this is the default)
 type: bool
 - name: WMI entries
 type: bool
 - name: Winsock protocol and network providers
 type: bool
 - name: Office addins
 type: bool
 - name: Printer monitor DLLs
 type: bool
 - name: LSA security providers
 type: bool
 - name: Autostart services and non-disabled drivers
 type: bool
 - name: Scheduled tasks
 type: bool
 - name: Winlogon entries
 type: bool
 - name: Verify digital signatures
 type: bool
 default: Y
 - name: ToolInfo
 type: hidden
 description: Override Tool information.

sources:
 - query: |
 LET Flags = '''Option,Name
 *,All
 b,Boot execute
 c,Codecs
 d,Appinit DLLs
 e,Explorer addons
 g,Sidebar gadgets (Vista and higher)
 h,Image hijacks
 i,Internet Explorer addons
 k,Known DLLs
 l,Logon startups (this is the default)
 m,WMI entries
 n,Winsock protocol and network providers
 o,Office addins
 p,Printer monitor DLLs
 r,LSA security providers
 s,Autostart services and non-disabled drivers
 t,Scheduled tasks
 w,Winlogon entries
 '''

 LET Options = '''Option,Name
 -s,Verify digital signatures
 '''

 -- The flags actually selected
 LET flags = SELECT Option FROM parse_csv(accessor="data", filename=Flags)
 WHERE get(field=Name)

 -- The options actually selected
 LET options = SELECT Option FROM parse_csv(accessor="data", filename=Options)
 WHERE get(field=Name)

 LET os_info &amp;lt;= SELECT Architecture FROM info()

 // Get the path to the binary.
 LET bin &amp;lt;= SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName= "Autorun_" + os_info[0].Architecture,
 ToolInfo=ToolInfo)

 // Call the binary and return all its output in a single row.
 LET output = SELECT * FROM execve(argv=[bin[0].OSPath,
 '-nobanner', '-accepteula', '-t', '-a',
 join(array=flags.Option, sep=""),
 join(array=options.Option, sep=" "),
 '-c', -- CSV output
 '-h', -- Also calculate hashes
 '*' -- All user profiles.
 ], length=10000000)

 // Parse the CSV output and return it as rows. We can filter this further.
 SELECT * FROM if(condition=bin,
 then={
 SELECT * FROM foreach(
 row=output,
 query={
 SELECT * FROM parse_csv(filename=utf16(string=Stdout),
 accessor="data")
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sysinternals.SysmonInstall</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.sysmoninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.sysmoninstall/</guid><description>&lt;p>Sysmon is a kernel level system monitor written by
Sysinternals. While we are not able to distribute Sysmon ourselves,
Velociraptor can help you manage its deployment and installation.&lt;/p>
&lt;p>NOTE: By default we install the sysmon config from SwiftOnSecurity -
we recommend you review the config file and override it in the GUI
with one that better suits your needs.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sysinternals.SysmonInstall
description: |
 Sysmon is a kernel level system monitor written by
 Sysinternals. While we are not able to distribute Sysmon ourselves,
 Velociraptor can help you manage its deployment and installation.

 NOTE: By default we install the sysmon config from SwiftOnSecurity -
 we recommend you review the config file and override it in the GUI
 with one that better suits your needs.

tools:
 - name: SysmonBinary
 url: https://live.sysinternals.com/tools/sysmon64.exe
 serve_locally: true

 - name: SysmonConfig
 url: https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml
 serve_locally: true

precondition: SELECT OS From info() where OS = 'windows'

required_permissions:
- EXECVE

parameters:
 - name: SysmonFileLocation
 description: If set, we check this location first for sysmon installed.
 default: C:/Windows/sysmon64.exe

sources:
- query: |
 LET bin &amp;lt;= SELECT * FROM switch(
 a={
 SELECT * FROM glob(globs=SysmonFileLocation)
 }, b={
 SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="SysmonBinary")
 })

 LET existing_hash = SELECT lowcase(
 string=parse_string_with_regex(
 string=Stdout, regex="hash:.+SHA256=([^\\n\\r]+)").g1) AS Hash
 FROM execve(argv=[bin[0].OSPath, "-c"])

 LET sysmon_config = SELECT * FROM Artifact.Generic.Utils.FetchBinary(
 ToolName="SysmonConfig", IsExecutable=FALSE)

 LET ensure_service_running =
 SELECT * FROM execve(argv=["sc.exe", "start", "sysmon64"])

 LET doit = SELECT * FROM chain(
 a={
 // First force an uninstall to clear the config
 SELECT * FROM execve(argv= [ bin[0].OSPath, "-accepteula", "-u"], length=10000000)
 }, b={
 SELECT * FROM execve(argv= [ bin[0].OSPath,
 "-accepteula", "-i", sysmon_config[0].OSPath ], length=10000000)
 }, c=ensure_service_running)

 // Only install sysmon if the existing config hash is not the same
 // as the specified hash.
 SELECT * FROM if(
 condition=if(
 condition=bin AND sysmon_config,
 else=log(message="Failed to fetch sysmon tools!"),
 then=if(
 condition=existing_hash[0].Hash != Tool_SysmonConfig_HASH,
 then=log(message="Sysmon config hash has changed (%v vs %v) - reinstalling",
 args=[existing_hash[0].Hash, Tool_SysmonConfig_HASH]),
 else=log(message="Existing sysmon config hash has not changed (%v) - skipping reinstall",
 args=Tool_SysmonConfig_HASH) AND FALSE
 )
 ),
 then={ SELECT * FROM doit },
 else={ SELECT * FROM ensure_service_running })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Sysinternals.SysmonLogForward</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.sysmonlogforward/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.sysinternals.sysmonlogforward/</guid><description>&lt;p>A client side event forwarder to forward sysmon events to the server.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Sysinternals.SysmonLogForward
description: |
 A client side event forwarder to forward sysmon events to the server.

type: CLIENT_EVENT

precondition: SELECT OS From info() where OS = 'windows'

tools:
 - name: SysmonBinary
 url: https://live.sysinternals.com/tools/sysmon64.exe
 serve_locally: true

 - name: SysmonConfig
 url: https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml
 serve_locally: true

parameters:
 - name: SysmonFileLocation
 description: If set, we check this location first for sysmon installed.
 default: C:/Windows/sysmon64.exe

sources:
- query: |
 // First ensure that sysmon is actually installed.
 LET _ &amp;lt;= SELECT * FROM Artifact.Windows.Sysinternals.SysmonInstall(
 SysmonFileLocation=SysmonFileLocation)

 // Just parse and forward events. Use ETW rather than watch_evtx()
 // because it is a little bit faster.
 SELECT System.ID AS ID,
 System.TimeStamp AS Timestamp,
 get(member='EventData') AS EventData
 FROM watch_etw(
 description='Microsoft-Windows-Sysmon/Operational',
 guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}')

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Amcache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.amcache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.amcache/</guid><description>&lt;p>Get information from the system&amp;rsquo;s amcache.&lt;/p>
&lt;p>The Amcache.hve file is a registry file that stores the information
of executed applications. Amcache.hve records the recent processes
that were run and lists the path of the files that’s executed which
can then be used to find the executed program.&lt;/p>
&lt;p>This artifact works on Windows 10 1607 version.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Amcache
description: |
 Get information from the system's amcache.

 The Amcache.hve file is a registry file that stores the information
 of executed applications. Amcache.hve records the recent processes
 that were run and lists the path of the files that’s executed which
 can then be used to find the executed program.

 This artifact works on Windows 10 1607 version.

reference:
 - https://www.andreafortuna.org/cybersecurity/amcache-and-shimcache-in-forensic-analysis/
 - https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf

parameters:
 - name: amCacheGlob
 default: "%SYSTEMROOT%/appcompat/Programs/Amcache.hve"
 - name: amCacheRegPath
 default: /Root/InventoryApplicationFile/*
 - name: NTFS_CACHE_SIZE
 type: int
 default: 1000

precondition: |
 SELECT OS From info() where OS = 'windows'

sources:
 - name: InventoryApplicationFile
 query: |
 LET X = scope()
 SELECT FileId,
 Key.OSPath.Path as Key,
 Key.OSPath.DelegatePath AS Hive,
 Key.Mtime as LastModified,
 X.LowerCaseLongPath as Binary,
 X.Name AS Name,
 X.Size AS Size,
 X.ProductName AS ProductName,
 X.Publisher AS Publisher,
 X.Version AS Version,
 X.BinFileVersion AS BinFileVersion
 FROM foreach(
 row={
 SELECT OSPath from glob(globs=expand(path=amCacheGlob))
 WHERE log(message="Processing "+OSPath)
 }, query={
 SELECT * from read_reg_key(
 globs=amCacheRegPath,
 root=pathspec(DelegatePath=OSPath),
 accessor='raw_reg'
 )
 })

 - name: File
 query: |
 SELECT * FROM foreach(
 row={
 SELECT OSPath from glob(globs=expand(path=amCacheGlob))
 }, query={
 SELECT get(item=scope(), member="100") As ProductId,
 get(item=scope(), member="101") As SHA1,
 get(item=scope(), member="15") As OSPath,
 Key.Mtime as LastModifiedKey
 FROM read_reg_key(
 root=pathspec(DelegatePath=OSPath),
 globs='/Root/File/*/*',
 accessor='raw_reg'
 )
 })

reports:
 - type: CLIENT
 template: |
 {{define "recent_executions"}}
 LET recent_executions &amp;lt;= SELECT LastModified, Name, count(items=Name) As Count,
 int(int=_LastModified/3600) AS Hour
 FROM source(source="InventoryApplicationFile")
 GROUP BY Hour
 LIMIT 500
 {{ end }}

 {{ define "timeline" }}
 SELECT LastModified,
 format(format="%s (%d)", args=[Name, Count]) As TotalCount
 FROM recent_executions
 {{ end }}

 The AMCache file
 ================

 {{ .Description }}

 ## Execution clusters

 The AMCache artifact only shows us the time of first execution
 of a binary. We get an idea when it was installed. Typically
 execution artifacts are clustered in time - if an attacker
 copies a bunch of new tools they will all start running at about
 the same time.

 The below timeline shows a summary of execution clusters. The
 binaries are grouped in an hour interval. The label is the first
 binary name and the total number of binaries within that hour.

 &amp;gt; For clarity we hide the names of all other binaries, and just
 show the total count.

 {{ Query "recent_executions" "timeline" | Timeline }}


 Here is the same data in tabular form.

 {{ Query "timeline" | Table }}

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.AuditPolicy</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.auditpolicy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.auditpolicy/</guid><description>&lt;p>Artifact using auditpol to retrieve the logging settings
defined in the Windows Audit Policy.&lt;/p>
&lt;p>Use this artifact to determine what Windows event logs are audited
and if there are any discrepancies across the environment.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.AuditPolicy

description: |
 Artifact using auditpol to retrieve the logging settings 
 defined in the Windows Audit Policy.
 
 Use this artifact to determine what Windows event logs are audited
 and if there are any discrepancies across the environment.

type: CLIENT

author: Zach Stanford - @svch0st

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET output = SELECT * FROM execve(
 argv=["auditpol.exe","/get","/category:*","/r"])
 
 SELECT * FROM foreach(
 row=output,
 query={
 SELECT * FROM parse_csv(filename=Stdout,accessor="data")
 }
 )

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.CatFiles</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.catfiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.catfiles/</guid><description>&lt;p>Windows stores many hashes in .cat files. These catalog files
contain a set of trusted hashes for drivers and other binaries,
even if the PE files do not themselves contain authenticode
signatures.&lt;/p>
&lt;p>This artifact extracts all the trusted hashes from a system by
parsing all the cat files.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.CatFiles
description: |
 Windows stores many hashes in .cat files. These catalog files
 contain a set of trusted hashes for drivers and other binaries,
 even if the PE files do not themselves contain authenticode
 signatures.

 This artifact extracts all the trusted hashes from a system by
 parsing all the cat files.

parameters:
 - name: CatGlobs
 default: C:\Windows\System32\CatRoot\*\*.cat
 - name: SignerExcludeRegex
 description: Exclude hashes from this Signer
 default: Microsoft
 type: regex

 - name: SignerFilterRegex
 description: Only show hashes from this signer.
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET parsed_cats = SELECT Name, parse_pkcs7(data=read_file(filename=OSPath)) AS PKCS7
 FROM glob(globs=CatGlobs)

 -- Extract the CertificateTrustList and Subject who signed the cat file.
 LET extracted = SELECT Name, PKCS7.Signer.Subject AS Signer,
 PKCS7.CertificateTrustList.Hash AS CTL
 FROM parsed_cats
 WHERE Signer =~ SignerFilterRegex AND NOT Signer =~ SignerExcludeRegex

 -- Expand all the hashes in the same cat file to flatten the results
 SELECT * FROM foreach(row=extracted, query={
 SELECT * FROM foreach(row=CTL, query={
 SELECT Name, Signer, _value AS Hash FROM scope()
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.CmdShell</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.cmdshell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.cmdshell/</guid><description>&lt;p>This artifact allows running arbitrary commands through the system
shell cmd.exe.&lt;/p>
&lt;p>Since Velociraptor typically runs as system, the commands will also
run as System.&lt;/p>
&lt;p>This is a very powerful artifact since it allows for arbitrary
command execution on the endpoints. Therefore this artifact requires
elevated permissions (specifically the &lt;code>EXECVE&lt;/code>
permission). Typically it is only available with the &lt;code>administrator&lt;/code>
role.&lt;/p>
&lt;p>Note there are some limitations with passing commands to the cmd.exe
shell, such as when specifying quoted paths or command-line
arguments with special characters. Using Windows.System.PowerShell
artifact is likely a better option in these cases.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.CmdShell
description: |
 This artifact allows running arbitrary commands through the system
 shell cmd.exe.

 Since Velociraptor typically runs as system, the commands will also
 run as System.

 This is a very powerful artifact since it allows for arbitrary
 command execution on the endpoints. Therefore this artifact requires
 elevated permissions (specifically the `EXECVE`
 permission). Typically it is only available with the `administrator`
 role.

 Note there are some limitations with passing commands to the cmd.exe
 shell, such as when specifying quoted paths or command-line
 arguments with special characters. Using Windows.System.PowerShell
 artifact is likely a better option in these cases.

required_permissions:
 - EXECVE

precondition:
 SELECT OS From info() where OS = 'windows'

parameters:
 - name: Command
 default: "dir C:\\"

sources:
 - query: |
 SELECT * FROM execve(argv=["cmd.exe", "/c", Command])

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.CriticalServices</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.criticalservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.criticalservices/</guid><description>&lt;p>This artifact returns information about any services which are
considered critical.&lt;/p>
&lt;p>The default list contains virus scanners. If the software is not
installed at all, it will not be shown.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.CriticalServices
description: |
 This artifact returns information about any services which are
 considered critical.

 The default list contains virus scanners. If the software is not
 installed at all, it will not be shown.

reference:
 - "ATT&amp;amp;CK: T1089"
 - https://github.com/teoseller/osquery-attck/blob/master/windows_critical_service_status.conf

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: lookupTable
 type: csv
 default: |
 ServiceName
 WinDefend
 MpsSvc
 SepMasterService
 SAVAdminService
 SavService
 wscsvc
 wuauserv

sources:
 - query: |
 SELECT Name, DisplayName, Created, State, {
 SELECT * FROM lookupTable WHERE Name =~ ServiceName
 } AS Critical
 FROM Artifact.Windows.System.Services()
 WHERE Critical AND State != "Running"

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.DLLs</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.dlls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.dlls/</guid><description>&lt;p>Enumerate the DLLs loaded by a running process. It includes hash value
and certificate information.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.DLLs
description: |
 Enumerate the DLLs loaded by a running process. It includes hash value
 and certificate information.

parameters:
 - name: ProcessRegex
 description: A regex applied to process names.
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: ExePathRegex
 default: .
 type: regex
 - name: CommandLineRegex
 default: .
 type: regex
 - name: DllRegex
 description: A regex applied to the full dll path (e.g. whitelist all system dlls)
 default: .
 type: regex
 - name: Calculate_Hash
 default: N
 type: bool
 - name: CertificateInfo
 default: N
 type: bool
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - query: |

 -- first find processes in scope
 LET processes = SELECT Pid, Name,Exe,CommandLine
 FROM pslist()
 WHERE Name =~ ProcessRegex
 AND Pid =~ PidRegex
 AND Exe =~ ExePathRegex
 AND CommandLine =~ CommandLineRegex

 -- find modules
 LET results = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT Pid, Name,Exe as _Exe,CommandLine as _CommandLine ,
 format(format='%x-%x', args=[ModuleBaseAddress,
 ModuleBaseAddress+ModuleBaseSize]) AS Range,
 ModuleName, ExePath as ModulePath
 FROM modules(pid=Pid)
 WHERE ModulePath =~ DllRegex
 })

 -- add additional enrichment usecases
 LET cert_hash = SELECT *,
 hash(path=expand(path=ModulePath)) AS Hash,
 authenticode(filename=ModulePath) AS Certinfo
 FROM results
 LET cert_nohash = SELECT *, authenticode(filename=ModulePath) AS Certinfo
 FROM results
 LET nocert_hash = SELECT *, hash(path=expand(path=ModulePath)) AS Hash
 FROM results

 -- output rows
 SELECT * FROM if(condition= Calculate_Hash AND CertificateInfo,
 then= cert_hash,
 else= if(condition= Calculate_Hash,
 then= nocert_hash,
 else= if(condition= CertificateInfo,
 then= cert_nohash,
 else= results )))

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.DNSCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.dnscache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.dnscache/</guid><description>&lt;p>Windows maintains DNS lookups for a short time in the DNS cache.&lt;/p>
&lt;p>This artifact collects DNS cache entries using the WMI class MSFT_DNSClientCache.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.DNSCache
description: |
 Windows maintains DNS lookups for a short time in the DNS cache.

 This artifact collects DNS cache entries using the WMI class MSFT_DNSClientCache.

parameters:
 - name: kMapOfRecordType
 description: |
 Mapping of decimal DNS record types to human-readable types
 type: hidden
 default: |
 {
 "0": "Reserved",
 "1": "A",
 "2": "NS",
 "3": "MD",
 "4": "MF",
 "5": "CNAME",
 "6": "SOA",
 "7": "MB",
 "8": "MG",
 "9": "MR",
 "10": "NULL",
 "11": "WKS",
 "12": "PTR",
 "13": "HINFO",
 "14": "MINFO",
 "15": "MX",
 "16": "TXT",
 "17": "RP",
 "18": "AFSDB",
 "19": "X25",
 "20": "ISDN",
 "21": "RT",
 "22": "NSAP",
 "23": "NSAP-PTR",
 "24": "SIG",
 "25": "KEY",
 "26": "PX",
 "27": "GPOS",
 "28": "AAAA",
 "29": "LOC",
 "30": "NXT",
 "31": "EID",
 "32": "NIMLOC",
 "33": "SRV",
 "34": "ATMA",
 "35": "NAPTR",
 "36": "KX",
 "37": "CERT",
 "38": "A6",
 "39": "DNAME",
 "40": "SINK",
 "41": "OPT",
 "42": "APL",
 "43": "DS",
 "44": "SSHFP",
 "45": "IPSECKEY",
 "46": "RRSIG",
 "47": "NSEC",
 "48": "DNSKEY",
 "49": "DHCID",
 "50": "NSEC3",
 "51": "NSEC3PARAM",
 "52": "TLSA",
 "53": "SMIMEA",
 "54": "Unassigned",
 "55": "HIP",
 "56": "NINFO",
 "57": "RKEY",
 "58": "TALINK",
 "59": "CDS",
 "60": "CDNSKEY",
 "61": "OPENPGPKEY",
 "62": "CSYNC",
 "63": "ZONEMD",
 "64": "SVCB",
 "65": "HTTPS",
 "99": "SPF",
 "100": "UINFO",
 "101": "UID",
 "102": "GID",
 "103": "UNSPEC",
 "104": "NID",
 "105": "L32",
 "106": "L64",
 "107": "LP",
 "108": "EUI48",
 "109": "EUI64",
 "249": "TKEY",
 "250": "TSIG",
 "251": "IXFR",
 "252": "AXFR",
 "253": "MAILB",
 "254": "MAILA",
 "255": "*",
 "256": "URI",
 "257": "CAA",
 "258": "AVC",
 "259": "DOA",
 "260": "AMTRELAY",
 "32768": "TA",
 "32769": "DLV",
 "65535": "Reserved"
 }

 - name: kMapOfStatus
 description: |
 Mapping of decimal status to human-readable status
 type: hidden
 default: |
 {
 "0": "Success",
 "9003": "NotExist",
 "9701": "NoRecords"
 }

 - name: kMapOfSection
 description: |
 Mapping of decimal section to human-readable section
 type: hidden
 default: |
 {
 "1": "Answer",
 "2": "Authority",
 "3": "Additional"
 }

sources:
 - precondition: |
 SELECT OS from info() where OS = "windows"
 query: |
 LET wmiQuery &amp;lt;= '''
 SELECT Data, Entry, Status, TimeToLive, Type, Section
 FROM MSFT_DNSClientCache
 '''
 LET wmiNamespace &amp;lt;= "root/StandardCimv2"
 LET MapOfRecordType &amp;lt;= parse_json(data=kMapOfRecordType)
 LET MapOfStatus &amp;lt;= parse_json(data=kMapOfStatus)
 LET MapOfSection &amp;lt;= parse_json(data=kMapOfSection)

 LET dns_cache_entries = SELECT
 Entry AS Name,
 Data AS Record,
 get(item=MapOfRecordType,
 member=str(str=Type), default=Type) AS RecordType,
 Type AS _RecordType,
 atoi(string=TimeToLive) AS TTL,
 get(item=MapOfStatus,
 member=str(str=Status), default=Status) AS QueryStatus,
 Status AS _QueryStatus,
 get(item=MapOfSection,
 member=str(str=Section), default=Section) AS SectionType,
 Section AS _SectionType
 FROM wmi(query=wmiQuery, namespace=wmiNamespace)

 SELECT * FROM dns_cache_entries

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.DomainRole</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.domainrole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.domainrole/</guid><description>&lt;p>This artifact will extract Domain Role per machine.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.DomainRole
author: 'Matt Green - @mgreen27'
description: |
 This artifact will extract Domain Role per machine.

type: CLIENT

parameters:
 - name: HostNameRegex
 description: Regex filter by DNSHostName
 default: .
 - name: DomainRegex
 description: Regex filter by Domain
 default: .
 - name: RoleRegex
 description: Regex filter by Role
 default: .
 
sources:
 - precondition:
 SELECT OS From info() where OS =~ 'windows'

 query: |
 SELECT 
 Domain, 
 DNSHostName, 
 if(condition= DomainRole=0,
 then='Standalone Workstation',
 else=if(condition= DomainRole=1,
 then='Member Workstation',
 else=if(condition= DomainRole=2,
 then='Standalone Server',
 else=if(condition= DomainRole=3,
 then='Member Server',
 else=if(condition= DomainRole=4,
 then='Backup Domain Controller',
 else=if(condition= DomainRole=5,
 then= 'Primary Domain Controller',
 else= 'Unknown' )))))
 ) AS DomainRole
 FROM wmi(query='SELECT * FROM Win32_ComputerSystem',namespace='ROOT/cimv2')
 WHERE 
 DNSHostName =~ HostNameRegex
 AND Domain =~ DomainRegex
 AND DomainRole =~ RoleRegex
&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Handles</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.handles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.handles/</guid><description>&lt;p>Enumerate the handles from selected processes.&lt;/p>
&lt;p>Uncheck all the handle types below to fetch all handle types.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Handles
description: |
 Enumerate the handles from selected processes.

 Uncheck all the handle types below to fetch all handle types.

parameters:
 - name: processRegex
 description: A regex applied to process names.
 default: .
 type: regex

 - name: Files
 description: Search for File Handles
 type: bool
 default: Y
 - name: Key
 description: Search for Key Handles
 type: bool

sources:
 - query: |
 LET tokens &amp;lt;= SELECT * FROM chain(
 a={SELECT "File" AS Type FROM scope() WHERE Files = 'Y'},
 a2={SELECT "Section" AS Type FROM scope() WHERE Files = 'Y'},
 b={SELECT "Key" AS Type FROM scope() WHERE Key = 'Y'}
 )

 LET processes = SELECT Pid AS ProcPid, Name AS ProcName, Exe
 FROM pslist()
 WHERE ProcName =~ processRegex AND ProcPid &amp;gt; 0

 SELECT * FROM foreach(
 row=processes,
 query={
 SELECT ProcPid, ProcName, Exe, Type, Name, Handle
 FROM handles(pid=ProcPid, types=tokens.Type)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.HostsFile</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.hostsfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.hostsfile/</guid><description>&lt;p>Parses the Windows Hostsfile.&lt;/p>
&lt;p>Regex searching for Hostname and resolution is enabled over output.
NOTE: For Hostname search is on the hostfile line and regex ^ or $
is not recommended.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.HostsFile
author: Matt Green - @mgreen27
description: |
 Parses the Windows Hostsfile.

 Regex searching for Hostname and resolution is enabled over output.
 NOTE: For Hostname search is on the hostfile line and regex ^ or $
 is not recommended.

type: CLIENT

parameters:
 - name: HostsFile
 default: C:\Windows\System32\drivers\etc\hosts
 - name: HostnameRegex
 description: "Hostname target Regex in Hostsfile"
 default: .
 type: regex

 - name: ResolutionRegex
 description: "Resolution target Regex in Hostsfile"
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 -- Parse hosts file
 Let lines = SELECT split(string=Data,sep='\\r?\\n|\\r') as List
 FROM read_file(filenames=HostsFile)

 -- extract into fields
 LET results = SELECT * FROM foreach(row=lines,
 query={
 SELECT parse_string_with_regex(
 string=_value,
 regex=[
 "^\\s*(?P&amp;lt;Resolution&amp;gt;[^\\s]+)\\s+" +
 "(?P&amp;lt;Hostname&amp;gt;[^\\#]+)\\s*" +
 "#*\\s*(?P&amp;lt;Comment&amp;gt;.*)$"
 ]) as Record
 FROM foreach(row=List)
 WHERE _value
 AND NOT _value =~ '^\\s*#'
 AND _value =~ HostnameRegex
 AND _value =~ ResolutionRegex
 })

 -- clean up hostname output
 LET hostlist(string)=
 if(condition= len(list=split(string=regex_replace(source=string,
 re='\\s+$', replace=''), sep='\\s+')) = 1,
 then= regex_replace(source=string,re='\\s+$', replace=''),
 else= split(string=regex_replace(source=string,re='\\s+$',
 replace=''), sep='\\s+'))

 -- output rows
 SELECT
 Record.Resolution AS Resolution,
 hostlist(string=Record.Hostname) AS Hostname,
 Record.Comment AS Comment
 FROM results

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.LocalAdmins</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.localadmins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.localadmins/</guid><description>&lt;p>Gets a list of local admin accounts.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.LocalAdmins
description: |
 Gets a list of local admin accounts.

reference:
- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/get-localgroupmember?view=powershell-5.1

type: CLIENT

required_permissions:
 - EXECVE

parameters:
 - name: PowerShellExe
 default: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET script &amp;lt;= 'Get-LocalGroupMember -SID S-1-5-32-544 | select -ExpandProperty SID -Property Name, PrincipalSource | select Name, Value, PrincipalSource | ConvertTo-Json'

 LET out = SELECT parse_json_array(data=Stdout) AS Output
 FROM execve(argv=[PowerShellExe,
 "-ExecutionPolicy", "Unrestricted", "-encodedCommand",
 base64encode(string=utf16_encode(
 string=script))
 ], length=1000000)
 SELECT * FROM foreach(row=out.Output[0],
 query={
 SELECT Name, Value AS SID, if(condition=PrincipalSource=1,
 then="Local", else=if(condition=PrincipalSource=2,
 then="Domain", else=PrincipalSource)) AS PrincipalSource
 FROM scope()
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.PowerShell</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell/</guid><description>&lt;p>This artifact allows running arbitrary commands through the system
powershell.&lt;/p>
&lt;p>Since Velociraptor typically runs as system, the commands will also
run as System.&lt;/p>
&lt;p>This is a very powerful artifact since it allows for arbitrary
command execution on the endpoints. Therefore this artifact requires
elevated permissions (specifically the &lt;code>EXECVE&lt;/code>
permission). Typically it is only available with the &lt;code>administrator&lt;/code>
role.&lt;/p>
&lt;p>Note that in addition to running PowerShell cmdlets and scripts, the
Windows.System.PowerShell artifact can also be used to launch
Windows command-line executables with their parameters. This can be
difficult to achieve with the Windows.System.CmdShell artifact due
to complications with spaces in paths and other special character
issues. This PowerShell artifact is able to avoid most of these
problems by encoding the command in Base64.&lt;/p>
&lt;p>As an example, the following command initiates a Windows Defender AV
quick-scan from the default location, which includes a path with
spaces in it:&lt;/p>
&lt;pre>&lt;code> &amp;amp; 'C:\Program Files\Windows Defender\MpCmdRun.exe' -Scan -ScanType 1
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.PowerShell
description: |
 This artifact allows running arbitrary commands through the system
 powershell.

 Since Velociraptor typically runs as system, the commands will also
 run as System.

 This is a very powerful artifact since it allows for arbitrary
 command execution on the endpoints. Therefore this artifact requires
 elevated permissions (specifically the `EXECVE`
 permission). Typically it is only available with the `administrator`
 role.

 Note that in addition to running PowerShell cmdlets and scripts, the
 Windows.System.PowerShell artifact can also be used to launch
 Windows command-line executables with their parameters. This can be
 difficult to achieve with the Windows.System.CmdShell artifact due
 to complications with spaces in paths and other special character
 issues. This PowerShell artifact is able to avoid most of these
 problems by encoding the command in Base64.

 As an example, the following command initiates a Windows Defender AV
 quick-scan from the default location, which includes a path with
 spaces in it:

 ```
 &amp;amp; 'C:\Program Files\Windows Defender\MpCmdRun.exe' -Scan -ScanType 1
 ```

required_permissions:
 - EXECVE

precondition:
 SELECT OS From info() where OS = 'windows'

parameters:
 - name: Command
 default: "dir C:/"
 - name: PowerShellExe
 default: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"

sources:
 - query: |
 SELECT * FROM execve(argv=[PowerShellExe,
 "-ExecutionPolicy", "Unrestricted", "-encodedCommand",
 base64encode(string=utf16_encode(string=Command))
 ])

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Powershell.ModuleAnalysisCache</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell.moduleanalysiscache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell.moduleanalysiscache/</guid><description>&lt;p>ModuleAnalysisCache stores metadata about loaded Powershell modules.&lt;/p>
&lt;p>Recent updates include filters by regex to enable targeted hunting
use cases.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Powershell.ModuleAnalysisCache
description: |
 ModuleAnalysisCache stores metadata about loaded Powershell modules.

 Recent updates include filters by regex to enable targeted hunting
 use cases.

reference:
 - https://github.com/PowerShell/PowerShell/blob/281b437a65360ae869d40f3766a1f2bbba786e5e/src/System.Management.Automation/engine/Modules/AnalysisCache.cs#L649

parameters:
 - name: GlobLookup
 default: C:\{Users\*,Windows\System32\config\systemprofile}\AppData\Local\Microsoft\Windows\PowerShell\ModuleAnalysisCache
 - name: ModulePathRegex
 description: Regex of installed ModulePath to target.
 default: .
 type: regex
 - name: ModulePathIgnoreRegex
 description: Regex of installed ModulePath to ignore.
 type: regex
 - name: FunctionNameRegex
 description: Regex of FunctionName to include.
 default: .
 type: regex

sources:
 - query: |
 LET Profile = '
 [
 ["Header", 0, [
 ["Signature", 0, "String", {"length": 13}],
 ["CountOfEntries", 14, "uint32"],
 ["Entries", 18, "Array",
 {"type": "Entry", "count": "x =&amp;gt; x.CountOfEntries"}]
 ]],

 ["Entry", "x=&amp;gt;x.Func.SizeOf + x.ModuleLength + 20", [
 ["Offset", 0, "Value", {"value": "x =&amp;gt; x.StartOf"}],
 ["TimestampTicks", 0, "uint64"],
 ["ModuleLength", 8, "uint32"],
 ["ModuleName", 12, "String", {"length": "x =&amp;gt; x.ModuleLength"}],
 ["CommandCount", "x =&amp;gt; x.ModuleLength + 12", "uint32"],
 ["Func", "x =&amp;gt; x.ModuleLength + 16", "Array",
 {"type": "FunctionInfo", "count": "x =&amp;gt; x.CommandCount"}],
 ["CountOfTypes", "x =&amp;gt; x.Func.EndOf", "uint32"]
 ]],

 ["FunctionInfo", "x =&amp;gt; x.NameLen + 8", [
 ["NameLen", 0, "uint32"],
 ["Name", 4, "String", {"length": "x =&amp;gt; x.NameLen"}],
 ["Count", "x =&amp;gt; x.NameLen + 4", "uint32"]
 ]]
 ]
 '
 LET parsed = SELECT OSPath,
 parse_binary(filename=OSPath, profile=Profile, struct="Header") AS Header
 FROM glob(globs=GlobLookup)

 SELECT * FROM foreach(row=parsed,
 query={
 SELECT * FROM foreach(row=Header.Entries,
 query={
 SELECT OSPath, ModuleName,
 timestamp(epoch=TimestampTicks/10000000 - 62136892800) AS Timestamp,
 Func.Name AS Functions
 FROM scope()
 WHERE ModuleName =~ ModulePathRegex
 AND NOT if(condition= ModulePathIgnoreRegex,
 then= ModuleName =~ ModulePathIgnoreRegex,
 else= False )
 AND filter(list=Functions,regex=FunctionNameRegex)
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Powershell.PSReadline</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell.psreadline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.powershell.psreadline/</guid><description>&lt;p>This Artifact will search and extract lines from PSReadline history file.&lt;/p>
&lt;p>Powershell is commonly used by attackers across all stages of the attack
lifecycle. The PSReadline module is responsible for command history and from
Powershell 5 on Windows 10 default configuration saves a copy of the console
history to disk.&lt;/p>
&lt;p>There are several parameter&amp;rsquo;s available for search leveraging regex.&lt;/p>
&lt;ul>
&lt;li>SearchStrings enables regex search over a PSReadline line.&lt;/li>
&lt;li>StringWhiteList enables a regex whitelist for results.&lt;/li>
&lt;li>UserRegex enables a regex search on Username&lt;/li>
&lt;li>UploadFiles enables upload ConsoleHost_history.txt in scope&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Powershell.PSReadline
description: |
 This Artifact will search and extract lines from PSReadline history file.

 Powershell is commonly used by attackers across all stages of the attack
 lifecycle. The PSReadline module is responsible for command history and from
 Powershell 5 on Windows 10 default configuration saves a copy of the console
 history to disk.

 There are several parameter's available for search leveraging regex.
 - SearchStrings enables regex search over a PSReadline line.
 - StringWhiteList enables a regex whitelist for results.
 - UserRegex enables a regex search on Username
 - UploadFiles enables upload ConsoleHost_history.txt in scope


author: Matt Green - @mgreen27

reference:
 - https://attack.mitre.org/techniques/T1059/001/
 - https://0xdf.gitlab.io/2018/11/08/powershell-history-file.html

type: CLIENT

parameters:
 - name: ConsoleHostHistory
 default: \AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
 - name: SearchStrings
 default: .
 type: regex
 - name: StringWhiteList
 default:
 type: regex
 - name: UserRegex
 default: .
 type: regex
 - name: UploadFiles
 description: "Upload ConsoleHost_history.txt files in scope"
 type: bool

precondition:
 SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 -- First extract target ConsoleHost_history path for each user
 LET targets = SELECT Name as Username,
 { SELECT Mtime, Atime, Ctime, Btime, Size, OSPath
 FROM stat(filename=expand(path=Directory) + ConsoleHostHistory)
 } AS Stat
 FROM Artifact.Windows.Sys.Users()
 WHERE Directory and Username =~ UserRegex AND Stat.OSPath

 -- Extract targets PSReadline entries
 SELECT * FROM foreach(
 row=targets,
 query={
 SELECT Stat, count() AS LineNum,
 Line,
 Username,
 Stat.OSPath AS OSPath
 FROM parse_lines(filename=Stat.OSPath)
 WHERE LineNum
 AND Line =~ SearchStrings
 AND NOT if(condition=StringWhiteList,
 then=Line =~ StringWhiteList,
 else=FALSE)
 })

 - name: Upload
 query: |
 -- if configured upload ConsoleHost_history.txt in results
 SELECT * FROM if(condition=UploadFiles,
 then={
 SELECT
 Username,
 upload(file=Stat.OSPath) as ConsoleHost_history
 FROM targets
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Pslist</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.pslist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.pslist/</guid><description>&lt;p>List processes and their running binaries.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Pslist
description: |
 List processes and their running binaries.

parameters:
 - name: ProcessRegex
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: ExePathRegex
 default: .
 type: regex
 - name: CommandLineRegex
 default: .
 type: regex
 - name: UsernameRegex
 default: .
 type: regex
 - name: UntrustedAuthenticode
 description: Show only Executables that are not trusted by Authenticode.
 type: bool
 - name: UseTracker
 type: bool
 description: If set we use the process tracker.
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - precondition: SELECT OS From info() where OS = 'windows'

 query: |
 LET ProcList = SELECT * FROM if(condition=UseTracker,
 then={
 SELECT Pid, Ppid, NULL AS TokenIsElevated,
 Username, Name, CommandLine, Exe, NULL AS Memory
 FROM process_tracker_pslist()
 }, else={
 SELECT * FROM pslist()
 })

 SELECT Pid, Ppid, TokenIsElevated, Name, CommandLine, Exe,
 token(pid=int(int=Pid)) as TokenInfo,
 hash(path=Exe) as Hash,
 authenticode(filename=Exe) AS Authenticode,
 Username, Memory.WorkingSetSize AS WorkingSetSize
 FROM ProcList
 WHERE Name =~ ProcessRegex
 AND Pid =~ PidRegex
 AND Exe =~ ExePathRegex
 AND CommandLine =~ CommandLineRegex
 AND Username =~ UsernameRegex
 AND NOT if(condition= UntrustedAuthenticode,
 then= Authenticode.Trusted = 'trusted' OR NOT Exe,
 else= False )

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.RootCAStore</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.rootcastore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.rootcastore/</guid><description>&lt;p>Enumerate the root certificates in the Windows Root store.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.RootCAStore
description: |
 Enumerate the root certificates in the Windows Root store.

reference:
 - "ATT&amp;amp;CK: T1553"
 - https://attack.mitre.org/techniques/T1553/004/

parameters:
 - name: CertificateRootStoreGlobs
 type: csv
 default: |
 Accessor,Glob
 reg,HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCertificates\ROOT\Certificates\**\Blob
 reg,HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\SystemCertificates\ROOT\Certificates\**\Blob
 reg,HKEY_USERS\*\Software\Microsoft\SystemCertificates\Root\Certificates\**\Blob
 reg,HKEY_USERS\*\Software\Policies\Microsoft\SystemCertificates\Root\Certificates\**\Blob

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET profile = '''[
 ["Record", "x=&amp;gt;x.Length + 12", [
 ["Type", 0, "uint32"],
 ["Length", 8, "uint32"],
 ["Data", 12, "String", {
 length: "x=&amp;gt;x.Length",
 term: "",
 }],
 ["UnicodeString", 12, "String", {
 encoding: "utf16",
 }]
 ]],
 ["Records", 0, [
 ["Items", 0, "Array", {
 type: "Record",
 count: 20,
 }]
 ]]
 ]'''

 // Parse the types from the certificate record itself, as well as the X509 cert structure.
 LET GetCert(CertData) = SELECT parse_x509(data=Data)[0] AS Cert
 FROM foreach(row=parse_binary(filename=CertData,
 accessor="data", profile=profile, struct="Records").Items)
 WHERE Type = 32

 // Format the fingerprint as a hex string
 LET GetFinger(CertData) = SELECT format(format="%x", args=Data) AS FingerPrint
 FROM foreach(row=parse_binary(filename=CertData,
 accessor="data", profile=profile, struct="Records").Items)
 WHERE Type = 3

 LET GetName(CertData) = SELECT UnicodeString AS Name
 FROM foreach(row=parse_binary(filename=CertData,
 accessor="data", profile=profile, struct="Records").Items)
 WHERE Type = 11

 // Glob for certificates in all the locations we know about.
 SELECT * FROM foreach(row=CertificateRootStoreGlobs,
 query={
 SELECT OSPath AS _RegistryValue, ModTime,
 GetName(CertData=Data.value)[0].Name AS Name,
 GetFinger(CertData=Data.value)[0].FingerPrint AS FingerPrint,
 GetCert(CertData=Data.value)[0].Cert AS Certificate
 FROM glob(globs=Glob, accessor=Accessor)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Services</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.services/</guid><description>&lt;p>List Service details.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Services
description: |
 List Service details.

parameters:
 - name: servicesKeyGlob
 default: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\
 - name: Calculate_hashes
 default: N
 type: bool
 - name: CertificateInfo
 default: N
 type: bool
 - name: NameRegex
 default: .
 type: regex
 - name: DisplayNameRegex
 default: .
 type: regex
 - name: PathNameRegex
 default: .
 type: regex
 - name: ServiceDllRegex
 default: .
 type: regex
 - name: FailureCommandRegex
 default: .
 type: regex
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

export: |
 LET Profile = '''
 [
 ["ServiceFailureActions", 0, [
 ["ResetPeriod", 0, "uint32"],
 ["__ActionsCount", 12, "uint32"],
 ["__lpsaActionsHeader", 16, "uint32"],
 ["FailureAction", "x=&amp;gt;x.__lpsaActionsHeader", "Array", {
 "type": "ServiceAction",
 "count": "x=&amp;gt;x.__ActionsCount"
 }]
 ]],
 ["ServiceAction", 8, [
 ["Type", 0, "Enumeration", {
 "type": "uint32",
 "map": {
 "SC_ACTION_NONE": 0,
 "SC_ACTION_RESTART": 1,
 "SC_ACTION_REBOOT": 2,
 "SC_ACTION_RUN_COMMAND": 3,
 }}],
 ["__DelayMsec", 4, "uint32"],
 ["Delay", 4,"Value",{ "value": "x=&amp;gt;x.__DelayMsec/1000" }],
 ]],
 ]
 '''

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET service &amp;lt;= SELECT State, Name, DisplayName, Status,
 ProcessId as Pid, ExitCode, StartMode,
 PathName, ServiceType, StartName as UserAccount,
 {
 SELECT Mtime as Created
 FROM stat(filename=servicesKeyGlob + Name, accessor='registry')
 } AS Created,
 {
 SELECT expand(path=ServiceDll) AS ServiceDll
 FROM read_reg_key(globs=servicesKeyGlob + Name + "\\Parameters")
 LIMIT 1
 } AS ServiceDll,
 {
 SELECT FailureCommand FROM read_reg_key(globs=servicesKeyGlob + Name)
 LIMIT 1
 } AS FailureCommand,
 {
 SELECT if(condition=FailureActions,
 then=parse_binary(accessor='data',
 filename= FailureActions || " ",
 profile=Profile,
 struct='ServiceFailureActions')) as FailureActions
 FROM read_reg_key(globs=servicesKeyGlob + Name)
 } AS FailureActions,
 expand(path=parse_string_with_regex(regex=
 ['^"(?P&amp;lt;AbsoluteExePath&amp;gt;[^"]+)','(?P&amp;lt;AbsoluteExePath&amp;gt;^[^ "]+)'],
 string=PathName).AbsoluteExePath) as AbsoluteExePath
 FROM wmi(query="SELECT * From Win32_service", namespace="root/CIMV2")
 WHERE Name =~ NameRegex
 AND DisplayName =~ DisplayNameRegex
 AND PathName =~ PathNameRegex
 AND if(condition=ServiceDll, then=ServiceDll =~ ServiceDllRegex, else=TRUE)
 AND if(condition=FailureCommand, then=FailureCommand =~ FailureCommandRegex, else=TRUE)

 SELECT *,
 if(condition=Calculate_hashes,
 then=hash(path=AbsoluteExePath, accessor="auto")) AS HashServiceExe,
 if(condition=CertificateInfo,
 then=authenticode(filename=AbsoluteExePath || " ")) AS CertinfoServiceExe,
 if(condition=Calculate_hashes,
 then=hash(path=ServiceDll || " ",accessor="auto")) AS HashServiceDll,
 if(condition=CertificateInfo,
 then=authenticode(filename=ServiceDll || " ")) AS CertinfoServiceDll
 FROM service

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Shares</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.shares/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.shares/</guid><description>&lt;p>This artifact will extract network shares per machine.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Shares
author: 'Matt Green - @mgreen27'
description: |
 This artifact will extract network shares per machine.

type: CLIENT

parameters:
 - name: NameRegex
 description: Regex filter for share name. e.g Admin\$ for Admin$
 default: .
 type: regex
 - name: PathRegex
 description: Regex filter for local path. e.g C:\\Windows$ for Admin$
 default: .
 type: regex

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 SELECT Name, Path, Caption, Status,MaximumAllowed,AllowMaximum,InstallDate
 FROM wmi(query='SELECT * FROM Win32_Share',namespace='root/cimv2')
 WHERE Name =~ NameRegex AND Path =~ PathRegex
&lt;/code>&lt;/pre></description></item><item><title>Windows.System.Signers</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.signers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.signers/</guid><description>&lt;p>This artifact searches for all signed files and stacks them by signer.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.Signers
description: |
 This artifact searches for all signed files and stacks them by signer.

parameters:
 - name: ExecutableGlobs
 default: C:/Windows/**/*.{dll,exe}
 - name: ShowAllSigners
 description: When checked we show all signed files instead of stacking them.
 type: bool
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET results = SELECT OSPath, count() AS Count,
 parse_pe(file=OSPath).Authenticode.Signer.Subject AS Signer
 FROM glob(globs=ExecutableGlobs)
 WHERE Signer

 SELECT * FROM if(condition=ShowAllSigners,
 then={
 SELECT OSPath, Signer FROM results
 }, else={
 SELECT Count, Signer FROM results
 GROUP BY Signer
 ORDER BY Count DESC
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.SVCHost</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.svchost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.svchost/</guid><description>&lt;p>Typically a windows system will have many svchost.exe
processes. Sometimes attackers name their processes svchost.exe to
try to hide. Typically svchost.exe is spawned by services.exe.&lt;/p>
&lt;p>This artifact lists all the processes named svchost.exe and their
parents if the parent is not also named services.exe.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.SVCHost
description: |
 Typically a windows system will have many svchost.exe
 processes. Sometimes attackers name their processes svchost.exe to
 try to hide. Typically svchost.exe is spawned by services.exe.

 This artifact lists all the processes named svchost.exe and their
 parents if the parent is not also named services.exe.

sources:
 - precondition: |
 SELECT OS From info() where OS = 'windows'

 query: |
 // Cache the pslist output in memory.
 LET processes &amp;lt;= SELECT Pid, Ppid, Name, Exe FROM pslist()

 // Get the pids of all procecesses named services.exe
 LET services &amp;lt;= SELECT Pid FROM processes where Name =~ "services.exe"

 // The interesting processes are those which are not spawned by services.exe
 LET suspicious = SELECT Pid As SVCHostPid,
 Ppid As SVCHostPpid,
 Exe as SVCHostExe,
 CommandLine as SVCHostCommandLine
 FROM processes
 WHERE Name =~ "svchost" AND NOT Ppid in services.Pid

 // Now for each such process we display its actual parent.
 SELECT * from foreach(
 row=suspicious,
 query={
 SELECT SVCHostPid, SVCHostPpid, SVCHostExe,
 SVCHostCommandLine, Name as ParentName,
 Exe As ParentExe
 FROM processes
 WHERE Pid=SVCHostPpid
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.TaskScheduler</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.taskscheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.taskscheduler/</guid><description>&lt;p>The Windows task scheduler is a common mechanism that malware uses
for persistence. It can be used to run arbitrary programs at a later
time. Commonly malware installs a scheduled task to run itself
periodically to achieve persistence.&lt;/p>
&lt;p>This artifact enumerates all the task jobs (which are XML
files). The artifact uploads the original XML files and then
analyses them to provide an overview of the commands executed and
the user under which they will be run.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.TaskScheduler
description: |
 The Windows task scheduler is a common mechanism that malware uses
 for persistence. It can be used to run arbitrary programs at a later
 time. Commonly malware installs a scheduled task to run itself
 periodically to achieve persistence.

 This artifact enumerates all the task jobs (which are XML
 files). The artifact uploads the original XML files and then
 analyses them to provide an overview of the commands executed and
 the user under which they will be run.

parameters:
 - name: TasksPath
 default: c:/Windows/System32/Tasks/**
 - name: AlsoUpload
 type: bool
 description: |
 If set we also upload the task XML files.
 - name: UploadCommands
 type: bool
 description: |
 If set we attempt to upload the commands that are
 mentioned in the scheduled tasks

sources:
 - name: Analysis
 query: |
 LET Uploads = SELECT Name, OSPath, if(
 condition=AlsoUpload='Y',
 then=upload(file=OSPath)) as Upload, Mtime
 FROM glob(globs=TasksPath)
 WHERE NOT IsDir

 // Job files contain invalid XML which confuses the parser - we
 // use regex to remove the invalid tags.
 LET parse_task = select OSPath, Mtime, parse_xml(
 accessor='data',
 file=regex_replace(
 source=utf16(string=Data),
 re='&amp;lt;[?].+?&amp;gt;',
 replace='')) AS XML
 FROM read_file(filenames=OSPath)

 LET Results = SELECT OSPath, Mtime,
 XML.Task.Actions.Exec.Command as Command,
 expand(path=XML.Task.Actions.Exec.Command) AS ExpandedCommand,
 XML.Task.Actions.Exec.Arguments as Arguments,
 XML.Task.Actions.ComHandler.ClassId as ComHandler,
 XML.Task.Principals.Principal.UserId as UserId,
 timestamp(epoch=XML.Task.Triggers.CalendarTrigger.StartBoundary) AS StartBoundary,
 XML as _XML
 FROM foreach(row=Uploads, query=parse_task)

 SELECT *,
 authenticode(filename=ExpandedCommand) AS Authenticode,
 if(condition=UploadCommands and ExpandedCommand,
 then=upload(file=ExpandedCommand)) AS Upload
 FROM Results

column_types:
- name: Upload
 type: upload_preview
- name: Authenticode
 type: collapsed

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.UntrustedBinaries</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.untrustedbinaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.untrustedbinaries/</guid><description>&lt;p>Windows runs a number of services and binaries as part of the
operating system. Sometimes malware pretends to run as those well
known names in order to hide itself in plain sight. For example, a
malware service might call itself svchost.exe so it shows up in the
process listing as a benign service.&lt;/p>
&lt;p>This artifact checks that the common systems binaries are
signed. If a malware replaces these files or names itself in this
way their signature might not be correct.&lt;/p>
&lt;p>Note that unfortunately Microsoft does not sign all their common
binaries so many will not be signed (e.g. conhost.exe).&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.UntrustedBinaries
description: |
 Windows runs a number of services and binaries as part of the
 operating system. Sometimes malware pretends to run as those well
 known names in order to hide itself in plain sight. For example, a
 malware service might call itself svchost.exe so it shows up in the
 process listing as a benign service.

 This artifact checks that the common systems binaries are
 signed. If a malware replaces these files or names itself in this
 way their signature might not be correct.

 Note that unfortunately Microsoft does not sign all their common
 binaries so many will not be signed (e.g. conhost.exe).

parameters:
 - name: processNamesRegex
 description: A regex to select running processes which we consider should be trusted.
 default: "lsass|svchost|conhost|taskmgr|winlogon|wmiprv|dwm|csrss|velociraptor"
 type: regex
 - name: DISABLE_DANGEROUS_API_CALLS
 type: bool
 description: |
 Enable this to disable potentially flakey APIs which may cause
 crashes.

sources:
 - precondition: |
 SELECT OS From info() where OS = 'windows'
 query: |
 LET binaries = SELECT lowcase(string=Exe) As Binary
 FROM pslist()
 WHERE Exe =~ processNamesRegex
 GROUP BY Binary

 LET auth = SELECT authenticode(filename=Binary) As Authenticode
 FROM binaries

 SELECT Authenticode.Filename As Filename,
 Authenticode.IssuerName as Issuer,
 Authenticode.SubjectName as Subject,
 Authenticode.Trusted as Trusted from auth

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.VAD</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.vad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.vad/</guid><description>&lt;p>This artifact enables enumeration of process memory sections via the Virtual
Address Descriptor (VAD). The VAD is used by the Windows memory manager to
describe allocated process memory ranges.&lt;/p>
&lt;p>Availible filters include process, mapping path, memory permissions
or by content with yara.&lt;/p>
&lt;p>NOTE:&lt;/p>
&lt;ul>
&lt;li>ProtectionChoice is a choice to filter on section protection. Default is
all sections and ProtectionRegex can override selection.&lt;/li>
&lt;li>To filter on unmapped sections the MappingNameRegex: ^$ can be used.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.VAD
author: "Matt Green - @mgreen27"
description: |
 This artifact enables enumeration of process memory sections via the Virtual
 Address Descriptor (VAD). The VAD is used by the Windows memory manager to
 describe allocated process memory ranges.

 Availible filters include process, mapping path, memory permissions
 or by content with yara.

 NOTE:

 - ProtectionChoice is a choice to filter on section protection. Default is
 all sections and ProtectionRegex can override selection.
 - To filter on unmapped sections the MappingNameRegex: ^$ can be used.

parameters:
 - name: ProcessRegex
 description: A regex applied to process names.
 default: .
 type: regex
 - name: PidRegex
 default: .
 type: regex
 - name: ProtectionChoice
 type: choices
 description: Select memory permission you would like to return. Default All.
 default: Any
 choices:
 - Any
 - Execute, read and write
 - Any executable
 - name: ProtectionRegex
 type: regex
 description: Allows a manual regex selection of section Protection permissions. If configured take preference over Protection choice.
 - name: MappingNameRegex
 type: regex
 - name: UploadSection
 description: Upload suspicious section.
 type: bool
 - name: SuspiciousContent
 description: A yara rule of suspicious section content
 type: yara
 - name: ContextBytes
 description: Include this amount of bytes around yara hit as context.
 default: 200
 type: int


sources:
 - query: |
 -- firstly find processes in scope
 LET processes = SELECT int(int=Pid) AS Pid,
 Name, Exe, CommandLine, StartTime
 FROM process_tracker_pslist()
 WHERE Name =~ ProcessRegex
 AND format(format="%d", args=Pid) =~ PidRegex
 AND log(message="Scanning pid %v : %v", args=[Pid, Name])

 -- next find sections in scope
 LET sections = SELECT * FROM foreach(
 row=processes,
 query={
 SELECT StartTime as ProcessCreateTime,Pid, Name, MappingName,
 format(format='%x-%x', args=[Address, Address+Size]) AS AddressRange,
 Address as _Address,
 State,Type,ProtectionMsg,Protection,
 Size as SectionSize,
 pathspec(
 DelegateAccessor="process",
 DelegatePath=Pid,
 Path=Address) AS _PathSpec
 FROM vad(pid=Pid)
 WHERE if(condition=MappingNameRegex,
 then= MappingName=~MappingNameRegex,
 else= True)
 AND if(condition = ProtectionRegex,
 then= Protection=~ProtectionRegex,
 else= if(condition= ProtectionChoice='Any',
 then= TRUE,
 else= if(condition= ProtectionChoice='Execute, read and write',
 then= Protection= 'xrw',
 else= if(condition= ProtectionChoice='Any executable',
 then= Protection=~'x'))))
 })

 -- if suspicious yara added, search for it
 LET yara_sections = SELECT *
 FROM foreach(row={
 SELECT * FROM sections
 WHERE NOT State =~ "RESERVE"
 }, query={
 SELECT
 ProcessCreateTime, Pid, Name,MappingName,
 AddressRange,State,Type,ProtectionMsg,
 Protection,SectionSize,
 dict(Rule=Rule,
 Meta=Meta,
 Tags=Tags,
 Offset=String.Offset,
 Name=String.Name) as YaraHit,
 upload( accessor='scope',
 file='String.Data',
 name=format(format="%v-%v_%v.bin-%v-%v",
 args=[
 Name, Pid, AddressRange,
 if(condition= String.Offset - ContextBytes &amp;lt; 0,
 then= 0,
 else= String.Offset - ContextBytes),
 if(condition= String.Offset + ContextBytes &amp;gt; SectionSize,
 then= SectionSize,
 else= String.Offset + ContextBytes ) ])
 ) as HitContext,
 _PathSpec, _Address
 FROM yara(
 accessor='offset',
 files=_PathSpec,
 rules=SuspiciousContent,
 end=SectionSize, key='X',
 number=1,
 context=ContextBytes
 )
 })

 -- finalise results
 LET results = SELECT *,
 process_tracker_callchain(id=Pid).Data as ProcessChain
 FROM if(condition= SuspiciousContent,
 then= yara_sections,
 else= sections)

 -- upload sections if selected
 LET upload_results = SELECT *,
 upload(accessor='sparse',
 file=pathspec(
 DelegateAccessor="process",
 DelegatePath=Pid,
 Path=[dict(Offset=_Address, Length=SectionSize),]),
 name=pathspec(
 Path=format(
 format='%v-%v_%v.bin',
 args= [ Name, Pid, AddressRange ]))) as SectionDump
 FROM results

 -- output rows
 SELECT * FROM if(condition= UploadSection,
 then= upload_results,
 else= results)

column_types:
 - name: HitContext
 type: preview_upload

&lt;/code>&lt;/pre></description></item><item><title>Windows.System.VBScript</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.vbscript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.vbscript/</guid><description>&lt;p>This artifact allows running VBScript through cscript.exe.&lt;/p>
&lt;p>This is a very powerful artifact since it allows for arbitrary command execution
on the endpoints as SYSTEM. Therefore this artifact requires elevated permissions
(specifically the EXECVE permission). Typically it is only available with the
administrator role.&lt;/p>
&lt;p>Note: Output is formatted to 1 row per line of Stdout. Ensure appropriately
formatted scripts. Pasting scripts direct from word or webpages may lead to
formatting issues when unicode characters are substituted. Copy script into
a notepad, save as ASCII then try again.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.VBScript
author: Matt Green - @mgreen27
description: |
 This artifact allows running VBScript through cscript.exe.
 
 This is a very powerful artifact since it allows for arbitrary command execution 
 on the endpoints as SYSTEM. Therefore this artifact requires elevated permissions 
 (specifically the EXECVE permission). Typically it is only available with the 
 administrator role.
 
 Note: Output is formatted to 1 row per line of Stdout. Ensure appropriately 
 formatted scripts. Pasting scripts direct from word or webpages may lead to 
 formatting issues when unicode characters are substituted. Copy script into 
 a notepad, save as ASCII then try again.
 
required_permissions:
 - EXECVE

precondition:
 SELECT OS From info() where OS = 'windows'

parameters:
 - name: Script
 default: Wscript.Echo "Hello world!"
 
sources:
 - query: |
 LET temp_script &amp;lt;= tempfile(extension='.vbs', data=str(str=Script))
 
 SELECT Stdout 
 FROM execve(argv=['cscript.exe','//NoLogo','/E:vbs',temp_script], sep='\n')
&lt;/code>&lt;/pre></description></item><item><title>Windows.System.WMIQuery</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.system.wmiquery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.system.wmiquery/</guid><description>&lt;p>This artifact enables querying Windows Management Instrumentation (WMI).&lt;/p>
&lt;p>Windows Management Instrumentation (WMI) is the Microsoft implementation of
Web-Based Enterprise Management (WBEM), which is an industry initiative to
develop a standard technology for accessing management information in an
enterprise environment. WMI uses the Common Information Model (CIM) industry
standard to represent systems, applications, networks, devices, and other
managed components. CIM is developed and maintained by the Distributed
Management Task Force (DMTF).&lt;/p>
&lt;p>Please see the second reference link for an example of built in system classes.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.System.WMIQuery
author: Matt Green - @mgreen27
description: |
 This artifact enables querying Windows Management Instrumentation (WMI).

 Windows Management Instrumentation (WMI) is the Microsoft implementation of
 Web-Based Enterprise Management (WBEM), which is an industry initiative to
 develop a standard technology for accessing management information in an
 enterprise environment. WMI uses the Common Information Model (CIM) industry
 standard to represent systems, applications, networks, devices, and other
 managed components. CIM is developed and maintained by the Distributed
 Management Task Force (DMTF).

 Please see the second reference link for an example of built in system classes.

reference:
 - https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page
 - https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/operating-system-classes

required_permissions:
 - EXECVE

parameters:
 - name: WMIQuery
 description: "Add target WMI query: e.g SELECT * FROM &amp;lt;CLASSNAME&amp;gt;"
 default: "SELECT * FROM Win32_Process"

 - name: Namespace
 description: "Add target Namespace: e.g root/cimv2"
 default: root/cimv2

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 SELECT * FROM wmi(namespace=Namespace,query=WMIQuery)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Timeline.MFT</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.mft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.mft/</guid><description>&lt;h1 id="output-all-filtered-mft-records">Output all filtered MFT records.&lt;/h1>
&lt;p>This Artifact enables querying the MFT with advanced filters
such as time, path or other ntfs attributes.&lt;/p>
&lt;p>Output is to Timeline field format to enable simple review across Timeline
queries. The TimeOutput paramater enables configuring which NTFS attribute
timestamps are in focus as event_time. for example:
STANDARD_INFORMATION (4), FILE_NAME (4) or ALL (8)&lt;/p>
&lt;p>This artifact also has the same anomaly logic as AnalyzeMFT added to
each row to assist analysis.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Timeline.MFT
description: |
 # Output all filtered MFT records.

 This Artifact enables querying the MFT with advanced filters
 such as time, path or other ntfs attributes.

 Output is to Timeline field format to enable simple review across Timeline
 queries. The TimeOutput paramater enables configuring which NTFS attribute
 timestamps are in focus as event_time. for example:
 STANDARD_INFORMATION (4), FILE_NAME (4) or ALL (8)

 This artifact also has the same anomaly logic as AnalyzeMFT added to
 each row to assist analysis.

author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: MFTFilename
 default: "C:/$MFT"
 - name: Accessor
 default: ntfs
 - name: PathRegex
 description: "regex search over OSPath."
 type: regex
 - name: NameRegex
 default: .
 type: regex
 description: "regex search over File Name"
 - name: Inode
 type: int64
 description: "search for inode"
 - name: DateAfter
 type: timestamp
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: DateBefore
 type: timestamp
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 - name: SizeMax
 type: int64
 description: "Entries in the MFT over this size in bytes."
 - name: SizeMin
 type: int64
 description: "Entries in the MFT under this size in bytes."
 - name: EntryType
 description: |
 Type of entry. File, Directory or Both.
 type: choices
 default: Both
 choices:
 - File
 - Directory
 - Both
 - name: AllocatedType
 description: |
 Type of entry. Allocated, Unallocated or Both.
 type: choices
 default: Both
 choices:
 - Allocated
 - Unallocated
 - Both
 - name: TimeOutput
 description: |
 Timestamps to output as event_time. SI, FN or both.
 NOTE: both will output 8 rows per MFT entry.
 type: choices
 default: STANDARD_INFORMATION
 choices:
 - STANDARD_INFORMATION
 - FILE_NAME
 - ALL

sources:
 - query: |
 LET hostname &amp;lt;= SELECT Fqdn FROM info()
 LET DateAfterTime &amp;lt;= if(condition=DateAfter,
 then=DateAfter, else=timestamp(epoch="1600-01-01"))
 LET DateBeforeTime &amp;lt;= if(condition=DateBefore,
 then=DateBefore, else=timestamp(epoch="2200-01-01"))
 LET records = SELECT *,
 Created0x10 &amp;lt; Created0x30 as FNCreatedShift,
 Created0x10.Unix * 1000000000 = Created0x10.UnixNano as USecZero,
 Created0x10 &amp;gt; LastModified0x10 as PossibleCopy,
 ( LastAccess0x10 &amp;gt; LastModified0x10 AND LastAccess0x10 &amp;gt; Created0x10 ) as VolumeCopy
 FROM parse_mft(filename=MFTFilename, accessor=Accessor)
 WHERE
 FileName =~ NameRegex AND
 OSPath =~ PathRegex AND
 if(condition=Inode, then= EntryNumber=atoi(string=Inode)
 OR ParentEntryNumber=atoi(string=Inode),
 else=TRUE) AND
 if(condition=SizeMax, then=FileSize &amp;lt; SizeMax,
 else=TRUE) AND
 if(condition=SizeMin, then=FileSize &amp;gt; SizeMin,
 else=TRUE) AND
 if(condition= EntryType="Both", then=TRUE,
 else= if(condition= EntryType="File",
 then= IsDir=False,
 else= if(condition= EntryType="Directory",
 then= IsDir=True))) AND
 if(condition= AllocatedType="Both", then=TRUE,
 else= if(condition= AllocatedType="Allocated",
 then= InUse=True,
 else= if(condition= AllocatedType="Unallocated",
 then= InUse=False))) AND
 (((Created0x10 &amp;gt; DateAfterTime) AND (Created0x10 &amp;lt; DateBeforeTime)) OR
 ((Created0x30 &amp;gt; DateAfterTime) AND (Created0x30 &amp;lt; DateBeforeTime)) OR
 ((LastModified0x10 &amp;gt; DateAfterTime) AND (LastModified0x10 &amp;lt; DateBeforeTime)) OR
 ((LastModified0x30 &amp;gt; DateAfterTime) AND (LastModified0x30 &amp;lt; DateBeforeTime)) OR
 ((LastRecordChange0x10 &amp;gt; DateAfterTime) AND (LastRecordChange0x10 &amp;lt; DateBeforeTime)) OR
 ((LastRecordChange0x30 &amp;gt; DateAfterTime) AND (LastRecordChange0x30 &amp;lt; DateBeforeTime)) OR
 ((LastAccess0x10 &amp;gt; DateAfterTime) AND (LastAccess0x10 &amp;lt; DateBeforeTime)) OR
 ((LastAccess0x30 &amp;gt; DateAfterTime) AND (LastAccess0x30 &amp;lt; DateBeforeTime)))

 LET common_fields = SELECT EntryNumber, ParentEntryNumber,
 OSPath, FileName, FileSize, IsDir,InUse,
 Created0x10, Created0x30,
 LastModified0x10, LastModified0x30,
 LastRecordChange0x10, LastRecordChange0x30,
 LastAccess0x10, LastAccess0x30,
 FNCreatedShift, USecZero, PossibleCopy, VolumeCopy
 FROM scope()

 LET standard_information_rows = SELECT * FROM chain(
 si_modified = {
 SELECT *,
 LastModified0x10 as event_time,
 format(format="MFTEntry:%v $STANDARD_INFORMATION (0x10) LastModified time",
 args=EntryNumber) as message
 FROM common_fields
 },
 si_access = {
 SELECT *,
 LastAccess0x10 as event_time,
 format(format="MFTEntry:%v $STANDARD_INFORMATION (0x10) LastAccess time",
 args=EntryNumber) as message
 FROM common_fields
 },
 si_created = {
 SELECT *,
 LastRecordChange0x10 as event_time,
 format(format="MFTEntry:%v $STANDARD_INFORMATION (0x10) LastRecordChange time",
 args=EntryNumber) as message
 FROM common_fields
 },
 si_born = {
 SELECT *,
 Created0x10 as event_time,
 format(format="MFTEntry:%v $STANDARD_INFORMATION (0x10) Created time",
 args=EntryNumber) as message
 FROM common_fields
 })
 LET file_name_rows = SELECT * FROM chain(
 fn_modified = {
 SELECT *,
 LastModified0x30 as event_time,
 format(format="MFTEntry:%v $FILE_NAME (0x30) LastModified time",
 args=EntryNumber) as message
 FROM common_fields
 },
 fn_access = {
 SELECT *,
 LastAccess0x30 as event_time,
 format(format="MFTEntry:%v $FILE_NAME (0x30) LastAccess time",
 args=EntryNumber) as message
 FROM common_fields
 },
 fn_created = {
 SELECT *,
 LastRecordChange0x30 as event_time,
 format(format="MFTEntry:%v $FILE_NAME (0x30) LastRecordChange time",
 args=EntryNumber) as message
 FROM common_fields
 },
 fn_born = {
 SELECT *,
 Created0x30 as event_time,
 format(format="MFTEntry:%v $FILE_NAME (0x30) Created time",
 args=EntryNumber) as message
 FROM common_fields
 })

 SELECT
 event_time,
 hostname.Fqdn[0] as hostname,
 "MFT" as parser,
 MFTFilename as source,
 message,
 OSPath as path,
 { SELECT EntryNumber,ParentEntryNumber,FileSize,
 IsDir, InUse
 FROM scope() } as optional_1,

 { SELECT FNCreatedShift, USecZero, PossibleCopy,
 VolumeCopy
 FROM scope() } as optional_2,

 { SELECT LastModified0x10,LastAccess0x10,
 LastRecordChange0x10,Created0x10
 FROM scope() } as optional_3,

 { SELECT LastModified0x30,LastAccess0x30,
 LastRecordChange0x30,Created0x30
 FROM scope() } as optional_4

 FROM foreach(
 row=records,
 query={
 SELECT * FROM chain(
 standard_information={
 SELECT * FROM if(
 condition=TimeOutput="STANDARD_INFORMATION" OR TimeOutput="ALL",
 then=standard_information_rows)
 },
 file_name={
 SELECT * FROM if(
 condition=TimeOutput="FILE_NAME" OR TimeOutput="ALL",
 then=file_name_rows)
 })
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Timeline.Prefetch</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.prefetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.prefetch/</guid><description>&lt;p>Windows keeps a cache of prefetch files. When an executable is run,
the system records properties about the executable to make it faster
to run next time. By parsing this information we are able to
determine when binaries are run in the past. On Windows10 we can see
the last 8 execution times and creation time (9 potential executions).&lt;/p>
&lt;p>This artifact is a timelined output version of the standard Prefetch
artifact. There are several parameter&amp;rsquo;s availible.&lt;/p>
&lt;ul>
&lt;li>dateAfter enables search for prefetch evidence after this date.&lt;/li>
&lt;li>dateBefore enables search for prefetch evidence before this date.&lt;/li>
&lt;li>binaryRegex enables to filter on binary name, e.g evil.exe.&lt;/li>
&lt;li>hashRegex enables to filter on prefetch hash.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Timeline.Prefetch
author: Matt Green - @mgreen27
description: |
 Windows keeps a cache of prefetch files. When an executable is run,
 the system records properties about the executable to make it faster
 to run next time. By parsing this information we are able to
 determine when binaries are run in the past. On Windows10 we can see
 the last 8 execution times and creation time (9 potential executions).

 This artifact is a timelined output version of the standard Prefetch
 artifact. There are several parameter's availible.
 - dateAfter enables search for prefetch evidence after this date.
 - dateBefore enables search for prefetch evidence before this date.
 - binaryRegex enables to filter on binary name, e.g evil.exe.
 - hashRegex enables to filter on prefetch hash.

reference:
 - https://www.forensicswiki.org/wiki/Prefetch

parameters:
 - name: prefetchGlobs
 default: C:\Windows\Prefetch\*.pf
 - name: dateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: dateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ssZ"
 type: timestamp
 - name: binaryRegex
 description: "Regex of executable name."
 type: regex
 - name: hashRegex
 description: "Regex of prefetch hash."
 type: regex

precondition: SELECT OS From info() where OS = 'windows'

sources:
 - query: |
 LET hostname &amp;lt;= SELECT Fqdn FROM info()

 SELECT LastRunTimes as event_time,
 hostname.Fqdn[0] as hostname,
 "Prefetch" as parser,
 message,
 OSPath as source,
 Executable as file_name,
 CreationTime as prefetch_ctime,
 ModificationTime as prefetch_mtime,
 FileSize as prefetch_size,
 Hash as prefetch_hash,
 Version as prefetch_version,
 PrefetchFileName as prefetch_file,
 RunCount as prefetch_count
 FROM foreach(
 row={
 SELECT *
 FROM Artifact.Windows.Forensics.Prefetch(
 prefetchGlobs=prefetchGlobs,
 dateAfter=dateAfter,
 dateBefore=dateBefore,
 binaryRegex=binaryRegex,
 hashRegex=hashRegex)
 },
 query={
 SELECT *
 FROM chain(a1={
 SELECT *
 FROM flatten(query={
 SELECT Executable,
 FileSize,
 Hash,
 Version,
 LastRunTimes,
 "Evidence of Execution: " + Executable + format(
 format=" Prefetch run count %v", args=RunCount) as message,
 RunCount,
 OSPath,
 PrefetchFileName,
 CreationTime,
 ModificationTime,
 Binary
 FROM scope()
 })
 }, b1={
 -- One more row for creation time
 SELECT Executable,
 FileSize,
 Hash,
 Version,
 CreationTime AS LastRunTimes,
 "Evidence of Execution (Btime): " + Executable + format(
 format=" Prefetch run count %v", args=RunCount) as message,
 RunCount,
 OSPath,
 PrefetchFileName,
 CreationTime,
 ModificationTime,
 Binary
 FROM scope()
 })
 -- This group by applies on only a single prefetch file to
 -- remove duplication with CreationTime
 GROUP BY LastRunTimes
 })
 ORDER BY event_time

&lt;/code>&lt;/pre></description></item><item><title>Windows.Timeline.Registry.RunMRU</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.registry.runmru/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.timeline.registry.runmru/</guid><description>&lt;h1 id="output-all-available-runmru-registry-keys-in-timeline-format">Output all available RunMRU registry keys in timeline format.&lt;/h1>
&lt;p>RunMRU is when a user enters a command into the START &amp;gt; Run prompt.
Entries will be logged in the user hive under: Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU&lt;/p>
&lt;p>The artifact numbers all entries with the most recent at
reg_mtime starting at 0. Second recent 1, Third recent 2 etc.&lt;/p>
&lt;p>Default output enables a line per MRU entry.
A tickbox enables Grouped results with order in a single line.&lt;/p>
&lt;p>Note: This artifact will collect RunMRU from ntuser.dat files and
may exclude very recent entries in transaction (HKCU). Future
versions of this content will address this gap.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Timeline.Registry.RunMRU
description: |
 # Output all available RunMRU registry keys in timeline format.

 RunMRU is when a user enters a command into the START &amp;gt; Run prompt.
 Entries will be logged in the user hive under: Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU

 The artifact numbers all entries with the most recent at
 reg_mtime starting at 0. Second recent 1, Third recent 2 etc.

 Default output enables a line per MRU entry.
 A tickbox enables Grouped results with order in a single line.

 Note: This artifact will collect RunMRU from ntuser.dat files and
 may exclude very recent entries in transaction (HKCU). Future
 versions of this content will address this gap.

author: Matt Green - @mgreen27

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: KeyGlob
 type: hidden
 default: Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU\MRUList
 - name: dateAfter
 description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: dateBefore
 description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
 type: timestamp
 - name: targetUser
 description: "target user regex"
 type: regex
 - name: regexValue
 description: "regex search over RunMRU values."
 type: regex
 - name: groupResults
 description: "groups MRU entries to one message line"
 type: bool

sources:
 - query: |
 LET hostname_lu &amp;lt;= SELECT Fqdn FROM info()
 LET HKEY_USERS &amp;lt;= pathspec(parse="HKEY_USERS", path_type="registry")

 // First we need to extract populated RunMRU
 LET MRUList &amp;lt;= SELECT OSPath,
 Data.value as RunMruOrder,
 len(list=Data.value) as RunMruLength,
 Username,
 UUID
 FROM Artifact.Windows.Registry.NTUser(KeyGlob=KeyGlob)

 // Now extract RunMRU entries and order
 LET results &amp;lt;= SELECT * FROM foreach(
 row=MRUList,
 query={
 SELECT
 OSPath.DelegatePath as source,
 Username,
 Mtime as reg_mtime,
 OSPath.Basename as reg_name,
 HKEY_USERS + UUID + OSPath.Dirname.Path as reg_key,

 -- Value data is similar to 'cmd.exe\1' so we just need the bit before the \
 regex_replace(source=Data.value, re="\\\\1$", replace="") as reg_value,
 Data.type as reg_type,
 RunMruLength - 1 - len(list=regex_replace(
 source=RunMruOrder,
 re="^.*" + OSPath.Basename,
 replace="")) as mru_order,
 RunMruOrder
 FROM glob(globs='*', root=OSPath.Dirname, accessor="raw_reg")
 WHERE not reg_name = "MRUList" AND
 if(condition=targetUser, then=Username =~ targetUser,
 else=TRUE) AND
 if(condition=dateAfter, then=reg_mtime &amp;gt; timestamp(string=dateAfter),
 else=TRUE) AND
 if(condition=dateBefore, then=reg_mtime &amp;lt; timestamp(string=dateBefore),
 else=TRUE)
 AND log(message=UUID)
 ORDER BY mru_order
 })

 // join mru values and order for presentation
 LET usercommands &amp;lt;= SELECT Username as user, mru_order,
 format(format="MRU%v: %v", args=[mru_order,reg_value]) as mru_grouped
 FROM results

 // Prepare join use case
 LET joinOut = SELECT
 reg_mtime as event_time,
 hostname_lu[0].Fqdn as hostname,
 "RunMRU" as parser,
 "RunMRU evidence user: " + Username + ", " +
 join(array=mru_grouped, sep=" | ") + "'" as message,
 source,
 Username as user
 FROM foreach(row=usercommands,
 query={
 SELECT *, Username,
 {
 SELECT mru_grouped
 FROM usercommands
 WHERE user = Username
 ORDER BY mru_grouped
 } as mru_grouped
 FROM results
 ORDER BY mru_grouped
 })
 GROUP BY source

 // Prepare split use case
 LET splitOut = SELECT
 reg_mtime as event_time,
 hostname_lu.Fqdn[0] as hostname,
 "RunMRU" as parser,
 "RunMRU evidence user: " + Username +
 format(format=", order: %v, command: %v", args=[mru_order,reg_value])
 + "'" as message,
 source,
 Username as user,
 reg_key,
 reg_mtime,
 reg_name,
 reg_value,
 reg_type
 FROM results

 // Print out chosen usecase
 SELECT *
 FROM if(condition=groupResults,
 then={ SELECT * FROM joinOut},
 else={ SELECT * FROM splitOut})
 WHERE if(condition=regexValue, then=message =~ regexValue, else=TRUE)

&lt;/code>&lt;/pre></description></item><item><title>Windows.Triage.ProcessMemory</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.triage.processmemory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.triage.processmemory/</guid><description>&lt;p>Dump process memory and upload to the server&lt;/p>
&lt;pre>&lt;code class="language-yaml">name: Windows.Triage.ProcessMemory
description: |
 Dump process memory and upload to the server

precondition: SELECT OS From info() where OS = 'windows'

parameters:
 - name: processRegex
 default: notepad
 type: regex

sources:
 - query: |
 LET processes = SELECT Name as ProcessName, CommandLine, Pid
 FROM pslist()
 WHERE Name =~ processRegex

 SELECT * FROM foreach(
 row=processes,
 query={
 SELECT ProcessName, CommandLine, Pid, FullPath,
 upload(file=FullPath) as CrashDump
 FROM proc_dump(pid=Pid)
 })

&lt;/code>&lt;/pre></description></item><item><title>Windows.Triage.SDS</title><link>https://docs.velociraptor.app/artifact_references/pages/windows.triage.sds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.velociraptor.app/artifact_references/pages/windows.triage.sds/</guid><description>&lt;p>Collects the $Secure:$SDS stream from the NTFS volume. The $Secure
stream is both a directory (it has I30 stream) and a file (it has a
$DATA stream) and therefore confuses the Windows.KapeFiles.Target
artifact which relies on globbing. Use this artifact to collect the
$SDS stream.&lt;/p>
&lt;pre>&lt;code class="language-yaml">
name: Windows.Triage.SDS
description: |
 Collects the $Secure:$SDS stream from the NTFS volume. The $Secure
 stream is both a directory (it has I30 stream) and a file (it has a
 $DATA stream) and therefore confuses the Windows.KapeFiles.Target
 artifact which relies on globbing. Use this artifact to collect the
 $SDS stream.

parameters:
 - name: Drive
 description: The Drive letter to analyze
 default: "C:"

sources:
 - precondition:
 SELECT OS From info() where OS = 'windows'

 query: |
 LET Device &amp;lt;= pathspec(parse=Drive)

 SELECT *, upload(accessor="mft",
 file=Device + Inode,
 name=pathspec(Path=Name)) AS Upload
 FROM foreach(row=parse_ntfs(device=Device, mft=9).Attributes, column="_value")
 WHERE Name =~ "\\$S" AND TypeId IN (128, 160)

&lt;/code>&lt;/pre></description></item></channel></rss>